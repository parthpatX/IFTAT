
===========================================================================
Welcome - the SWIP regtest framework is running on the farm

Framework location: /p/psg/flows/sw/regutils/22.1/3/linux64/framework
Job conf: /p/psg/data/vckok/job/20211110/2100/377599028/reg_job_confs/58819787/0.dat
PeRT record ID: 523741932
Current time: Wed Nov 10 21:33:57 2021
===========================================================================
Info: Setting ENV{ FB_AUTO_FILER } to off
Info: Setting ENV{ TEST_RUN_RESULT_ID } to 523741932
Info: Setting ENV{ REG_RETURN_FILE_MODE } to smart
Info: Setting ENV{ REG_JOB_CONF_FILE } to /p/psg/data/vckok/job/20211110/2100/377599028/reg_job_confs/58819787/0.dat
Info: Setting ENV{ EDA_EVALUATION_MODE } to off
Info: Setting ENV{ TEST_CASE_ID } to 1622919
Info: Setting ENV{ PARENT_REPOSITORY } to /p/psg/swip/w/vckok/fm/emulation/regtest/submit/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official
Info: Setting ENV{ REG_FARM_OS } to linux64
Info: Setting ENV{ TEST_RUN_ID } to 5877463
Info: Setting ENV{ REG_INITIAL_EXE_DIR_PATH } to /p/psg/swip/w/vckok/fm/emulation/regtest/submit/
Info: Setting ENV{ CUSTOM_PERMISSION_MODE } to 0775
Info: Setting ENV{ REG_FARM_TIMEOUT } to 0
Info: Setting ENV{ REGTEST_REPOSITORY } to /p/psg/swip/w/vckok/fm/emulation/
Info: Setting ENV{ REG_USE_LSF_TIMEOUT } to 0
Info: Setting ENV{ REG_AUTO_OVERLAY } to 0
Info: Setting ENV{ ACTIVATE_MODE } to off
Info: Setting ENV{ REG_EXE_USE_LOCAL_DISK } to 1
Info: Setting ENV{ REG_EXTERNAL_EXE_DIR_PATH } to /p/psg/swip/w/vckok/fm/emulation/regtest/submit/
Info: Setting ENV{ REG_AUTO_FILE_SPRS } to 0
Info: Setting ENV{ REG_REQUIREMENTS } to nios2test python/2.7.13 testkit
Info: Setting ENV{ REG_CACHE_RESOURCES } to 0
Info: Setting ENV{ REG_AUTO_FILE_FBS } to 0
Info: Setting ENV{ REG_LOCAL_ROOT_DIR_PATH } to /p/psg/swip/w/vckok/fm/emulation/regtest/
Info: Setting ENV{ QUARTUS_NUM_PARALLEL_PROCESSORS } to 2
Info: Setting ENV{ REG_SKIP_PREPROCESS_RESULTS } to 0
Info: Setting ENV{ REG_EXE_MODE } to farm
Info: Setting ENV{ REG_RETURN_FILE_COMPRESS } to 1
Info: Setting ENV{ TEST_CASE_PATH } to regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0
Info: Setting ENV{ MODULAR_TEST_CASE_ID } to 58819811
Info: Running test: /p/psg/swip/w/vckok/fm/emulation/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/ --reg-subtest-name=loop_0 --reg-cmd="sub_test.pl" --device="fm7"
Info: Command to re-run subtest locally, excluding parent subtest(s):
   reg_exe \
     --reg-subtest-name=loop_0 \
     --reg-cmd=sub_test.pl \
     --device=fm7

Info: Command to re-run subtest locally, including parent subtest(s):
   reg_exe \
     --device=fm7

Info: Copying regtest to local hard drive for execution
Info: Test will execute in /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/
Info: Copying regtest source from REGTEST_REPOSITORY to execution directory: /p/psg/swip/w/vckok/fm/emulation/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/ -> /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/ 
Info: Time to copy regtest source to execution directory: 0.370507 seconds
Info: Processing reg_sync_dirs...
   Items to be synced are listed in reg_sync_dirs_log.txt
Info: reg_sync_dirs processing took 0.000635 seconds
Info: Processing reg_copy_files...
   Items to be copied to the regtest directory are listed in reg_copy_files_log.txt
Info: reg_copy_files processing took 0.000185 seconds
Info: Copying files to subtest execution directory...
   Elapsed time: 0.262708 seconds

Info: Regtest execution entry...
Info: Current time is Wed Nov 10 21:33:59 2021

Info: Setup Quartus2.ini ... Done.

Info: Test doesn't specify a timeout limit - using default
Info: Test execution time will be limited to 8h
Info: Current time is Wed Nov 10 21:34:01 2021

Info: Executing regtest...
Info: Current time is Wed Nov 10 21:34:01 2021
Info: Execution location: /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/
Apply setting inside configuration file emu_fm7.conf
reading setting model: fm7_emu_latest_strato
reading setting testdir: /nfs/site/disks/fm7_emulation_fm_1/users/vckok/test3
reading setting workdir: /nfs/site/disks/fm7_emulation_fm_1/users/$USER/output
reading setting do_file: jtag_boot_fullbinary_chk.do
reading setting timeout: 15000
Bringing up the emulator in Folsom.....
    ---------------------------------------------------------------------------------------------------------------------------------------------------
   | Model          : fm7_emu_latest_strato                                                                                                            |
   | Test Directory : /nfs/site/disks/fm7_emulation_fm_1/users/vckok/test3                                                                             |
   | Job Directory  : /nfs/site/disks/fm7_emulation_fm_1/users/vckok/output/377600452                                                                  |
   | Do File        : jtag_boot_fullbinary_chk.do                                                                                                      |
    ---------------------------------------------------------------------------------------------------------------------------------------------------
Scheduling...
source /nfs/site/disks/fm7_emulation_1/users/mdpatel/builds/snap-z1631a_21ww321a_emu_strato/proj_setup.csh
psg_emurun -mail_nb no -debug -remote_root /nfs/site/disks/psg_fm_disk001/release/psg_tools -nb_classes SLES12 -nb_classes SLES11 -model fm7_emu_latest_strato -testdir /nfs/site/disks/fm7_emulation_fm_1/users/vckok/test3 -workdir /nfs/site/disks/fm7_emulation_fm_1/users/vckok/output/377600452 -do_file jtag_boot_fullbinary_chk.do -timeout 15000  -setenv EMU_PICE_HOSTNAME=scc330232a.sc.intel.com -setenv EMU_PICE_TEST_DIR=/tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0 
Scheduling complete. Job id is 8154961.
Waiting for job to begin...
Job has begun. 8154961 on fmev3184.fm.intel.com:1127
Waiting for emulator jtag to become responsive...
Emulator is responsive after 333 seconds. jtagconfig results:
1) Simulator [fmev3184.fm.intel.com:1127]
   (JTAG Server Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition)
  Unable to read device chain - JTAG chain broken

  Captured DR after reset = ()
  Captured IR after reset = ()
  Captured Bypass after reset = ()
  Captured Bypass chain = ()

Info: *******************************************************************
Info: Running Quartus Prime Programming File Generator
    Info: Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
    Info: Copyright (C) 2021  Intel Corporation. All rights reserved.
    Info: Your use of Intel Corporation's design tools, logic functions 
    Info: and other software and tools, and any partner logic 
    Info: functions, and any output files from any of the foregoing 
    Info: (including device programming or simulation files), and any 
    Info: associated documentation or information are expressly subject 
    Info: to the terms and conditions of the Intel Program License 
    Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
    Info: the Intel FPGA IP License Agreement, or other applicable license
    Info: agreement, including, without limitation, that your use is for
    Info: the sole purpose of programming logic devices manufactured by
    Info: Intel and sold by Intel or its authorized distributors.  Please
    Info: refer to the applicable agreement for further details, at
    Info: https://fpgasoftware.intel.com/eula.
    Info: Processing started: Wed Nov 10 21:41:46 2021
    Info: System process ID: 41235
Info: Command: quartus_pfg -c -o pem_file=signing_key_private_chain1_2.pem -o option_jtag_authenticated.txt andor193_authentication.sof andor_authenticated_novid.rbf
Info: Using INI file /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/quartus.ini
Debug: PGMIO: Prechecking POF at andor193_authentication.sof
Debug: PGMIO: Prechecking POF at andor193_authentication.sof
Debug: PGMIO: andor193_authentication.sof
Debug: PGMIO: passed
Debug: PGMIO: Prechecking POF at andor193_authentication.sof
Debug: PGMIO: Read andor193_authentication.sof ...
CMF Firmware source: /p/psg/swip/w/pissay/fm7-test-build/firmware/out/signed/falconmesa.zip
Warning (19729): Bypass error. Current CMF data structure hash (0xF0838334) does not match with any database. Expect latest CMF data structure hash should be { 0x74D05C2F } [Updates to support Recovery Action for PR Enhancements]
Info (19848): Regular SEU info => 40 sector(s), 2 thread(s), 8226893 interval time in microsecond(s)
Info (19848): IO hash is E160E4493199741F274001DEFFF2B705976BEA13E92B6DEDC2DBB3D6825BDF6E
Info (19848): Keyed hash is 86F5CB8C6B9A6C39DB42E106AEB4D50ECF37AA5DFE9ED8B9A6018E62EBCBAD6B
Info (19848): Design hash is AE9612F3150906215AB3FCB61503ECBD8F74E93E3D0ECCB9D5DEFF901129ADB8
Info (19848): IO hash is E160E4493199741F274001DEFFF2B705976BEA13E92B6DEDC2DBB3D6825BDF6E
Info (19848): Keyed hash is C82DC8A31CABAD330801AF079A3E186E78FB8436DD394980D7B8950E6C611F7B
Debug: PGMIO: Prechecking POF at andor193_authentication.sof
Debug: PGMIO: Reading QKY from file ... /var/tmp/QKYUa1O91.qky
Debug: PGMIO: Sign single image when generating rbf/hex/ttf
Debug: PGMIO: Writing ./andor_authenticated_novid.rbf
Info: Quartus Prime Programming File Generator was successful. 0 errors, 1 warning
    Info: Peak virtual memory: 1852 megabytes
    Info: Processing ended: Wed Nov 10 21:42:19 2021
    Info: Elapsed time: 00:00:33
    Info: System process ID: 41235
Info: *******************************************************************
Info: Running Quartus Prime Programming File Generator
    Info: Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
    Info: Copyright (C) 2021  Intel Corporation. All rights reserved.
    Info: Your use of Intel Corporation's design tools, logic functions 
    Info: and other software and tools, and any partner logic 
    Info: functions, and any output files from any of the foregoing 
    Info: (including device programming or simulation files), and any 
    Info: associated documentation or information are expressly subject 
    Info: to the terms and conditions of the Intel Program License 
    Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
    Info: the Intel FPGA IP License Agreement, or other applicable license
    Info: agreement, including, without limitation, that your use is for
    Info: the sole purpose of programming logic devices manufactured by
    Info: Intel and sold by Intel or its authorized distributors.  Please
    Info: refer to the applicable agreement for further details, at
    Info: https://fpgasoftware.intel.com/eula.
    Info: Processing started: Wed Nov 10 21:42:23 2021
    Info: System process ID: 49164
Info: Command: quartus_pfg -c -o pem_file=signing_key_private_chain1_2.pem -o qek_file=aes.qek -o password=password.txt -o option_jtag.txt andor193_encryption.sof andor_encrypt_novid.rbf
Info: Using INI file /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/quartus.ini
Debug: PGMIO: Prechecking POF at andor193_encryption.sof
Debug: PGMIO: Prechecking POF at andor193_encryption.sof
Debug: PGMIO: andor193_encryption.sof
Debug: PGMIO: passed
Debug: PGMIO: Prechecking POF at andor193_encryption.sof
Debug: PGMIO: Read andor193_encryption.sof ...
CMF Firmware source: /p/psg/swip/w/pissay/fm7-test-build/firmware/out/signed/falconmesa.zip
Warning (19729): Bypass error. Current CMF data structure hash (0xF0838334) does not match with any database. Expect latest CMF data structure hash should be { 0x74D05C2F } [Updates to support Recovery Action for PR Enhancements]
Info (19848): Regular SEU info => 40 sector(s), 2 thread(s), 8226893 interval time in microsecond(s)
Info (19848): IO hash is E160E4493199741F274001DEFFF2B705976BEA13E92B6DEDC2DBB3D6825BDF6E
Info (19848): Keyed hash is 86F5CB8C6B9A6C39DB42E106AEB4D50ECF37AA5DFE9ED8B9A6018E62EBCBAD6B
Info (19848): Design hash is AE9612F3150906215AB3FCB61503ECBD8F74E93E3D0ECCB9D5DEFF901129ADB8
Info (19848): IO hash is E160E4493199741F274001DEFFF2B705976BEA13E92B6DEDC2DBB3D6825BDF6E
Info (19848): Keyed hash is C82DC8A31CABAD330801AF079A3E186E78FB8436DD394980D7B8950E6C611F7B
Debug: PGMIO: Prechecking POF at andor193_encryption.sof
Debug: PGMIO: Reading QKY from file ... /var/tmp/QKYGPFTNj.qky
Debug: PGMIO: Sign single image when generating rbf/hex/ttf
Debug: PGMIO: Writing ./andor_encrypt_novid.rbf
Info: Quartus Prime Programming File Generator was successful. 0 errors, 1 warning
    Info: Peak virtual memory: 1853 megabytes
    Info: Processing ended: Wed Nov 10 21:42:40 2021
    Info: Elapsed time: 00:00:17
    Info: System process ID: 49164
Info: *******************************************************************
Info: Running Quartus Prime Programming File Generator
    Info: Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
    Info: Copyright (C) 2021  Intel Corporation. All rights reserved.
    Info: Your use of Intel Corporation's design tools, logic functions 
    Info: and other software and tools, and any partner logic 
    Info: functions, and any output files from any of the foregoing 
    Info: (including device programming or simulation files), and any 
    Info: associated documentation or information are expressly subject 
    Info: to the terms and conditions of the Intel Program License 
    Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
    Info: the Intel FPGA IP License Agreement, or other applicable license
    Info: agreement, including, without limitation, that your use is for
    Info: the sole purpose of programming logic devices manufactured by
    Info: Intel and sold by Intel or its authorized distributors.  Please
    Info: refer to the applicable agreement for further details, at
    Info: https://fpgasoftware.intel.com/eula.
    Info: Processing started: Wed Nov 10 21:42:42 2021
    Info: System process ID: 50625
Info: Command: quartus_pfg --ccert -o option_efuse_ccert.txt -o qek_file=aes.qek -o password=password.txt -o pem_file=signing_key_private_chain1_1.pem -o qky_file=keychain_chain1_1_per2_aes.qky aes.ccert
Info: Using INI file /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/quartus.ini
Debug: PGMIO: Generate AES root key certificate content
Debug: PGMIO: Generating unsigned compact cert data
Debug: PGMIO: Unsigned compact cert data size = 112
Debug: PGMIO: Signing unsigned compact cert data
Debug: PGMIO: Signed compact cert data size = 680
Info (20397): Created signed compact certificate file aes.ccert
Info: Quartus Prime Programming File Generator was successful. 0 errors, 0 warnings
    Info: Peak virtual memory: 791 megabytes
    Info: Processing ended: Wed Nov 10 21:42:44 2021
    Info: Elapsed time: 00:00:02
    Info: System process ID: 50625
Info: *******************************************************************
Info: Running Quartus Prime Programming File Generator
    Info: Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
    Info: Copyright (C) 2021  Intel Corporation. All rights reserved.
    Info: Your use of Intel Corporation's design tools, logic functions 
    Info: and other software and tools, and any partner logic 
    Info: functions, and any output files from any of the foregoing 
    Info: (including device programming or simulation files), and any 
    Info: associated documentation or information are expressly subject 
    Info: to the terms and conditions of the Intel Program License 
    Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
    Info: the Intel FPGA IP License Agreement, or other applicable license
    Info: agreement, including, without limitation, that your use is for
    Info: the sole purpose of programming logic devices manufactured by
    Info: Intel and sold by Intel or its authorized distributors.  Please
    Info: refer to the applicable agreement for further details, at
    Info: https://fpgasoftware.intel.com/eula.
    Info: Processing started: Wed Nov 10 21:42:47 2021
    Info: System process ID: 50891
Info: Command: quartus_pfg --helper_image -o option_provision.txt provision_cmf.rbf
Info: Using INI file /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/quartus.ini
CMF Firmware source: /p/psg/swip/w/pissay/fm7-test-build/firmware/out/signed/falconmesa.zip
Debug: PGMIO: Creating helper image
Debug: PGMIO: Writing ./provision_cmf.rbf
Info (20545): Created PROVISION programming helper image RBF file ./provision_cmf.rbf
Info: Quartus Prime Programming File Generator was successful. 0 errors, 0 warnings
    Info: Peak virtual memory: 892 megabytes
    Info: Processing ended: Wed Nov 10 21:42:48 2021
    Info: Elapsed time: 00:00:01
    Info: System process ID: 50891
Info: *******************************************************************
Info: Running Quartus Prime Programming File Generator
    Info: Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
    Info: Copyright (C) 2021  Intel Corporation. All rights reserved.
    Info: Your use of Intel Corporation's design tools, logic functions 
    Info: and other software and tools, and any partner logic 
    Info: functions, and any output files from any of the foregoing 
    Info: (including device programming or simulation files), and any 
    Info: associated documentation or information are expressly subject 
    Info: to the terms and conditions of the Intel Program License 
    Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
    Info: the Intel FPGA IP License Agreement, or other applicable license
    Info: agreement, including, without limitation, that your use is for
    Info: the sole purpose of programming logic devices manufactured by
    Info: Intel and sold by Intel or its authorized distributors.  Please
    Info: refer to the applicable agreement for further details, at
    Info: https://fpgasoftware.intel.com/eula.
    Info: Processing started: Wed Nov 10 21:42:51 2021
    Info: System process ID: 51328
Info: Command: quartus_pfg -c andor_unsigned.sof andor_novid.rbf
Info: Using INI file /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/quartus.ini
Debug: PGMIO: Prechecking POF at andor_unsigned.sof
Debug: PGMIO: Prechecking POF at andor_unsigned.sof
Debug: PGMIO: andor_unsigned.sof
Debug: PGMIO: passed
Debug: PGMIO: Prechecking POF at andor_unsigned.sof
Debug: PGMIO: Read andor_unsigned.sof ...
CMF Firmware source: /p/psg/swip/w/pissay/fm7-test-build/firmware/out/signed/falconmesa.zip
Warning (19729): Bypass error. Current CMF data structure hash (0xF0838334) does not match with any database. Expect latest CMF data structure hash should be { 0x74D05C2F } [Updates to support Recovery Action for PR Enhancements]
Info (19848): Regular SEU info => 40 sector(s), 2 thread(s), 8226893 interval time in microsecond(s)
Info (19848): IO hash is E160E4493199741F274001DEFFF2B705976BEA13E92B6DEDC2DBB3D6825BDF6E
Info (19848): Keyed hash is 86F5CB8C6B9A6C39DB42E106AEB4D50ECF37AA5DFE9ED8B9A6018E62EBCBAD6B
Info (19848): Design hash is AE9612F3150906215AB3FCB61503ECBD8F74E93E3D0ECCB9D5DEFF901129ADB8
Info (19848): IO hash is E160E4493199741F274001DEFFF2B705976BEA13E92B6DEDC2DBB3D6825BDF6E
Info (19848): Keyed hash is C82DC8A31CABAD330801AF079A3E186E78FB8436DD394980D7B8950E6C611F7B
Debug: PGMIO: Prechecking POF at andor_unsigned.sof
Debug: PGMIO: Writing ./andor_novid.rbf
Info: Quartus Prime Programming File Generator was successful. 0 errors, 1 warning
    Info: Peak virtual memory: 1802 megabytes
    Info: Processing ended: Wed Nov 10 21:43:04 2021
    Info: Elapsed time: 00:00:13
    Info: System process ID: 51328
converting bitstream
complete bitstream conversion
Emulator host machine is fmev3184.fm.intel.com:1127
1) Simulator [fmev3184.fm.intel.com:1127]
   (JTAG Server Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition)
  Unable to read device chain - JTAG chain broken

  Captured DR after reset = ()
  Captured IR after reset = ()
  Captured Bypass after reset = ()
  Captured Bypass chain = ()

removed `tcp_connection.tcl'
/p/psg/swip/releases5/acdskit/21.4/24/linux64/not_shipped/syscon/sopc_builder/bin/system-console-nios2r2



Power up DUT
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
set_power_msel:: Received pwr=1 msel=15 request
Current emu_gpio 0x00000000 with pwr=0 msel=0
set_pwr=1
set_msel=240
Writing write_data=241 with pwr=1 msel=15
Wait 2 minutes for dust to settle
2 minutes up! Proceed..
Closing..
Please restart system-console-nios2r2.. Exiting..



Toggle nconfig
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
sysid: 0x830c0008
nconfig: 0
nstatus: 1
Set nconfig=0
Polling expect nSTATUS=0 with interval of 500 ms. Timeout=300s
Measured nSTATUS=0. Elapsed 1s
delay 5000ms
Set nconfig=1
Polling expect nSTATUS=1 with interval of 500 ms. Timeout=300s
Measured nSTATUS=1. Elapsed 1s
delay 5000ms
Set nconfig=0
Polling expect nSTATUS=0 with interval of 500 ms. Timeout=300s
Measured nSTATUS=0. Elapsed 1s
delay 5000ms
Set nconfig=1
Polling expect nSTATUS=1 with interval of 500 ms. Timeout=300s
Measured nSTATUS=1. Elapsed 1s
Closing..



Program unsigned bitstream with programmer
Info: *******************************************************************
Info: Running Quartus Prime Programmer
    Info: Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
    Info: Copyright (C) 2021  Intel Corporation. All rights reserved.
    Info: Your use of Intel Corporation's design tools, logic functions 
    Info: and other software and tools, and any partner logic 
    Info: functions, and any output files from any of the foregoing 
    Info: (including device programming or simulation files), and any 
    Info: associated documentation or information are expressly subject 
    Info: to the terms and conditions of the Intel Program License 
    Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
    Info: the Intel FPGA IP License Agreement, or other applicable license
    Info: agreement, including, without limitation, that your use is for
    Info: the sole purpose of programming logic devices manufactured by
    Info: Intel and sold by Intel or its authorized distributors.  Please
    Info: refer to the applicable agreement for further details, at
    Info: https://fpgasoftware.intel.com/eula.
    Info: Processing started: Wed Nov 10 21:47:12 2021
    Info: System process ID: 3938
Info: Command: quartus_pgm -c 1 -m jtag -o p;andor_novid.rbf
Info: Using INI file /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/quartus.ini
Info (213045): Using programming cable "Simulator [fmev3184.fm.intel.com:1127]"
Info (213011): Using programming file andor_novid.rbf with checksum 0x6536B3B6 for device AGFD023R25AR0@1
Info (209060): Started Programmer operation at Wed Nov 10 21:47:13 2021
Debug: PGMALGO: Add engine key: FALCONMESA:SRAM:PROGRAM (engine type: SRAM)
Debug: PGMALGO: I am PGMALGO_API_PGM
Debug: PGMALGO:     empty_count = 0
Debug: PGMALGO: sdm_configure: flush response fifo = 1
Debug: PGMALGO: sdm_configure: replace config_jtag_timeout_us with INI value 6000000 us
Info (18942): Configuring device index 1
Debug: PGMALGO: sdm_configure: detected non-nd5reva device, skip avst workaround
Debug: PGMALGO: sdm_configure: check jtag chain = 1
Debug: PGMALGO: sdm_configure: cb_idcode_check
Debug: PGMALGO: Device 1 ID Code 4341D0DD success
Debug: PGMALGO: sdm_configure: boot status = 0xb0100140 
Debug: PGMALGO: sdm_configure: boot status = 0xb0100140 
Debug: PGMALGO: sdm_configure: sync up = 1
Debug: PGMALGO: sdm_configure: CONFIG_JTAG = 1
Debug: PGMALGO: refresh_jtag_chain device count 1 -> 1, device index 0 -> 0
Debug: PGMALGO: sdm_configure: rescan jtag chain = 1 (after config_jtag)
Debug: PGMALGO: sending bitstream ...
Debug: PGMALGO: program polling time: 1000 us
Error (18950): Device has stopped receiving configuration data
Debug: PGMALGO: sdm_configure: send_s10_program_data = 0
Debug: PGMALGO: sdm_configure: cb_status_do_read CONFIG_STATUS, index 0
Debug: PGMALGO: Response compare word @1 - expected 0x00000000 recv 0xf0010015
Debug: PGMALGO: Detect error in scan_response: Read back data mismatch with expected data
Debug: PGMALGO:     resp state      = 0xf0010015
Debug: PGMALGO:     resp soft_func  = 0x00000000
Debug: PGMALGO:     resp error_loc  = 0x00000800
Debug: PGMALGO:     resp error_info = 0x00000000
Error (18948): Error message received from device: Bitstream error. (Subcode 0x0015, Info 0x00000000, Location 0x00000800)
Debug: PGMALGO: Major error name: ERR_BITSTREAM_ERROR 
Major error description: Bitstream Invalid 
 Major error message: Bitstream error. 
Major error info: (Subcode 0x0015, Info 0x00000000, Location 0x00000800)
Error (22248): Detected a bitstream authentication error during configuration. Ensure you signed the bitstream with the correct signing key.
Debug: PGMALGO: Minor error name: AUTH_FAIL 
Minor error description: Authentication Failure. 
Minor error message: Detected a bitstream authentication error during configuration. Ensure you signed the bitstream with the correct signing key. 
Minor error info: (Subcode 0x0015, Info 0x00000000, Location 0x00000800)
Debug: PGMALGO: sdm_configure: boot status = 0xb0100181 
Debug: PGMALGO: acds_version = Quartus Prime Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
Debug: PGMALGO: Add trace log packet(ACDS_VERSION), size(73)
Debug: PGMALGO: Add trace log packet(IDCODE), size(4)
Debug: PGMALGO: Add trace log packet(USERCODE), size(4)
Debug: PGMALGO: Add trace log packet(BOOT_STATUS), size(4)
Debug: PGMALGO: Add trace log packet(SUBDEVICEID), size(4)
Debug: PGMALGO: Add trace log packet(CMF_CONFIG_STATUS), size(28)
Debug: PGMALGO: Device is running in cmf
Debug: PGMALGO: Add trace log packet(CHIP_ID/UNIQUE_ID), size(12)
Debug: PGMALGO: Add trace log packet(DEVICE_IDENTITY), size(36)
Debug: PGMALGO: Add trace log packet(CMF_SIGNATURE_HASH), size(52)
Debug: PGMALGO: Response compare word @0 - expected 0x00000000 recv 0x000003ff
Debug: PGMALGO: Detect error in scan_response: Read back data mismatch with expected data
Debug: PGMALGO: Response compare word @0 - expected 0x00000000 recv 0x000003ff
Debug: PGMALGO: Detect error in scan_response: Read back data mismatch with expected data
Debug: PGMALGO: Generating trace file content
Debug: PGMALGO:     + packet ACDS_VERSION            78 bytes
Debug: PGMALGO:     + packet IDCODE                   9 bytes
Debug: PGMALGO:     + packet USERCODE                 9 bytes
Debug: PGMALGO:     + packet BOOT_STATUS              9 bytes
Debug: PGMALGO:     + packet SUBDEVICEID              9 bytes
Debug: PGMALGO:     + packet CMF_CONFIG_STATUS       33 bytes
Debug: PGMALGO:     + packet CHIP_ID/UNIQUE_ID       17 bytes
Debug: PGMALGO:     + packet DEVICE_IDENTITY         41 bytes
Debug: PGMALGO:     + packet CMF_SIGNATURE_HASH      57 bytes
Debug: PGMALGO: Writing binary file andor_novid_pgm_debug_auto.trace
Debug: PGMALGO: refresh_jtag_chain device count 1 -> 1, device index 0 -> 0
Debug: PGMALGO: sdm_configure: rescan jtag chain = 1 (after config_status)
Error (209012): Operation failed
Info (209061): Ended Programmer operation at Wed Nov 10 21:54:03 2021
Error: Quartus Prime Programmer was unsuccessful. 4 errors, 0 warnings
    Error: Peak virtual memory: 1893 megabytes
    Error: Processing ended: Wed Nov 10 21:54:03 2021
    Error: Elapsed time: 00:06:51
    Error: System process ID: 3938



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer
Found connection - /connections/Simulator on localhost (fmev3184.fm.intel.com:1127)/4341D0DD@1
Post Code = 0x181 (POST_CODE_CMF_START)
Preamble = 0xB010 (POST_CODE_PR_NORMAL)
Previous nCONFIG state = 0x2 (CONFIG)
Current nCONFIG state = 0x6 (DETACHED_1)
BootROM State = 0x6 (BS_BR_STATE_VAL_IN_CMF)
Image Block Number = 20
Number of Images Attempted = 1
Device state = 0x2 (production)
NIOS Watchdog Enable = 1
JTAG Disable = 0
Restricted Boot = 1
User Authentication Enabled = 1
BootROM Version = 0x018
Original MSEL = 0xF
Current MSEL = 0xF
AVST ready = 0
nCONFIG raw = 1
nCONFIG debounced = 1
nStatus = 1
Reset type = 0x0 (POR)
Cold Reset reason = 0 (default value at initialization)
Read back value of boot status = 0x81 0x1 0x10 0xb0 0x6 0x2 0x36 0x5 0xe1 0xfe 0x3f 0x60 0xff 0x3e 0xe0 0xff
Complete reading bootstatus...
check configuration status with bitstream from programmer
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x00000004
sdm_send_command - Received response packet (in decimal): 24576 -268369899 1377280 -1073741809 0 2048 0
sdm_send_command - Received response packet (in hexadecimal): 0x00006000 0xf0010015 0x00150400 0xc000000f 0x00000000 0x00000800 0x00000000
State = 0xf0010015
Version = 0x00150400
nSTATUS = 1
nCONFIG = 1
AS device is detected as x4 = 0
AS/SDMMC/NAND device detected = 0
MSEL = 0xF
CONF_DONE = 0
INIT_DONE = 0
CVP_DONE = 0
SEU_ERROR = 0
HPS_COLDRESET = 0
HPS_WARMRESET = 0
POR_WAIT = 0
TRAMPOLINE_DISABLE = 0
Error location = 0x00000800
Error details = 0x00000000
get seu error
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x0000003c
sdm_send_command - Received response packet (in decimal): 4096 0
sdm_send_command - Received response packet (in hexadecimal): 0x00001000 0x00000000
read scr
Found SDM master service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/CJTAG/(ID=1) SDM CJTAG Controller/SLD Interface/sld2mm_0/slave_0/nios2r2
Claimed service-path for SDM -- /channels/local/claimGroup/master_1
nconfig_event = 0x7213adbc
Current magic_number_fw_event = 0x7213ADBC (detach_event)
wdt_lock_event = 0x00000000
wdt_unlock_event = 0x00000000
jtag_wdt_ack_event = 0x00000000
wdt_lock_status = 0x00000001
wdt_lock_event = 0x00000000
wdt_count = 0x017d7840
wdt_pet = 0x00000000
nconfig_nstatus_obs = 0x00010101
nconfig_raw = 0x1
nconfig_debounced = 0x1
nstatus = 0x1
prepare_state_intr = 0x0
wipe_state_intr = 0x0
config_state_intr = 0x0
error_wipe_state_intr = 0x0
jtag_wdt_req = 0x0
fw_wdt_response_enable = 0x00000000
wdt_delay_cycles = 0x002625a0
error_pulse_count = 0x0003d090
nconfig_fsm_state = 0x00010206
Current nCONFIG state = 0x6 (DETACHED_1)
Previous nCONFIG state = 0x2 (CONFIG)
Before previous nCONFIG state = 0x1 (PREPARE)
wdt_pet = 0x00000000
nconfig_fsm_state_cycle0 = 0x01a5dc37
nconfig_fsm_state_cycle1 = 0x0070381d
nconfig_fsm_state_cycle2 = 0x0069145d
cpu_pc_before_cold_reset = 0x00000000
nconfig_wdt_enable = 0x00000001
jtag_wdt_enable = 0x00000001
config_status = 0x00000010
debouncer_high_count = 0x0003d090
debouncer_low_count = 0x0000f424
snoc_write_resp = 0x00000001
snoc_write_resp_valid = 0x00000001
pnoc_write_resp = 0x00000001
pnoc_write_resp_valid = 0x00000001
nconfig_wdt_internal_counter_snapshot = 0x00000000
nconfig_pinmux_enable = 0x00000001



Program authenticated bitstream with programmer
Info: *******************************************************************
Info: Running Quartus Prime Programmer
    Info: Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
    Info: Copyright (C) 2021  Intel Corporation. All rights reserved.
    Info: Your use of Intel Corporation's design tools, logic functions 
    Info: and other software and tools, and any partner logic 
    Info: functions, and any output files from any of the foregoing 
    Info: (including device programming or simulation files), and any 
    Info: associated documentation or information are expressly subject 
    Info: to the terms and conditions of the Intel Program License 
    Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
    Info: the Intel FPGA IP License Agreement, or other applicable license
    Info: agreement, including, without limitation, that your use is for
    Info: the sole purpose of programming logic devices manufactured by
    Info: Intel and sold by Intel or its authorized distributors.  Please
    Info: refer to the applicable agreement for further details, at
    Info: https://fpgasoftware.intel.com/eula.
    Info: Processing started: Wed Nov 10 21:56:58 2021
    Info: System process ID: 39441
Info: Command: quartus_pgm -c 1 -m jtag -o p;andor_authenticated_novid.rbf
Info: Using INI file /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/quartus.ini
Info (213045): Using programming cable "Simulator [fmev3184.fm.intel.com:1127]"
Info (213011): Using programming file andor_authenticated_novid.rbf with checksum 0x6536B3B6 for device AGFD023R25AR0@1
Info (209060): Started Programmer operation at Wed Nov 10 21:57:01 2021
Debug: PGMALGO: Add engine key: FALCONMESA:SRAM:PROGRAM (engine type: SRAM)
Debug: PGMALGO: I am PGMALGO_API_PGM
Debug: PGMALGO:     empty_count = 0
Debug: PGMALGO: sdm_configure: flush response fifo = 1
Debug: PGMALGO: sdm_configure: replace config_jtag_timeout_us with INI value 6000000 us
Info (18942): Configuring device index 1
Debug: PGMALGO: sdm_configure: detected non-nd5reva device, skip avst workaround
Debug: PGMALGO: sdm_configure: check jtag chain = 1
Debug: PGMALGO: sdm_configure: cb_idcode_check
Debug: PGMALGO: Device 1 ID Code 4341D0DD success
Debug: PGMALGO: sdm_configure: boot status = 0xb0100181 
Debug: PGMALGO: sdm_configure: boot status = 0xb0100181 
Debug: PGMALGO: sdm_configure: sync up = 1
Debug: PGMALGO: sdm_configure: CONFIG_JTAG = 1
Debug: PGMALGO: refresh_jtag_chain device count 1 -> 1, device index 0 -> 0
Debug: PGMALGO: sdm_configure: rescan jtag chain = 1 (after config_jtag)
Debug: PGMALGO: sending bitstream ...
Debug: PGMALGO: program polling time: 1000 us
Debug: PGMALGO: sdm_configure: send_s10_program_data = 1
Debug: PGMALGO: sdm_configure: cb_status_do_read CONFIG_STATUS, index 0
Debug: PGMALGO: sdm_configure: boot status = 0xb0100181 
Debug: PGMALGO: acds_version = Quartus Prime Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
Debug: PGMALGO: Add trace log packet(ACDS_VERSION), size(73)
Debug: PGMALGO: Add trace log packet(IDCODE), size(4)
Debug: PGMALGO: Add trace log packet(USERCODE), size(4)
Debug: PGMALGO: Add trace log packet(BOOT_STATUS), size(4)
Debug: PGMALGO: Add trace log packet(SUBDEVICEID), size(4)
Debug: PGMALGO: Add trace log packet(CMF_CONFIG_STATUS), size(28)
Debug: PGMALGO: Device is running in cmf
Debug: PGMALGO: Add trace log packet(CHIP_ID/UNIQUE_ID), size(12)
Debug: PGMALGO: Response compare word @0 - expected 0x00000000 recv 0x000001ff
Debug: PGMALGO: Detect error in scan_response: Read back data mismatch with expected data
Debug: PGMALGO: Add trace log packet(CMF_SIGNATURE_HASH), size(52)
Debug: PGMALGO: Response compare word @0 - expected 0x00000000 recv 0x000003ff
Debug: PGMALGO: Detect error in scan_response: Read back data mismatch with expected data
Debug: PGMALGO: Response compare word @0 - expected 0x00000000 recv 0x000003ff
Debug: PGMALGO: Detect error in scan_response: Read back data mismatch with expected data
Debug: PGMALGO: Generating trace file content
Debug: PGMALGO:     + packet ACDS_VERSION            78 bytes
Debug: PGMALGO:     + packet IDCODE                   9 bytes
Debug: PGMALGO:     + packet USERCODE                 9 bytes
Debug: PGMALGO:     + packet BOOT_STATUS              9 bytes
Debug: PGMALGO:     + packet SUBDEVICEID              9 bytes
Debug: PGMALGO:     + packet CMF_CONFIG_STATUS       33 bytes
Debug: PGMALGO:     + packet CHIP_ID/UNIQUE_ID       17 bytes
Debug: PGMALGO:     + packet CMF_SIGNATURE_HASH      57 bytes
Debug: PGMALGO: Writing binary file andor_authenticated_novid_pgm_debug_auto.trace
Debug: PGMALGO: refresh_jtag_chain device count 1 -> 1, device index 0 -> 0
Debug: PGMALGO: sdm_configure: rescan jtag chain = 1 (after config_status)
Info (18943): Configuration succeeded at device index 1
Info (209011): Successfully performed operation(s)
Info (209061): Ended Programmer operation at Wed Nov 10 22:15:45 2021
Info: Quartus Prime Programmer was successful. 0 errors, 0 warnings
    Info: Peak virtual memory: 1893 megabytes
    Info: Processing ended: Wed Nov 10 22:15:45 2021
    Info: Elapsed time: 00:18:47
    Info: System process ID: 39441



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer
Found connection - /connections/Simulator on localhost (fmev3184.fm.intel.com:1127)/4341D0DD@1
Post Code = 0x181 (POST_CODE_CMF_START)
Preamble = 0xB010 (POST_CODE_PR_NORMAL)
Previous nCONFIG state = 0x2 (CONFIG)
Current nCONFIG state = 0x6 (DETACHED_1)
BootROM State = 0x6 (BS_BR_STATE_VAL_IN_CMF)
Image Block Number = 20
Number of Images Attempted = 1
Device state = 0x2 (production)
NIOS Watchdog Enable = 1
JTAG Disable = 0
Restricted Boot = 1
User Authentication Enabled = 1
BootROM Version = 0x018
Original MSEL = 0xF
Current MSEL = 0xF
AVST ready = 0
nCONFIG raw = 1
nCONFIG debounced = 1
nStatus = 1
Reset type = 0x1 (ARB)
Cold Reset reason = 0 (default value at initialization)
Read back value of boot status = 0x81 0x1 0x10 0xb0 0x6 0x2 0x36 0x5 0xe1 0xfe 0x3f 0x60 0xff 0x7e 0xe0 0xff
Complete reading bootstatus...
check configuration status with bitstream from programmer
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x00000004
sdm_send_command - Received response packet (in decimal): 24576 0 1377280 -1073741809 3 0 0
sdm_send_command - Received response packet (in hexadecimal): 0x00006000 0x00000000 0x00150400 0xc000000f 0x00000003 0x00000000 0x00000000
State = 0x00000000
Version = 0x00150400
nSTATUS = 1
nCONFIG = 1
AS device is detected as x4 = 0
AS/SDMMC/NAND device detected = 0
MSEL = 0xF
CONF_DONE = 1
INIT_DONE = 1
CVP_DONE = 0
SEU_ERROR = 0
HPS_COLDRESET = 0
HPS_WARMRESET = 0
POR_WAIT = 0
TRAMPOLINE_DISABLE = 0
Error location = 0x00000000
Error details = 0x00000000
get seu error
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x0000003c
sdm_send_command - Received response packet (in decimal): 4096 0
sdm_send_command - Received response packet (in hexadecimal): 0x00001000 0x00000000
read scr
Found SDM master service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/CJTAG/(ID=1) SDM CJTAG Controller/SLD Interface/sld2mm_0/slave_0/nios2r2
Claimed service-path for SDM -- /channels/local/claimGroup/master_1
nconfig_event = 0x00000000
Current magic_number_fw_event = 0x0 ()
wdt_lock_event = 0x00000000
wdt_unlock_event = 0x00000000
jtag_wdt_ack_event = 0x00000000
wdt_lock_status = 0x00000001
wdt_lock_event = 0x00000000
wdt_count = 0x017d7840
wdt_pet = 0x00000000
nconfig_nstatus_obs = 0x00010101
nconfig_raw = 0x1
nconfig_debounced = 0x1
nstatus = 0x1
prepare_state_intr = 0x0
wipe_state_intr = 0x0
config_state_intr = 0x0
error_wipe_state_intr = 0x0
jtag_wdt_req = 0x0
fw_wdt_response_enable = 0x00000000
wdt_delay_cycles = 0x002625a0
error_pulse_count = 0x0003d090
nconfig_fsm_state = 0x00010206
Current nCONFIG state = 0x6 (DETACHED_1)
Previous nCONFIG state = 0x2 (CONFIG)
Before previous nCONFIG state = 0x1 (PREPARE)
wdt_pet = 0x00000000
nconfig_fsm_state_cycle0 = 0x0433b0d6
nconfig_fsm_state_cycle1 = 0x0070381d
nconfig_fsm_state_cycle2 = 0x0069145d
cpu_pc_before_cold_reset = 0x0016e1ca
nconfig_wdt_enable = 0x00000001
jtag_wdt_enable = 0x00000001
config_status = 0x00000010
debouncer_high_count = 0x0003d090
debouncer_low_count = 0x0000f424
snoc_write_resp = 0x00000001
snoc_write_resp_valid = 0x00000001
pnoc_write_resp = 0x00000001
pnoc_write_resp_valid = 0x00000001
nconfig_wdt_internal_counter_snapshot = 0x00000000
nconfig_pinmux_enable = 0x00000001



Add delay
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd



Program encryption key with programmer
Info: *******************************************************************
Info: Running Quartus Prime Programmer
    Info: Version 21.4.0 Internal Build 24 10/06/2021 SC Pro Edition
    Info: Copyright (C) 2021  Intel Corporation. All rights reserved.
    Info: Your use of Intel Corporation's design tools, logic functions 
    Info: and other software and tools, and any partner logic 
    Info: functions, and any output files from any of the foregoing 
    Info: (including device programming or simulation files), and any 
    Info: associated documentation or information are expressly subject 
    Info: to the terms and conditions of the Intel Program License 
    Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
    Info: the Intel FPGA IP License Agreement, or other applicable license
    Info: agreement, including, without limitation, that your use is for
    Info: the sole purpose of programming logic devices manufactured by
    Info: Intel and sold by Intel or its authorized distributors.  Please
    Info: refer to the applicable agreement for further details, at
    Info: https://fpgasoftware.intel.com/eula.
    Info: Processing started: Wed Nov 10 22:34:31 2021
    Info: System process ID: 64636
Info: Command: quartus_pgm -c 1 -m jtag -o p;aes.ccert
Info: Using INI file /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/quartus.ini
Info (213045): Using programming cable "Simulator [fmev3184.fm.intel.com:1127]"
Info (209060): Started Programmer operation at Wed Nov 10 22:34:33 2021
Debug: PGMALGO: Add engine key: FALCONMESA:COMPACT_CERT:PROGRAM (engine type: COMPACT_CERT)
Debug: PGMIO: Verify certificate keychain
Debug: PGMALGO: I am PGMALGO_API_PGM
Debug: PGMALGO:     empty_count = 0
Debug: PGMALGO: PGMALGO_DO_SDM_COMPACT_CERT do_program
Info (19096): Programming compact certificate at device index 1
Debug: PGMALGO: Enable virtual fusing for certificate command
Info (209011): Successfully performed operation(s)
Info (209061): Ended Programmer operation at Wed Nov 10 22:34:53 2021
Info: Quartus Prime Programmer was successful. 0 errors, 0 warnings
    Info: Peak virtual memory: 798 megabytes
    Info: Processing ended: Wed Nov 10 22:34:53 2021
    Info: Elapsed time: 00:00:22
    Info: System process ID: 64636



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer
Found connection - /connections/Simulator on localhost (fmev3184.fm.intel.com:1127)/4341D0DD@1
Post Code = 0x181 (POST_CODE_CMF_START)
Preamble = 0xB010 (POST_CODE_PR_NORMAL)
Previous nCONFIG state = 0x2 (CONFIG)
Current nCONFIG state = 0x6 (DETACHED_1)
BootROM State = 0x6 (BS_BR_STATE_VAL_IN_CMF)
Image Block Number = 20
Number of Images Attempted = 1
Device state = 0x2 (production)
NIOS Watchdog Enable = 1
JTAG Disable = 0
Restricted Boot = 1
User Authentication Enabled = 1
BootROM Version = 0x018
Original MSEL = 0xF
Current MSEL = 0xF
AVST ready = 0
nCONFIG raw = 1
nCONFIG debounced = 1
nStatus = 1
Reset type = 0x1 (ARB)
Cold Reset reason = 0 (default value at initialization)
Read back value of boot status = 0x81 0x1 0x10 0xb0 0x6 0x2 0x36 0x5 0xe1 0xfe 0x3f 0x60 0xff 0x7e 0xe0 0xff
Complete reading bootstatus...
check configuration status with bitstream from programmer
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x00000004
sdm_send_command - Received response packet (in decimal): 24576 0 1377280 -1073741809 3 0 0
sdm_send_command - Received response packet (in hexadecimal): 0x00006000 0x00000000 0x00150400 0xc000000f 0x00000003 0x00000000 0x00000000
State = 0x00000000
Version = 0x00150400
nSTATUS = 1
nCONFIG = 1
AS device is detected as x4 = 0
AS/SDMMC/NAND device detected = 0
MSEL = 0xF
CONF_DONE = 1
INIT_DONE = 1
CVP_DONE = 0
SEU_ERROR = 0
HPS_COLDRESET = 0
HPS_WARMRESET = 0
POR_WAIT = 0
TRAMPOLINE_DISABLE = 0
Error location = 0x00000000
Error details = 0x00000000
get seu error
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x0000003c
sdm_send_command - Received response packet (in decimal): 4096 0
sdm_send_command - Received response packet (in hexadecimal): 0x00001000 0x00000000
read scr
Found SDM master service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/CJTAG/(ID=1) SDM CJTAG Controller/SLD Interface/sld2mm_0/slave_0/nios2r2
Claimed service-path for SDM -- /channels/local/claimGroup/master_1
nconfig_event = 0x00000000
Current magic_number_fw_event = 0x0 ()
wdt_lock_event = 0x00000000
wdt_unlock_event = 0x00000000
jtag_wdt_ack_event = 0x00000000
wdt_lock_status = 0x00000001
wdt_lock_event = 0x00000000
wdt_count = 0x017d7840
wdt_pet = 0x00000000
nconfig_nstatus_obs = 0x00010101
nconfig_raw = 0x1
nconfig_debounced = 0x1
nstatus = 0x1
prepare_state_intr = 0x0
wipe_state_intr = 0x0
config_state_intr = 0x0
error_wipe_state_intr = 0x0
jtag_wdt_req = 0x0
fw_wdt_response_enable = 0x00000000
wdt_delay_cycles = 0x002625a0
error_pulse_count = 0x0003d090
nconfig_fsm_state = 0x00010206
Current nCONFIG state = 0x6 (DETACHED_1)
Previous nCONFIG state = 0x2 (CONFIG)
Before previous nCONFIG state = 0x1 (PREPARE)
wdt_pet = 0x00000000
nconfig_fsm_state_cycle0 = 0x065a2c0c
nconfig_fsm_state_cycle1 = 0x0070381d
nconfig_fsm_state_cycle2 = 0x0069145d
cpu_pc_before_cold_reset = 0x0016e1ca
nconfig_wdt_enable = 0x00000001
jtag_wdt_enable = 0x00000001
config_status = 0x00000010
debouncer_high_count = 0x0003d090
debouncer_low_count = 0x0000f424
snoc_write_resp = 0x00000001
snoc_write_resp_valid = 0x00000001
pnoc_write_resp = 0x00000001
pnoc_write_resp_valid = 0x00000001
nconfig_wdt_internal_counter_snapshot = 0x00000000
nconfig_pinmux_enable = 0x00000001



Add delay
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd



Program encrypted bitstream with programmer
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
send cmf
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x00000005
sdm_send_command - Received response packet (in decimal): 0
sdm_send_command - Received response packet (in hexadecimal): 0x00000000
Start sending bitstream...
Complete sending bitstream...



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer
Found connection - /connections/Simulator on localhost (fmev3184.fm.intel.com:1127)/4341D0DD@1
Post Code = 0x181 (POST_CODE_CMF_START)
Preamble = 0xB010 (POST_CODE_PR_NORMAL)
Previous nCONFIG state = 0x2 (CONFIG)
Current nCONFIG state = 0x6 (DETACHED_1)
BootROM State = 0x6 (BS_BR_STATE_VAL_IN_CMF)
Image Block Number = 20
Number of Images Attempted = 1
Device state = 0x2 (production)
NIOS Watchdog Enable = 1
JTAG Disable = 0
Restricted Boot = 1
User Authentication Enabled = 1
BootROM Version = 0x018
Original MSEL = 0xF
Current MSEL = 0xF
AVST ready = 0
nCONFIG raw = 1
nCONFIG debounced = 1
nStatus = 1
Reset type = 0x1 (ARB)
Cold Reset reason = 0 (default value at initialization)
Read back value of boot status = 0x81 0x1 0x10 0xb0 0x6 0x2 0x36 0x5 0xe1 0xfe 0x3f 0x60 0xff 0x7e 0xe0 0xff
Complete reading bootstatus...
check configuration status with bitstream from programmer
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x00000004
sdm_send_command - Received response packet (in decimal): 24576 0 1377280 -1073741809 3 0 0
sdm_send_command - Received response packet (in hexadecimal): 0x00006000 0x00000000 0x00150400 0xc000000f 0x00000003 0x00000000 0x00000000
State = 0x00000000
Version = 0x00150400
nSTATUS = 1
nCONFIG = 1
AS device is detected as x4 = 0
AS/SDMMC/NAND device detected = 0
MSEL = 0xF
CONF_DONE = 1
INIT_DONE = 1
CVP_DONE = 0
SEU_ERROR = 0
HPS_COLDRESET = 0
HPS_WARMRESET = 0
POR_WAIT = 0
TRAMPOLINE_DISABLE = 0
Error location = 0x00000000
Error details = 0x00000000
get seu error
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x0000003c
sdm_send_command - Received response packet (in decimal): 4096 0
sdm_send_command - Received response packet (in hexadecimal): 0x00001000 0x00000000
read scr
Found SDM master service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/CJTAG/(ID=1) SDM CJTAG Controller/SLD Interface/sld2mm_0/slave_0/nios2r2
Claimed service-path for SDM -- /channels/local/claimGroup/master_1
nconfig_event = 0x00000000
Current magic_number_fw_event = 0x0 ()
wdt_lock_event = 0x00000000
wdt_unlock_event = 0x00000000
jtag_wdt_ack_event = 0x00000000
wdt_lock_status = 0x00000001
wdt_lock_event = 0x00000000
wdt_count = 0x017d7840
wdt_pet = 0x00000000
nconfig_nstatus_obs = 0x00010101
nconfig_raw = 0x1
nconfig_debounced = 0x1
nstatus = 0x1
prepare_state_intr = 0x0
wipe_state_intr = 0x0
config_state_intr = 0x0
error_wipe_state_intr = 0x0
jtag_wdt_req = 0x0
fw_wdt_response_enable = 0x00000000
wdt_delay_cycles = 0x002625a0
error_pulse_count = 0x0003d090
nconfig_fsm_state = 0x00010206
Current nCONFIG state = 0x6 (DETACHED_1)
Previous nCONFIG state = 0x2 (CONFIG)
Before previous nCONFIG state = 0x1 (PREPARE)
wdt_pet = 0x00000000
nconfig_fsm_state_cycle0 = 0x13732c4c
nconfig_fsm_state_cycle1 = 0x0070381d
nconfig_fsm_state_cycle2 = 0x0069145d
cpu_pc_before_cold_reset = 0x0016e1ca
nconfig_wdt_enable = 0x00000001
jtag_wdt_enable = 0x00000001
config_status = 0x00000010
debouncer_high_count = 0x0003d090
debouncer_low_count = 0x0000f424
snoc_write_resp = 0x00000001
snoc_write_resp_valid = 0x00000001
pnoc_write_resp = 0x00000001
pnoc_write_resp_valid = 0x00000001
nconfig_wdt_internal_counter_snapshot = 0x00000000
nconfig_pinmux_enable = 0x00000001



Add delay
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer
Found connection - /connections/Simulator on localhost (fmev3184.fm.intel.com:1127)/4341D0DD@1
Post Code = 0x181 (POST_CODE_CMF_START)
Preamble = 0xB010 (POST_CODE_PR_NORMAL)
Previous nCONFIG state = 0x2 (CONFIG)
Current nCONFIG state = 0x6 (DETACHED_1)
BootROM State = 0x6 (BS_BR_STATE_VAL_IN_CMF)
Image Block Number = 20
Number of Images Attempted = 1
Device state = 0x2 (production)
NIOS Watchdog Enable = 1
JTAG Disable = 0
Restricted Boot = 1
User Authentication Enabled = 1
BootROM Version = 0x018
Original MSEL = 0xF
Current MSEL = 0xF
AVST ready = 0
nCONFIG raw = 1
nCONFIG debounced = 1
nStatus = 1
Reset type = 0x1 (ARB)
Cold Reset reason = 0 (default value at initialization)
Read back value of boot status = 0x81 0x1 0x10 0xb0 0x6 0x2 0x36 0x5 0xe1 0xfe 0x3f 0x60 0xff 0x7e 0xe0 0xff
Complete reading bootstatus...
check configuration status with bitstream from programmer
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x00000004
sdm_send_command - Received response packet (in decimal): 24576 0 1377280 -1073741809 3 0 0
sdm_send_command - Received response packet (in hexadecimal): 0x00006000 0x00000000 0x00150400 0xc000000f 0x00000003 0x00000000 0x00000000
State = 0x00000000
Version = 0x00150400
nSTATUS = 1
nCONFIG = 1
AS device is detected as x4 = 0
AS/SDMMC/NAND device detected = 0
MSEL = 0xF
CONF_DONE = 1
INIT_DONE = 1
CVP_DONE = 0
SEU_ERROR = 0
HPS_COLDRESET = 0
HPS_WARMRESET = 0
POR_WAIT = 0
TRAMPOLINE_DISABLE = 0
Error location = 0x00000000
Error details = 0x00000000
get seu error
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x0000003c
sdm_send_command - Received response packet (in decimal): 4096 0
sdm_send_command - Received response packet (in hexadecimal): 0x00001000 0x00000000
read scr
Found SDM master service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/CJTAG/(ID=1) SDM CJTAG Controller/SLD Interface/sld2mm_0/slave_0/nios2r2
Claimed service-path for SDM -- /channels/local/claimGroup/master_1
nconfig_event = 0x00000000
Current magic_number_fw_event = 0x0 ()
wdt_lock_event = 0x00000000
wdt_unlock_event = 0x00000000
jtag_wdt_ack_event = 0x00000000
wdt_lock_status = 0x00000001
wdt_lock_event = 0x00000000
wdt_count = 0x017d7840
wdt_pet = 0x00000000
nconfig_nstatus_obs = 0x00010101
nconfig_raw = 0x1
nconfig_debounced = 0x1
nstatus = 0x1
prepare_state_intr = 0x0
wipe_state_intr = 0x0
config_state_intr = 0x0
error_wipe_state_intr = 0x0
jtag_wdt_req = 0x0
fw_wdt_response_enable = 0x00000000
wdt_delay_cycles = 0x002625a0
error_pulse_count = 0x0003d090
nconfig_fsm_state = 0x00010206
Current nCONFIG state = 0x6 (DETACHED_1)
Previous nCONFIG state = 0x2 (CONFIG)
Before previous nCONFIG state = 0x1 (PREPARE)
wdt_pet = 0x00000000
nconfig_fsm_state_cycle0 = 0x1656172a
nconfig_fsm_state_cycle1 = 0x0070381d
nconfig_fsm_state_cycle2 = 0x0069145d
cpu_pc_before_cold_reset = 0x0016e1ca
nconfig_wdt_enable = 0x00000001
jtag_wdt_enable = 0x00000001
config_status = 0x00000010
debouncer_high_count = 0x0003d090
debouncer_low_count = 0x0000f424
snoc_write_resp = 0x00000001
snoc_write_resp_valid = 0x00000001
pnoc_write_resp = 0x00000003
pnoc_write_resp_valid = 0x00000001
nconfig_wdt_internal_counter_snapshot = 0x00000000
nconfig_pinmux_enable = 0x00000001



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer
Found connection - /connections/Simulator on localhost (fmev3184.fm.intel.com:1127)/4341D0DD@1
Post Code = 0x181 (POST_CODE_CMF_START)
Preamble = 0xB010 (POST_CODE_PR_NORMAL)
Previous nCONFIG state = 0x2 (CONFIG)
Current nCONFIG state = 0x6 (DETACHED_1)
BootROM State = 0x6 (BS_BR_STATE_VAL_IN_CMF)
Image Block Number = 20
Number of Images Attempted = 1
Device state = 0x2 (production)
NIOS Watchdog Enable = 1
JTAG Disable = 0
Restricted Boot = 1
User Authentication Enabled = 1
BootROM Version = 0x018
Original MSEL = 0xF
Current MSEL = 0xF
AVST ready = 0
nCONFIG raw = 1
nCONFIG debounced = 1
nStatus = 1
Reset type = 0x1 (ARB)
Cold Reset reason = 0 (default value at initialization)
Read back value of boot status = 0x81 0x1 0x10 0xb0 0x6 0x2 0x36 0x5 0xe1 0xfe 0x3f 0x60 0xff 0x7e 0xe0 0xff
Complete reading bootstatus...
check configuration status with bitstream from programmer
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x00000004
sdm_send_command - Received response packet (in decimal): 24576 0 1377280 -1073741809 3 0 0
sdm_send_command - Received response packet (in hexadecimal): 0x00006000 0x00000000 0x00150400 0xc000000f 0x00000003 0x00000000 0x00000000
State = 0x00000000
Version = 0x00150400
nSTATUS = 1
nCONFIG = 1
AS device is detected as x4 = 0
AS/SDMMC/NAND device detected = 0
MSEL = 0xF
CONF_DONE = 1
INIT_DONE = 1
CVP_DONE = 0
SEU_ERROR = 0
HPS_COLDRESET = 0
HPS_WARMRESET = 0
POR_WAIT = 0
TRAMPOLINE_DISABLE = 0
Error location = 0x00000000
Error details = 0x00000000
get seu error
Found SDM packet service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/packet
Claimed packet service-path for SDM -- /channels/local/claimGroup/packet_1
sdm_send_command - Sending command packet: 0x0000003c
sdm_send_command - Received response packet (in decimal): 4096 0
sdm_send_command - Received response packet (in hexadecimal): 0x00001000 0x00000000
read scr
Found SDM master service path - /devices/4341D0DD@1#fmev3184.fm.intel.com:1127#Simulator/(link)/JTAG/CJTAG/(ID=1) SDM CJTAG Controller/SLD Interface/sld2mm_0/slave_0/nios2r2
Claimed service-path for SDM -- /channels/local/claimGroup/master_1
nconfig_event = 0x00000000
Current magic_number_fw_event = 0x0 ()
wdt_lock_event = 0x00000000
wdt_unlock_event = 0x00000000
jtag_wdt_ack_event = 0x00000000
wdt_lock_status = 0x00000001
wdt_lock_event = 0x00000000
wdt_count = 0x017d7840
wdt_pet = 0x00000000
nconfig_nstatus_obs = 0x00010101
nconfig_raw = 0x1
nconfig_debounced = 0x1
nstatus = 0x1
prepare_state_intr = 0x0
wipe_state_intr = 0x0
config_state_intr = 0x0
error_wipe_state_intr = 0x0
jtag_wdt_req = 0x0
fw_wdt_response_enable = 0x00000000
wdt_delay_cycles = 0x002625a0
error_pulse_count = 0x0003d090
nconfig_fsm_state = 0x00010206
Current nCONFIG state = 0x6 (DETACHED_1)
Previous nCONFIG state = 0x2 (CONFIG)
Before previous nCONFIG state = 0x1 (PREPARE)
wdt_pet = 0x00000000
nconfig_fsm_state_cycle0 = 0x168c5360
nconfig_fsm_state_cycle1 = 0x0070381d
nconfig_fsm_state_cycle2 = 0x0069145d
cpu_pc_before_cold_reset = 0x0016e1ca
nconfig_wdt_enable = 0x00000001
jtag_wdt_enable = 0x00000001
config_status = 0x00000010
debouncer_high_count = 0x0003d090
debouncer_low_count = 0x0000f424
snoc_write_resp = 0x00000001
snoc_write_resp_valid = 0x00000001
pnoc_write_resp = 0x00000001
pnoc_write_resp_valid = 0x00000001
nconfig_wdt_internal_counter_snapshot = 0x00000000
nconfig_pinmux_enable = 0x00000001



Add delay
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd



Get trace
INFO_EMU :: emu_hello
emu_gtrace_dump:00000AED:
expected size:2797
received: 2797 bytes in 0.000 s
---------------g_trace start------------->

11-November-2021 01:01:01

CHECKSUM = 0x45530105
WRITE OFFSET = 28
==============================================================================================
[  0] TRACE_BOOT                                                   220          0x000000dc
[  1] TRACE_CONFIG_STATE_WIPE                                      1239         0x000004d7
[  2] TRACE_CONFIG_EVENT_TRANSITION                                931          0x000003a3
[  3] TRACE_CONFIG_STATE_FATAL                                     274          0x00000112
[  4] TRACE_CONFIG_STATE_FATAL                                     274          0x00000112
[  5] TRACE_CONFIG_STATUS_DEADLOOP                                 20297        0x00004f49
[  6] TRACE_FPGA_NOT_READY                                         160          0x000000a0
[  7] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[  8] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[  9] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[ 10] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[ 11] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[ 12] TRACE_CONFIG_STATUS_DEADLOOP                                 1163022147   0x45524f43
[ 13] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[ 14] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[ 15] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[ 16] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[ 17] TRACE_PMF_ERROR_I2C_OPEN                                     893          0x0000037d
[ 18] TRACE_CONFIG_UNKNOWN_ASYNC_EVENT                             291          0x00000123
[ 19] TRACE_MBOX_CMD_SYNC                                          4            0x00000004
[ 20] TRACE_MBOX_CMD_SYNC                                          60           0x0000003c
[ 21] TRACE_MBOX_CMD_INSERT_SEU_ERROR                              902          0x00000386
[ 22] TRACE_MBOX_CMD_SYNC                                          4            0x00000004
[ 23] TRACE_MBOX_CMD_SYNC                                          60           0x0000003c
[ 24] TRACE_MBOX_CMD_INSERT_SEU_ERROR                              902          0x00000386
[ 25] TRACE_MBOX_CMD_SYNC                                          4            0x00000004
[ 26] TRACE_MBOX_CMD_SYNC                                          60           0x0000003c
[ 27] TRACE_MBOX_CMD_INSERT_SEU_ERROR                              902          0x00000386

<--------------g_trace end--------------





Add delay
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer



Check status
--------------------------------------------------------------------------------
 Version 21.4 24
 Copyright (C) 2021 Intel Corporation. All rights reserved.
 Your use of Intel Corporation's design tools, logic functions
 and other software and tools, and its AMPP partner logic
 functions, and any output files from any of the foregoing
 (including device programming or simulation files), and any
 associated documentation or information is expressly subject
 to the terms and conditions of the Intel Program License
 Subscription Agreement, the Intel Quartus Prime License Agreement,
 the Intel MegaCore Function License Agreement, or other
 applicable license agreement, including, without limitation,
 that your use is for the sole purpose of programming logic
 devices manufactured by Intel and sold by Intel or its
 authorized distributors.  Please refer to the applicable
 agreement for further details. For license details, refer to the
 End User License Agreement at http://fpgasoftware.intel.com/eula.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 Welcome to Intel's FPGA System Console

 This Tcl console provides access to the hardware modules instantiated in your
 FPGA. You can use System Console for all of the following purposes:

    * To start, stop, or step a Nios II processor
    * To read or write Avalon Memory-Mapped (Avalon-MM) slaves using special
     masters
    * To sample the Platform Designer system clock and system reset signal
    * To run JTAG loopback tests to analyze board noise problems
    * To shift arbitrary instruction register and data register values to
     instantiated system level debug (SLD) nodes

 In addition, the directory <Intel Quartus Prime Directory>/../syscon/scripts
 contains Tcl files that provide miscellaneous utilities and examples of how to
 access the functionality provided. You can include those macros in your
 scripts by issuing Tcl source commands.
--------------------------------------------------------------------------------
Call testutils_contrib::config::set_device <device_name> to get started
Supported devices: nd0 nd2 nd4 nd5 nd7m fm6 fm8 fm7 dmd
read boot status after bitstream programming with programmer



Done
None of emulator JOB is running.
	VP on fmynbm7005
	Version 8.4.2_0942_05
	On since 08/26/2021 11:14:16
	Time now 11/11/2021 01:21:22
--------------------------------------------------------------------------------------------------------
Status               Jobid Class    Qslot  User       Cmdline                             Workstation   
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
Info: Paused test execution timeout monitor.
Info: Current time is Thu Nov 11 01:21:22 2021

reg.rout.............................................................. OK

Info: [regIResultDeletion] Number of parent subtest matched passed subtest, deleting /p/psg/swip/w/vckok/fm/emulation/regtest/submit/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official//_iresult.tgz
Info: [regIResultDeletion] Deleted parent iresult directory: /p/psg/swip/w/vckok/fm/emulation/regtest/submit/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official//_iresult.tgz
Info: [regIResultDeletion] Deleted sem file at /p/psg/swip/w/vckok/fm/emulation/regtest/submit/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/

Info: No family detected. 

Register to Pert as pass succeeded.

Info: reg_analyze took 1.23649 seconds

Info: Restarted test execution timeout monitor.
Info: Stopped test execution timeout monitor.

Info: Current time is Thu Nov 11 01:21:31 2021
Info: Regtest p/psg/swip/w/vckok/fm/emulation/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0 ran in 13652.628412 seconds

Info: Processing execution directory before copying back result files...
   Dir: /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/
   Items to copy back are listed in .reg_run/returned_files.txt
   Elapsed time: 0.128681 seconds

Info: Compressing result files...
   Dir: /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0
   Items to compress are listed in /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0/.reg_run/compressed_files.txt
   Elapsed time: 1.007009 seconds

Info: Copying result files from local hard drive to shared drive...
   Src: /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0
   Dst: /p/psg/swip/w/vckok/fm/emulation/regtest/submit/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0
Info: Copying file:
   From: /tmp/arc_377600452/_0/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0
   To: /p/psg/swip/w/vckok/fm/emulation/regtest/submit/regtest/andor_emu_sha384_encryption_scm_efuse_cnoc_vidoff_intosc_official/loop_0
   Elapsed time: 0.067309 seconds

===========================================================================
Goodbye - the SWIP regtest framework is exiting (0)...
Current time: Thu Nov 11 01:21:33 2021
Removing netbatch jobid 8154961
No matching jobs found in the pool
Removing temp jobid storage file /tmp/arc_377600452/emulator/nb_jobid.txt
Killing jtagd process 11102 ...
