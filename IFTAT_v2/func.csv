,FUNC_NAME,FUNC_LINE_NO
0,"int main(int argc, char * * argv)",13
1,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
2,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
3,status_code_t bead_bus_clear(const bead_bus_dev_t* bb),45
4,status_code_t bead_bus_set(const bead_bus_dev_t* bb),60
5,status_code_t bead_bus_update(const bead_bus_dev_t* bb),71
6,status_code_t bead_bus_sample(const bead_bus_dev_t* bb),83
7,"status_code_t bead_bus_shift(const bead_bus_dev_t*  bb,",98
8,"status_code_t bead_bus_async_shift(const bead_bus_dev_t*    bb,",113
9,status_code_t bead_bus_is_busy(const bead_bus_dev_t* bb),137
10,status_code_t bead_bus_out_of_clear(const bead_bus_dev_t* bb),147
11,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
12,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13,"status_code_t cnoc_msi_cmd_req_handler_dispatch(cnoc_msi_cmd_state_t* cnoc_msi_cmd_state, ring_buf_t* cnt_cmd_req_queue)",38
14,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
15,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
16,status_code_t cnoc_msi_init(),59
17,"status_code_t cnoc_msi_cmd_req_handler_init( cnt_cmd_req_handler_entry_t  cnt_cmd_req_table[],",93
18,"status_code_t cnoc_msi_param_blk_dlist_init(cnoc_msi_param_blk_dlist_t          param_blk_dlist[],",102
19,bool cnoc_msi_param_blk_init_is_complete(void),120
20,"schan_state_t cnoc_msi_schan_status_get(uint32_t ch, schan_state_t* status)",133
21,status_code_t cnoc_msi_uninit(void),176
22,void cnoc_rx_isr(void* context),184
23,void supervisory_control_loop(void),350
24,"status_code_t cnoc_msi_bead_bus_register(const bead_bus_dev_t*  bb,",395
25,status_code_t cnoc_msi_bead_bus_unregister(const bead_bus_dev_t* bb),424
26,"status_code_t cnoc_msi_iocsr_register(const iocsr_dev_t*        iocsr,",486
27,status_code_t cnoc_msi_iocsr_unregister(const iocsr_dev_t* iocsr),515
28,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
29,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
30,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
31,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
32,"void ring_buf_init(ring_buf_t*      rb, ",51
33,void ring_buf_uninit(ring_buf_t* rb),71
34,void* ring_buf_enq(ring_buf_t* rb),94
35,void ring_buf_deq(ring_buf_t* rb),124
36,void* ring_buf_front(ring_buf_t* rb),144
37,void* ring_buf_next(ring_buf_t* rb),159
38,uint32_t ring_buf_num_entries(const ring_buf_t* rb),170
39,bool ring_buf_is_empty(const ring_buf_t* rb),181
40,bool ring_buf_is_full(const ring_buf_t* rb),192
41,bool ring_buf_is_overflow(const ring_buf_t* rb),204
42,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
43,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
44,static void step_async_shift_completion(cnoc_msi_schan_state_t* cnoc_msi_schan_state),42
45,static status_code_t step_bb_shift(cnoc_msi_schan_state_t* cnoc_msi_schan_state),52
46,static status_code_t step_bb_update(cnoc_msi_schan_state_t* cnoc_msi_schan_state),72
47,static status_code_t step_iocsr_freeze(cnoc_msi_schan_state_t* cnoc_msi_schan_state),83
48,static status_code_t step_iocsr_unfreeze(cnoc_msi_schan_state_t* cnoc_msi_schan_state),101
49,static status_code_t step_iocsr_shift(cnoc_msi_schan_state_t* cnoc_msi_schan_state),121
50,"static status_code_t cnoc_msi_schan_state_init(cnoc_msi_schan_state_t* cnoc_msi_schan_state, ring_buf_t *schan_packet_buf_queue)",137
51,static status_code_t cnoc_msi_schan_exec_step(cnoc_msi_schan_state_t* cnoc_msi_schan_state),201
52,"status_code_t cnoc_msi_schan_init(cnoc_msi_schan_state_t* cnoc_msi_schan_state, ring_buf_t *schan_packet_buf_queue)",237
53,"status_code_t cnoc_msi_schan_process(cnoc_msi_schan_state_t* cnoc_msi_schan_state, ring_buf_t *schan_packet_buf_queue)",277
54,"schan_entry_t* cnoc_msi_schan_find_ch(cnoc_msi_schan_state_t* cnoc_msi_schan_state, uint32_t ch)",335
55,void cnoc_tx_init(cnoc_tx_dev_t *tx_dev),32
56,cnoc_tx_result_t cnoc_tx_init(const cnoc_tx_dev_t *tx_dev),40
57,"cnoc_tx_result_t cnoc_tx_transmit(cnoc_tx_dev_t *tx_dev, cnoc_tx_params_t *tx_params)",71
58,"cnoc_tx_result_t cnoc_tx_transmit(const cnoc_tx_dev_t *tx_dev, const cnoc_tx_params_t *tx_params)",80
59,cnoc_tx_result_t cnoc_tx_irq_deassert(const cnoc_tx_dev_t *tx_dev),167
60,cnoc_tx_result_t cnoc_tx_irq_assert(const cnoc_tx_dev_t *tx_dev),183
61,uint8_t cnoc_tx_irq_status(const cnoc_tx_dev_t *tx_dev),199
62,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
63,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
64,void dma_init(),81
65,void dma_init(),89
66,"void dma_transfer(const void *src_buffer, const void *dst_buffer, uint32_t tx_length_words, uint32_t control_word)",113
67,"void dma_transfer(const void *src_buffer, const void *dst_buffer, uint32_t tx_length_words, uint32_t control_word)",124
68,void dma_clear_status(void),151
69,void dma_reset(void),159
70,void dma_register_isr_callback_function(dma_cb_func_type dma_cb_func),169
71,void dma_register_isr_callback_function (dma_cb_func_type dma_cb_func),179
72,void dma_unregister_isr_callback_function(),190
73,void dma_unregister_isr_callback_function(),200
74,"static void dma_complete_handler(void* isr_context, uint32_t id)",209
75,static void dma_complete_handler(void* context),218
76,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
77,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
78,"static void bead_bus_signal_set(int update_in, int capture_in, int clr_n_in)",77
79,"static void bead_bus_clock_net_signal_set(int update_in, int capture_in, int clr_n_in)",90
80,int main(void),119
81,"static status_code_t cnt_startup(const uint32_t* cmd_packet, uint32_t payload_words)",196
82,"static status_code_t redundancy_fuse(const uint32_t* cmd_packet, uint32_t payload_words)",202
83,static status_code_t paramblk_callback (void* user_arg),208
84,static void bead_bus_callback(void *user_arg),214
85,static status_code_t iocsr_freeze(),219
86,static status_code_t iocsr_unfreeze(),224
87,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
88,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
89,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
90,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
91,"static void serial_ctrl_irq_handler(void* context, alt_u32 id)",80
92,"status_code_t serial_ctrl_init(serial_ctrl_dev_t*   dev,",150
93,"status_code_t serial_ctrl_read(const serial_chan_dev_t*     chan,",178
94,"status_code_t serial_ctrl_async_read(const serial_chan_dev_t*    chan,",195
95,"status_code_t serial_ctrl_write(const serial_chan_dev_t*    chan,",212
96,"status_code_t serial_ctrl_async_write(const serial_chan_dev_t*   chan,",230
97,"status_code_t serial_ctrl_transfer(const serial_chan_dev_t*    chan,",249
98,"status_code_t serial_ctrl_async_transfer(const serial_chan_dev_t*   chan,",341
99,status_code_t serial_ctrl_channel_is_busy(const serial_chan_dev_t* chan),429
100,void nsp_delay(int count),4
101,"void mailbox_fatal_imp(int code, int line, char* file)",12
102,"void mailbox_error_imp(int code, int line, char* file)",24
103,"void st_to_long(char* st, int* w0, int* w1)",35
104,void mailbox_barrier_release(char* barrier_st),60
105,void mailbox_barrier_wait(char* barrier_st),69
106,void mailbox_barrier_global_release(char* barrier_st),79
107,void mailbox_barrier_global_wait(char* barrier_st),88
108,int mailbox_sim_time(),98
109,void mailbox_wait_sim_time(int ns),104
110,void mailbox_connect_monitor(char* monitor_st),114
111,void mailbox_disconnect_monitor(char* monitor_st),122
112,"void write_io(void* addr, int v)",7
113,int read_io(void* addr),14
114,void mailbox_uvm_error(int code),21
115,void mailbox_wave_marker(int code),26
116,void mailbox_start(),31
117,void mailbox_finish(int code),36
118,void mailbox_print_c(char c){,41
119,void mailbox_print_hex(int c){,45
120,void mailbox_print_dec(int c),49
121,"void mailbox_print_format(int fmt, int n)",54
122,void nsp_delay(int count),59
123,"void mailbox_fatal_imp(int code, int line, char* file)",67
124,"void mailbox_barrier_release_imp(int b0, int b1)",73
125,"int mailbox_barrier_wait_imp(int b0, int b1)",78
126,"void st_to_long(char* st, int* w0, int* w1)",95
127,void mailbox_barrier_release(char* barrier_st),119
128,void mailbox_barrier_wait(char* barrier_st),128
129,void mailbox_barrier_global_release(char* barrier_st),138
130,void mailbox_barrier_global_wait(char* barrier_st),147
131,int mailbox_sim_time(),157
132,void mailbox_wait_sim_time(int ns),163
133,void mailbox_connect_monitor(char* monitor_st),173
134,void mailbox_disconnect_monitor(char* monitor_st),181
135,"int fopen(const char* fn, const char* mode)",190
136,int fgetc(int fd),195
137,int fclose(int fd),200
138,"int fseek(int fd, int off, int origin)",205
139,int ftell(int fd),215
140,void nsp_delay(int count),4
141,"void mailbox_fatal_imp(int code, int line, char* file)",12
142,"void mailbox_error_imp(int code, int line, char* file)",24
143,"void st_to_long(char* st, int* w0, int* w1)",35
144,void mailbox_barrier_release(char* barrier_st),60
145,void mailbox_barrier_wait(char* barrier_st),69
146,void mailbox_barrier_global_release(char* barrier_st),79
147,void mailbox_barrier_global_wait(char* barrier_st),88
148,int mailbox_sim_time(),98
149,void mailbox_wait_sim_time(int ns),104
150,void mailbox_connect_monitor(char* monitor_st),114
151,void mailbox_disconnect_monitor(char* monitor_st),122
152,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
153,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
154,"status_code_t cnoc_msi_cmd_req_handler_dispatch(cnoc_msi_cmd_state_t* cnoc_msi_cmd_state, gen_ring_buf_t* cnt_cmd_req_queue)",38
155,*        Copyright (c) 2015 Altera Corporation,12
156,"uint32_t iocsr_bridge_write(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet)",25
157,"void iocsr_bridge_write(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet)",36
158,"static void iocsr_bridge_unload(uint32_t bridge_addr, uint8_t num_chains, uint8_t *log_ch_phy_map, uint32_t *dest_addr)",79
159,"static void iocsr_bridge_unload(uint32_t bridge_addr, uint8_t num_chains, uint8_t *hw_phy_ch_log_map, uint32_t *dest_addr)",94
160,void iocsr_bridge_master_data_unload(IOCSR_Master_Unload_t* context),117
161,uint8_t iocsr_bridge_master_data_unload (IOCSR_Master_Unload_t* context),133
162,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
163,void timer1_init(),60
164,void timer1_init(),68
165,void timer0_init(),75
166,void timer0_init(),83
167,static void timer1_start_nb(uint32_t nanoseconds),90
168,void timer1_start_nb(uint32_t nanoseconds),100
169,"static void timer0_start_nb(uint32_t base, uint32_t nanoseconds)",108
170,void timer0_start_nb(uint32_t nanoseconds),118
171,"static void timer1_configure(uint32_t base, uint32_t nanoseconds)",126
172,void timer1_configure(uint32_t nanoseconds),135
173,static void timer0_configure(uint32_t nanoseconds),143
174,void timer0_configure(uint32_t nanoseconds),152
175,static uint32_t timer0_counter_read(),161
176,uint32_t timer0_counter_read(),169
177,static uint32_t timer1_counter_read(),176
178,uint32_t timer1_counter_read(),184
179,static void timer1_register_isr_callback_function (timer_cb_func_type timer_cb_func),191
180,void timer1_register_isr_callback_function ( timer_cb_func_type timer_cb_func),200
181,static void timer0_register_isr_callback_function (timer_cb_func_type timer_cb_func),212
182,void timer0_register_isr_callback_function ( timer_cb_func_type timer_cb_func),221
183,void timer1_unregister_isr_callback_function (),232
184,void timer1_unregister_isr_callback_function(),241
185,void timer_0unregister_isr_callback_function (),250
186,void timer0_unregister_isr_callback_function(),259
187,static uint8_t timer1_is_expired(),268
188,uint8_t timer1_is_expired(),278
189,static uint8_t timer0_is_expired(),285
190,uint8_t timer0_is_expired(),295
191,void timer1_start(uint32_t nanoseconds),302
192,void timer1_start(uint32_t nanoseconds),312
193,void timer0_start(uint32_t nanoseconds),320
194,void timer0_start(uint32_t nanoseconds),329
195,void timer1_start_raw(uint32_t counter),336
196,void timer1_start_raw(uint32_t counter),345
197,void timer0_start_raw(uint32_t counter),353
198,void timer0_start_raw(uint32_t counter),362
199,void timer1_start_nb_raw(uint32_t counter),369
200,void timer1_start_nb_raw(uint32_t counter),378
201,void timer0_start_nb_raw(uint32_t counter),386
202,void timer0_start_nb_raw(uint32_t counter),395
203,static void timer_init(uint32_t base),402
204,static void timer_init(uint32_t base),410
205,"static void timer_start_nb(uint32_t base, uint32_t nanoseconds)",418
206,"static void timer_start_nb(uint32_t base, uint32_t nanoseconds)",429
207,"static void timer_start_nb_raw(uint32_t base, uint32_t nCycles)",435
208,"static void timer_start_nb_raw(uint32_t base, uint32_t nCycles)",446
209,"static void timer_configure(uint32_t base, uint32_t nanoseconds)",467
210,"static void timer_configure(uint32_t base, uint32_t nanoseconds)",477
211,static uint8_t timer_is_expired(uint32_t base),502
212,static uint8_t timer_is_expired(uint32_t base),512
213,static uint32_t timer_counter_read (uint32_t base),519
214,static uint32_t timer_counter_read(uint32_t base),527
215,"static void timer_start(uint32_t base, uint32_t nanoseconds)",549
216,"static void timer_start(uint32_t base, uint32_t nanoseconds)",559
217,"static void timer_start_raw(uint32_t base, uint32_t nCycles)",566
218,"static void timer_start_raw(uint32_t base, uint32_t nCycles)",576
219,"static void timer_complete_handler(void* isr_context, uint32_t id)",587
220,static void timer_complete_handler(void* context),596
221,*      Copyright (c) 2015 Altera Corporation,12
222,"void iocsr_redundancy_write(void *iocsr_packet_addr, uint32_t ch_num, uint32_t ubump_num)",22
223,"int32_t iocsr_redundancy_write(iocsr_brdg_dev_t *iocsr_brdg_dev,",35
224,"void aib_aux_redundancy_write(uint32_t *aib_aux_addr,",140
225,"int32_t aib_aux_redundancy_write(uint32_t *aib_aux_addr,",152
226,void foo(char * const * arg) {,1
227,void foo2(char ** const arg) {,6
228,int main(),17
229,"int main (int argc, char *argv[]) {",14
230,void print_help(int exval) {,96
231,void init_trace_buffer(){,16
232,"void write_trace_buffer(trace_message_t message, uint32_t info){",31
233,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
234,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
235,"void  gen_ring_buf_init(gen_ring_buf_t* rb,",54
236,void gen_ring_buf_uninit(gen_ring_buf_t* rb),72
237,void* gen_ring_buf_enq(gen_ring_buf_t* rb),95
238,void gen_ring_buf_deq(gen_ring_buf_t* rb),125
239,void* gen_ring_buf_front(gen_ring_buf_t* rb),145
240,void* gen_ring_buf_next(gen_ring_buf_t* rb),160
241,uint32_t gen_ring_buf_num_entries(const gen_ring_buf_t* rb),171
242,bool gen_ring_buf_is_empty(const gen_ring_buf_t* rb),182
243,bool gen_ring_buf_is_full(const gen_ring_buf_t* rb),193
244,bool gen_ring_buf_is_overflow(const gen_ring_buf_t* rb),205
245,void uart_puts(char *str) {,43
246,"alt_u32 uart_puth(alt_32 dont_put_zero, alt_u32 i) {",51
247,void uart_puti(alt_u32 i) {,64
248,"void uart_printf(char *format, ...) {",97
249,"void fast_print_int(int fmt, int n)",41
250,void tb_puts(const char *s),46
251,"void tb_printf(const char *format, ...)",52
252,void mb_vip_puts(const char *s),116
253,void sh_puts(const char *s),125
254,"void sh_printf(const char *format, ...)",131
255,extern uint8_t sem_try_acquire(volatile uint32_t *sem),32
256,extern uint8_t sem_init(volatile uint8_t *sem),54
257,uint8_t sem_init(volatile uint32_t *sem),67
258,extern uint8_t sem_release(volatile uint32_t *sem),79
259,uint8_t sem_release(volatile uint32_t *sem),100
260,Copyright (2020) Intel Corporation,3
261,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
262,static const __attribute__ ((aligned(4))) att_table_field_t unpacked[] = {,38
263,sdm_return_t pa_attestation_table_set(void *att_table_loc),81
264,Copyright (2020) Intel Corporation,3
265,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
266,bool pa_bitstream_flag_use_aliasl1_get(void),26
267,void pa_bitstream_flag_use_aliasl1_set(bool use_aliasl1),31
268,Copyright (2020) Intel Corporation,3
269,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
270,sdm_return_t pa_bre_handoff_ram_init(),58
271,void pa_bre_handoff_flags_write_test_scenario(pa_test_scenario_t scenario),87
272,static inline pa_tlv_type_t pa_convert_certificate_request_to_tlv_type(pa_certificate_request_t certificate_request),112
273,"uint32_t pa_get_certificate_from_tlv(uint8_t *buf,",156
274,pre_handoff_data_t get_re_handoff_data(),244
275,uint32_t get_re_handoff_data_test_flags(),254
276,pa_return_t pa_write_re_handoff_flag_certificates(pa_certificate_request_t certificate_request),267
277,uint32_t pa_read_re_handoff_flags(),299
278,void pa_init_re_handoff_flags(),309
279,Copyright (2020) Intel Corporation,3
280,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
281,"static pa_return_t get_bre_cert(pa_certificate_request_t request,",30
282,"static pa_return_t get_cmf_cert(pa_certificate_request_t request,",48
283,"pa_return_t pa_certificate_get(pa_certificate_request_t request,",100
284,Copyright (2020) Intel Corporation,3
285,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
286,static sdm_return_t fill_uid(),44
287,static sdm_return_t fill_subject(pa_keypair_t* subject),73
288,static sdm_return_t fill_authority(pa_keypair_t* issuer),119
289,static sdm_return_t fill_general_parameters(),149
290,static sdm_return_t sign(pa_keypair_t* issuer),168
291,sdm_return_t fill_cert_constants_alias(),186
292,"sdm_return_t fill_cert_constants_common(pa_keypair_t* issuer,",209
293,"uint32_t pa_certificate_generate(pa_certype_t cert_type,",273
294,Copyright (2020) Intel Corporation,3
295,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
296,static bool is_section_valid(desc_type_t desc_type),54
297,"static bool is_cvp_phase_1(const main_descriptor_t* const p_main_descriptor,",79
298,void pa_design_hash_init(),88
299,"pa_return_t pa_design_hash_update(const main_descriptor_t* const p_main_descriptor,",116
300,"sdm_return_t pa_design_hash_get(const crypto_context_t * const crypto_ctx,",219
301,bool pa_design_hash_is_valid(),306
302,"bool pa_design_hash_get_section_hash(desc_type_t desc_type, uint32_t* ptr, uint32_t ptr_len)",322
303,Copyright (2020) Intel Corporation,3
304,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
305,"static sdm_return_t get_efuse(pa_efuse_t* efuse, uint8_t* buffer, uint32_t buffer_length)",33
306,"sdm_return_t pa_efuse_get_user_opaque_fuses(uint8_t* buffer, uint32_t buffer_length)",58
307,"sdm_return_t pa_efuse_get_uid(uint8_t* buffer, uint32_t buffer_length)",70
308,bool pa_efuse_disable_aliasl1_get(void),75
309,Copyright (2020) Intel Corporation,3
310,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
311,void pa_entry_event(),38
312,sdm_return_t pa_exit_event(bool* skip_cmf),58
313,void pa_wipe_event(),115
314,Copyright (2020) Intel Corporation,3
315,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
316,"pa_return_t pa_evidence_get(uint8_t* buffer,",39
317,Copyright (2020) Intel Corporation,3
318,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
319,bool pa_adi_is_present(),68
320,void pa_provide_re_handoff_flags(re_handoff_flags_t re_handoff_flags),80
321,void pa_provide_re_handoff_data(re_handoff_data_t* re_handoff_data),92
322,bool pa_is_device_owned(),102
323,Copyright (2020) Intel Corporation,3
324,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
325,"static sdm_return_t create_keypair(pa_keypair_t* keypair,",106
326,sdm_return_t pa_key_create_firmware_keypair(pa_keypair_t* firmware_keypair),151
327,sdm_return_t pa_key_create_bkp_keypair(pa_keypair_t* bkp_keypair),168
328,static bool fill_alias_context(const crypto_context_t * const crypto_ctx),184
329,sdm_return_t pa_key_create_alias_keypair(pa_keypair_t* alias_keypair),214
330,"sdm_return_t pa_key_sign(pa_keypair_t* issuer,",240
331,"sdm_return_t pa_key_get_public_xy(pa_keypair_t* keypair,",316
332,"sdm_return_t pa_key_create_alias_private_key(const crypto_context_t * const crypto_ctx,",352
333,Copyright (2020) Intel Corporation,3
334,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
335,"int generate_alias_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",852
336,"int generate_bkp_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",943
337,"int generate_cert_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1021
338,@return the length of the certificate (in bytes) or -1 if there is an error,1054
339,"static int fill_certificate(const cert_variables_t * cert_vars, uint8_t * const buffer, uint32_t buffer_size, const cert_format_t * format) {",1056
340,"static uint32_t varlen_sum(const cert_format_t * format, const uint32_t * const locals, uint32_t index) {",1154
341,"static void write_asn1_length(uint8_t * ptr, uint32_t len) {",1172
342,static uint32_t get_asn1_lenlen(uint32_t len) {,1192
343,Copyright (2020) Intel Corporation,3
344,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
345,Copyright (2020) Intel Corporation,3
346,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
347,"int generate_alias_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",855
348,"int generate_bkp_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",947
349,"int generate_cert_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1025
350,@return the length of the certificate (in bytes) or -1 if there is an error,1058
351,"static int fill_certificate(const cert_variables_t * cert_vars, uint8_t * const buffer, uint32_t buffer_size, const cert_format_t * format) {",1060
352,"static uint32_t varlen_sum(const cert_format_t * format, const uint32_t * const locals, uint32_t index) {",1158
353,"static void write_asn1_length(uint8_t * ptr, uint32_t len) {",1176
354,static uint32_t get_asn1_lenlen(uint32_t len) {,1196
355,Copyright (2020) Intel Corporation,3
356,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
357,Copyright (2021) Intel Corporation,3
358,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
359,void anti_tamper_enable_status_set(uint32_t mask),106
360,uint32_t anti_tamper_enable_status_get(void),111
361,void anti_tamper_enable_status_clr(uint32_t mask),116
362,void anti_tamper_init_status_set(uint32_t mask),121
363,uint32_t anti_tamper_init_status_get(void),126
364,void update_anti_tamper_zerorization_mask(uint32_t mask),131
365,void anti_tamper_zerorization_status_set(uint32_t mask),136
366,void anti_tamper_set_vadc_ch_mask(uint32_t mask),142
367,uint32_t anti_tamper_get_vadc_ch_mask(void),147
368,uint32_t anti_tamper_get_num_vadc_ch(),152
369,static void anti_tamper_update_vadc_ch_mask(void),157
370,uint32_t anti_tamper_get_voltage_range(void),178
371,(the value has not being initialized) ATPR_TYPE_INVALID will be,186
372,atpr_response_type_t anti_tamper_get_global_enable(void),191
373,atpr_enable_t anti_tamper_get_fpga_enable(void),208
374,static bool is_atpr_voltage_valid(void),229
375,static bool is_atpr_temperature_valid(void),251
376,void validate_anti_tamper_table(void),270
377,STATIC bool is_valid_global_atpr_enable(void),291
378,sdm_return_t anti_tamper_table_init(const main_descriptor_t *main_descriptor),316
379,bool set_anti_tamper_table(,377
380,STATIC bool is_atpr_frequency_valid(void),469
381,bool anti_tamper_table_valid(void),494
382,void invalidate_anti_tamper_table(void),502
383,sdm_return_t anti_tamper_detection_init(void),512
384,uint32_t anti_tamper_reason_get(void),582
385,void anti_tamper_reason_set(uint32_t bit_position),592
386,void anti_tamper_reason_clr(uint32_t bit_position),604
387,STATIC void clear_anti_tamper_table(void),610
388,If s_anti_tamper_ctx is not valid (the value has not being initialized),639
389,atpr_enable_t anti_tamper_get_freq_det_enable(void),644
390,atpr_freq_t anti_tamper_get_frequency_range(void),662
391,If s_anti_tamper_ctx is not valid (the value has not being initialized),669
392,atpr_enable_t anti_tamper_get_temp_enable(void),674
393,(the value has not being initialized) ATPR_DISABLE will be returned,689
394,atpr_enable_t anti_tamper_get_voltage_enable(void),693
395,atpr_enable_t get_atpr_vccl_sdm_enable(void),709
396,STATIC atpr_enable_t get_atpr_vccl_enable(void),729
397,STATIC int32_t get_temp_sign_extension(uint32_t temp),748
398,int32_t anti_tamper_get_temp_upr_thold(void),771
399,int32_t anti_tamper_get_temp_lwr_thold(void),782
400,void anti_tamper_freq_det_handler(void),798
401,bool fpga_anti_tamper_detect_enabled(void),809
402,STATIC void anti_tamper_fpga_event_isr(void* context),825
403,STATIC sdm_return_t anti_tamper_fpga_detect_init(void),841
404,STATIC sdm_return_t anti_tamper_fpga_detect_enable(void),879
405,STATIC void anti_tamper_timer_isr(void* context),898
406,STATIC void anti_tamper_fpga_resp_done_isr(void* context),915
407,void anti_tamper_determine_response_result_pin_status(void),940
408,void anti_tamper_fpga_zerorize_request(void),956
409,void anti_tamper_update_boot_status(void),973
410,static bool is_anti_tamper_kill_reason_set(void),1009
411,void anti_tamper_disable_device(),1023
412,static void bbram_key_cleaning(void),1060
413,static void bbram_key_zeroization_check(crypto_context_t* crypto_ctx),1077
414,static void ukv_key_reg_cleaning(void),1089
415,static void ukv_key_cleaning(void),1102
416,static void ukv_key_zeroization_check(crypto_context_t* crypto_ctx),1120
417,static void efuse_key_reg_cleaning(void),1139
418,static sdm_return_t crypto_setup_for_key_zeroization(crypto_context_t* crypto_ctx),1153
419,void anti_tamper_key_cleaning(void),1220
420,void anti_tamper_key_zeroization(void),1260
421,Copyright (2019) Intel Corporation,3
422,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
423,void set_comb_feature_enable(uint32_t feature_enable),62
424,void clear_comb_feature_enable(void),71
425,"bool check_comb_feature_enable(uint32_t feature_enable, uint32_t bitmask)",76
426,"sdm_return_t config_get_main_sig_descs(comp_config_handle_t config_handle,",93
427,"sdm_return_t config_resume_bitstream(comp_config_handle_t config_handle,",363
428,Copyright (2020) Intel Corporation,3
429,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
430,"sdm_return_t bitstream_mod_prevention_check(crypto_context_t * crypto_ctx, const main_descriptor_t * main_descriptor)",46
431,Copyright (2019) Intel Corporation,3
432,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
433,static bool create_19x_handoff_data(void),121
434,"STATIC void config_drv_handles_for_authentication(comp_config_handle_t comp_config_handle,",153
435,static bool cmf_main_descriptor_valid(const main_descriptor_t *p_descriptor),179
436,main_descriptor_t* bitstream_parse_section_main_desc_get(void),263
437,signature_descriptor_t* bitstream_parse_section_sig_desc_get(void),268
438,"sdm_return_t parse_descriptors(comp_config_handle_t comp_handle,const main_descriptor_t *main_descriptor, const signature_descriptor_t *signature_descriptor)",273
439,"sdm_return_t cmf_validate_section_header(comp_config_handle_t comp_handle, const main_descriptor_t *p_m_descriptor, const signature_descriptor_t *p_s_descriptor)",310
440,"sdm_return_t bitstream_header_processing(comp_config_handle_t comp_config_handle,",354
441,"sdm_return_t bitstream_header_authenticate(comp_config_handle_t comp_config_handle,",875
442,"static uint32_t parse_main_descriptor(comp_config_handle_t comp_handle, const main_descriptor_t *main_descriptor)",954
443,"static sdm_return_t state_cmf_transition(const main_descriptor_t *p_main_header, const signature_descriptor_t *p_signature_descriptor)",1498
444,Copyright (2019) Intel Corporation,3
445,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
446,void bitstream_section_init(),64
447,sdm_return_t bitstream_advance(uint32_t size_bytes),71
448,void bitstream_num_sections_set(uint32_t sections),87
449,uint32_t bitstream_num_sections_get(void),91
450,void bitstream_num_sections_dec(void),95
451,void bitstream_ssbl_sync_block_set(bool s),103
452,bool bitstream_ssbl_sync_block_get(void),107
453,void bitstream_position_set(uint32_t pos),112
454,uint32_t bitstream_position_get(void),117
455,void bitstream_section_bytes_set(uint32_t size),122
456,uint32_t bitstream_section_bytes_get(void),127
457,uint32_t bitstream_fixed_count_get(void),137
458,uint32_t bitstream_fixed_flags_get(void),147
459,"sdm_return_t bitstream_fixed_add(uint32_t num_blocks, uint32_t flags)",164
460,sdm_return_t bitstream_fixed_remove(void),183
461,sdm_return_t bitstream_fixed_flow(comp_config_handle_t config_handle),203
462,"static sdm_return_t sdm_get_skip_data_block(comp_config_handle_t config_handle, uint32_t *p_action, in_buf_select_t fifo)",258
463,"static sdm_return_t sdm_get_action_block(comp_config_handle_t config_handle, uint32_t *p_action, bool hash_check)",311
464,"static sdm_return_t skip_config_data(comp_config_handle_t config_handle, uint32_t blocks)",380
465,"sdm_return_t bitstream_section(comp_config_handle_t config_handle,",447
466,"sdm_return_t crypto_skip_data(comp_config_handle_t config_handle, uint32_t blocks)",634
467,"void __attribute__ ((noinline)) check_action_block_error(sdm_return_t error_ret, uint32_t error_code)",704
468,void bitstream_source_cnoc_master(cnoc_handle_t cnoc_handle),41
469,"static sdm_return_t bitstream_source_dma_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",84
470,"static sdm_return_t bitstream_source_hps_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",92
471,"static sdm_return_t bitstream_source_fpga_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",107
472,"static sdm_return_t bitstream_source_cvp_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",118
473,"static sdm_return_t bistream_source_qspi_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",128
474,"static sdm_return_t bitstream_source_sdmmc_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",147
475,bitstream_control_t *bitstream_source_open(void),159
476,void bitstream_source_close( void ),239
477,void bitstream_source_point_to_main_section ( void ),282
478,This function wraps the QSPI bitstream_source_tart.start() so that we can make cmf_reload code shared by main CMF and trampoline,319
479,* Main CMF uses bitstream_source where QSPI read is achieved by calling start(),321
480,* ST CORE based app uses st_bitstream_source where QSPI read is done in two steps -- start() and get_data(),322
481,"void bitstream_source_qspi_read(cnoc_handle_t cnoc_handle, dma_handle_t dma_handle, uint32_t size)",329
482,bitstream_source_select_t bitstream_source_get(void),340
483,in_buf_src_sel_t bitstream_input_source_get(void),345
484,bitstream_source_select_t bistream_source_from_msel(void),350
485,void bitstream_source_set_qspi_cs(uint32_t qspi_cs),409
486,uint32_t bitstream_source_get_qspi_cs(void),414
487,Copyright (2019) Intel Corporation,3
488,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
489,sdm_return_t config_skip_ssbl_sync_block(comp_config_handle_t config_handle),32
490,Copyright (2017-18) Intel Corporation,3
491,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
492,void cmf_compatible_hash_get(hash_384_t * p_block0_sha),58
493,received with new CNT firmware(this only happens in development).,66
494,@param p_block0_sha is the SHA 384 of block 0 of the CMF(ssbl).,68
495,void cmf_compatible_hash_set(const hash_384_t * const p_block0_sha),72
496,bool cmf_compatible(const hash_384_t * const p_block0_sha),89
497,"sdm_return_t cmf_compatible_sha_compare(const uint32_t * const p_sha0, const uint32_t * const p_sha1, uint32_t size)",119
498,bool cmf_compatible_type(uint32_t type),144
499,static sdm_return_t cmf_compatible_bitstream_device_type_check(main_descriptor_t const * p_main_desc),169
500,static sdm_return_t cmf_compatible_bitstream_cmf_version_check(main_descriptor_t const * p_main_desc),221
501,sdm_return_t cmf_compatible_bitstream_hash_set(cmf_descriptor_t const * p_cmf_descriptor),271
502,sdm_return_t cmf_compatible_bitstream_check(main_descriptor_t const * p_main_desc),306
503,Copyright (2017-2020) Intel Corporation,3
504,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
505,"void cmf_mbox_get_designhash_hdlr(ALT_SDM_MBOX_SOURCE_t source,",78
506,"sdm_return_t cmf_designhash_set(const uint32_t* inp_designhash, uint32_t num_bytes)",135
507,void cmf_designhash_invalidate(void),159
508,Copyright (2020) Intel Corporation.,3
509,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
510,static void cmf_bkp_handlers_common_teardown(void),106
511,"void cmf_bkp_mbox_sigma_teardown_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",121
512,"Copyright (2017, 2018, 2019, 2020) Intel Corporation",3
513,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
514,"STATIC void cmf_reload_decomp_stub_run(uint32_t stub_entry, uint32_t r5, uint32_t r6,",110
515,cmf_reload_trampoline_load() function must have been called before this function,155
516,STATIC sdm_return_t cmf_reload_decomp_stub_load(uint32_t *load_addr),164
517,sdm_return_t cmf_reload_handle_init(void),244
518,void cmf_reload_handle_release(void),288
519,dma_handle_t cmf_reload_dma_handle_get(void),301
520,in_buf_handle_t cmf_reload_inbuf_handle_get(void),305
521,sha_handle_t cmf_reload_sha_handle_get(void),309
522,cnoc_handle_t cmf_reload_cnoc_handle_get(void),313
523,STATIC sdm_return_t relocate_tramp_dc(uint32_t *load_addr),324
524,"void cmf_reload_decomp_stub_load_and_run(uint32_t *load_addr, uint32_t stub_entry, uint32_t r5, uint32_t r6,",330
525,sdm_return_t cmf_reload_trampoline_init(uint32_t size),360
526,sdm_return_t cmf_reload_trampoline_load(const uint32_t * p_expected_hash),511
527,void pre_transition_cleanup(void),594
528,Copyright (2019-2020) Intel Corporation,2
529,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
530,"sdm_return_t cmf_sec_options_interpret_option_values(const uint32_t efuse_value,",112
531,sdm_return_t cmf_sec_options_init(const main_descriptor_t *p_main_descriptor),125
532,sdm_return_t cmf_sec_options_clear_bitstream_options(void),207
533,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",227
534,"sdm_return_t cmf_sec_options_get_bitstream_option(cmf_security_option_id_t sec_option_id,",298
535,"sdm_return_t cmf_sec_options_get_efuse_option(cmf_security_option_id_t sec_option_id,",358
536,"sdm_return_t cmf_sec_options_get_sticky_option(cmf_security_option_id_t sec_option_id,",446
537,"sdm_return_t cmf_sec_options_interpret_option_values(const uint32_t efuse_value,",475
538,Copyright (2019-) Intel Corporation,3
539,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
540,"@return: Returns SDM_SUCCESS(0) if init is successful, error code otherwise",62
541,sdm_return_t cmf_sigma_init(void),64
542,void cmf_sigma_finish(void),113
543,@param: ctx - pointer to a crypto context to associate with opened driver handles (any prior state is destroyed),127
544,sdm_return_t cmf_sigma_crypto_init(crypto_context_t *ctx),130
545,"@return: Returns SDM_SUCCESS(0) if magic word is correct, error code otherwise",211
546,"sdm_return_t cmf_sigma_process_teardown(const cmf_sigma_teardown_msg_t * const p_teardown_msg,",213
547,"@return: Returns SDM_SUCCESS(0) if message is successful processed and verified, error code otherwise",237
548,"sdm_return_t cmf_sigma_process_m1(const crypto_context_t * const crypto_ctx,",239
549,"@return: Returns SDM_SUCCESS(0) if session protocol key and mac data successfully generated, error code otherwise",353
550,"sdm_return_t cmf_sigma_assemble_m2_compute_protcol_key_and_mac(const crypto_context_t * const crypto_ctx,",355
551,"sdm_return_t cmf_sigma_fill_device_key_and_compute_shared_secret(const crypto_context_t* const crypto_ctx,",426
552,"@return: Returns SDM_SUCCESS(0) if data was collected and stored successfully, error code otherwise",513
553,"sdm_return_t cmf_sigma_assemble_m2_save_fw_data(const crypto_context_t * const crypto_ctx,",515
554,Copyright (2019) Intel Corporation,3
555,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
556,"sdm_return_t cnoc_return_interrupt(cnoc_handle_t handle, const uint32_t mask)",70
557,void check_sdm_ecc_error(void),223
558,void check_cnoc_return_interrupt(void),263
559,"void handle_int_request(const cnoc_addr_t cnoc_addr, const uint32_t * const p_response, const uint32_t size)",350
560,Copyright (2018) Intel Corporation,3
561,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
562,static clkmgr_oscclk_speed_t config_clock_get_oscclk_speed(uint32_t ext_ref_clk),57
563,static clkmgr_asclk_speed_t config_clock_get_asclk_speed(uint32_t asclk),97
564,sdm_return_t config_clock_open(void),170
565,void config_clock_close(void),192
566,"@param cpu_clk_flag if zero then this is @ref CLOCK_MODE_EXTERNAL, if 1 then cpu clock is using internal osc (either SECURE_EXT or INTOSC)",204
567,"sdm_return_t config_clock_setup_clocks(uint32_t cpu_clk_flag, uint32_t ext_ref_clk, uint32_t asclk , bool qspi_en)",213
568,sdm_return_t config_clock_update(clock_event_t event),319
569,static sdm_return_t config_clock_register_qspi_clock_change_callback(bool qspi_en),383
570,sdm_return_t config_clock_pre_qspi_clock_change(void),420
571,sdm_return_t config_clock_post_qspi_clock_change_no_flash(clkmgr_settings_t* new_settings),434
572,sdm_return_t config_clock_post_qspi_clock_change(clkmgr_settings_t* new_settings),455
573,"sdm_return_t config_clock_get_as_qspi_clk(uint32_t* asclk, uint32_t* qspi_clk)",470
574,"sdm_return_t set_qspi_int_osc(clkmgr_handle_t clkmgr_handle, qspi_handle_t qspi_handle)",504
575,static sdm_return_t config_clock_register_atpr_clock_change_callback(void),530
576,static sdm_return_t config_clock_pre_atpr_freq_clock_change(void),545
577,static sdm_return_t config_clock_post_atpr_freq_clock_change(clkmgr_settings_t* new_settings),562
578,clkmgr_handle_t config_clock_get_clkmgr_handle(void),590
579,sdm_return_t config_clock_freq_det_init(uint32_t tolerance),601
580,sdm_return_t config_clock_freq_det_disable(),635
581,sdm_return_t config_clock_freq_det_enable(),652
582,"source code (""Material"") are owned by Intel Corporation or its suppliers or",3
583,static sdm_return_t send_cnt_mutlicast_enable(cnoc_handle_t handle),34
584,sdm_return_t cnt_deassert_tx_int_multicast(void),123
585,sdm_return_t cnt_warm_reset_multicast(void),156
586,static sdm_return_t wait_for_cnoc_interrupt(cnoc_handle_t  handle),192
587,sdm_return_t config_cnoc_sector_zero_check(cnoc_handle_t  handle),231
588,sdm_return_t config_cnoc_user_reg_clear(cnoc_handle_t  handle),279
589,sdm_return_t config_cnoc_init(void),323
590,Copyright (2020) Intel Corporation,3
591,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
592,It can be set in packet_add() or in SHA_ISR(). When set in packet_add(),46
593,it must be guaranteed that SHA_ISR() cannot occur at that time.,47
594,static inline bool cvp_aib_addr_valid(void),53
595,const cnoc_addr_t cvp_aib_cnoc_addr_get(void),62
596,void cvp_aib_cnoc_addr_invalidate(void),71
597,sdm_return_t cvp_aib_protect_mask_set(const uint32_t mask),76
598,"static sdm_return_t int_wait_stk_spin(cnoc_handle_t handle, uint32_t retry,",135
599,static inline sdm_return_t int_wait_stk_assert_spin(,151
600,static inline sdm_return_t int_wait_stk_deassert_spin(,157
601,"static sdm_return_t int_wait_raw(cnoc_handle_t handle, uint32_t retry,",164
602,static inline sdm_return_t int_wait_raw_assert_sleep(,199
603,static inline sdm_return_t int_wait_raw_assert_spin(,205
604,static inline sdm_return_t int_wait_raw_deassert_sleep(,211
605,static inline sdm_return_t int_wait_raw_deassert_spin(,217
606,"static sdm_return_t issue_cvp_done (cnoc_handle_t handle, uint32_t state)",229
607,This function is invoked in either ISR (SHA ISR) or,405
608,non-ISR (Packet_add) context. It is interrupt safe because,406
609,void cmf_config_cvp_issue_single_credit(cnoc_handle_t handle),412
610,"sdm_return_t cmf_config_cvp_aib_credits_send(const cnoc_handle_t cnoc_handle, const uint32_t nCredits)",437
611,"sdm_return_t cmf_config_cvp_transfer_close(const cnoc_handle_t cnoc_handle,",530
612,Copyright (2020) Intel Corporation,3
613,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
614,"static cfg_dma_handlers_t g_config_dma_hdlr = { (dma_handle_t)SDM_HANDLE_INVALID,",43
615,"static sdm_return_t write_qspi_descriptors_set( dma_handle_t dma_handler ,",60
616,"static sdm_return_t cfg_qspi_descriptors_set( dma_handle_t dma_handler ,",62
617,static uint32_t get_words_to_write(void),81
618,"static sdm_return_t write_qspi_descriptors_set( dma_handle_t dma_handler ,",110
619,"static sdm_return_t cfg_qspi_descriptors_set( dma_handle_t dma_handler ,",173
620,static void config_dma_isr (void * isr_contex),236
621,static void config_dma_hps_isr (void * isr_contex),367
622,void register_config_dma_isr(CONFIG_DMA_SOURCE_t source),392
623,void disable_config_dma_isr(void),406
624,static sdm_return_t dma_read_from_qspi_start( uint32_t words_2_read ),412
625,uint32_t qspi_cfg_remaining_desc_get(void),445
626,void qspi_cfg_remaining_desc_reset(void),450
627,bool qspi_cfg_read_inprogress_get(void),455
628,bool qspi_cfg_read_error_get(void),462
629,sdm_return_t qspi_cfg_start (uint32_t bytes_2_read),475
630,void config_dma_flash_add_update(uint32_t address),511
631,uint32_t config_dma_get_flash_addr(void),516
632,bool config_qspi_error_in_bootarea(void),521
633,sdm_return_t  config_dma_qspi_config_open(qspi_dvr_param_t * p_dvr_params ),535
634,sdm_return_t config_dma_qspi_close(void),588
635,void  config_dma_clear_context_data(void),615
636,void config_dma_handler_update(dma_handle_t dma_h),632
637,void qspi_fwrite_dma_handler_update(dma_handle_t dma_handle),638
638,qspi_handle_t config_dma_qspi_handle_get( void ),643
639,"sdm_return_t config_dma_add_descriptor(uint32_t addr, uint32_t len, uint8_t id, uint32_t burst, bool irq)",648
640,void config_dma_start_dma_if_stopped(void),668
641,static uint32_t next_in_buf_read( void ),678
642,static uint32_t inbuf_next_section_update_get(void),690
643,static sdm_return_t inbuf_next_transaction_start(uint32_t in_buf_bytes),700
644,static sdm_return_t qspi_write_next_transaction_start(void),713
645,static void qspi_write_fast_tear_down(void),738
646,static void qspi_cfg_tear_down(void),750
647,"sdm_return_t qspi_write_fast_start( in_buf_handle_t in_buf_handler, dma_handle_t dma_handler,  uint32_t bytes_2_write )",760
648,sdm_return_t config_dma_qspi_not_config_open(config_dma_hdlr_owner_t owner),823
649,bool config_dma_qspi_opened(void),842
650,void config_dma_wipe_tear_down(void),854
651,config_dma_hdlr_owner_t config_dma_get_owner(void),887
652,sdm_return_t config_dma_update_owner(config_dma_hdlr_owner_t owner),897
653,bool qspi_write_fast_inprogress_get(void),915
654,bool config_ddma_is_qspi_config_en(void),920
655,Copyright (2020) Intel Corporation,3
656,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
657,static void gpio_isr(void * context),35
658,sdm_return_t gpio_enable_clock_divider(),91
659,sdm_return_t gpio_setup_pin_monitoring(uint32_t pin),107
660,void gpio_setup_irq(),127
661,Copyright (2020) Intel Corporation,3
662,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
663,STATIC cmf_iid_puf_act_status_t g_user_puf_act_status = (cmf_iid_puf_act_status_t)0xFFFFFFFF; ,76
664,"sdm_return_t cmf_iid_puf_act_help_data_integrity_check(const crypto_context_t* const ctx, cmf_iid_puf_enroll_help_data_t *help_data_ptr)",91
665,@brief This function update the status of the activation status for PUF (USER or UDS),125
666,"static void cmf_iid_puf_update_act_status(iid_puf_type_t iid_puf_type, cmf_iid_puf_act_status_t act_status)",130
667,@param iid_puf_type input parameter to indicate which IID_PUF type (User or UDS),150
668,"sdm_return_t cmf_iid_puf_act_read_help_data(const crypto_context_t *const ctx, cmf_type_t cmf_type, uint32_t *data_block, iid_puf_type_t iid_puf_type)",158
669,@param iid_puf_type input parameter to indicate which IID_PUF type (User or UDS) ,387
670,"sdm_return_t cmf_iid_puf_act_activate(crypto_context_t* const ctx,",391
671,"sdm_return_t cmf_iid_puf_act_first_boot_puf_activate(crypto_context_t* const ctx, cmf_type_t cmf_type)",542
672,uint32_t cmf_iid_puf_act_get_main_puf_offset0(),598
673,uint32_t cmf_iid_puf_act_get_main_puf_offset1(),603
674,sdm_return_t update_main_puf_offset0_offset1_addr(),608
675,sdm_return_t cmf_iid_puf_act_clear_puf_root_key(void),623
676,Copyright (2020) Intel Corporation,3
677,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
678,"static sdm_return_t cmf_iid_puf_enroll_sign_iid_puf_key(const crypto_context_t *const ctx, ecp_keypair_t *puf_key_pair)",73
679,"static sdm_return_t cmf_iid_puf_enroll_generate_puf_pubkey(const crypto_context_t *const ctx, cmf_384b_pubkey_t *puf_pubkey)",134
680,static sdm_return_t cmf_iid_puf_enroll_double_sign_efuse_puf_key(const crypto_context_t  *const ctx),202
681,static void cmf_iid_puf_enroll_mask_ult_aes_efuse(void),288
682,static sdm_return_t cmf_iid_puf_enroll_generate_attest_certificate(const crypto_context_t *const ctx),314
683,sdm_return_t cmf_iid_puf_enroll_assemble_help_data(const crypto_context_t *const ctx),358
684,"void cmf_iid_puf_enroll_user_cmd_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",390
685,Copyright (2019-2020) Intel Corporation,3
686,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
687,"sdm_return_t dma_to_nsp_ram(const crypto_context_t* const ctx, uint32_t * p_data)",73
688,"static sdm_return_t cmf_iid_puf_wrap_derive_user_aes_key(const crypto_context_t * const ctx, ",218
689,"static sdm_return_t cmf_iid_puf_wrap_crypt_aes(const crypto_context_t * const ctx, uint32_t* const aes_root_key, uint32_t* iv, cmf_key_t* user_aes_aes_key, cmf_key_t* output_key, uint32_t* p_data, bool is_wrap)",321
690,"static sdm_return_t cmf_iid_puf_wrap_mac_derivation(const crypto_context_t* const ctx, cmf_key_t* user_aes_hmac_key, uint32_t *const input_wrapped_data, uint32_t* const mac_output_data)",422
691,"sdm_return_t cmf_iid_puf_wrap_user_aes_key_wrap(const crypto_context_t* const ctx, ",468
692,"static sdm_return_t cmf_iid_puf_wrap_user_aes_key_unwrap(const crypto_context_t* const ctx, ",544
693,"static sdm_return_t cmf_iid_puf_wrapped_aes_data_integrity_check(const crypto_context_t* const ctx, cmf_iid_puf_wrapped_aes_key_data_t *wrapped_key_data_ptr)",636
694,"static sdm_return_t cmf_config_aes_read_puf_wrapped_key(const crypto_context_t* const ctx, uint32_t *data_block)",679
695,"sdm_return_t cmf_config_aes_puf_unwrap_key(const crypto_context_t* const ctx, cmf_key_id_t *unwrapped_key_slot)",826
696,static void inbuf_drain_mgr_fifo_entry_init(fifo_entry_t * entry),57
697,"inbuf_drain_mgr_handle_t inbuf_drain_mgr_open(in_buf_handle_t inbuf, hash_mgr_handle_t hash_mgr)",66
698,sdm_return_t inbuf_drain_mgr_close(inbuf_drain_mgr_handle_t handle),104
699,static uint32_t fifo_ptr_increment(uint32_t ptr),124
700,"sdm_return_t inbuf_drain_mgr_add_data(inbuf_drain_mgr_handle_t handle, in_buf_select_t route, uint32_t size_dwords, uint32_t * calculated_hash)",144
701,"static sdm_return_t inbuf_drain_mgr_check_hash_queue(inbuf_drain_mgr_handle_t handle, bool check_cpu_blocks){",170
702,"static sdm_return_t inbuf_drain_mgr_drain_data_helper(inbuf_drain_mgr_handle_t handle, in_buf_select_t route, uint32_t size_dwords, hash_policy_t hash_policy)",226
703,uint32_t inbuf_drain_mgr_validated_blocks_get(inbuf_drain_mgr_handle_t handle){,314
704,"sdm_return_t inbuf_drain_mgr_drain_data(inbuf_drain_mgr_handle_t handle, in_buf_select_t route, uint32_t size_dwords)",319
705,"sdm_return_t inbuf_drain_mgr_dispose_data(inbuf_drain_mgr_handle_t handle, in_buf_select_t route, uint32_t size_dwords)",332
706,"sdm_return_t inbuf_drain_mgr_drain_data_skip_hashcheck(inbuf_drain_mgr_handle_t handle, in_buf_select_t route, uint32_t size_dwords)",346
707,sdm_return_t inbuf_drain_mgr_clean_calculated(inbuf_drain_mgr_handle_t handle),360
708,in_buf_select_t inbuf_drain_mgr_get_current_route(inbuf_drain_mgr_handle_t handle){,389
709,"inbuf_fill_mgr_handle_t inbuf_fill_mgr_open(in_buf_handle_t inbuf, bitstream_control_t* source,",38
710,"sdm_return_t inbuf_fill_mgr_get_data(inbuf_fill_mgr_handle_t handle, uint32_t size_in_bytes){",69
711,in_buf_select_t inbuf_fill_mgr_get_current_route(inbuf_fill_mgr_handle_t handle){,110
712,sdm_return_t inbuf_fill_mgr_close(inbuf_fill_mgr_handle_t handle){,122
713,static uint32_t routes_fifo_ptr_increment(uint32_t ptr){,138
714,"sdm_return_t routes_enqueue(inbuf_fill_mgr_handle_t handle, in_buf_select_t route){",147
715,bool routes_empty(inbuf_fill_mgr_handle_t handle),165
716,uint32_t routes_enqueue_available(inbuf_fill_mgr_handle_t handle){,180
717,static in_buf_select_t routes_dequeue(),187
718,Copyright (2017) Intel Corporation,3
719,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
720,uint32_t mbox_get_alloc_buf_count(void),85
721,void mbox_set_alloc_buf_count(uint32_t count),90
722,static bool alt_sdm_mbox_msg_ptr_is_valid(const mbox_msg_t * const ptr_to_chk),100
723,bool alt_sdm_mbox_is_config_busy(void),117
724,static bool alt_sdm_is_special_commad(mbox_msg_t * message),154
725,void alt_sdm_mbox_restart_cancel(ALT_SDM_MBOX_SOURCE_t client),186
726,void alt_sdm_mbox_command_handler(mbox_msg_t *pmsg),224
727,mbox_msg_t * alt_sdm_mbox_message_alloc(ALT_SDM_MBOX_SOURCE_t client),384
728,void alt_sdm_mbox_message_free(mbox_msg_t * pmsg),416
729,mbox_msg_t * alt_sdm_mbox_message_get(void),493
730,"int32_t alt_sdm_mbox_message_init(mbox_cmd_t const * const mbox_commands, uint32_t num_commands)",523
731,int32_t alt_sdm_mbox_message_put(mbox_msg_t * message),578
732,static void alt_sdm_mbox_message_queue_init(message_queue_t *p_queue),635
733,"static int32_t alt_sdm_mbox_message_queue_fifo_add(message_queue_t *p_queue, mbox_msg_t *p_msg)",650
734,"static int32_t alt_sdm_mbox_message_queue_lifo_add(message_queue_t *p_queue, mbox_msg_t *p_msg)",687
735,static mbox_msg_t * alt_sdm_mbox_message_queue_get(message_queue_t *p_queue),727
736,bool cmd_needs_big_buf_on_input(uint32_t hdr),761
737,bool cmd_needs_big_buf_only_on_input(uint32_t hdr),790
738,Copyright (2017-2018) Intel Corporation,3
739,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
740,void alt_sdm_jtag_disable_main_int(void),59
741,/*! global flag to skip response after conmmand done (used with HPS reconfig_data cmd) */,97
742,"static sdm_return_t post_event_to_mbox_hw_mgr(OS_FLAG_GRP *fg, OS_FLAGS flags)",130
743,"static void mbox_task_anti_dos_decr_tmr_cb(void *p_tmr, void *p_arg)",166
744,static sdm_return_t mbox_task_start_anti_dos_decr_tmr(void),192
745,static sdm_return_t purge_mbox_task_commands (void),230
746,sdm_return_t post_anti_tamper_event(),270
747,void handle_special_command(mbox_msg_t *mbox_msg),295
748,void MBOX_task(void *pdata),350
749,sdm_return_t post_event_and_phase1_wipe_notification(uint32_t msg_id),565
750,sdm_return_t mbox_task_init(void),616
751,void mbox_hps_set_skip_resp(bool skip),690
752,Copyright (2021) Intel Corporation,3
753,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
754,sdm_return_t nconfig_assert_isr_handler (void),54
755,sdm_return_t nconfig_deassert_isr_handler (void),73
756,Copyright (2018) Intel Corporation,3
757,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
758,/* Following header file shall provide bitstream_parse_section_main_desc_get() and bitstream_parse_section_sig_desc_get(),37
759,STATIC void persistent_init_update_id(void),201
760,"static bool cmf_efuse_magic_number_is_valid(uint32_t bank, uint32_t magic)",211
761,STATIC sdm_return_t persistent_efuse_init(const br_shared_t *p_br_shared),230
762,"static void persistent_init_intel_and_user_pubkey_ids(bool first_boot, uint32_t id)",261
763,"static void persistent_init_version_105_fields(bool first_boot, uint32_t id)",282
764,"static void persistent_init_version_108_fields(bool first_boot, uint32_t id)",307
765,"static void persistent_init_version_109_fields(bool first_boot, uint32_t id)",320
766,"static void persistent_init_version_110_fields(bool first_boot, uint32_t id)",341
767,"static void persistent_init_version_111_fields(bool first_boot, uint32_t id)",349
768,"static void persistent_init_version_112_fields(bool first_boot, uint32_t id)",360
769,"static void persistent_init_efuse_write_disabled_cache_modified(bool first_boot, uint32_t id)",368
770,"sdm_return_t persisent_adjust_main_section_ptr(uint64_t dest_addr, uint32_t ptr_num)",413
771,void persistent_rsu_cmf_prev_addr_clear(void),453
772,static void persistent_init_handoff_ptr(void),464
773,void persistent_upgrade_from_handoff(void),473
774,sdm_return_t persistent_init(void),496
775,sdm_return_t persistent_secondary_init(),652
776,uint32_t cmf_persistent_njp_status_get(void),701
777,void persistent_rsu_log_update(void),706
778,void persistent_rsu_notify_update(void),732
779,void persistent_rsu_log_clear(void),747
780,void persistent_rsu_log_update_flash_version(bool is_dcmf),764
781,void persistent_rsu_err_cmf_clear(void),789
782,void persistent_rsu_mbox_event_clear(void),799
783,void persistent_rsu_cmf_prev_addr_update(void),813
784,uint8_t persistent_get_rsu_pin_role(void),828
785,"void persistent_rsu_error_log_update_dcmf(uint32_t dcmf_error_state, uint32_t err_addr_high, uint32_t err_addr_low)",833
786,"void persistent_rsu_clocks_update(uint32_t int_osc_en, uint32_t osc_clk_freq, uint32_t as_clk)",854
787,void persistent_rsu_handoff_clear(void),872
788,bool persistent_rsu_retry_curr_image(void),884
789,void persistent_rsu_curr_retry_counter_reset(void),896
790,uint32_t persistent_get_as_clk(void),905
791,"void persistent_rsu_pin_update(uint32_t new_pin_idx, uint8_t new_pin_role)",910
792,uint32_t persistent_get_rsu_pin_idx(void),916
793,sdm_return_t persistent_rsu_curr_retry_counter_increment(void),921
794,uint32_t persistent_get_osc_clk_flag(void),934
795,void persistent_rsu_max_retry_set(uint32_t dcio_max_retry),939
796,uint32_t persistent_get_osc_clk_freq(void),955
797,uint32_t persistent_rsu_max_retry_get(void),962
798,uint32_t persistent_rsu_curr_retry_counter_get(void),967
799,uint8_t persistent_get_efuse_physical_fuse_burned(void),972
800,void persistent_set_efuse_physical_fuse_burned(void),981
801,uint8_t persistent_get_efuse_physical_pubkey_burned(void),990
802,void persistent_set_efuse_physical_pubkey_burned(void),999
803,"sdm_return_t cmf_persisent_adjust_main_section_ptrs(uint32_t dest_addr, uint32_t src_addr)",1009
804,sdm_return_t persistent_init_wdt(wdt_t *wdt),1075
805,sdm_return_t persistent_get_wdt(wdt_t *wdt),1093
806,void persistent_save_bootstatus_95_64_cmf(void),1112
807,uint32_t persistent_get_rom_version(void),1127
808,bool persistent_get_efuse_cache_modified(void),1148
809,void persistent_set_efuse_cache_modified(bool new_val),1157
810,void persistent_disable_efuse_writes(void),1166
811,bool persistent_get_efuse_write_disabled(void),1175
812,sdm_return_t persistent_set_security_version(uint32_t security_version),1184
813,uint32_t persistent_get_security_version(void),1201
814,bool persistent_get_aes_root_key_virtual_mode(void),1210
815,void persistent_set_aes_root_key_virtual_mode(void),1219
816,"void persistent_set_pubkey_id(uint32_t root_key, uint32_t pubkey_id)",1228
817,uint32_t persistent_get_pubkey_id(uint32_t root_key),1249
818,uint32_t persistent_get_msel_hardware(),1265
819,uint32_t persistent_get_msel_used(),1275
820,void persistent_handle_failed_flash_img(void),1284
821,void persistent_set_flash_image(uint32_t slot_number),1301
822,void persistent_rsu_flags_update(rsu_flags_t  new_flags),1313
823,void persistent_handoff_rsu_err_cmf_update(void),1322
824,"sdm_return_t persistent_params_set(const cmf_br_header_t * p_cmf_br_header,",1332
825,uint32_t persistent_get_rsu_error_log_config_state(void),1351
826,"void persistent_rsu_update_handoff_with_pointers(uint32_t subpart0_ptr_high,",1356
827,void persistent_rsu_log_clear_version(void),1367
828,"sdm_return_t persistent_update_decision_pointers(uint64_t spt0_addr, uint64_t spt1_addr,",1380
829,"void persistent_rsu_error_addr_update(uint32_t cmf_addr_high, uint32_t cmf_addr_low)",1410
830,bool persistent_rsu_is_cmf_curr_match_prev_addr(void),1416
831,@param [untrusted] mask Each bit (8 bits total) indicates one particular flag (refer @see hps_config_flags definition in persistent.h),1433
832,bool persistent_get_hps_config_flag(uint8_t mask),1437
833,@param [untrusted] mask Each bit (8 bits total) indicates one particular flag (refer @see hps_config_flags definition in persistent.h),1448
834,"void persistent_set_hps_config_flag(uint8_t mask, bool enable)",1454
835,void persistent_set_virtual_kill(bool new_value),1471
836,bool persistent_get_virtual_kill(void),1479
837,Copyright (2019) Intel Corporation,3
838,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
839,static uint32_t pin_table_to_io(uint32_t idx),166
840,static uint32_t pin_table_to_gpio(uint32_t idx),197
841,"sdm_return_t pin_table_assert(uint32_t idx, bool assert)",229
842,sdm_return_t pin_table_assert_conf_done(bool assert),274
843,sdm_return_t pin_table_assert_init_done(bool assert),279
844,void pin_table_assert_hps_reset(bool assert),292
845,void pin_table_assert_tamper_event(bool assert),321
846,void pin_table_assert_tamper_zerorized(bool assert),342
847,sdm_return_t pin_table_init(pin_table_t *pin_table),358
848,bool pin_table_valid(),705
849,"sdm_return_t pin_table_pin_set(uint8_t role, uint32_t assert)",710
850,void update_nstatus_pin(uint32_t nstatus_pin),749
851,bool validate_pin_table_idx(uint32_t table_idx),762
852,uint32_t pin_function_get_gpio_input(uint32_t gpio_idx),779
853,uint32_t get_gpio_idx_hps_reset(void),793
854,uint32_t get_table_idx_hps_reset(void),802
855,uint8_t pin_function_role_get(uint32_t sdm_pin_idx),807
856,"void update_DATAUNLOCK(uint32_t data_unlock, bool assert){",824
857,void pin_table_assert_tamper_event(bool assert),856
858,void pin_table_assert_tamper_response_result(bool assert),877
859,Copyright (2019) Intel Corporation,3
860,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
861,"uint8_t pmf_initialize_itd(uint32_t* efuse_vid_raw, itd_state_t* itd_state, itd_fuse_params_t* itd_fuse_params, itd_constraint_t itd_constraint, uint16_t device_vid_mv)",33
862,Copyright (2019) Intel Corporation,3
863,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
864,pmf_status_t pmf_state_update(pmf_state_event_t event),110
865,pmf_status_t pmf_state_update(pmf_state_event_t event),141
866,pmf_state_t get_pmf_state(void),911
867,bool check_format_calculations(const power_table_t *power_table),919
868,static bool pmf_bypass_check(const power_table_t *power_table),966
869,"uint16_t mvolt_to_pmbus_linear(uint16_t voltage_mv, int16_t exponent)",993
870,"uint16_t pmbus_linear_to_mvolt(uint16_t voltage_v, int16_t exponent)",1016
871,"uint16_t pmbus_direct_to_mvolt(uint16_t voltage_v, direct_coefficients_t* coefficients)",1047
872,"uint16_t mvolt_to_pmbus_direct(uint16_t voltage_mv, direct_coefficients_t* coefficients)",1085
873,Copyright (2019) Intel Corporation,4
874,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
875,uint16_t pmf_get_device_vid_voltage(uint32_t * efuse_vid_raw),37
876,Copyright (2021) Intel Corporation,3
877,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
878,bool puf_device_owned_check(puf_type_t puf_type),34
879,Copyright (2019-) Intel Corporation,3
880,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
881,bool sdm_attest_enabled(void),53
882,void sdm_attest_enable(void),62
883,void sdm_attest_disable(void),71
884,"@return: Returns SDM_SUCCESS(0) if message is successful processed and verified,",87
885,"sdm_return_t sdm_attest_process_m1(const crypto_context_t * const crypto_ctx,",90
886,"@return: Returns SDM_SUCCESS(0) if message is successful processed and verified,",130
887,"STATIC sdm_return_t sdm_attest_generate_attestation_root_key(const crypto_context_t * const crypto_ctx,",133
888,"@return: Returns SDM_SUCCESS(0) if message is successful processed and verified,",226
889,"STATIC sdm_return_t sdm_attest_generate_attestation_sub_key(const crypto_context_t * const crypto_ctx,",229
890,"static sdm_return_t sdm_attest_assemble_m2(uint32_t resp_magic, const crypto_context_t * const crypto_ctx,",311
891,"@return: Returns SDM_SUCCESS(0) if message is successful processed and verified,",568
892,"sdm_return_t sdm_attest_assemble_m2_create_subkey_response(const crypto_context_t * const crypto_ctx,",571
893,"@return: Returns SDM_SUCCESS(0) if message is successful processed and verified,",585
894,"sdm_return_t sdm_attest_assemble_m2_get_measurements_response(const crypto_context_t * const crypto_ctx,",588
895,Copyright (2017-2018) Intel Corporation,3
896,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
897,void cmf_auth_set_sec_owner_authorized(bool is_sec_owner_authorized),128
898,static bool cmf_auth_get_sec_owner_authorized(void),139
899,STATIC sdm_return_t sdm_auth_config_hw_resources(const crypto_context_t *const p_crypto_context),148
900,STATIC sdm_return_t sdm_auth_hw_cleanup(const crypto_context_t *const p_crypto_context),176
901,uint32_t cmf_authenticate_get_root_hash_id(),187
902,uint32_t cmf_authenticate_get_user_pubkey_cancel_mask(),192
903,uint32_t cmf_authenticate_get_svn_a_counter(),197
904,uint32_t cmf_authenticate_get_svn_b_counter(),202
905,uint32_t cmf_authenticate_get_svn_c_counter(),207
906,uint32_t cmf_authenticate_get_svn_d_counter(),212
907,uint32_t cmf_authenticate_get_pts_counter(),217
908,bool cmf_authenticate_get_is_sec_owner(),228
909,"@return: Returns CMF_AUTH_SUCCESS(0) if authentication is successful, ",240
910,"uint32_t cmf_authenticate(const signature_descriptor_t *const p_signature_desc,",248
911,"@return: Returns CMF_AUTH_SUCCESS(0) if certificate authentication is successful, ",437
912,"uint32_t cmf_authenticate_cert(const signature_descriptor_t *const p_signature_desc,",445
913,"@return: Returns CMF_AUTH_SUCCESS(0) if certificate authentication is successful, ",574
914,"uint32_t cmf_authenticate_cmd_cert( const void     *const p_cmd_cert,",579
915,"@return: Returns CMF_AUTH_SUCCESS(0) if certificate authentication is successful, ",726
916,"uint32_t cmf_authenticate_data( const void     *const p_data,",729
917,"@return: Returns CMF_AUTH_SUCCESS(0) if certificate authentication is successful, ",830
918,"uint32_t cmf_verify_signature(  const void            *const p_data,",833
919,void cmf_auth_context_reset(void),887
920,"uint32_t cmf_auth_find_valid_keychain(const signature_descriptor_t *const p_signature_desc,",905
921,"uint32_t cmf_auth_process_keychain(const void     *const p_data,",1080
922,"uint32_t cmf_auth_process_root_key_entry(const root_entry_t *const p_root_entry,",1353
923,"uint32_t cmf_auth_process_multi_root_key_entry(const root_entry_t *const p_root_entry,",1525
924,"static uint32_t cmf_auth_process_public_key_policy(const uint32_t kak_cancel,",1911
925,"uint32_t cmf_auth_process_public_key_entry(const pubkey_entry_t *const p_pubkey_entry,",2013
926,"uint32_t cmf_auth_process_signed_data_entry(const signed_data_entry_t *const p_signed_data_entry,",2312
927,"static uint32_t cmf_auth_get_word_msb(uint32_t *p_data, uint32_t n)",2441
928,"static uint32_t cmf_auth_get_byte_msb(uint8_t *p_data, uint32_t n)",2469
929,"static uint32_t cmf_auth_rotate_right(uint32_t n, uint32_t b)",2497
930,"bool cmf_auth_key_cancel(const uint32_t cancellation,",2502
931,"bool cmf_auth_key_cancel(const uint32_t cancellation,",2682
932,"uint32_t cmf_auth_verify_signature(const cmf_auth_key_type_t    *const p_signing_pubkey,",2776
933,Copyright (2017-2018) Intel Corporation,3
934,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
935,void set_auth_is_engr_key(bool is_engr_key) {,57
936,bool get_auth_is_engr_key() {,62
937,"static uint32_t key_hash_compare(cmf_auth_hash_type_t rootkey_hash,",67
938,"uint32_t verify_key(cmf_auth_hash_type_t rootkey_hash,",85
939,"uint32_t verify_multi_key(const root_entry_t *const p_root_entry,",126
940,Copyright (2017-2018) Intel Corporation,3
941,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
942,void set_auth_is_engr_key(bool engr_key) {,39
943,bool get_auth_is_engr_key() {,44
944,"static uint32_t verify_root_key(cmf_auth_hash_type_t rootkey_hash,",49
945,"uint32_t verify_key(cmf_auth_hash_type_t rootkey_hash,",66
946,"uint32_t verify_multi_key(const root_entry_t *const p_root_entry,",75
947,"Copyright (2017, 2018) Intel Corporation",3
948,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
949,void sdm_bootrom_isr_register(void (*isr)(void)),63
950,bool sdm_bootrom_first_boot(void),68
951,sdm_return_t sdm_bootrom_info_init(const signature_descriptor_t *signature_desc),80
952,"sdm_return_t sdm_bootrom_main_section_add_update( const signature_descriptor_t *signature_desc, const cmf_rsu_data_t rsu_data, const uint32_t bitstream_size )",117
953,uint32_t sdm_bootrom_main_section_add_get( void ),193
954,const altr_common_fw_data_t * sdm_bootrom_fw_data_get(void),204
955,const br_shared_t * sdm_bootrom_shared_get(void),257
956,Copyright (2017) Intel Corporation,3
957,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
958,We need double dimensional array to hold values for different channels or programming (HPS/FPGA/JTAG/SDM) */,42
959,"void sdm_cfg_status_reconfig_set(uint8_t mbox_id, ALT_SDM_MBOX_SOURCE_t mbox_client)",59
960,void sdm_cfg_status_reconfig(bool enable),81
961,bool sdm_cfg_status_get_reconfig_flag(),90
962,void sdm_cfg_status_init(void),99
963,"bool is_valid_recfg_status_avail(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t expected_id)",131
964,"uint32_t sdm_reconfig_status_get(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t expected_id, uint32_t index)",151
965,void sdm_cfg_status_set_state(uint32_t val),173
966,uint32_t sdm_cfg_status_get_state(void),183
967,void sdm_cfg_status_set_version(uint32_t val),193
968,uint32_t sdm_cfg_status_get_version(void),203
969,void sdm_cfg_status_set_softstat(uint32_t val),213
970,uint32_t sdm_cfg_status_get_softstat(void),223
971,@brief same as function sdm_cfg_status_get_softstat() but returns latest device status from channel independent global g_mbox_cfg_status,229
972,uint32_t sdm_cfg_status_get_device_softstat(void),232
973,void sdm_cfg_status_set_cfgpos(uint32_t val),242
974,uint32_t sdm_cfg_status_get_cfgpos(void),252
975,void sdm_cfg_status_set_errdetail(uint32_t val),262
976,uint32_t sdm_cfg_status_get_errdetail(void),272
977,void sdm_config_status_reset(uint32_t cfgstat_state),283
978,@param  flash_idx is the current flash image index in use (boot from flash) ,294
979,"void sdm_config_status_update(uint32_t cfgstat_state, uint32_t flash_idx, uint32_t cfgpos, uint32_t errdetail)",299
980,"static void sdm_cfg_status_set(uint32_t value, uint32_t index)",316
981,static uint32_t sdm_cfg_status_get(uint32_t index),332
982,The idea here is that multiple channels can request reconfig (HPS/FPGA/AVST/JTAG) and when we have a reconfig_status request we send the,346
983,5-CNOCADDR(Err Details),358
984,"static void sdm_reconfig_status_set(uint32_t value, uint32_t index)",362
985,Copyright (2019) Intel Corporation,3
986,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
987,void sdm_dead_loop(uint32_t error_code),39
988,Copyright (2020) Intel Corporation,3
989,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
990,sdm_return_t sdm_save_fw_build_string(const cmf_descriptor_t *const p_cmf_descriptor),63
991,"sdm_return_t sdm_get_fw_build_string(uint32_t *p_fw_build_string, uint32_t string_size)",87
992,sdm_return_t sdm_save_fw_security_version(const cmf_descriptor_t *const p_cmf_descriptor),111
993,uint32_t sdm_get_fw_security_version(),128
994,sdm_return_t sdm_save_fw_cmf_version(const cmf_descriptor_t *const p_cmf_descriptor),139
995,uint32_t sdm_get_fw_cmf_version(),164
996,Copyright (2019) Intel Corporation,3
997,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
998,"void sdm_mbox_tamper_trigger_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",42
999,Copyright (2019) Intel Corporation,3
1000,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1001,"void sdm_mbox_cancel_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf,",44
1002,Copyright (2020) Intel Corporation.,4
1003,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
1004,"static bool validate_static_owner_hash(const crypto_context_t *const crypto_context, const void *const p_data)",89
1005,"static sdm_return_t validate_aes_cert(uint32_t *resp_buf, uint32_t *big_buf, aes_cert_t *aes_cert)",127
1006,"static sdm_return_t write_bbram_aes_cert(uint32_t *resp_buf, ",207
1007,"static sdm_return_t write_efuse_aes_cert(uint32_t *resp_buf, uint32_t *big_buf, aes_cert_t *aes_cert, ",233
1008,"static sdm_return_t write_offchip_aes_cert(uint32_t *resp_buf, uint32_t *big_buf, aes_cert_t *aes_cert, const crypto_context_t *const crypto_context)",294
1009,"static sdm_return_t sdm_mbox_ccert_process_aes_cert(uint32_t *resp_buf, uint32_t *big_buf, aes_cert_t *aes_cert, uint32_t is_virtual_write, const crypto_context_t *const crypto_context)",359
1010,"void sdm_mbox_ccert_cmd_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",425
1011,Copyright (2019) Intel Corporation,3
1012,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1013,"void sdm_mbox_cram_read_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",27
1014,"void sdm_mbox_eram_read_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",36
1015,"void sdm_mbox_cram_lfsr_read_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",47
1016,Copyright (2021) Intel Corporation,3
1017,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1018,"void sdm_mbox_config_msel_hdlr (ALT_SDM_MBOX_SOURCE_t mbox_source, uint32_t * cmd_buf, uint32_t * resp_buf, uint32_t * big_buf)",76
1019,Copyright (2019) Intel Corporation,3
1020,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1021,static bool is_region_protected(uint32_t region),38
1022,"void sdm_mbox_debug_read_internal_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",72
1023,"uint32_t get_aes_output(uint32_t *data,uint32_t data_size_words)",73
1024,"uint32_t aes_ctr_crypto(uint32_t * data, uint32_t data_size_words, uint32_t *iv, uint32_t iv_size_words, bool is_encrypt)",77
1025,"void sdm_mbox_efuse_aes_program_hdlr(ALT_SDM_MBOX_SOURCE_t source,",91
1026,Copyright (2019) Intel Corporation,3
1027,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1028,"void sdm_mbox_efuse_reload_cache_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",43
1029,Copyright (2019) Intel Corporation,3
1030,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1031,"void sdm_mbox_efuse_user_crc_program_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",32
1032,Copyright (2019) Intel Corporation,3
1033,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1034,"void sdm_mbox_get_chipid_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",59
1035,Copyright (2019) Intel Corporation,3
1036,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1037,"void sdm_mbox_get_debug_status_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",41
1038,"void sdm_mbox_get_device_identity_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",9
1039,Copyright (2019) Intel Corporation,3
1040,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1041,"void sdm_mbox_get_frequency_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf,",31
1042,"void alt_sdm_mbox_get_memory_data_hdlr(ALT_SDM_MBOX_SOURCE_t source,uint32_t *cmd_buf,",11
1043,sdm_return_t sdm_security_challenge_valid(const rma_eng_descriptor_t *certificate),33
1044,bool sdm_eng_challenge_mode(void),62
1045,sdm_mbox_get_security_challenge_hdlr().,70
1046,sdm_return_t sdm_security_challenge_clear(void),75
1047,"static sdm_return_t security_challenge_generate(crypto_context_t * ctx, uint32_t* p_security_challenge)",88
1048,"void sdm_mbox_get_security_challenge_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",164
1049,Copyright (2020) Intel Corporation.,3
1050,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1051,"static void sdm_mbox_gp_common( uint32_t opcode, ALT_SDM_MBOX_SOURCE_t client,",52
1052,"void sdm_mbox_gp_create_att_subkey_hdlr( ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf )",229
1053,"void sdm_mbox_gp_get_measurements_hdlr( ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf )",234
1054,Copyright (2018-19) Intel Corporation,3
1055,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1056,"void sdm_mbox_jtag_config_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",58
1057,Copyright (2019) Intel Corporation,3
1058,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1059,"void sdm_mbox_jtag_idcode_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",53
1060,Copyright (2019) Intel Corporation,3
1061,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1062,"void sdm_mbox_jtag_subdeviceid_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",53
1063,Copyright (2019) Intel Corporation,3
1064,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1065,"void sdm_mbox_jtag_usercode_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",53
1066,Copyright (2021) Intel Corporation,3
1067,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1068,"void cmf_mbox_nop_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf,",38
1069,Copyright (2019) Intel Corporation,3
1070,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1071,static bool check_pin_mux(uint32_t *resp_buf),58
1072,"static bool check_requestID(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf)",83
1073,static bool check_qspi_interface(uint32_t *resp_buf),99
1074,"void sdm_mbox_qspi_open_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",111
1075,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),180
1076,"void sdm_mbox_qspi_set_cs_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",185
1077,"void sdm_mbox_qspi_read_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",300
1078,"void sdm_mbox_qspi_write_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",392
1079,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),482
1080,"void sdm_mbox_qspi_read_dev_reg_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",486
1081,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),575
1082,"void sdm_mbox_qspi_write_dev_reg_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",579
1083,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),662
1084,"void sdm_mbox_qspi_send_dev_op_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",667
1085,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),720
1086,"void sdm_mbox_qspi_erase_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",724
1087,@param resp_buf is a pointer to the response buffer to be filled by this function (for the response header),809
1088,"void sdm_mbox_qspi_read_sha512_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",815
1089,"void sdm_mbox_qspi_write_fast_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1063
1090,"void sdm_mbox_qspi_write_status_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1287
1091,Copyright (2017-2018) Intel Corporation,3
1092,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1093,"void sdm_mbox_reconfig_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",126
1094,"void sdm_mbox_reconfig_status_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",381
1095,"void sdm_mbox_reconfig_data_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",446
1096,"void sdm_mbox_reconfig_msel_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",504
1097,Copyright (2019) Intel Corporation,3
1098,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1099,"void sdm_mbox_rsu_status_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",57
1100,"void sdm_mbox_rsu_get_sub_part_tab_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",119
1101,"void sdm_mbox_rsu_stage_notify_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf,",184
1102,"void sdm_mbox_rsu_image_update_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",242
1103,void clear_hps_code_exec_stage(void),323
1104,uint32_t get_hps_code_exec_stage(void),333
1105,Copyright (2019) Intel Corporation,3
1106,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1107,"void sdm_mbox_sync_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",35
1108,Copyright (2019) Intel Corporation,3
1109,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
1110,"void sdm_mbox_test_force_temp_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",35
1111,"void sdm_mbox_test_vcchg_force_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",25
1112,"void sdm_mbox_test_force_temp_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",39
1113,Copyright (2017) Intel Corporation,3
1114,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1115,"void sdm_mbox_test_vcchg_force_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",43
1116,Copyright (2020) Intel Corporation,3
1117,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1118,"void sdm_mbox_usr_defined_fuses_program(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",65
1119,"void sdm_mbox_usr_defined_fuses_read(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",187
1120,Copyright (2019) Intel Corporation,3
1121,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1122,It is used by all basic firmware as it is the starting point before main() is called. It,40
1123,purposefully is not enabling interrupt controller until after calling sdm_early_init() because,41
1124,sdm_early_init() is required to run before interrupts and OS have started in all cases.,42
1125,void sdm_startup(void),48
1126,Copyright (2017-18) Intel Corporation,3
1127,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1128,"__attribute__((section("".i_nsp_ram_1""))) static struct ",32
1129,"__attribute__((section("".handoff_ram_values""))) static struct ",34
1130,void sdm_trace_corrupt(uint32_t entry),59
1131,"uint32_t sdm_trace_get(uint32_t *ptrace, uint32_t size_word)",69
1132,"uint32_t sdm_dfx_trace_get(uint32_t *ptrace, uint32_t size_word)",115
1133,"void sdm_trace_dont_call_helper(sdm_trace_key_t key, uint32_t line)",163
1134,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t line)",184
1135,void sdm_trace_init(void),212
1136,bool sdm_trace_valid(void),220
1137,"sdm_return_t bitstream_source_avst_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",21
1138,"sdm_return_t bitstream_source_jtag_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",15
1139,Copyright (2020) Intel Corporation,3
1140,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
1141,sdm_return_t cmf_compatible_bitstream_subdevice_id_check(main_descriptor_t const * p_main_desc),32
1142,Copyright (2018-2020) Intel Corporation,3
1143,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1144,"void persistent_init_version_106_fields(bool first_boot, uint32_t id)",50
1145,"void persistent_init_version_10A_fields(bool first_boot, uint32_t id)",57
1146,"void persistent_init_version_10B_fields(bool first_boot, uint32_t id)",75
1147,"void persistent_init_version_10C_fields(bool first_boot, uint32_t id)",83
1148,"void persistent_init_version_10D_fields(bool first_boot, uint32_t id)",109
1149,"void persistent_init_version_10E_fields(bool first_boot, uint32_t id)",122
1150,"void persistent_set_vab_cancel_counters(uint32_t root_hash_id, uint32_t exp_cancel_mask, uint32_t svna, uint32_t svnb, uint32_t svnc, uint32_t svnd, uint32_t pts)",135
1151,void persistent_reset_vab_cancel_counters(),171
1152,uint32_t persistent_vab_cancel_is_root_hash_used(uint32_t root_hash_id),185
1153,uint32_t persistent_get_vab_user_exp_cancel_mask(uint32_t root_hash_id),190
1154,uint32_t persistent_get_vab_cancel_svn_a(),195
1155,uint32_t persistent_get_vab_cancel_svn_b(),200
1156,uint32_t persistent_get_vab_cancel_svn_c(),205
1157,uint32_t persistent_get_vab_cancel_svn_d(),210
1158,uint32_t persistent_get_vab_cancel_pts(),215
1159,sdm_return_t persistent_set_ddr_hash(uint32_t *p_slot_hash),226
1160,void persistent_clear_ddr_hash(void),245
1161,sdm_return_t persistent_efuse_init_secondary(void),258
1162,"void persistent_set_iid_puf_act_info(uint8_t puf_act_status, uint8_t err_level, iid_puf_type_t iid_puf_type)",276
1163,void persistent_set_iid_puf_lock(),289
1164,uint32_t persistent_get_iid_puf_lock(),301
1165,uint32_t persistent_get_user_iid_puf_act_info(void),317
1166,Copyright (2019) Intel Corporation,3
1167,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1168,(previously from slots provided table) otherwise either power table or AIB/Crete lower design is different and the phase-2 bitstream,37
1169,sdm_return_t power_table_init(const main_descriptor_t *main_descriptor),90
1170,bool power_table_valid(void),102
1171,void power_table_invalidate(void),114
1172,static sdm_return_t power_table_validate(power_table_t *p_table),120
1173,bool power_table_is_updated(void),127
1174,const power_table_t *power_table_get(void),140
1175,"sdm_return_t power_table_compare(const power_table_t *table1, const power_table_t *table2)",167
1176,void power_table_set_cvp(bool is_cvp),183
1177,bool power_table_get_vid_state(void),194
1178,Copyright (2019) Intel Corporation,3
1179,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1180,"void sdm_mbox_efuse_read_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",56
1181,"STATIC void sdm_mbox_efuse_write_common_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf, uint32_t is_virtual_write)",128
1182,"void sdm_mbox_efuse_write_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",187
1183,"void sdm_mbox_efuse_virtual_write_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",192
1184,"void sdm_mbox_efuse_write_disable_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",197
1185,"void sdm_mbox_efuse_status_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",238
1186,"void sdm_mbox_efuse_user_pubkey_program_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",269
1187,for(uint32_t a = 0; a < numhash - 1; ++a),388
1188,Copyright (2019) Intel Corporation,3
1189,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
1190,"void sdm_mbox_get_temperature_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",31
1191,Copyright (2019) Intel Corporation,3
1192,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1193,"void sdm_mbox_hps_release_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",39
1194,"void sdm_mbox_hps_reboot_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",88
1195,"void sdm_mbox_activate_hps_test_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",178
1196,Copyright (2019) Intel Corporation,3
1197,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1198,"void sdm_mbox_iid_puf_act_puf_status_cmd_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",45
1199,Copyright (2019) Intel Corporation,3
1200,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
1201,"void sdm_mbox_sdm_sense_vr_trim_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",32
1202,Copyright (2019) Intel Corporation,3
1203,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1204,"void sdm_mbox_volatile_aes_write_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",34
1205,"void sdm_mbox_volatile_aes_erase_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",109
1206,Copyright (2019) Intel Corporation,4
1207,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
1208,"void sdm_mbox_get_voltage_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",33
1209,Copyright (C) 2021 Intel Corporation. All rights reserved.,3
1210,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1211,"void sdm_mbox_trigger_wdt_expiry_internal_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",41
1212,Copyright (2020) Intel Corporation,3
1213,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1214,sdos_derive_internal_wrapping_key(,62
1215,sdos_key::unwrap_service_root_key(,242
1216,sdos_key::read_wrapped_service_root_key(,394
1217,"sdos_key::service_root_key_encrypt_and_send_to_key_vault(const crypto_context_t *const ctx,",446
1218,Copyright (2020) Intel Corporation,3
1219,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1220,void afrl_measurements_init(),92
1221,void afrl_measurements_fpga_debug_enable(),100
1222,void afrl_measurements_hps_debug_enable(),108
1223,void afrl_measurements_wipe_event(),116
1224,"sdm_return_t afrl_measurements_process_section(const main_descriptor_t *main_descriptor, const uint32_t* hash)",183
1225,uint32_t afrl_measurements_get_records(measurement_records_t* measurement_records),215
1226,uint32_t afrl_measurements_get_number_of_blocks(),264
1227,uint32_t afrl_measurements_get_records_length(),276
1228,void afrl_measurements_pr_section_was_successful(),291
1229,static inline pr_entry_t* get_pr_entry(uint32_t index),332
1230,static void pr_entry_remove_by_index(uint32_t index),337
1231,"static inline bool pr_entry_matches_region_id(uint32_t index, uint32_t region_id)",351
1232,static bool pr_entry_remove_by_region_id(uint32_t region_id),356
1233,static pr_entry_t* pr_entry_get_first_empty(),370
1234,"static uint32_t get_user_design_block(user_design_measurement_block_t* p_block,",384
1235,static uint32_t get_io_block(user_design_measurement_block_t* p_block),410
1236,static uint32_t get_core_block(user_design_measurement_block_t* p_block),418
1237,static uint32_t get_hps_block(user_design_measurement_block_t* p_block),426
1238,static uint32_t get_hpio_block(user_design_measurement_block_t* p_block),434
1239,"static uint32_t get_pr_block(user_design_measurement_block_t* p_block, ",442
1240,static uint32_t get_number_valid_pr_entries(),473
1241,static uint32_t get_number_user_design_measurements(),489
1242,"static sdm_return_t pr_entry_set(pr_entry_t* p_entry, uint32_t region_id, const uint32_t* p_hash, bool valid)",502
1243,static section_type_t get_section_type(desc_type_t desc_type),515
1244,static uint32_t get_base_sections_count(),534
1245,static bool is_measurement_truncated(),544
1246,static bool is_measurement_incomplete(),549
1247,static uint32_t get_processed_pr_sections_count(),554
1248,static uint32_t get_successfully_processed_pr_sections_count(),559
1249,"static void clear_and_rearrange_user_design_measurement_blocks(bool keep_first_io, bool keep_io, bool keep_hps, bool keep_hpio, bool keep_core, bool keep_pr)",564
1250,"static sdm_return_t process_pr_section(const main_descriptor_t *main_descriptor, const uint32_t* hash)",592
1251,"static sdm_return_t update_section_hash(section_type_t section_type, const uint32_t* hash)",612
1252,static uint32_t get_device_state_measurement_block(device_state_measurement_block_t* p_block),633
1253,Copyright (2019) Intel Corporation,3
1254,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1255,sdm_return_t cmf_attest_init(void),38
1256,sdm_return_t cmf_attest_init_parse(const crypto_context_t * const p_ctx),125
1257,"@param sha_type -- Type of hash to generate (256, 384, 512)",166
1258,"sdm_return_t cmf_attest_sha(const uint32_t *pdata, uint32_t byte_len, const sha_csr_size_t sha_type, uint32_t *phash, uint32_t word_len)",172
1259,"sdm_return_t cmf_attest_derive( const cmf_key_id_t key_id, const void * const label, const uint32_t label_length,",192
1260,"sdm_return_t cmf_attest_keypair(uint32_t *rng_buffer, const ecp_group_id_t group_id,",266
1261,"sdm_return_t cmf_attest_sign(uint32_t* secret_key_data, const ecp_group_id_t group_id, const cmf_key_size_t key_size, ",314
1262,"sdm_return_t cmf_attest_clear_key_in_keyvault(cmf_key_id_t slot, cmf_key_size_t size)",354
1263,static void cmf_attest_dummy_sha(),383
1264,void cmf_attest_cleanup(void),398
1265,Copyright (2019) Intel Corporation,3
1266,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1267,Copyright (2018) Intel Corporation,3
1268,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1269,void config_input_mbox_flash_stream(void),208
1270,__attribute__((unused)),394
1271,static char * dec_to_str(int n),395
1272,__attribute__((unused)),426
1273,static void show_one_desc(struct dwcms_dma_descriptor *descriptor),427
1274,__attribute__((unused)),435
1275,static void show_descs(struct dwcms_dma_descriptor *descriptors),436
1276,__attribute__((unused)),453
1277,static void multiple_desc_init(void),454
1278,__attribute__((unused)),491
1279,static void one_big_desc_init(void),492
1280,__attribute__((unused)),502
1281,"static void big_desc_chain_init(struct dwcms_dma_descriptor *descriptors, uint32_t buff_size)",503
1282,__attribute__((unused)),515
1283,"static void desc_init(struct dwcms_dma_descriptor *descriptors, uint32_t buff_size)",516
1284,__attribute__((unused)),536
1285,static void interrupt_init(void),537
1286,void set_sdmmc_error_status(uint32_t val),561
1287,uint32_t get_sdmmc_error_status(void),566
1288,__attribute__((unused)),572
1289,static int sdmmc_dma_init(void),573
1290,__attribute__((unused)),664
1291,static int sdmmc_dma_off(void),665
1292,static void sdm_sdmmc_pins(void),674
1293,static int check_minsts(void),702
1294,static void show_card_status(uint32_t status),755
1295,static int sdm_sdmmc_send_status_command(uint32_t *status),885
1296,static int sdm_sdmmc_send_stop_command(void),922
1297,"static int sdm_sdmmc_send_command_ex(uint32_t cmd, uint32_t arg, uint32_t * resp, bool waitfor)",958
1298,"static int sdm_sdmmc_send_command(uint32_t cmd, uint32_t arg, uint32_t * resp)",1032
1299,__attribute__((unused)),1037
1300,int sdm_sdmmc_cleanup(void),1038
1301,static void sdmmc_power_up(void),1053
1302,__attribute__((unused)),1095
1303,static void sdm_sdmmc_clear_interrupts(void),1096
1304,__attribute__((unused)),1101
1305,"static int sdmmc_read_fifo(uint32_t* dest_buffer, const int32_t bytes)",1102
1306,static inline unsigned int sdmmc_readl(unsigned int reg),1167
1307,void poll_done(void),1172
1308,int poll_dto_ex(bool waitfor),1185
1309,int poll_dto(void),1217
1310,poll_cmd(void),1223
1311,"poll_bit(int bit_index, uint32_t addr, uint32_t sense)",1237
1312,"poll_reg(uint32_t reg, uint32_t val, uint32_t mask)",1250
1313,poll_own(uint32_t paddr),1262
1314,__attribute__((unused)),1276
1315,static void show_status(uint32_t status),1277
1316,__attribute__((unused)),1319
1317,static void show_idsts(uint32_t idsts),1320
1318,__attribute__((unused)),1357
1319,static void show_stuff(void),1358
1320,__attribute__((unused)),1389
1321,static void debug_stuff(void),1390
1322,static int start_next_dma_chunk(void),1400
1323,__attribute__((unused)),1433
1324,static int start_dma_read(void),1434
1325,__attribute__((unused)),1478
1326,static int multiple_block_dma_read(void),1479
1327,__attribute__((unused)),1555
1328,static int single_block_dma_read(uint32_t buff_size),1556
1329,__attribute__((unused)),1654
1330,static int single_block_read(void),1655
1331,__attribute__((unused)),1676
1332,static int multiple_block_read(void),1677
1333,__attribute__((unused)),1704
1334,static int sdmmc_check_partition(void),1705
1335,__attribute__((unused)),1736
1336,static void read_csd(void),1737
1337,__attribute__((unused)),1756
1338,static void read_ext_csd(void),1757
1339,__attribute__((unused)),1820
1340,static int sdmmc_configure_card(void),1821
1341,__attribute__((unused)),2207
1342,static void sdmmc_isr(void* unused),2208
1343,__attribute__((unused)),2225
1344,static void sample_callback(uint32_t val),2226
1345,"int sdm_sdmmc_init(uint32_t nconfigTriggered, SDMMC_ISR_CALLBACK isr_callback)",2231
1346,int sdm_sdmmc_next_cfg_read(uint32_t num_bytes_to_read),2255
1347,int sdm_sdmmc_continue_cfg_read(void),2280
1348,int sdm_sdmmc_stop_cfg_read(void),2313
1349,"int sdm_sdmmc_read(void * dst, uint32_t sector, uint32_t num_sectors)",2325
1350,"int sdm_sdmmc_write_start(uint32_t sector, uint32_t num_sectors)",2376
1351,bool is_sdmmc_write_done(void),2418
1352,void sdm_sdmmc_write_stop(void),2435
1353,"int sdm_sdmmc_write(void * src, uint32_t sector, uint32_t num_sectors)",2461
1354,"int sdm_sdmmc_write_ex(void * src, uint32_t sector, uint32_t num_sectors)",2503
1355,int sdm_sdmmc_get_status(uint32_t * status),2572
1356,"int sdm_sdmmc_erase(uint32_t sector, uint32_t num_sectors)",2584
1357,Copyright (2019) Intel Corporation,3
1358,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1359,"static void initialize_resp_header(resp_header_t* resp_header, cmd_header_t* cmd_header)",117
1360,"void sdm_mbox_create_certificates_on_reload(ALT_SDM_MBOX_SOURCE_t mbox_client, ",159
1361,"void sdm_mbox_get_attestation_certificate(ALT_SDM_MBOX_SOURCE_t mbox_client,",249
1362,"void sdm_mbox_get_attestation_evidence(ALT_SDM_MBOX_SOURCE_t mbox_client,",348
1363,"void sdm_mbox_get_attestation_manifest(ALT_SDM_MBOX_SOURCE_t client,",423
1364,Copyright (2019) Intel Corporation,3
1365,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1366,static uint32_t get_pin_status(void),36
1367,"void sdm_mbox_cfg_status_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",57
1368,Copyright (2021) Intel Corporation,3
1369,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1370,ALT_SDM_MBOX_RESP_CODE sdm_mbox_crypto_common_check_enabled(void),42
1371,sdm_return_t sdm_mbox_crypto_common_check_client(ALT_SDM_MBOX_SOURCE_t client),72
1372,"sdm_return_t sdm_mbox_crypto_common_check_access (ALT_SDM_MBOX_SOURCE_t client, const uint32_t *const cmd_buf, uint32_t  *resp_buf, uint32_t *const statuscode)",99
1373,"sdm_return_t sdm_mbox_crypto_common_check_algorithm(const ecp_group_id_t ecp_group, const uint8_t key_type, const cmf_key_size_t key_size)",173
1374,"uint32_t *crypto_service_get_cmd_buf_fix(const uint32_t *cmd_buf, const uint32_t *big_buf)",239
1375,void crypto_service_release_cmd_buf_fix(),270
1376,Copyright (2021) Intel Corporation,3
1377,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1378,"static void update_init_response(sdm_mbox_ecdh_respond_t *respond_info, crypto_svc_common_header_t *request_info, uint32_t *resp_length)",47
1379,"static bool ecc_algorithm_check(uint8_t ecc_algorithm, ecp_group_id_t *ecp_group_id, pkc_curve_t *pkc_curve_type)",66
1380,"static bool ecdh_init_param(ecp_point_t *ecdh_public_key,",103
1381,This function used to generate shared secret key on Diffie-Hellman key exchange. Caller need to validate (pubkey_size_check),136
1382,and initialized mpi structure (ecdh_init_param) prior to call this function.,137
1383,"static sdm_return_t ecdh_generate_shared_key(   crypto_context_t ctx,",148
1384,"void sdm_mbox_crypto_ecdh_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",196
1385,Copyright (2021) Intel Corporation,3
1386,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1387,sdm_return_t clear_crypto_key(uint32_t crypto_key_index),53
1388,"sdm_return_t set_crypto_key(const crypto_svc_key_t * const crypto_key_data, uint32_t crypto_key_index)",98
1389,const crypto_svc_key_t *get_crypto_key(uint32_t key_unique_id),120
1390,static sdm_return_t free_crypto_master_key(void),140
1391,"static sdm_return_t alloc_and_derive_crypto_master_key(const crypto_context_t *const ctx, uint32_t wrapping_key_security_version, uint8_t key_protection)",178
1392,"static sdm_return_t alloc_and_derive_crypto_storage_key(const crypto_context_t *const ctx, const crypto_svc_key_ctx_t *key_ctx, uint32_t key_type, cmf_key_t *p_key)",277
1393,static sdm_return_t sdm_mbox_crypto_key_alloc_key(cmf_key_t *p_key),374
1394,"static bool validate_crypto_key_object_attributes(const crypto_svc_key_object_header_t *key_object_header, uint32_t *resp_buf)",397
1395,"static bool validate_crypto_key_object_hmac(const crypto_context_t *crypto_ctx, const crypto_svc_key_object_header_t *key_object_header, uint32_t *resp_buf)",548
1396,"static bool validate_crypto_key_object(const crypto_context_t *crypto_ctx, const crypto_svc_key_object_header_t *key_object_header, uint32_t *resp_buf)",702
1397,"static bool unwrap_crypto_key_object_data(const crypto_context_t *crypto_ctx, const crypto_svc_key_object_header_t *key_object_header, cmf_key_size_t key_size,",775
1398,"static bool import_crypto_key_object(const crypto_context_t *crypto_ctx, const crypto_svc_key_object_header_t *key_object_header, uint32_t *resp_buf)",931
1399,"void sdm_mbox_crypto_key_import_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1147
1400,"void sdm_mbox_crypto_key_export_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1232
1401,"void sdm_mbox_crypto_key_remove_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1562
1402,"void sdm_mbox_crypto_key_info_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1632
1403,Copyright (2021) Intel Corporation,3
1404,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1405,(,50
1406,(,114
1407,(,148
1408,static sdm_return_t cleanup_crypto_aes(),175
1409,(,216
1410,This is an indirect command. The payload does not contain the actual data to encrypt/decrypt but just decsriptor address(s). ,417
1411,(,426
1412,(,42
1413,"static sdm_return_t validate_source_address (const uint32_t *const input_addr, const uint32_t input_size,  ALT_SDM_MBOX_SOURCE_t client)",82
1414,"static sdm_return_t validate_cmd (ALT_SDM_MBOX_SOURCE_t client,  uint32_t * resp_buf, const uint32_t * const cmd_buf)",121
1415,"static sdm_return_t crypto_service_sha_hmac (ALT_SDM_MBOX_SOURCE_t client, const sha_hmac_request_cmd_t* const cmd_p, uint32_t *resp_buf, const bool mac_verify, uint32_t * const varying_response_length)",150
1416,"void sdm_mbox_crypto_service_sha_hmac_digest_hdlr (ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",368
1417,"void sdm_mbox_crypto_service_sha_hmac_verify_hdlr (ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",440
1418,Copyright (2021) Intel Corporation,3
1419,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1420,"void sdm_mbox_crypto_session_open_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",55
1421,"static sdm_return_t close_crypto_session_id(uint32_t session_id, uint32_t *resp_buf)",132
1422,Function to close all crypto sessions (used during reconfiguration),198
1423,sdm_return_t close_all_crypto_sessions(void),202
1424,"void sdm_mbox_crypto_session_close_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",219
1425,bool is_crypto_session_open(uint32_t session_id),257
1426,clear_crypto_session_id(uint32_t session_id),274
1427,set_crypto_session_id(uint32_t session_id),289
1428,void set_session_context_id (uint32_t context_id),303
1429,uint32_t get_session_context_id(),313
1430,"bool is_session_context_valid(const crypto_svc_common_header_t* const common_header_p, uint32_t *resp_buf)",325
1431,"cmf_key_id_t allocate_crypto_key_id(uint32_t key_start, uint32_t key_count)",375
1432,sdm_return_t free_crypto_key_id(cmf_key_id_t key_id),414
1433,Copyright (2019) Intel Corporation,3
1434,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1435,"void sdm_mbox_qspi_close_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",40
1436,Copyright (2019) Intel Corporation,3
1437,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1438,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),59
1439,"void sdm_mbox_qspi_direct_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",63
1440,Copyright (2019) Intel Corporation,3
1441,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1442,static bool does_client_have_sdmmc_exclusive_access(uint32_t requestID),46
1443,static void get_sdmmc_exclusive_access(uint32_t requestID),63
1444,static void release_sdmmc_exclusive_access(void),76
1445,static bool is_sdmmc_mbox_interface_busy(void),87
1446,"void sdm_mbox_sdmmc_open_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",100
1447,"void sdm_mbox_sdmmc_close_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",164
1448,"void sdm_mbox_sdmmc_read_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",229
1449,"void sdm_mbox_sdmmc_write_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",320
1450,"void sdm_mbox_sdmmc_erase_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",431
1451,"void sdm_mbox_sdmmc_get_write_status_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",513
1452,"void sdm_mbox_sdmmc_status_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",597
1453,"void sdm_mbox_sdmmc_write_fast_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",650
1454,"void sdm_mbox_sdmmc_read_sha512_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",862
1455,@param big_buf is a pointer to a 4K buffer in RAM that contains additional data (if needed by the handler or future expansion),1065
1456,"static void sdmmc_setup_direct(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf)",1069
1457,static uint32_t get_crypto_sdmmc_num_desc_needed(void),1130
1458,"static inline void populate_response_buf(uint32_t *resp_buf, ALT_SDM_MBOX_RESP_CODE code, uint32_t len)",1136
1459,"static bool check_param_and_hw_state(uint32_t cmd_hdr, uint32_t base_addr, uint32_t size_in_bytes, ALT_SDM_MBOX_SOURCE_t client)",1152
1460,static uint32_t get_sdmmc_fast_inbuf_bytes_remain(void),1223
1461,static void set_sdmmc_fast_inbuf_bytes_remain(uint32_t val),1234
1462,static bool get_sdmmc_fast_command_enable(void),1244
1463,static void set_sdmmc_fast_command_enable(bool val),1255
1464,static void restore_local_var(void),1265
1465,void sdmmc_nsp_load_max_wr_dma_descriptors(void),1278
1466,__attribute__((unused)),1310
1467,static char * dec_to_str(int n),1311
1468,void sdmmc_hps_in_use(bool val),1329
1469,void sdm_mbox_sdmmc_hps_release(void),1334
1470,static void sdmmc_fast_cmd_crypto_restore(void),1354
1471,"static void sdm_mbox_sdmmc_flag_error(uint32_t message, uint32_t line, uint32_t *resp_buf)",1427
1472,static __inline__ void sdmmc_fast_cmd_crypto_save(void),1441
1473,void sdmmc_load_max_wr_dma_descriptors(void),1452
1474,void do_sdmmc_nsp_fast_work(void),1485
1475,void do_sdmmc_fast_work(void),1534
1476,Copyright (2020) Intel Corporation,3
1477,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1478,"void sdm_mbox_sdos_random_number_gen_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",43
1479,"static sdm_return_t sdos_data_valid(uint32_t *input_addr, uint32_t input_size, uint32_t *output_addr, uint32_t output_size, ",178
1480,"void sdm_mbox_sdos_data_encryption_request_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",246
1481,"void sdm_mbox_sdos_data_decryption_request_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",479
1482,Copyright (2020) Intel Corporation.,4
1483,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
1484,"static bool is_zero(uint32_t *p_data, uint32_t n)",55
1485,"static bool sdm_mbox_vab_user_pubkey_cancellation(uint32_t cancel_id, uint32_t *resp_buf, uint32_t is_virtual_write)",67
1486,"static bool sdm_mbox_vab_pts_counter_set(uint32_t counter_value, uint32_t *resp_buf, uint32_t is_virtual_write)",111
1487,"static bool sdm_mbox_vab_svn_counter_set(cmf_efuse_counter_type_t counter_type, uint32_t counter_value, uint32_t *resp_buf, uint32_t is_virtual_write)",214
1488,"bool sdm_mbox_vab_process_counter_set_cert(counter_set_cert_t *counter_cert, uint32_t *resp_buf, uint32_t is_virtual_write)",297
1489,"void sdm_mbox_vab_get_provision_data_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",453
1490,"void sdm_mbox_vab_counter_set_preauth_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",575
1491,Copyright (2020) Intel Corporation.,4
1492,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
1493,"void sdm_mbox_vab_pr_pubkey_program_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",58
1494,Copyright (2018) Intel Corporation,3
1495,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1496,void sdm_pmtab_init(void),78
1497,Copyright (2020) Intel Corporation,3
1498,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1499,"sdm_return_t sdos_inbuf_readptr_reset(crypto_context_t *const ctx, in_buf_select_t fifo)",67
1500,"static sdm_return_t map_client_to_dma_endpoint(ALT_SDM_MBOX_SOURCE_t client, dma_source_t *client_dma_src, dma_dest_t* client_dma_dest)",106
1501,"static sdm_return_t sdos_crypto_path_init(crypto_context_t *const ctx, sdos_operation_e operation)",135
1502,static void sdos_cleanup(crypto_context_t *const ctx),208
1503,static sdm_return_t sdos_generate_iv(crypto_context_t *const ctx),239
1504,"static sdm_return_t sdos_dma_read(crypto_context_t *const ctx, dma_source_t dma_src, uint32_t src_addr, uint32_t src_len_bytes, in_buf_select_t fifo)",275
1505,"static sdm_return_t sdos_aes_and_dma_write(crypto_context_t *const ctx, ",343
1506,"static sdm_return_t sdos_validate_header(sdos_sdo_header_t *const header, uint32_t input_size_bytes)",410
1507,"sdm_return_t sdos::encrypt(crypto_context_t *const ctx,",459
1508,"sdm_return_t sdos::decrypt(crypto_context_t *const ctx, uint32_t* owner_info,",783
1509,Copyright (2020) Intel Corporation,3
1510,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1511,sdos_key::derive(,66
1512,Copyright (2020) Intel Corporation,3
1513,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1514,void vab_counter_clear_preauth(void),37
1515,bool vab_counter_set_preauth(uint32_t counter_type),49
1516,bool vab_counter_is_preauth_set(uint32_t counter_type),75
1517,void vab_pr_owner_clear_authorization(void),96
1518,void vab_pr_owner_set_authorization(void),104
1519,bool vab_pr_owner_is_authorization_set(void),114
1520,"sdm_return_t bitstream_source_avst_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",16
1521,"sdm_return_t bitstream_source_jtag_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",16
1522,Copyright (2020) Intel Corporation,3
1523,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1524,"void sdm_mbox_sdos_random_number_gen_hdlr_fm7(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",44
1525,Copyright (2021) Intel Corporation,3
1526,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1527,ecdsa_svc_return_t ecdsa_service_init(void),53
1528,const crypto_context_t *get_ecdsa_service_crypto_context(void),128
1529,"static ecdsa_svc_return_t ecdsa_validate_service_request(const ecdsa_service_type_t service, const ecdsa_service_request_inf_pt p_service_req_inf)",151
1530,"static ecdsa_svc_return_t get_ecdsa_service_app_inf(const ecdsa_service_type_t service,",231
1531,"ecdsa_svc_return_t ecdsa_service_update_source_inf(const ecdsa_service_type_t service,",272
1532,"static ecdsa_svc_return_t ecdsa_validate_service_operation_inf(const ecdsa_service_type_t service, const ecdsa_service_operation_inf_pt p_ecdsa_service_operation_inf)",384
1533,"ecdsa_svc_return_t ecdsa_service_request(const ecdsa_service_type_t service,",423
1534,"static ecdsa_svc_return_t ecdsa_service_get_points_base_byte_length(const uint8_t algorithm, uint32_t* p_points_base_length)",482
1535,"ecdsa_svc_return_t ecdsa_service_get_signature_verify_inf(const ecdsa_service_type_t          service,",529
1536,"ecdsa_svc_return_t ecdsa_service_get_hash_data(const ecdsa_service_type_t     service,",673
1537,"void ecdsa_service_initialize_resp(const ecdsa_service_type_t service, const ecdsa_service_request_inf_pt cmd_request_inf_p, ecdsa_service_sdm_mbox_rsp_buf_pt rsp_p)",734
1538,"void ecdsa_service_initialize_resp_header(const ecdsa_service_type_t service, const cmd_header_pt cmd_header, cmd_header_pt resp_header)",755
1539,"ecdsa_svc_return_t ecdsa_service_update_rsp(const ecdsa_service_type_t service,",790
1540,Copyright (2021) Intel Corporation,3
1541,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1542,"ecdsa_svc_return_t ecdsa_service_app_initialize_mpi(ecp_point_t *pub, cmf_mpi_t *r, uint32_t *r_data, cmf_mpi_t *s, uint32_t *s_data)",115
1543,static ecdsa_svc_return_t ecdsa_service_app_get_key(),183
1544,"static ecdsa_svc_return_t ecdsa_servcie_app_validate_points(const uint8_t algorithm, uint32_t point_data_byte_size)",224
1545,"static ecdsa_svc_return_t ecdsa_service_app_validate_request_app_inf(const ecdsa_service_type_t service, const ecdsa_service_app_inf_pt service_app_inf_p)",256
1546,ecdsa_svc_return_t ecdsa_service_app_check_key_usage(const ecdsa_service_type_t service),389
1547,"ecdsa_svc_return_t ecdsa_service_app_init_crypto_key(const ecdsa_service_type_t service, const crypto_service_key_uid_t key_unique_id)",431
1548,"static ecdsa_svc_return_t ecdsa_service_app_init(const ecdsa_service_type_t service, const ecdsa_service_app_inf_pt service_app_inf_p)",489
1549,ecdsa_svc_return_t ecdsa_service_app_sha2_sign_data(const ecdsa_service_app_inf_pt service_app_inf_p),617
1550,ecdsa_svc_return_t ecdsa_service_app_hash_sign_data(const ecdsa_service_app_inf_pt service_app_inf_p),685
1551,ecdsa_svc_return_t ecdsa_service_app_get_public_key(const ecdsa_service_app_inf_pt service_app_inf_p),735
1552,ecdsa_svc_return_t ecdsa_service_app_verify_sha2_data(const ecdsa_service_app_inf_pt service_app_inf_p),777
1553,ecdsa_svc_return_t ecdsa_service_app_verify_hash(const ecdsa_service_app_inf_pt service_app_inf_p),844
1554,"ecdsa_svc_return_t ecdsa_service_app_request(const ecdsa_service_type_t service, const ecdsa_service_app_inf_pt service_app_inf_p)",890
1555,Copyright (2018-2020) Intel Corporation,3
1556,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1557,"void persistent_init_version_106_fields(bool first_boot, uint32_t id)",50
1558,"void persistent_init_version_10A_fields(bool first_boot, uint32_t id)",57
1559,"void persistent_init_version_10B_fields(bool first_boot, uint32_t id)",75
1560,"void persistent_init_version_10C_fields(bool first_boot, uint32_t id)",92
1561,"void persistent_init_version_10D_fields(bool first_boot, uint32_t id)",110
1562,"void persistent_init_version_10E_fields(bool first_boot, uint32_t id)",117
1563,sdm_return_t persistent_efuse_init_secondary(void),134
1564,"void persistent_set_iid_puf_act_info(uint8_t puf_act_status, uint8_t err_level, iid_puf_type_t iid_puf_type)",152
1565,void persistent_set_iid_puf_lock(),173
1566,uint32_t persistent_get_iid_puf_lock(),186
1567,uint32_t persistent_get_user_iid_puf_act_info(void),203
1568,uint32_t persistent_get_uds_iid_puf_act_info(void),219
1569,"void persistent_set_vab_cancel_counters(uint32_t root_hash_id, uint32_t exp_cancel_mask, uint32_t svna, uint32_t svnb, uint32_t svnc, uint32_t svnd, uint32_t pts)",235
1570,void persistent_reset_vab_cancel_counters(),271
1571,uint32_t persistent_vab_cancel_is_root_hash_used(uint32_t root_hash_id),285
1572,uint32_t persistent_get_vab_user_exp_cancel_mask(uint32_t root_hash_id),290
1573,uint32_t persistent_get_vab_cancel_svn_a(),295
1574,uint32_t persistent_get_vab_cancel_svn_b(),300
1575,uint32_t persistent_get_vab_cancel_svn_c(),305
1576,uint32_t persistent_get_vab_cancel_svn_d(),310
1577,uint32_t persistent_get_vab_cancel_pts(),315
1578,sdm_return_t persistent_set_ddr_hash(uint32_t *p_slot_hash),320
1579,void persistent_clear_ddr_hash(void),329
1580,Copyright (2021) Intel Corporation,3
1581,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1582,(,52
1583,Copyright (2021) Intel Corporation,3
1584,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1585,(,53
1586,Copyright (2021) Intel Corporation,3
1587,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1588,static uint32_t get_cmd_hash_data_num_of_words(const uint16_t cmd_size),58
1589,(,86
1590,Copyright (2021) Intel Corporation,3
1591,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1592,(,56
1593,Copyright (2020) Intel Corporation,3
1594,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1595,(,55
1596,Copyright (2019) Intel Corporation,3
1597,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1598,"void sdm_mbox_efuse_read_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",56
1599,"void sdm_mbox_efuse_write_disable_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",106
1600,"void sdm_mbox_efuse_status_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",147
1601,"void sdm_mbox_efuse_user_pubkey_program_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",179
1602,Copyright (2019) Intel Corporation,3
1603,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
1604,"uint32_t update_response_buffer(uint32_t page, uint32_t mask, uint32_t max_channel, uint32_t *resp_buf)",34
1605,"void sdm_mbox_get_temperature_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",59
1606,Copyright (2019) Intel Corporation,3
1607,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1608,"void sdm_mbox_iid_puf_act_puf_status_cmd_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",45
1609,Copyright (2019) Intel Corporation,3
1610,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
1611,"void sdm_mbox_sdm_sense_vr_trim_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",32
1612,Copyright (2020) Intel Corporation,3
1613,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1614,sdos_derive_internal_wrapping_key(,66
1615,sdos_key::unwrap_service_root_key(,247
1616,sdos_key::read_wrapped_service_root_key(,384
1617,sdos_key::save_wrapped_service_root_key(void),412
1618,save_wrapped_service_root_key(void),480
1619,Copyright (2021) Intel Corporation,3
1620,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1621,static sdm_return_t key_wrap(,62
1622,static sdm_return_t key_unwrap (,69
1623,STATIC sdm_return_t bbram_derive_wrapping_key (,94
1624,sdm_return_t bbram_store_key(,171
1625,sdm_return_t bbram_key_get_key_type(bbram_wrap_key_t* bbram_key_type),239
1626,"sdm_return_t bbram_set_key_info(bbram_wrap_key_t bbram_key_type, uint32_t security_version)",276
1627,sdm_return_t bbram_key_get_security_version(uint32_t* security_version),314
1628,static sdm_return_t key_wrap(,353
1629,static sdm_return_t key_unwrap (,447
1630,sdm_return_t bbram_key_unwrap (,556
1631,"static sdm_return_t setup_key_in_key_vault(cmf_key_t* p_key, cmf_mpi_t* p_mpi_key, uint32_t* key_data) ",607
1632,sdm_return_t bbram_key_wrap (,635
1633,"void memory_dump_32bits_aligned (uint32_t StartAddress, uint32_t Data32Size)",727
1634,"void partial_memory_dump (uint32_t StartAddress, uint32_t BytesOfData)",792
1635,Copyright (2020) Intel Corporation,3
1636,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
1637,sdm_return_t cmf_compatible_bitstream_subdevice_id_check(main_descriptor_t const * p_main_desc),32
1638,Copyright (2019) Intel Corporation,3
1639,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1640,(previously from slots provided table) otherwise either power table or AIB/Crete lower design is different and the phase-2 bitstream,39
1641,sdm_return_t power_table_init(const main_descriptor_t *main_descriptor),75
1642,void power_table_invalidate(void),136
1643,static sdm_return_t power_table_validate(power_table_t *p_table),143
1644,bool power_table_is_updated(void),237
1645,const power_table_t *power_table_get(void),251
1646,"sdm_return_t power_table_compare(const power_table_t *table1, const power_table_t *table2)",256
1647,Copyright (2019) Intel Corporation,3
1648,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1649,"void sdm_mbox_hps_release_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",39
1650,"void sdm_mbox_hps_reboot_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",88
1651,"void sdm_mbox_activate_hps_test_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",177
1652,Copyright (2019) Intel Corporation,3
1653,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1654,"void sdm_mbox_volatile_aes_erase_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",42
1655,Copyright (2019) Intel Corporation,4
1656,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
1657,"void sdm_mbox_get_voltage_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",45
1658,Copyright (2020) Intel Corporation,3
1659,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1660,void afrl_measurements_init(),51
1661,void afrl_measurements_fpga_debug_enable(),77
1662,void afrl_measurements_hps_debug_enable(),85
1663,void afrl_measurements_wipe_event(),93
1664,"sdm_return_t afrl_measurements_process_section(const main_descriptor_t *main_descriptor, const uint32_t* hash)",160
1665,uint32_t afrl_measurements_get_number_of_blocks(),205
1666,"uint32_t afrl_measurements_get_block(uint32_t index, void* measurement_block)",218
1667,uint32_t afrl_measurements_get_records(measurement_records_t* measurement_records),247
1668,uint32_t afrl_measurements_get_records_length(),276
1669,void afrl_measurements_pr_section_was_successful(),288
1670,static section_type_t get_section_type(desc_type_t desc_type),305
1671,"static sdm_return_t handle_valid_section(section_type_t section_type, const uint32_t* hash)",332
1672,static bool is_user_design_measurement(section_type_t section_type),374
1673,static bool is_base_section(section_type_t section_type),396
1674,static uint32_t get_device_state_measurement_block(device_state_measurement_block_t* block),417
1675,"static uint32_t get_user_design_measurement_block(uint32_t index, user_design_measurement_block_t* measurement_block)",449
1676,"static void clear_and_rearrange_user_design_measurement_blocks(bool keep_first_io, bool keep_io, bool keep_hps, bool keep_hpio, bool keep_core, bool keep_pr)",479
1677,"sdm_return_t bitstream_source_avst_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",15
1678,"sdm_return_t bitstream_source_jtag_start(cnoc_handle_t cnoc_handle, dma_handle_t dma_read_handle, uint32_t bytes)",15
1679,Copyright (2018-2020) Intel Corporation,3
1680,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1681,"void persistent_init_version_106_fields(bool first_boot, uint32_t id)",46
1682,"void persistent_init_version_10A_fields(bool first_boot, uint32_t id)",64
1683,"void persistent_init_version_10B_fields(bool first_boot, uint32_t id)",72
1684,"void persistent_init_version_10C_fields(bool first_boot, uint32_t id)",80
1685,sdm_return_t persistent_efuse_init_secondary(void),92
1686,"void persistent_set_iid_puf_act_info(uint8_t puf_act_status, uint8_t err_level, iid_puf_type_t iid_puf_type)",109
1687,void persistent_set_iid_puf_lock(),119
1688,uint32_t persistent_get_iid_puf_lock(),128
1689,uint32_t persistent_get_user_iid_puf_act_info(void),137
1690,"void persistent_init_version_10D_fields(bool first_boot, uint32_t id)",146
1691,"void persistent_init_version_10E_fields(bool first_boot, uint32_t id)",153
1692,sdm_return_t persistent_set_ddr_hash(uint32_t *p_slot_hash),160
1693,void persistent_clear_ddr_hash(void),166
1694,Copyright (2019) Intel Corporation,3
1695,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1696,Copyright (2019) Intel Corporation,3
1697,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1698,static void FPGA_CATTRIP_isr(void* unused),32
1699,void enable_cattrip(void),47
1700,Copyright (2019) Intel Corporation,3
1701,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1702,static uint32_t get_pin_status(void),36
1703,"void sdm_mbox_cfg_status_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",56
1704,Copyright (2019) Intel Corporation,3
1705,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1706,"void sdm_mbox_efuse_read_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",47
1707,"void sdm_mbox_efuse_write_disable_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",93
1708,"void sdm_mbox_efuse_status_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",115
1709,"void sdm_mbox_efuse_user_pubkey_program_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",139
1710,Copyright (2019) Intel Corporation,3
1711,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
1712,"void sdm_mbox_get_temperature_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",41
1713,Copyright (2019) Intel Corporation,3
1714,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1715,"void sdm_mbox_iid_puf_act_puf_status_cmd_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",45
1716,Copyright (2019) Intel Corporation,3
1717,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1718,"void sdm_mbox_qspi_close_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",40
1719,Copyright (2019) Intel Corporation,3
1720,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1721,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),59
1722,"void sdm_mbox_qspi_direct_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",63
1723,Copyright (2021) Intel Corporation,3
1724,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1725,"static bool sdm_mbox_vab_user_pubkey_cancellation(uint32_t cancel_id, uint32_t *resp_buf, uint32_t is_virtual_write)",36
1726,"bool sdm_mbox_vab_process_counter_set_cert(counter_set_cert_t *counter_cert, uint32_t *resp_buf, uint32_t is_virtual_write)",60
1727,Copyright (2019) Intel Corporation,3
1728,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1729,int main(void),32
1730,void sdm_startup(){,43
1731,Copyright (2019) Intel Corporation,3
1732,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1733,void main(void),23
1734,"STATIC uint32_t decomp_stub_process_image(const decomp_table_t* p_decomp_table,",75
1735,"STATIC uint32_t decomp_stub_decompress_cmf(const uintptr_t cmf_src_addr,",78
1736,"STATIC uint32_t decomp_stub_relocate_conflict_check(uint32_t relocate_image,",83
1737,"STATIC uint32_t decomp_stub_relocate_comp_cmf_img(uintptr_t cmf_src_addr,",85
1738,static void metal_key_disable_and_lock(void),111
1739,static void decomp_efuse_hw_disable_and_lock(void),150
1740,static void alt_sdm_ram_puf_lock(void),186
1741,STATIC void report_error(uint32_t error_code),222
1742,"STATIC uint32_t decomp_stub_relocate_conflict_check(uint32_t relocate_image,",240
1743,STATIC uint32_t decomp_stub_relocate_data(void),260
1744,@param input cmf_src_addr source address of the compressed cmf image (before relocation),334
1745,"STATIC uint32_t decomp_stub_relocate_comp_cmf_img(const uintptr_t cmf_src_addr,",342
1746,"STATIC uint32_t decomp_stub_decompress_cmf(const uintptr_t cmf_src_addr,",513
1747,}  // end of decomp_stub_decompress_cmf(),670
1748,"STATIC uint32_t decomp_stub_process_image(const decomp_table_t *p_decomp_table, uint32_t number_of_decomp_table)",677
1749,void alt_main(void),797
1750,uint32_t decomp_stub_crypto_datapath_run(const uint32_t transfer_size_bytes),59
1751,void decomp_stub_configure_output_datapath(bool direct),132
1752,uint32_t decomp_stub_wait_decomp_done(void),157
1753,uint32_t decomp_stub_wait_dma_wr_done(void),186
1754,"void decomp_stub_dma_rd_config(const uintptr_t address, const uint32_t byte_size)",210
1755,"uint32_t decomp_stub_dma_wr_config(const uintptr_t address, const uint32_t byte_size)",244
1756,"uint32_t decomp_stub_wait_timeout(volatile uint32_t *address, uint32_t mask,",296
1757,void decomp_stub_inbuf_dmard_go(const uint32_t tansfer_size_dwords),319
1758,void decomp_stub_inbuf_dmard_intr_clear(void),344
1759,bool decomp_stub_check_data_path_busy(void),357
1760,/* _stub_load contains the load address of the decomp stub (before relocation),47
1761,STATIC uint32_t decomp_stub_get_comp_image_start_size(,67
1762,STATIC void decomp_stub_crypto_init(void),78
1763,"uint32_t decomp_stub_init(uintptr_t * const cmf_src_addr,",220
1764,STATIC uint32_t decomp_stub_get_comp_image_start_size(,446
1765,STATIC uint32_t decomp_stub_sha512(const decomp_table_t * const p_decomp_table),65
1766,static uint32_t decomp_stub_sha_compare(const uint32_t * expected_addr),191
1767,uint32_t decomp_stub_hash_check(const decomp_table_t * const p_decomp_table),243
1768,"const uint32_t * ramboot_sha_reg[16] = {(uint32_t *)ALT_SCR_RAM_BOOT_SHA0_ADDR,",44
1769,void __attribute__((noreturn)) decomp_stub_cold_reset(const decomp_table_t * const p_decomp_table),71
1770,Copyright (2020) Intel Corporation,3
1771,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1772,sdm_return_t cmf_set_default_security_protection(bool unconditional_lock),99
1773,@note This is already included in the sequence of sdm_common_early_init().,106
1774,void efuse_test_sdm_reset_peripheral(),109
1775,"static uint32_t security_protection_set(bool lock_puf, const bbram_handle_t bbram_handle)",157
1776,static uint32_t security_protection_keys(void),196
1777,"static uint32_t set_default_security_protection(const crypto_context_t * const ctx, const bbram_handle_t bbram_handle)",241
1778,@brief sysinit_main() supposed to be called from alt_main() before any of the OS init,319
1779,void sdm_early_init(void),326
1780,int main(void),470
1781,"static sdm_return_t aes_crypt_data(const crypto_context_t * const ctx, cmf_aes_opmode_t op_mode,cmf_aes_resource_t cmf_aes_resource,",73
1782,"static sdm_return_t get_encrypted_data(const crypto_context_t * const ctx, uint32_t * key_data,uint32_t * encrypted_data)",290
1783,"static sdm_return_t check_key_decryption(const crypto_context_t * const ctx, uint32_t * encrypted_data, uint32_t keyid, uint32_t key_type)",354
1784,static sdm_return_t allow_puf_enrollment(bool write_real_efuse),413
1785,"sdm_return_t puf_enroll_efuse(const crypto_context_t * const ctx, bool write_real_efuse, cmf_mpi_t * p_efuse_data)",516
1786,"sdm_return_t zero_check_protected_fuses(const crypto_context_t * const ctx, uint32_t packed_fuse_data, uint32_t * pdata)",576
1787,"sdm_return_t check_aes_fuse_contents(const crypto_context_t * const ctx, uint32_t * pdata)",608
1788,sdm_return_t puf_write_uds_efuse(uint32_t *fuse_key_256_data),632
1789,"sdm_return_t generate_efuse_puf_rootkey(const crypto_context_t * const ctx, bool write_real_efuse, uint32_t *pdata)",670
1790,"sdm_return_t puf_enroll_efuse_test(bool write_real_efuse, cmf_mpi_t * p_efuse_data)",765
1791,"void puf_enroll_efuse_test_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",815
1792,Copyright (2018) Intel Corporation.,3
1793,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1794,volatile uint32_t * alt_sdm_mbox_get_nsp_ram_buffer(),45
1795,Copyright (C) 2020 Intel Corporation All Rights Reserved.,3
1796,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1797,"static sdm_crypto_ret_t get_ecdsa_keypair(  const crypto_context_t * const ctx,",81
1798,"uint32_t calculate_rom_patch_hash384(const crypto_context_t * const ctx, uint32_t* data, uint32_t data_size_word)",165
1799,"uint32_t fill_pub_key_t( const crypto_context_t * const ctx,",203
1800,static sdm_crypto_ret_t efuse_test_derive_cdi(uint32_t*  rom_ext_sha),260
1801,static sdm_crypto_ret_t efuse_test_derive_edi(uint32_t edi_id),386
1802,"static sdm_crypto_ret_t efuse_test_derive_enrolment_pubkey(uint32_t* p_Qx,uint32_t* p_Qy)",438
1803,"static sdm_crypto_ret_t efuse_test_derive_deviceid_pubkey(uint32_t* p_Qx,uint32_t* p_Qy)",502
1804,"uint32_t efuse_test_gen_att_manifest(   const crypto_context_t * const ctx,",585
1805,Copyright (2021) Intel Corporation,3
1806,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1807,"sdm_return_t altera_sdm_efuse_dft_zero_check_redundant_row(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows,",57
1808,"sdm_return_t altera_sdm_efuse_dft_zero_check(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows,",59
1809,"void sdm_efuse_zero_check_redundant_row_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",84
1810,"void sdm_efuse_zero_check_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",149
1811,"sdm_return_t altera_sdm_efuse_dft_zero_check_redundant_row(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows,",211
1812,"sdm_return_t altera_sdm_efuse_dft_zero_check(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows,",258
1813,"void sdm_mbox_apply_bandgap_trim_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",39
1814,"void sdm_mbox_get_attestation_manifest_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",55
1815,"void sdm_mbox_calc_crc1_hdlr(ALT_SDM_MBOX_SOURCE_t source,",53
1816,"static uint32_t compute_clkdiv_ratio(uint32_t refclk, uint32_t outclk)",92
1817,"void sdm_clk_bypass_enable(uint32_t mask, uint32_t bypass_val)",114
1818,void sdm_enter_power_state_reset(void),129
1819,void sdm_exit_power_state_reset(void),142
1820,"static sdm_return_t clkmgr_wait_for_pll_lock(clkmgr_context_t* const clkmgr_context_ptr, uint32_t timeout_value)",155
1821,sdm_return_t sdm_pll_startup(clkmgr_handle_t handle),205
1822,"static void sdm_update_vco_refdiv(uint32_t div, uint32_t moddiv)",224
1823,static uint32_t eff_refclk_calc(uint32_t refclk_value_mhz),253
1824,"static uint32_t mdiv_calc (uint32_t refclk_value_mhz, uint32_t VCO_mhz)",261
1825,"static uint32_t hscnt_calc (uint32_t refclk_value_mhz, uint32_t VCO_mhz)",268
1826,"static uint32_t mscnt_calc (uint32_t refclk_value_mhz, uint32_t VCO_mhz)                //mscnt= (100/(VCO/refclk))",275
1827,"static uint32_t moddiv_calc (uint32_t refclk_value_mhz, uint32_t VCO_mhz) //600 >= (VCO/moddiv) >= 3 * eff_refclk",282
1828,"sdm_return_t clkmgr_pll_config_mhz(clkmgr_handle_t handle, uint32_t freq_pllc0, uint32_t freq_pllc1, uint32_t refclk_mhz, uint32_t vco_mhz)",299
1829,"void clkmgr_pll_clk_setup_divider_all(uint32_t pllc0_mhz, uint32_t pllc1_mhz, uint32_t cpu_clk, uint32_t sp_clk)",384
1830,void sdm_bypass_clear_all(void),470
1831,static sdm_return_t config_to_pll_clock(clkmgr_handle_t handle),475
1832,"void sdm_mbox_clk_switch_to_pll_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",524
1833,Copyright (2021) Intel Corporation,3
1834,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1835,"STATIC void sdm_mbox_efuse_write_common_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf, uint32_t is_virtual_write)",72
1836,"void sdm_mbox_efuse_write_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",148
1837,"void sdm_mbox_efuse_virtual_write_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",170
1838,"void sdm_mbox_get_metal_check_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",43
1839,@brief  This function will generate the UDS value (in RAM) and efuse_puf_rootkey (in keyvault),173
1840,"static uint32_t generate_uds_efuse_puf_rootkey(const crypto_context_t * const ctx, bool is_write_real_efuse, uint32_t * uds_puf_data, cmf_mpi_t * puf_efuse_data)",179
1841,static uint32_t allow_uds_puf_enrollment(bool test_enrollment),228
1842,static sdm_return_t cmf_iid_puf_enroll_assemble_help_data(const crypto_context_t * const ctx),288
1843,"static uint32_t get_puf_reg_manifest_entry(const crypto_context_t * const ctx, puf_reg_manifest_entry_t *p_entry)",307
1844,"void sdm_mbox_puf_enrol_intel_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",489
1845,Copyright (2021) Intel Corporation.,3
1846,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1847,"void sdm_mbox_read_fuse_hdlr(ALT_SDM_MBOX_SOURCE_t client,",73
1848,Copyright (2017-18) Intel Corporation.,3
1849,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1850,"void TRAMP_trace(uint32_t key, uint32_t line)",50
1851,void TRAMP_trace_clear(void),67
1852,Copyright (2019) Intel Corporation,3
1853,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1854,void main(void),23
1855,Copyright (2019) Intel Corporation,3
1856,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1857,sdm_return_t sdm_bootrom_info_init_cmf(const signature_descriptor_t *signature_desc),71
1858,void sdm_early_init(void),118
1859,void mcore_nios2_tmr_isr(void* isr_context),295
1860,int main(void),300
1861,Copyright (C) 2021 Intel Corporation. All rights reserved.,4
1862,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
1863,sdm_return_t wdt_install_ramboot(),38
1864,Copyright (2018) Intel Corporation,3
1865,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1866,connected CNTs such as CRETE the related directly connected node (AIB in this case) must pass,52
1867,static sdm_return_t parse_status(cnt_status_packet_t const * status),69
1868,This function can be called by the multicast_event() function or called directly,140
1869,to a void * so that this call can be used by multicast_event().,144
1870,"static sdm_return_t check_cnt_status_response(cnoc_handle_t handle, uint8_t bus, cnoc_addr_t cnoc_addr)",153
1871,"sdm_return_t action_check_cnt_status(check_cnt_status_action_t const * const action,",222
1872,Copyright (2019) Intel Corporation,3
1873,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1874,to give the sector processor time to process a command which has been sent to it (for example by,33
1875,CNOC have completed (eg CNOC_SEND or SECTOR_GROUP). It must then start a timer with an expiry,37
1876,"sdm_return_t action_cnoc_delay(cnoc_delay_action_t const * const action,",47
1877,Copyright (2018-19) Intel Corporation,3
1878,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1879,A production CMF applies security checks before sending the packet(s) to ensure that the values,45
1880,being sent are not useful to an attacker (see section 7.10.14.2).,46
1881,- Split the packet into header (first 3 words) and data (remaining words),51
1882,- SDM pauses for the number of cycles specified in the packet (this will normally be 512 or 1024),64
1883,(sync_count number) and not treat them as credits. This is only applicable,78
1884,"static sdm_return_t issue_cvp_sync_adjust(cnoc_handle_t cnoc_handle, uint32_t sync_count)",83
1885,static sdm_return_t send_timing_sync(cnoc_handle_t cnoc_handle),108
1886,"sdm_return_t action_cnoc_send(cnoc_send_action_t const * const action, cnoc_handle_t cnoc_handle)",128
1887,Copyright (2019) Intel Corporation,3
1888,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1889,[Nadder Configuration Data Formats](http://rd/ice/product/Nadder/Documentation/FS/Nadder_Config_Data.docx).,31
1890,"(for example, a debug build might insert these actions).",37
1891,sdm_return_t action_comment(comment_action_t const * const action),48
1892,Copyright (2017) Intel Corporation,3
1893,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1894,@param pin_asserted is state of the pin in hardware (based on mask).,41
1895,"static void sdm_cfg_status_update_softstat(bool pin_asserted, uint32_t mask)",45
1896,void sdm_cfg_status_set_softstat_seu_error(bool pin_asserted),71
1897,sdm_return_t action_config_pin(config_pin_action_t const * const action),87
1898,Copyright (2018) Intel Corporation,3
1899,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1900,"sdm_return_t fixed_firmware_id_hash_check(comp_config_handle_t config_handle, uint32_t firmware_id)",51
1901,[Nadder Configuration Data Formats](http://rd/ice/product/Nadder/Documentation/FS/Nadder_Config_Data.docx).,100
1902,a fixed action (which requests permissions) is compared with the security permissions field from,116
1903,he main descriptor (which enables permissions).  If a bit is set in the fixed action word but not,117
1904,- Fail if the current fixed_block counter is non-zero (not allowed to have one FIXED region inside,122
1905,"sdm_return_t action_fixed(comp_config_handle_t config_handle,",137
1906,"when we process each fixed group, will compare the fixed block (not the data blocks in that fixed group)",234
1907,sdm_return_t fixed_fw_hash_write(const cmf_descriptor_t *p_cmf_descriptor),239
1908,Copyright (2019) Intel Corporation,3
1909,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1910,unset (implicitly containing all nodes) then it is replaced by a filter containing only,52
1911,"STATIC sdm_return_t amend_fuse_filter_list(const cnoc_addr_t new_list[], const uint32_t nentry, cnoc_addr_t * const p_filter_list)",77
1912,"STATIC sdm_return_t cvp_fuse_filter(uint32_t bitfield, cnoc_addr_t * p_filter_list)",114
1913,"STATIC sdm_return_t fuse_filter_create(uint32_t fuse_bitmask, uint32_t fuse_type, cnoc_addr_t * p_filter_list, uint32_t filter_list_length)",173
1914,sdm_return_t action_fuse_filter(fuse_filter_action_t const * const action),270
1915,Copyright (2018) Intel Corporation,3
1916,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1917,[Nadder Configuration Data Formats](http://rd/ice/product/Nadder/Documentation/FS/Nadder_Config_Data.docx).,33
1918,(block Size in bytes - routing bytes - hash_action in bytes) / size of hash in bytes.,47
1919,"sdm_return_t action_hashes(hashes_action_t const * const action, comp_config_handle_t config_handle)",54
1920,Copyright (2020) Intel Corporation,3
1921,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1922,The HPS OCRAM starts at 0xFFE00000 (inclusive) and ends at 0xFFE40000 (exclusive).  The SMMU,51
1923,window starts at address 0x80000000 and ends at 0xA0000000 (exclusive).,52
1924,For a memory range to be valid (address >= window_start) and (address + length <= window_end).,53
1925,"sdm_return_t hps_download_check_encryption(hps_download_action_t const * const hps_download_action,",97
1926,"sdm_return_t action_hps_download(hps_download_action_t const * const action, comp_config_handle_t config_handle)",139
1927,Copyright (2018-19) Intel Corporation,3
1928,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1929,static void print_if_condition(exp_t exp_array[]),128
1930,static void expression_init(void),146
1931,static exp_t *get_exp_node(void),171
1932,static int32_t process_var(uint16_t var_code),189
1933,static int32_t process_expression(exp_t *exp_head_ptr),247
1934,uint32_t action_if_num_skip_actions_get(void),315
1935,uint32_t action_if_num_skip_blocks_get(void),325
1936,void action_if_num_skip_blocks_decrement(uint32_t num_blocks),329
1937,sdm_return_t action_skip(comp_config_handle_t config_handle),337
1938,sdm_return_t action_if(if_action_t const * const action),371
1939,void action_if_cvp(bool is_cvp),606
1940,void action_if_hps(bool is_hps),617
1941,void action_if_fpga(bool is_fpga),629
1942,void action_if_hpio(bool is_hpio),641
1943,void action_if_ddr(bool is_ddr),653
1944,void action_if_hps_first(bool is_hps_first),665
1945,void action_if_hps_hold(bool is_hps_hold),678
1946,void action_if_hps_present(bool is_hps_present),689
1947,void action_if_disable_protection(void),694
1948,This function reads the bitstream variable DDR (0x100) value,703
1949,bool action_if_get_ddr(void),709
1950,This function reads the bitstream variable HPS_FIRST (0x101) value.,715
1951,bool action_if_get_hps_first(void),721
1952,This function reads the bitstream variable HPS_HOLD (0x102) value,727
1953,bool action_if_get_hps_hold(void),733
1954,This function reads the bitstream variable HPS_PRESENT (0x103) value.,739
1955,bool action_if_get_hps_present(void),745
1956,This function reads the configuration variable protect_hpio (0x3) value.,751
1957,bool action_if_get_protect_hpio(void),757
1958,This function reads the configuration variable protect_fpga (0x2) value,763
1959,bool action_if_get_protect_fpga(void),767
1960,This function reads the configuration variable protect_hps (0x4) value.,773
1961,bool action_if_get_protect_hps(void),779
1962,bool action_if_get_protect_cvp(void),791
1963,bool action_if_condition(void),796
1964,void action_if_init(void),809
1965,Copyright (2018) Intel Corporation,3
1966,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1967,When the CMF is entered this table starts off as empty (that is each valid CNT address starts,50
1968,void action_indexsize_init(void),86
1969,"static cmf_return_t set_indexsize_ptr(uint32_t indexsize_node_index, uint16_t indexsize_tbl_index)",107
1970,@brief This function is called to return the ptr (index) value for the given node that holds the,120
1971,static uint16_t get_indexsize_ptr(uint32_t indexsize_node_index),126
1972,"uint32_t is_indexsize_entry_equal(indexsize_entry_t new_entry, indexsize_entry_t table_entry)",144
1973,"@return -1 if operation fails (if table full), or index where entry was added",182
1974,static int32_t add_to_indexsize_table(indexsize_entry_t new_indexsize_entry),184
1975,This is a function that can be called by the multicast_event() function.,221
1976,"static cmf_return_t mulitcast_indexsize_update(uint8_t bus, cnoc_addr_t *cnoc_addr, void *p_data)",229
1977,(see section 7.10.12),251
1978,sdm_return_t action_indexsize(indexsize_action_t const *action),268
1979,int32_t action_indexsize_size_from_template(cnoc_header_template_t *p_template),320
1980,int32_t get_idxsz_from_cnoc_send(cnoc_send_action_t  *p_cnoc_send),394
1981,Copyright (2018) Intel Corporation,3
1982,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1983,"sdm_return_t action_interrupt_wait(interrupt_wait_action_t const * const action, cnoc_handle_t cnoc_handle)",56
1984,Copyright (2020) Intel Corporation,3
1985,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1986,[Nadder Configuration Data Formats](http://rd/ice/product/Nadder/Documentation/FS/Nadder_Config_Data.docx).,25
1987,static sdm_return_t keys_action_valid(keys_action_t const * const action),45
1988,"sdm_return_t action_keys(keys_action_t const * const base_action, comp_config_handle_t comp_config)",103
1989,Copyright (2018) Intel Corporation,3
1990,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1991,"static void key_challenge_cleanup(uint32_t *p_data_buffer,",52
1992,"sdm_return_t action_key_challenge(key_challenge_action_t const * const base_action, comp_config_handle_t config_handle)",84
1993,Copyright (2018-19) Intel Corporation,3
1994,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1995,[Nadder Configuration Data Formats](http://rd/ice/product/Nadder/Documentation/FS/Nadder_Config_Data.docx).,31
1996,"sdm_return_t action_multicast(multicast_action_t * const action, cnoc_handle_t cnoc_handle)",55
1997,Copyright (2018-19) Intel Corporation,3
1998,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
1999,sdm_return_t action_multicast_filter(multicast_action_t const * const action),28
2000,sdm_return_t action_test_jtag(base_action_t const * const action),20
2001,Copyright (2018) Intel Corporation,3
2002,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2003,static sdm_return_t action_operation_sdm_to_fpga_disable(void),67
2004,static sdm_return_t action_operation_sdm_to_fpga_enable(void),116
2005,static sdm_return_t action_operation_fpga_prepare_bridge_shutdown(void),183
2006,static sdm_return_t action_operation_user_logic_reset_release(void),201
2007,static sdm_return_t action_operation_user_logic_reset_assert(void),217
2008,static sdm_return_t action_operation_release_bank3a_disable_avst(void),232
2009,static sdm_return_t action_operation_select_delay_set(cnoc_handle_t cnoc_handle),247
2010,static sdm_return_t action_operation_pwr_management_enable(void),260
2011,static sdm_return_t action_operation_pwr_management_disable(void),284
2012,static sdm_return_t action_operation_limit_cnoc_clk_half_speed(void),302
2013,static sdm_return_t action_operation_limit_cnoc_clk_full_speed(void),326
2014,static sdm_return_t action_operation_accurate_usr_clk_enable(void),350
2015,static sdm_return_t action_operation_accurate_usr_clk_disable(void),373
2016,static sdm_return_t action_operation_hps_mpu_realease(void),412
2017,static sdm_return_t action_operation_hps_assert_por_reset(void),424
2018,static sdm_return_t action_operation_hps_assert_cold_reset(void),446
2019,static sdm_return_t action_operation_hps_release_por_reset(void),465
2020,static sdm_return_t action_operation_hps_release_cold_reset(void),487
2021,static sdm_return_t action_operation_hps_ocram_wipe(void),506
2022,static sdm_return_t action_operation_hps_mpfe_release(void),540
2023,static sdm_return_t action_operation_hps_ddr_calibrate(void),559
2024,static sdm_return_t action_operation_hps_mpu_ready(void),578
2025,static sdm_return_t action_operation_hps_io_clock_gate(void),597
2026,static sdm_return_t action_operation_inform_hps_fpga_in_usermode(void),616
2027,static sdm_return_t action_operation_hps_memory_repair(void),635
2028,static sdm_return_t action_operation_inform_hps_fpga_not_in_usermode(void),654
2029,static sdm_return_t action_operation_wait_for_hps_command_complete(void),685
2030,static sdm_return_t action_operation_esram_tnm_reset_assert(cnoc_handle_t cnoc_handle),703
2031,static sdm_return_t action_operation_esram_tnm_reset_release(cnoc_handle_t cnoc_handle),720
2032,static sdm_return_t action_operation_sdm_release_handler(uint32_t parameter),738
2033,"static sdm_return_t action_operation_send_jtagid(const cnoc_handle_t cnoc_handle, const uint8_t bus, const cnoc_addr_t cnoc_addr)",770
2034,static sdm_return_t action_operation_sector_zero_check(cnoc_handle_t cnoc_handle),790
2035,"sdm_return_t action_operation(operation_action_t const * const action,",834
2036,Copyright (2019) Intel Corporation,3
2037,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2038,"sdm_return_t action_padding(base_action_t *action, uint32_t size)",30
2039,Copyright (2018-2019) Intel Corporation,3
2040,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2041,[Nadder Configuration Data Formats](http://rd/ice/product/Nadder/Documentation/FS/Nadder_Config_Data.docx).,52
2042,@param eram_lanes is the number of ERAM threads in the dc_thread parameter(not used by ND).,108
2043,@param ofifo0_threads is the number of FIFO threads in the dc_thread parameter(not used by ND).,109
2044,@param ofifo1_threads is the number of FIFO threads in the dc_thread parameter(not used by ND).,110
2045,"static void write_dc_params(decomp_handle_t decomp_handle,",114
2046,"static sdm_return_t write_s4_params(cnoc_bus_idx_t bus,",170
2047,"static sdm_return_t sector_group_dc_thread_write(decomp_handle_t decomp_handle,",250
2048,static sdm_return_t sector_group_action_valid(sector_group_action_t const * const action),299
2049,@param get_dc0_key integer value (CNOC templates for DC0) if 0 we do not need a key for DC0,417
2050,@param get_dc1_key integer value (CNOC templates for DC1) if 0 we do not need a key for DC1,418
2051,"@param encrypt_enabled pointer to boolean which is filled in with true if encrypt enabled, and successfully get key(s)",421
2052,"sdm_return_t sector_group_check_encryption(uint32_t aes_key_selection,",426
2053,"void sector_group_aes_key_free(bool encrypt_enabled,",552
2054,static void sector_group_init(sector_group_action_t const * const action),578
2055,static sdm_return_t sector_group_template_update(cnoc_handle_t cnoc_handle),655
2056,"static sdm_return_t sector_group_template_init(cnoc_handle_t cnoc_handle, cfg_data_type_t type)",711
2057,"static sdm_return_t sector_group_dc_init(decomp_handle_t decomp_handle, cnoc_bus_idx_t bus,",758
2058,"static bool sector_group_complete(decomp_handle_t dc0_handle,",846
2059,"sdm_return_t action_sector_group(sector_group_action_t const * const action,",980
2060,Copyright (2019) Intel Corporation,3
2061,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2062,sector list mutable templates (see section 7.10.11.1.2).,28
2063,sdm_return_t action_sector_list(multicast_action_t * const sector_list),45
2064,Copyright (2019) Intel Corporation,3
2065,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2066,[Nadder Configuration Data Formats](http://rd/ice/product/Nadder/Documentation/FS/Nadder_Config_Data.docx).,40
2067,which group of literal values are represented by 8 bits (the first 0x90 values) and which are represented,60
2068,by 9 bits (the remaining 0x70 values).  Within each group the bytes should be in ascending order.,61
2069,"@param encrypt_enabled pointer to boolean which is filled in with true if encrypt enabled, and successfully get key(s)",81
2070,"sdm_return_t setup_decomp_check_encryption(setup_decompression_action_t * setup_decomp_action,",86
2071,"void setup_decomp_aes_key_free(bool encrypt_enabled,",152
2072,"static sdm_return_t setup_decomp_write_codebook(comp_config_handle_t comp_config_handle,",179
2073,"sdm_return_t action_setup_decomp(setup_decompression_action_t const * const base_action, comp_config_handle_t config_handle)",465
2074,Copyright (2018) Intel Corporation,3
2075,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2076,"sdm_return_t action_setup_libraries(setup_libraries_action_t const * const action, comp_config_handle_t config_handle)",45
2077,Copyright (2018) Intel Corporation,3
2078,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2079,sdm_return_t action_test_jtag(base_action_t const * const action),41
2080,Copyright (2020) Intel Corporation,3
2081,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2082,"static sdm_return_t sdm_verify_hash_send_command(cnoc_handle_t cnoc_handle, ",59
2083,"@param viaROM_index is the start Index for viaROM. (Valid only for viaROM data, rest its 0)",98
2084,"@param viaROM_address is the starting address of viaROM. (Valid only for viaROM data, rest its 0)",99
2085,"@param viaROM_size gives the size of data to be read from viaROM in bytes. (Valid only for viaROM data, rest its 0)",100
2086,"sdm_return_t sdm_verify_hash( comp_config_handle_t config_handle,  ",124
2087,"sdm_return_t action_verify_hash(comp_config_handle_t config_handle, base_action_t const * const action)",282
2088,Copyright (2019) Intel Corporation,3
2089,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2090,bool cnoc_template_is_nop_channel(uint8_t channel),43
2091,static int8_t cnoc_template_nop_channel_to_idx(uint8_t channel),66
2092,"sdm_return_t cnoc_template_update(cnoc_handle_t cnoc_handle, cnoc_bus_idx_t bus_idx,",102
2093,"sdm_return_t cnoc_template_write(cnoc_handle_t cnoc_handle,",274
2094,Copyright (2018) Intel Corporation,3
2095,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2096,"sdm_return_t int_wait_template_set(cnoc_handle_t cnoc_handle, cnoc_bus_idx_t bus, uint8_t idx)",101
2097,void int_wait_init(void),140
2098,sdm_return_t int_wait_set(uint32_t timeout_entry),163
2099,based on a count of clocks * 256. This is unlike int_wait_set() which uses the,195
2100,void int_wait_set_count(uint32_t count),203
2101,bool int_wait_timeout(cnoc_handle_t cnoc_handle),238
2102,void int_wait_timeout_start(cnoc_handle_t cnoc_handle),259
2103,void int_wait_timeout_stop(void),271
2104,"static void SDM_trace_int_done(cnoc_bus_idx_t bus_idx, uint32_t line)",282
2105,"static void SDM_trace_int_wait(cnoc_bus_idx_t bus_idx, uint32_t line)",308
2106,"static sdm_return_t int_wait_bus_update(cnoc_handle_t cnoc_handle,uint32_t flag, cnoc_bus_idx_t bus_idx, uint8_t template_idx)",341
2107,sdm_return_t int_wait_update(cnoc_handle_t cnoc_handle),415
2108,bool int_wait_pending(int_wait_cnoc_bus_mask_t bus),499
2109,Copyright (2019) Intel Corporation,3
2110,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2111,static void cnoc_addr_list_inc(cnoc_addr_list_t * list),63
2112,static void fuse_filter_init(void),73
2113,"static void cnoc_addr_list_apply_filter(cnoc_addr_t * p_baseline, uint32_t baseline_count,",91
2114,"static sdm_return_t multicast_list_init(multicast_action_t * p_multicast, multicast_action_t * p_filter)",131
2115,"sdm_return_t multicast_list_cnocaddr_get(cnoc_bus_idx_t bus_idx, cnoc_addr_t * p_cnoc_addr)",238
2116,sdm_return_t multicast_action_valid(multicast_action_t const * const p_action),256
2117,"sdm_return_t multicast_enable(cnoc_handle_t cnoc_handle, uint8_t bus, cnoc_addr_t cnoc_addr)",279
2118,sdm_return_t multicast_disable(cnoc_handle_t cnoc_handle),287
2119,"sdm_return_t multicast_call_function(multicast_function_t mcast_function, cnoc_handle_t cnoc_handle)",295
2120,sdm_return_t multicast_list_set(multicast_action_t const * const p_multicast_action),329
2121,sdm_return_t multicast_filter_set(multicast_action_t const * const p_mcast_filter_action),353
2122,"sdm_return_t fuse_filter_set(const cnoc_addr_t * const p_filter, const uint32_t filter_count)",381
2123,"sdm_return_t fuse_filter_get(cnoc_addr_t * const p_filter, const uint32_t filter_count)",398
2124,sdm_return_t multicast_list_clear(void),412
2125,sdm_return_t multicast_filter_clear(void),434
2126,sdm_return_t fuse_filter_clear(void),445
2127,"sdm_return_t multicast_list_update_templates(cnoc_handle_t cnoc_handle, cnoc_bus_idx_t bus, uint32_t hw_idx)",456
2128,"sdm_return_t sector_list_update_templates(cnoc_handle_t cnoc_handle, cnoc_bus_idx_t bus, uint32_t mask)",481
2129,Copyright (2019) Intel Corporation,3
2130,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2131,static bool cmf_action_current_valid(void),71
2132,sdm_return_t cmf_action_inc(void),93
2133,void cmf_action_init(void),121
2134,void cmf_action_free(void),128
2135,bool cmf_action_empty(void),137
2136,sdm_return_t cmf_action_add(base_action_t * action),146
2137,bool cmf_action_is_current_fixed(void),167
2138,bool config_bitstream_fixed_block(void),184
2139,"sdm_return_t config_action_handler(comp_config_handle_t config_handle,",195
2140,Copyright (2018) Intel Corporation,3
2141,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2142,void cmf_config_aes_init(void),76
2143,-   call cmf_keys_fifo_section_key_valid() API to indicate a valid section key was discovered.,90
2144,"sdm_return_t cmf_config_aes_check_encryption_enabled(comp_config_handle_t comp_handle, const main_descriptor_t *main_descriptor)",99
2145,sdm_return_t cmf_config_aes_check_root_key_enabled(const aes_key_select_t root_key_select),209
2146,"sdm_return_t cmf_config_aes_get_root_key_to_kv(comp_config_handle_t comp_handle, aes_key_select_t key_select)",273
2147,void cmf_config_aes_clear_root_key_from_kv(void),387
2148,STATIC cmf_key_id_t cmf_config_aes_get_root_key_ukv_slot(void),406
2149,STATIC void cmf_config_aes_set_root_key_ukv_slot(const cmf_key_id_t ukv_slot_id),416
2150,-   call cmf_keys_fifo_section_key_valid() API to indicate a valid section key was discovered.,429
2151,sdm_return_t cmf_config_aes_process_section_key(const main_descriptor_t *main_descriptor),435
2152,bool cmf_config_aes_check_encrypt_enabled_for_section(const aes_key_select_t aes_root_key_select),597
2153,"sdm_return_t cmf_config_aes_check_key_update_enabled(const main_descriptor_t *main_descriptor,",615
2154,Copyright (2018) Intel Corporation,3
2155,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2156,"STATIC sdm_return_t cmf_config_aes_efuse_wrap_key(const crypto_context_t * const crypto_ctx,",47
2157,@brief This function decrypts data in key form (key as data) to a location in RAM and also key vault,56
2158,"STATIC sdm_return_t cmf_config_aes_efuse_physical_decrypt_key_toram(const crypto_context_t * const crypto_ctx, cmf_key_t *efuse_raw_key, cmf_key_t *test_key, cmf_key_t *decoded_key, cmf_mpi_t *mpi_decoded_key, uint32_t* p_data)",64
2159,"STATIC void cmf_config_aes_efuse_clean_keys(cmf_key_t * key1, cmf_key_t * key2, cmf_key_t * key3, cmf_key_t * key4)",125
2160,"STATIC sdm_return_t cmf_config_aes_efuse_physical_program_check_validity(const crypto_context_t * const crypto_ctx, cmf_key_t *efuse_raw_key)",160
2161,"sdm_return_t cmf_config_aes_efuse_program(const crypto_context_t * const crypto_ctx,",308
2162,"STATIC sdm_return_t cmf_config_aes_efuse_wrap_key(const crypto_context_t * const crypto_ctx,",546
2163,"sdm_return_t cmf_config_aes_efuse_unwrap_key(const crypto_context_t * const crypto_ctx,",676
2164,bool cmf_config_aes_efuse_is_key_programmed(),905
2165,Copyright (2018) Intel Corporation,3
2166,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2167,"void sdm_trace_dont_call(unsigned long key, unsigned long line)",43
2168,"sdm_return_t cmf_config_aes_config_context_and_decrypt_key(uint32_t *p_key,",77
2169,"sdm_return_t cmf_config_aes_decrypt_key_from_ram_to_ukv(uint32_t *p_key,",172
2170,"sdm_return_t cmf_config_aes_configure_context(cmf_key_t *key,",276
2171,"bool cmf_config_aes_swizzle_key_cipher(const uint32_t *const p_source,",326
2172,void cmf_config_aes_clean_and_free_ukv_slot(cmf_key_id_t slot),371
2173,sdm_return_t cmf_config_aes_keysource_clean_confirm(,395
2174,Copyright (2019) Intel Corporation,3
2175,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2176,STATIC sdm_return_t config_cnoc_scramble_configure_context( crypto_context_t *p_cnoc_scr_ctx,50
2177,STATIC sdm_return_t config_cnoc_scramble_generate_random_number_hmac_drbg( crypto_context_t *p_cnoc_scr_ctx,53
2178,"STATIC sdm_return_t config_cnoc_scramble_generate_key_iv(crypto_context_t *p_cnoc_scr_ctx, cmf_mpi_t *const cnoc_scramble_key,cmf_mpi_t *const cnoc_scramble_iv,",59
2179,"STATIC sdm_return_t config_cnoc_scramble_validity_check_key_iv(const cmf_mpi_t *const key,const cmf_mpi_t *const iv)",82
2180,STATIC sdm_return_t config_cnoc_scramble_enable_trng_outbuf( out_buf_handle_t outbuf_handle),121
2181,STATIC sdm_return_t config_cnoc_scramble_generate_random_number_hmac_drbg( crypto_context_t *p_cnoc_scr_ctx,145
2182,"STATIC void config_cnoc_scramble_clean_key_iv(cmf_mpi_t *cnoc_scramble_key,cmf_mpi_t *cnoc_scramble_iv)",172
2183,"STATIC sdm_return_t config_cnoc_scramble_generate_key_iv(crypto_context_t *p_cnoc_scr_ctx, cmf_mpi_t *const cnoc_scramble_key,cmf_mpi_t *const cnoc_scramble_iv,",187
2184,STATIC sdm_return_t config_cnoc_scramble_configure_context( crypto_context_t *p_cnoc_scr_ctx,212
2185,sdm_return_t config_cnoc_scramble_check_scrambler_enabled(crypto_context_t *p_cnoc_scr_ctx,291
2186,sdm_return_t config_cnoc_scramble_reset( ),362
2187,bool config_cnoc_scramble_is_enabled_in_bitstream( void ),390
2188,void config_cnoc_scramble_enable( cnoc_handle_t handle ),407
2189,void config_cnoc_scramble_disable( cnoc_handle_t handle ),422
2190,void config_psi_scramble_enable(),434
2191,void config_psi_scramble_disable(void),449
2192,bool config_cnoc_scramble_dc_infifo_empty( cnoc_handle_t cnoc_handle,467
2193,"sdm_return_t config_cnoc_scramble_fill_outputbuffer( cnoc_handle_t cnoc_handle, out_buf_handle_t outbuf_handle)",495
2194,STATIC sdm_return_t config_cnoc_scramble_init( crypto_context_t *p_cnoc_scr_ctx ),605
2195,Copyright (2019) Intel Corporation,3
2196,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2197,Copyright (2019) Intel Corporation,3
2198,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2199,STATIC uint32_t fpga_stream_count= 0;  /* this variable is synchronized via irq_enable/irq_disable(FPGA_GPIO_0_IRQ_ID) */,76
2200,"static uint32_t check_fpga_stream_pause(uint32_t block_count, uint32_t pause_count)",124
2201,uint32_t get_fpga_sa(void),176
2202,bool get_fpga_cancel(void),181
2203,bool get_fpga_rcfg_avst(void),186
2204,bool get_fpga_sa_paused(void),191
2205,void set_fpga_cancel(bool val),196
2206,void set_fpga_sa_paused(bool val),201
2207,void set_fpga_rcfg_avst(bool val),206
2208,void fpga_stream_static_init(void),211
2209,void fpga_set_stream_active_client(void),223
2210,void fpga_stream_resume(void),232
2211,static void FPGA_stream_isr(void* unused),286
2212,void fpga_stream_init(uint32_t cmd_hdr_client),339
2213,void fpga_stream_done(void),363
2214,Copyright (2019) Intel Corporation,3
2215,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2216,static void __attribute__ ((noinline)) hps_loop_and_release_mpu(void),86
2217,STATIC void config_hps_update_reset_reason(void),114
2218,@param assert - true (assert) false (dessert),138
2219,"void hps_set_rst_pin_dir(uint32_t pin_dir, bool assert)",142
2220,void hps_config_setup_irq(void),162
2221,sdm_return_t config_hps_warm_reset(void),175
2222,sdm_return_t operation_inform_hps_fpga_in_usermode(void),209
2223,sdm_return_t operation_inform_hps_fpga_not_in_usermode(void),222
2224,sdm_return_t operation_hps_mpu_release(void),233
2225,sdm_return_t operation_hps_assert_por_reset(void),257
2226,sdm_return_t operation_hps_assert_cold_reset(void),326
2227,sdm_return_t operation_hps_release_por_reset(void),377
2228,sdm_return_t operation_hps_release_cold_reset(void),407
2229,sdm_return_t operation_hps_memory_repair(void),440
2230,sdm_return_t operation_hps_ocram_wipe(void),460
2231,sdm_return_t operation_hps_io_clock_gate(void),474
2232,sdm_return_t operation_hps_mpfe_release(void),500
2233,sdm_return_t operation_hps_ddr_calibrate(void),518
2234,sdm_return_t operation_hps_mpu_ready(void),538
2235,sdm_return_t operation_hps_command_complete(void),581
2236,sdm_return_t config_hps_jtag_config(void),635
2237,static uint32_t __attribute__ ((noinline)) check_status_dc0_wdma(comp_config_handle_t config_handle),699
2238,"sdm_return_t config_hps_download_mem_range(uint32_t remain_blocks, bool encrypt_enabled, comp_config_handle_t config_handle)",722
2239,void PSI_isr(void* unused),917
2240,void hps_warm_reset_entry(void),955
2241,sdm_return_t hps_warm_reset_exit(void),986
2242,void check_hps_bitstream_variable(uint32_t bitstream_var),1101
2243,void hps_config_warm_reset_int(bool enable),1127
2244,void hps_enter_error_state(void),1142
2245,void hps_take_back_qspi(void),1156
2246,also updates the persistent area on what caused MPFE to be reset (DBE/SDRAM init failure).,1187
2247,@param [untrusted] is_wipe \e true if HPS wipe is involved (in case of HPS cold reset/device reconfigurations),1188
2248,This function should be called before starting the (HPS) wipe sequence playback.,1191
2249,void config_hps_reset_error_handler(bool is_wipe),1194
2250,Copyright (2019) Intel Corporation,3
2251,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2252,uint32_t config_hps_get_stream_lock(void),70
2253,void config_hps_set_stream_paused(bool hps_stream_paused),75
2254,bool config_hps_get_stream_paused(void),80
2255,bool config_hps_is_stream_active_paused(void),85
2256,bool config_hps_is_stream_active(void),96
2257,uint32_t config_hps_get_stream_cnt(void),101
2258,uint32_t config_hps_get_stream_max_resume_size(void),106
2259,bool config_hps_set_stream_max_resume_size(uint32_t value),111
2260,"bool config_hps_stream_add_data(uint32_t resp_head, uint32_t addr, uint32_t len)",138
2261,sdm_return_t config_hps_stream_load_dma(void),187
2262,uint32_t config_hps_stream_size_available(void),252
2263,void config_hps_stream_resume(uint32_t size),297
2264,sdm_return_t config_hps_stream_response(void),421
2265,sdm_return_t config_hps_stream_cleanup(uint32_t resp_status),456
2266,"sdm_return_t config_hps_stream_init(ALT_SDM_MBOX_SOURCE_t source, uint32_t cmd_hdr)",494
2267,void config_hps_stream_enqueue_data(void),530
2268,void config_hps_stream_dma_hdlr(void),550
2269,Copyright (2020) Intel Corporation,3
2270,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2271,sdm_return_t cmf_keys_fifo_init(comp_config_handle_t handle),66
2272,sdm_return_t cmf_keys_fifo_reset(void),106
2273,sdm_return_t cmf_keys_fifo_section_key_valid(uint32_t section_key_slot),189
2274,-   Call Packets_skip_get() use this to discard data from KEYS data block (unused key slots at start of block),219
2275,-   Call cmf_aes_keys_process_next_block_key() which will decrypt the first valid key in the block and save ,220
2276,-   Save a copy of the initialization vectors from KEYS block header (maybe two sets for DC0 and DC1 if SECTOR_GROUP),222
2277,"sdm_return_t cmf_keys_fifo_process_keys_block(const uint32_t padding_bytes,",234
2278,"sdm_return_t cmf_keys_fifo_get_key_challenge_key(const cmf_keys_fifo_key_type_t action_key_type,",397
2279,void cmf_keys_fifo_key_challenge_pass(const cmf_keys_fifo_key_type_t key_type),454
2280,"sdm_return_t cmf_keys_fifo_get_action_key(const cmf_keys_fifo_key_type_t action_key_type,",485
2281,void cmf_keys_fifo_key_done(const cmf_keys_fifo_key_type_t key_type),558
2282,uint32_t cmf_keys_fifo_get_key_count(),600
2283,"sdm_return_t cmf_keys_fifo_get_aes_context_id(const cmf_keys_fifo_key_type_t key,",622
2284,"@param interval interval length (0 = no update, 1/3/7/15/31/127/255 = N*32bytes data, followed by one key",659
2285,void cmf_keys_fifo_set_key_update_mode_enabled(const uint32_t interval),663
2286,bool cmf_keys_fifo_set_get_update_mode_enabled(),672
2287,-   called by cmf_keys_fifo_process_keys_block(),681
2288,-   call cmf_keys_fifo_get_key() to transfer the key to the AES,683
2289,sdm_return_t cmf_keys_fifo_process_next_block_key(),691
2290,"sdm_return_t cmf_keys_fifo_configure_context(const uint32_t kv_slot_id,",768
2291,sdm_return_t cmf_keys_fifo_free_aes_context(const cmf_keys_fifo_key_type_t key_type),860
2292,STATIC void cmf_keys_fifo_goto_error(void),939
2293,sdm_return_t cmf_keys_fifo_flush_fifo(),968
2294,void cmf_keys_fifo_invalidate_all_aes_contexts(void),1047
2295,void cmf_keys_fifo_clear_keys_block_iv(void),1065
2296,"sdm_return_t cmf_keys_fifo_load_update_key_to_aes_context(uint32_t kv_slot_id,",1076
2297,@brief This function manually updates the keys block key (HW deficiency prevents auto update),1100
2298,sdm_return_t cmf_keys_fifo_check_keys_block_key_update(const cmf_keys_fifo_key_type_t keys_decrypt_key_type),1106
2299,Copyright (2019) Intel Corporation,3
2300,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2301,void config_flags_set(uint32_t flag_pos),102
2302,void config_flags_clear(uint32_t flag_pos),122
2303,uint32_t config_flags_get(),143
2304,static void hps_config_setup_protection_flags(void),165
2305,static int32_t config_state_post_msg(config_event_t event),183
2306,sdm_return_t config_input_accept_header(void),227
2307,sdm_return_t config_input_accept_main(void),258
2308,static void event_anti_tamper_handler(void),284
2309,static void event_jtag_config_handler (config_event_t temp_event),326
2310,static void event_nconfig_assert_handler(void),382
2311,static void event_nconfig_deassert_handler(void),454
2312,static void event_nhpsreset_assert_handler(),485
2313,static void event_nhpsreset_deassert_handler(),517
2314,static void event_hps_coldreset_handler(),528
2315,static void event_reconfig_handler(),587
2316,static void event_vab_bs_preauth_handler(),696
2317,void config_state_set_protection_flags_for_wipe(config_event_t event),726
2318,void config_state_async_event_inject(config_event_t event),778
2319,void config_state_set_hps_ready(bool status),1090
2320,void config_state_set_fpga_ready(bool status),1095
2321,void config_state_set_hpio_ready(bool status),1100
2322,void config_state_set_cvp_init_ready(bool status),1105
2323,void config_state_set_cnoc_initialized(bool status),1110
2324,comp_config_handle_t config_state_get_comp_config_handle(void),1115
2325,void config_state_set_security_challenge_ready(bool status),1120
2326,void config_state_init(void),1130
2327,config_state_t get_config_state(void),1203
2328,config_status_t get_config_status(void),1208
2329,bool config_state_get_hps_running(void),1213
2330,bool config_state_get_reconfig_active(void),1222
2331,bool config_state_get_nconfig_active(void),1232
2332,bool config_state_get_error_active(void),1242
2333,bool config_state_get_transition_flag(void),1250
2334,void config_state_set_qspi_src_addr(void),1259
2335,void config_state_check_async_events(void),1296
2336,int32_t config_state_update_async(config_event_t event),1348
2337,void config_state_check_interruption(void),1369
2338,bool config_state_interrupted(void),1442
2339,void set_config_state_mbox_source(mbox_config_source_t mbox_config_source),1466
2340,mbox_config_source_t config_state_get_mbox_source(void),1471
2341,void cmf_config_cvp_type_set(cvp_types_enum_t type),1476
2342,cvp_types_enum_t cmf_config_cvp_type_get(void),1481
2343,"void set_config_state_error(uint32_t error_code, uint32_t error_detail)",1489
2344,void print_config_event(config_event_flag_t event),1496
2345,sdm_return_t config_state_check_hps_request(void),1514
2346,void config_state_mbox_post_wipe_done(void),1617
2347,void config_state_set_pr_bitstream_only(bool pr_bitstream_only),1635
2348,bool config_state_get_hps_cold_reset_active(void),1640
2349,Copyright (2019) Intel Corporation,3
2350,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2351,void config_task(void * data),77
2352,void config_task_init(void),269
2353,Copyright (2018) Intel Corporation,3
2354,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2355,void config_wipe_error_set(bool error),59
2356,bool config_wipe_error_get(void),69
2357,void config_wipe_done(void),79
2358,bool config_wipe_active(void),89
2359,The return value is suitable for passing to the cmf_bitstream_routes_add() function to add,103
2360,static uint32_t config_wipe_routes_get(uint32_t blocks),108
2361,"sdm_return_t config_wipe_pass2_blocks(comp_config_handle_t config_handle, uint32_t size, uint32_t blocks)",129
2362,"sdm_return_t config_wipe_start(comp_config_handle_t config_handle, uint32_t *wipe_uncompress_size)",293
2363,Copyright (2018) Intel Corporation,3
2364,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2365,sdm_return_t debug_cert_reset(void),39
2366,bool debug_cert_hps_debug_enabled(void),56
2367,bool debug_cert_fpga_debug_enabled(void),71
2368,void debug_cert_flag_set(uint32_t cert_type),86
2369,sdm_return_t debug_cert_valid(const rma_eng_descriptor_t *p_descriptor),103
2370,"sdm_return_t debug_cert_authenticate(const signature_descriptor_t * const p_signature_desc,",140
2371,Copyright (2019) Intel Corporation,3
2372,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2373,uint8_t get_seu_auto_correct(void) {,241
2374,void set_seu_auto_correct(uint32_t seu_auto) {,245
2375,uint8_t get_seu_error_inject(void) {,253
2376,void set_seu_error_inject(uint32_t err_inject) {,257
2377,uint8_t get_seu_report_non_seu_errors(void) {,265
2378,void set_seu_report_non_seu_errors(uint32_t seu_report) {,269
2379,void reset_seu_control(void),273
2380,bool os_event_error_queue(void),285
2381,void toggle_seu_pin_clear_event_flag(bool setpin),323
2382,This function is called in error_queue_put() to provides option to choose the queue to use for adding new error,355
2383,"static void error_queue_put_option(error_queue_t * queue, mbox_error_t new_error)",360
2384,void error_queue_check(void),390
2385,static void error_queue_put(mbox_error_t new_error),439
2386,static void error_queue_get(mbox_error_t *oldest),476
2387,void clear_error_data(void) {,502
2388,"sdm_return_t mbox_post_ecc_error(cnoc_addr_t cnoc_addr, cnoc_handle_t cnoc_handle, uint32_t sdm_ecc_ram_id)",544
2389,"sdm_return_t mbox_post_sim_error( uint32_t sector_error, uint32_t error_type)",583
2390,@param length is the number of words in the seu status packet (not including the 1-word header),616
2391,"uint32_t mbox_post_seu_error(cnoc_addr_t cnoc_addr, uint32_t* p_data, uint32_t length, cnoc_handle_t cnoc_handle)",621
2392,"sdm_return_t mbox_post_misc_error(cnoc_addr_t cnoc_addr, uint32_t* p_data, uint32_t length, cnoc_handle_t cnoc_handle)",830
2393,"void mbox_read_seu_error_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",898
2394,"void mbox_insert_seu_error_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",977
2395,"sdm_return_t alt_sdm_insert_ecc_error(cnoc_handle_t cnoc_handle, cnoc_addr_t *cnoc_addr, uint32_t err_mode)",1110
2396,"void mbox_insert_ecc_error_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",1152
2397,"void mbox_simulate_error_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",1282
2398,@param handle is the handle that was returned from the cnoc_open(true) call.,1347
2399,"void handle_int_ecc(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint32_t sdm_ecc_ram_id)",1350
2400,@param handle is the handle that was returned from the cnoc_open(true) call.,1387
2401,"uint32_t handle_int_seu(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint32_t *p_response, uint32_t size)",1391
2402,@param handle is the handle that was returned from the cnoc_open(true) call.,1409
2403,"void handle_int_error_fatal(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint32_t *p_response, uint32_t size, error_level_t error_level)",1414
2404,void mbox_post_wdt_error(void),1440
2405,void pmf_set_error(pmbus_return_t error),1459
2406,"static sdm_return_t hash_container_add_head (hash_queue_t * p_hashq, uint32_t const * const p_hashes, uint32_t num_hashes)",91
2407,"static sdm_return_t hash_container_add_tail (hash_queue_t * p_hashq, uint32_t const * const p_hashes, uint32_t num_hashes)",134
2408,"static hash_container_t * hash_container_alloc(hash_queue_t * p_hashq, uint32_t const * const p_hashes, uint32_t num_hashes)",209
2409,static void hash_container_init(hash_container_t * p_hash_container),259
2410,static void hash_container_free(hash_container_t * p_hash_container),272
2411,static sdm_return_t hash_mgr_dequeue(hash_queue_t * p_hashq),295
2412,static void hash_mgr_queue_init(hash_queue_t * p_hashq),353
2413,static void hash_mgr_queue_flush(hash_queue_t * p_hashq),378
2414,static bool hash_mgr_queue_is_empty(hash_queue_t * p_hashq),395
2415,hash_mgr_handle_t hash_mgr_open(const uint32_t hash_size_words),415
2416,static bool hash_mgr_is_handle_opened(hash_mgr_handle_t handle),433
2417,sdm_return_t hash_mgr_close(hash_mgr_handle_t handle),443
2418,sdm_return_t hash_mgr_flush(hash_mgr_handle_t handle),462
2419,"sdm_return_t hash_mgr_add_expected_head(hash_mgr_handle_t handle, uint32_t const * const p_hash, uint32_t num_hashes)",490
2420,"sdm_return_t hash_mgr_add_expected_tail(hash_mgr_handle_t handle, uint32_t const * const p_hash, uint32_t num_hashes)",522
2421,"sdm_return_t hash_mgr_add_calculated(hash_mgr_handle_t handle, uint32_t const * const p_hash)",547
2422,"sdm_return_t hash_mgr_compare(hash_mgr_handle_t handle, hash_compare_policy_t policy)",560
2423,"static sdm_return_t hash_mgr_get_helper(hash_queue_t * p_hashq, uint32_t * p_hash, uint32_t size_words)",621
2424,"sdm_return_t hash_mgr_get_expected(hash_mgr_handle_t handle, uint32_t * p_hash, uint32_t size_words)",649
2425,"sdm_return_t hash_mgr_get_calculated(hash_mgr_handle_t handle, uint32_t * p_hash, uint32_t size_words)",673
2426,"sdm_return_t hash_mgr_expected_count(hash_mgr_handle_t handle, uint32_t * p_count)",691
2427,"sdm_return_t hash_mgr_calculated_count(hash_mgr_handle_t handle, uint32_t * p_count)",711
2428,"sdm_return_t hash_mgr_get_hash_size(hash_mgr_handle_t handle, uint32_t * p_size_words)",728
2429,"sdm_return_t hash_mgr_get_last_calc_cpu_hash(hash_mgr_handle_t handle, uint32_t **p_calc_cpu_hash)",740
2430,"sdm_return_t hash_mgr_set_section_hash_count(hash_mgr_handle_t handle, uint32_t count)",752
2431,"sdm_return_t hash_mgr_set_fixed_action_hash_count(hash_mgr_handle_t handle, uint32_t count)",762
2432,"sdm_return_t hash_mgr_get_hash_count(hash_mgr_handle_t handle, uint32_t * section, uint32_t * fixed_action)",772
2433,sdm_return_t hash_mgr_dec_hash_count(hash_mgr_handle_t handle),783
2434,Copyright (2020) Intel Corporation,3
2435,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2436,void isr_exception(void),78
2437,void sdm_early_init(void),92
2438,void mcore_nios2_tmr_isr(void* isr_context),162
2439,void timer_isr(void* isr_context),167
2440,sdm_return_t timer_tick_init(void),181
2441,int main(void),201
2442,Copyright (2019) Intel Corporation,3
2443,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2444,void update_temperature_cache(void),32
2445,Copyright (2018-2019) Intel Corporation,3
2446,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2447,"/*! This table holds the PR (include children) slot provided entries, so pofIDs */",76
2448,"slot_table_t *slot_entry_get(const main_descriptor_t *main_descriptor, slot_table_type provided,",90
2449,static int32_t find_compatible_entry(uint8_t slot_type),156
2450,static bool remove_current_entry(uint32_t index),178
2451,"static sdm_return_t store_hash(slot_table_t *p_table, int32_t index, ",211
2452,static void clean_expected_slot_type_tbl(void),264
2453,static void get_expected_slot_used_type(desc_type_t section_type),280
2454,static slot_compat_status_t check_slot_used_match(slot_table_t *p_table),333
2455,static void get_expected_slot_provided_type(desc_type_t section_type),408
2456,"static slot_compat_status_t check_slot_provided_type(uint8_t type, slot_table_type provided)",447
2457,void slot_hash_tbl_clean(void),510
2458,sdm_return_t  check_section_compat(const main_descriptor_t *main_descriptor),534
2459,sdm_return_t update_section_slot(const main_descriptor_t *main_descriptor),730
2460,static uint32_t get_mask_for_msbcount(uint8_t msb_count),798
2461,static int32_t find_provided_entry(slot_table_t *p_table),814
2462,static bool is_authorized_sec_owner_pr(slot_table_t *p_table),862
2463,"static uint32_t remove_children_of(uint32_t index, int clear_entries)",889
2464,static int is_disable_table(slot_table_t *p_table),919
2465,"slot_table_t *slot_table_get(const main_descriptor_t *main_descriptor, uint8_t slot_type,",947
2466,sdm_return_t check_pofID(const main_descriptor_t *main_descriptor),1022
2467,sdm_return_t update_pofID(const main_descriptor_t *main_descriptor),1173
2468,Copyright (2019) Intel Corporation,3
2469,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2470,void cmf_state_handler_complete(void),65
2471,Copyright (2019) Intel Corporation,3
2472,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2473,void cmf_state_handler_section(void),99
2474,void cmf_state_ssbl_sync_block(void),336
2475,void cmf_state_section_header(void),393
2476,static void enter_user_mode(void),591
2477,static void qspi_boot_image_load_loop(void),824
2478,void cmf_state_handler_configure(void),904
2479,Copyright (2019) Intel Corporation,3
2480,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2481,void cmf_state_handler_fatal(void),54
2482,clock. So this is also deadend as sdm_dead_loop(),72
2483,void at_response_phase2(void),74
2484,Copyright (2019) Intel Corporation,3
2485,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2486,void cmf_state_handler_idle(void),56
2487,Copyright (2019) Intel Corporation,3
2488,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2489,static void config_goto_state_wipe(void),114
2490,static sdm_return_t config_state_wipe_done(void),197
2491,static void system_reset_bitstream(void),306
2492,static void bitstream_interrupted(void),329
2493,"static void goto_error_or_interruption(uint32_t error_code, uint32_t error_details)",382
2494,static void at_response_phase1(void),498
2495,static bool jtag_transition_after_wipe(void),570
2496,static bool is_wipe_needed(void),625
2497,void cmf_state_handler_wipe(void),680
2498,uint32_t config_state_get_saved_position_before_wipe(void),1454
2499,uint32_t config_state_get_saved_bytes_before_wipe(void),1459
2500,Copyright (2019) Intel Corporation,3
2501,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2502,void vab_bs_preauth_report_status(bool is_success),65
2503,sdm_return_t vab_bs_preauth(void),93
2504,"static sdm_return_t vab_bs_preauth_verify_hash(comp_config_handle_t config_handle, uint32_t *p_exp_ut_sha384, uint32_t size_bytes)",263
2505,"static void vab_bs_preauth_cleanup(OS_ERR *p_err, comp_config_handle_t config_handle, uint32_t *p_blk0, uint32_t *p_blk1)",408
2506,void vab_bs_preauth_report_status(bool is_success),435
2507,sdm_return_t vab_bs_preauth(void),440
2508,Copyright (2019) Intel Corporation,3
2509,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2510,"sdm_return_t action_send_redundancy(send_redundancy_action_t const * const action, cnoc_handle_t cnoc_handle)",43
2511,Copyright (2019) Intel Corporation,3
2512,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2513,"void config_hps_set_flags(uint32_t hps_flag, uint32_t hps_flag_2)",57
2514,void config_hps_set_ddr_ret_en(bool en),104
2515,bool config_hps_is_ddr_ret_en(void),116
2516,void config_hps_ddr_ret_reset(void),127
2517,(of slot type 'DDR' slot) and stores it in the persistent RAM in case of POR/nConfig.,150
2518,"If HPS is going through cold reset or reconfiguration (other than nConfig/JTAG config),",151
2519,sdm_return_t config_hps_check_ddr_retention(const main_descriptor_t *main_descriptor),158
2520,Copyright (2019) Intel Corporation,3
2521,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2522,"sdm_return_t action_config_tnm_esram(cnoc_handle_t cnoc_handle, base_action_t const * const action)",40
2523,Copyright (2017) Intel Corporation,3
2524,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2525,"sdm_return_t sdm_sector_ram_repair(cnoc_handle_t cnoc_handle, cnt_ram_handle_t ram_handle)",43
2526,Copyright (2018) Intel Corporation,3
2527,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2528,sdm_return_t action_setup_s4(base_action_t const * const base_action),42
2529,Copyright (2018) Intel Corporation,3
2530,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2531,"sdm_return_t cmf_config_aes_decrypt_key_from_inbuf_to_ukv(cmf_key_id_t key_ukv_slot,",41
2532,"sdm_return_t cmf_config_aes_generate_key_for_ecb_decrypt(cmf_aes_resource_t cmf_aes_resource, ",91
2533,Copyright (2020) Intel Corporation,3
2534,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2535,cmf_keys_fifo_process_next_block_key(),57
2536,cmf_keys_fifo_get_key_challenge_key(),58
2537,cmf_keys_fifo_get_action_key(),59
2538,"sdm_return_t cmf_keys_fifo_get_key(const cmf_keys_fifo_key_type_t action_key_type,",89
2539,Copyright (2019) Intel Corporation,3
2540,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2541,information is needed (for example LSMs need different information during,50
2542,"static sdm_return_t sdm_send_convert_sector_to_cnoc_addr(int sector, cnoc_addr_t *cnoc_addr)",92
2543,"static sdm_return_t sdm_send_convert_cnoc_addr_to_sector(const cnoc_addr_t *cnoc_addr, uint32_t *sector)",104
2544,void sdm_compute_sector_to_eram_repair_idx_lut(),124
2545,"sdm_return_t sdm_send_lsm_eram_fuse(cnoc_handle_t cnoc_handle,",155
2546,"static sdm_return_t sdm_send_aib_fuse(cnoc_handle_t cnoc_handle, uint8_t bus, cnoc_addr_t cnoc_addr)",219
2547,"sdm_return_t dft_sdm_send_aib_fuse(cnoc_handle_t cnoc_handle, uint8_t bus, cnoc_addr_t cnoc_addr)",289
2548,"sdm_return_t sdm_send_biasgen_bb(cnoc_handle_t cnoc_handle, uint8_t bus,",295
2549,"static sdm_return_t sdm_send_csm_ica_repair_fuse(cnoc_handle_t cnoc_handle, uint8_t bus, cnoc_addr_t cnoc_addr)",333
2550,"sdm_return_t action_send_redundancy(send_redundancy_action_t const * const action, cnoc_handle_t cnoc_handle)",393
2551,Copyright (2019) Intel Corporation,3
2552,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2553,"sdm_return_t action_config_tnm_esram(cnoc_handle_t cnoc_handle, base_action_t const * const action)",40
2554,Copyright (2017) Intel Corporation,3
2555,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2556,"@param type is the CNOC packet type (CNOC_PKT_HDR0_MSGTYPE_SINGLE, CNOC_PKT_HDR0_MSGTYPE_BCAST, or CNOC_PKT_HDR0_MSGTYPE_MCAST)",117
2557,"\b CNOC_PKT_HDR0_MSGTYPE_SINGLE then it goes to the specific (y, x) address.",123
2558,"sdm_return_t sdm_cnt_ram_repair(cnoc_handle_t cnoc_handle,",133
2559,"@note As of this writing, all the CNT subsystem interfaces (serial controller",438
2560,"sdm_return_t sdm_cnt_ram_repair_good_init(cnoc_handle_t cnoc_handle, cnt_ram_handle_t ram_handle, const uint32_t cfg_data)",448
2561,"This function maps the efuse JTAG ID to a (y,x) pair.",473
2562,"sdm_return_t sdm_cnt_ram_repair_map_id(uint8_t jtag_id, uint8_t *p_y_value, uint8_t *p_x_value)",482
2563,"sdm_return_t get_repair_values(uint32_t index, uint32_t num_repairs, efuse_repair_t* repair_info, uint32_t* repair_values)",510
2564,"sdm_return_t sdm_sector_ram_repair(cnoc_handle_t cnoc_handle, cnt_ram_handle_t ram_handle)",567
2565,Copyright (2019) Intel Corporation,3
2566,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2567,"void config_hps_set_flags(uint32_t hps_flag, uint32_t hps_flag_2)",45
2568,bool config_hps_is_ddr_ret_en(void),77
2569,sdm_return_t config_hps_check_ddr_retention(const main_descriptor_t *main_descriptor),82
2570,void config_hps_ddr_ret_reset(void),87
2571,void config_hps_set_ddr_ret_en(bool en),91
2572,Copyright (2019) Intel Corporation,3
2573,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2574,information is needed (for example LSMs need different information during,44
2575,"static sdm_return_t sdm_send_uib_fuse(cnoc_handle_t cnoc_handle, uint8_t bus, cnoc_addr_t cnoc_addr)",61
2576,"static sdm_return_t sdm_send_dib_fuse(cnoc_handle_t cnoc_handle, uint8_t bus, cnoc_addr_t cnoc_addr)",113
2577,"static sdm_return_t sdm_send_aib_fuse(cnoc_handle_t cnoc_handle, uint8_t bus, cnoc_addr_t cnoc_addr)",166
2578,static uint32_t cnoc_addr_to_vr_leaf_efuse_index(cnoc_addr_t cnoc_addr),236
2579,"static sdm_return_t sdm_send_biasgen_bb(cnoc_handle_t cnoc_handle, uint8_t bus,",290
2580,"static sdm_return_t sdm_send_lsm_eram_fuse(cnoc_handle_t cnoc_handle,",327
2581,"static sdm_return_t sdm_send_redundancy_sector_row_info(cnoc_handle_t cnoc_handle, uint8_t bus,",362
2582,"sdm_return_t action_send_redundancy(send_redundancy_action_t const * const action, cnoc_handle_t cnoc_handle)",424
2583,Copyright (2018) Intel Corporation,3
2584,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2585,sdm_return_t action_setup_s4(base_action_t const * const base_action),42
2586,Copyright (2018) Intel Corporation,3
2587,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2588,"sdm_return_t cmf_config_aes_generate_key_for_ecb_decrypt(cmf_aes_resource_t cmf_aes_resource, ",54
2589,Copyright (2020) Intel Corporation,3
2590,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2591,cmf_keys_fifo_process_next_block_key(),58
2592,cmf_keys_fifo_get_key_challenge_key(),59
2593,cmf_keys_fifo_get_action_key(),60
2594,"sdm_return_t cmf_keys_fifo_get_key(const cmf_keys_fifo_key_type_t action_key_type,",90
2595,Copyright (2017) Intel Corporation,3
2596,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2597,"@param type is the CNOC packet type (CNOC_PKT_HDR0_MSGTYPE_SINGLE, CNOC_PKT_HDR0_MSGTYPE_BCAST, or CNOC_PKT_HDR0_MSGTYPE_MCAST)",92
2598,"\b CNOC_PKT_HDR0_MSGTYPE_SINGLE then it goes to the specific (y, x) address.",98
2599,"sdm_return_t sdm_cnt_ram_repair(cnoc_handle_t cnoc_handle,",108
2600,"@note As of this writing, all the CNT subsystem interfaces (serial controller",385
2601,"sdm_return_t sdm_cnt_ram_repair_good_init(cnoc_handle_t cnoc_handle, cnt_ram_handle_t ram_handle, const uint32_t cfg_data)",395
2602,"This function maps the efuse JTAG ID to a (y,x) pair.",419
2603,"sdm_return_t sdm_cnt_ram_repair_map_id(uint8_t jtag_id, uint8_t *p_y_value, uint8_t *p_x_value)",428
2604,"sdm_return_t get_repair_values(uint32_t index, uint32_t num_repairs, efuse_repair_t* repair_info, uint32_t* repair_values)",459
2605,"sdm_return_t sdm_sector_ram_repair(cnoc_handle_t cnoc_handle, cnt_ram_handle_t ram_handle)",516
2606,Copyright (2020) Intel Corporation,3
2607,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2608,static uint32_t cmf_km_convert_put_source(cmf_km_src_t  key_src),37
2609,"sdm_return_t cmf_km_save_key_test  (cmf_km_src_t  key_src,",68
2610,Copyright (2019) Intel Corporation,3
2611,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2612,STATIC bool jtag_dft_is_rsp_fifo_full(void),34
2613,STATIC void jtag_write_rspwordsync(uint32_t word),39
2614,STATIC void jtag_write_rspwordnormal(uint32_t word),44
2615,"sdm_return_t jtag_dft_send_resp_dfx_buffer(const uint32_t header, const uint32_t * const data_src, uint32_t words_to_write)",49
2616,Copyright (2021) Intel Corporation,3
2617,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2618,sdm_return_t sdm_bootrom_info_init_cmf(const signature_descriptor_t *signature_desc),50
2619,void init_sdm_early_init(void),97
2620,int init_main(void),198
2621,Copyright (2019) Intel Corporation,3
2622,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2623,"sdm_return_t sdm_dft_send_cnt_broadcast_packet(cnoc_handle_t cnoc_handle, uint32_t* payload, uint32_t payload_size, bool assert_sync)",33
2624,"sdm_return_t sdm_dft_send_cnt_multicast_packet(cnoc_handle_t cnoc_handle, uint32_t* payload, uint32_t payload_size, bool assert_sync)",69
2625,"sdm_return_t sdm_dft_send_cnt_singlecast_packet(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint32_t address, uint32_t* payload, uint32_t payload_size, bool assert_sync)",101
2626,"sdm_return_t sdm_dft_process_sdm_lsm_loop_param(cnoc_handle_t cnoc_handle, uint32_t jtag_id, uint32_t address, uint32_t* param, uint32_t param_size, bool assert_sync)",133
2627,sdm_return_t sdm_dft_cnoc_sdmtestenable(bool enable),178
2628,Copyright (2020) Intel Corporation,3
2629,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2630,void dft_jtag_bootstatus_set(uint32_t value),29
2631,bool dft_is_skip_cmf_state_handler_complete(void),42
2632,void dft_reset_loopcount(void),47
2633,bool dft_is_skip_pmf_state_update(void),52
2634,void dft_update_loopcount(void),63
2635,bool is_test_fw(void),88
2636,Copyright (2019) Intel Corporation,3
2637,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2638,"void sdm_mbox_echo_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",39
2639,Copyright (2019) Intel Corporation,3
2640,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2641,"void sdm_mbox_test_reconfig_avst_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",37
2642,"void sdm_mbox_test_toggle_last_matchloop(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",101
2643,"void sdm_mbox_toggle_almost_empty_double_pin(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",124
2644,"void sdm_mbox_toggle_almost_empty(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",153
2645,Copyright (2019) Intel Corporation,3
2646,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2647,static bool is_region_protected(uint32_t region),36
2648,"void sdm_mbox_test_debug_read_internal_hdlr(ALT_SDM_MBOX_SOURCE_t mbox_client, uint32_t *cmd_buf,",70
2649,Copyright (2019) Intel Corporation,3
2650,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2651,void testflow_gpio_pin_set(uint32_t id),46
2652,void testflow_gpio_pin_clr(uint32_t id),53
2653,void testflow_pme_fifo_next_packet_is(uint32_t next_packet_value),61
2654,void testflow_pme_set_bitstream_size(uint32_t bitstream_size),66
2655,void testflow_set_expected_block_count(uint32_t expectedBlockCount),72
2656,void testflow_look_for_empty(comp_config_handle_t config_handle),78
2657,uint32_t testflow_pme_dc_buffers_are_empty (comp_config_handle_t config_handle),106
2658,uint32_t pin_table_to_gpio(uint32_t idx),151
2659,void testflow_init(),182
2660,void testflow_reset_pme_flow_control(bool bAlmostEmptyState),215
2661,void testflow_toggle_matchloop(),238
2662,void testflow_update_counters_add(),250
2663,void testflow_pme_assert_empty(uint32_t mode),297
2664,Copyright (2020) Intel Corporation,3
2665,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2666,sdm_return_t cntatpg_process_cnt_cpu_rst_sim(cnoc_handle_t cnoc_handle),33
2667,sdm_return_t cntatpg_process_cnt_cpu_rst(cnoc_handle_t cnoc_handle),50
2668,sdm_return_t cntatpg_process_cnt_mem_rscrst(cnoc_handle_t cnoc_handle),68
2669,void cntatpg_sdm_init(uint32_t SEG2JTAG),91
2670,void cntatpg_clock_select(uint32_t sel),106
2671,void cntatpg_data_select(uint32_t sel),122
2672,"void cntatpg_setup(cnoc_handle_t cnoc_handle, uint32_t cnoc_control)",138
2673,void cntatpg_exit(void),170
2674,Copyright (2020) Intel Corporation,3
2675,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2676,void dfx_setup_non_redundancy_interface_ctrl_fpga_cfg_disable(uint32_t value),30
2677,"sdm_return_t dfx_setup_cnocifctrl_config_avstif_enable(cnoc_handle_t cnoc_handle, uint32_t value)",38
2678,"sdm_return_t dfx_setup_cnocifctrl_config_avst32tocnocen(cnoc_handle_t cnoc_handle, uint32_t value)",52
2679,"uint32_t dfx_sdm_cnoc_magic_word_packet(cnoc_handle_t cnoc_handle, uint32_t bus, uint32_t type, uint32_t info, uint32_t y_addr)",65
2680,uint32_t dfx_sdm_cnoc_jtag_and_test_enable(cnoc_handle_t cnoc_handle),86
2681,void dfx_setup_mbist_test_mode(),107
2682,Copyright (2020) Intel Corporation,3
2683,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2684,@return true if node is a sector (LSM) otherwise false.,42
2685,static bool is_aib_node(const cnoc_node_t * const node),44
2686,static sdm_return_t sdm_send_aib_redundancy(void),54
2687,"void sdm_mbox_aib_redundancy_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",95
2688,"void sdm_mbox_soft_redundancy_aib_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",124
2689,Copyright (2019) Intel Corporation,3
2690,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2691,"void sdm_mbox_sdm_clear_read_data_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",28
2692,Copyright (2019) Intel Corporation,3
2693,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2694,"void sdm_mbox_cntatpg_exit_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",39
2695,"void sdm_mbox_cntatpg_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",73
2696,"void sdm_mbox_cntatpg_clk_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",118
2697,"void sdm_mbox_bypass_cnt_atpg_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",152
2698,"void sdm_mbox_initialization_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",187
2699,"void sdm_mbox_release_cnt_reset_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",212
2700,Copyright (2019) Intel Corporation,3
2701,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2702,"static sdm_return_t cnt_setup_flow(cnoc_handle_t cnoc_handle, bool universal, bool reset_en)",33
2703,"void sdm_mbox_cnt_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",66
2704,"void sdm_mbox_cnt_setup_universal_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",115
2705,Copyright (2019) Intel Corporation,3
2706,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2707,"static void sdm_copy_trace(uint32_t param_value, uint32_t *big_buf)",32
2708,"void sdm_mbox_copy_trace_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",67
2709,Copyright (2019) Intel Corporation,3
2710,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2711,"void sdm_mbox_hvqk_enable_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",28
2712,Copyright (2019) Intel Corporation,3
2713,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2714,"void sdm_mbox_io_freeze_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",257
2715,"void sdm_mbox_io_unfreeze_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",269
2716,sdm_return_t io_aib_crete_freeze(),282
2717,sdm_return_t io_aib_crete_unfreeze(),375
2718,"void sdm_mbox_freeze_drive_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",465
2719,"void sdm_mbox_freeze_logic_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",504
2720,"void sdm_mbox_test_io_ctrl_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",542
2721,Copyright (2019) Intel Corporation,3
2722,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2723,"void sdm_mbox_write_memory_map_register_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",28
2724,"void sdm_mbox_read_memory_map_register_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",65
2725,Copyright (2019) Intel Corporation,3
2726,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2727,static void delay_trng(uint32_t delaycnt),42
2728,"static void backup_register_value(in_buf_handle_t inbuf_handle, sha_handle_t sha_handle, dft_sr_struct_t * sr_struct_ptr)",47
2729,"static void restore_register_value(in_buf_handle_t inbuf_handle, sha_handle_t sha_handle, dft_sr_struct_t * sr_struct_ptr)",69
2730,"sdm_return_t trng_in_buf_read(in_buf_handle_t inbuf_handle, sha_handle_t sha_handle, uint32_t *result)",122
2731,"sdm_return_t read_from_inpb_sideband(uint32_t *result, uint32_t offset)",190
2732,sdm_return_t trng_capture(uint32_t iterations),228
2733,"void sdm_mbox_trng_start_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",278
2734,"void sdm_mbox_trng_stop_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",301
2735,"void sdm_mbox_trng_out_enable_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",316
2736,"void sdm_mbox_trng_stuck_check_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",373
2737,"void sdm_mbox_trng_capture_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",404
2738,Copyright (2019) Intel Corporation,3
2739,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2740,"void sdm_mbox_user_clockgate_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",31
2741,Copyright (2020) Intel Corporation,3
2742,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2743,sdm_return_t cntatpg_process_cnt_cpu_rst_sim(cnoc_handle_t cnoc_handle),33
2744,sdm_return_t cntatpg_process_cnt_cpu_rst(cnoc_handle_t cnoc_handle),50
2745,sdm_return_t cntatpg_process_cnt_mem_rscrst(cnoc_handle_t cnoc_handle),68
2746,void cntatpg_sdm_init(uint32_t SEG2JTAG),91
2747,void cntatpg_clock_select(uint32_t sel),106
2748,void cntatpg_data_select(uint32_t sel),122
2749,"void cntatpg_setup(cnoc_handle_t cnoc_handle, uint32_t cnoc_control)",139
2750,void cntatpg_exit(void),171
2751,Copyright (2019) Intel Corporation,3
2752,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2753,uint32_t common_init_lsm_nodelist(uint32_t sector_type),40
2754,uint32_t common_init_aib_nodelist(),64
2755,uint32_t common_init_io_nodelist(),79
2756,"void common_get_sector_xy(uint32_t cjtagid, uint32_t* x, uint32_t *y)",97
2757,sdm_return_t common_test_crypto_path_init(crypto_context_t *const ctx),116
2758,"sdm_return_t common_test_dma_read(  crypto_context_t *const ctx, dma_source_t dma_src, uint32_t src_addr, uint32_t src_byte_size, ",174
2759,"sdm_return_t common_test_dma_write( crypto_context_t *const ctx, dma_dest_t dma_dest, uint32_t dest_addr, uint32_t dest_byte_size)",248
2760,Copyright (2019) Intel Corporation,3
2761,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2762,void dft_set_sga_header_cache_idx(uint32_t value),4057
2763,void dft_set_cnoc_send_sga_header_cache_idx(uint32_t value),4061
2764,void dft_set_cnoc_send_action_idx(uint32_t value),4065
2765,void dft_set_multicast_action_cache_idx(uint32_t value),4069
2766,uint32_t dft_get_sga_header_cache_idx(void),4073
2767,uint32_t dft_get_cnoc_send_sga_header_cache_idx(void),4077
2768,uint32_t dft_get_cnoc_send_action_idx(void),4081
2769,uint32_t dft_get_multicast_action_cache_idx(void),4085
2770,bool dft_get_multicast_overwrite(void),4090
2771,"uint32_t dft_get_multicast_action_all_sectors_data(uint32_t sector_group_index, uint32_t action_data_index)",4095
2772,bool dft_get_sga_overwrite(void),4100
2773,"uint32_t dft_get_cnoc_send_action_xy_data(uint32_t sector_group_index, uint32_t action_xy_index)",4105
2774,"uint32_t dft_get_sga_header_cache_data(uint32_t sector_group_index, uint32_t header_index)",4110
2775,"void sdm_mbox_autoheader_switch_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",4115
2776,"void sdm_mbox_ah_interframe_del_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",4160
2777,Copyright (2019) Intel Corporation,3
2778,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2779,"void sdm_mbox_testpor_setup_dft_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",29
2780,"void sdm_mbox_bbram_gp_wr_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",83
2781,"void sdm_mbox_bbram_gp_cmp_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",127
2782,"void sdm_mbox_bbram_keyclear_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",188
2783,Copyright (2019) Intel Corporation,3
2784,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2785,"void sdm_mbox_selective_xcvr_skip_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",31
2786,Copyright (2019) Intel Corporation,3
2787,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2788,"void sdm_mbox_bypass_crypto_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",30
2789,Copyright (2019) Intel Corporation,3
2790,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2791,static sdm_return_t dft_cnoc_crypto_context_init(),77
2792,static void dft_inbuf_isr(void* context),128
2793,static void dft_dma_write_dfx_buffer_isr(void* context),178
2794,sdm_return_t cnoc_return_select_crypto(cnoc_handle_t handle),218
2795,"sdm_return_t setup_cnoc_return_prebuf(uint32_t value, bool interrupt_enable)",237
2796,"sdm_return_t setup_cnoc_return_path(cnoc_handle_t cnoc_handle, uint32_t sel, bool interrupt_enable)",294
2797,sdm_return_t cnoc_dma_read_and_write(),436
2798,"void sdm_mbox_cnoc_path_setting_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",472
2799,"void sdm_mbox_cnoc_return_prebuf_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",518
2800,"void sdm_mbox_cnoc_return_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",528
2801,"void sdm_mbox_cnoc_clk_ctrl_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",559
2802,"void sdm_mbox_cnoc_header_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",576
2803,"void sdm_mbox_cnoc_template_config_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",670
2804,void dft_cnoc_crypto_context_cleanup(),735
2805,Copyright (2019) Intel Corporation,3
2806,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2807,"void sdm_mbox_switch_avst16_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",31
2808,"void sdm_mbox_switch_avst32_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",85
2809,Copyright (2019) Intel Corporation,3
2810,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2811,"static sdm_return_t sdm_send_lsm_s4_swizzle_enable(cnoc_handle_t cnoc_handle, const bool flag)",100
2812,"static sdm_return_t sdm_read_cram_lfsr_data(cnoc_handle_t cnoc_handle, uint32_t opcode, bool universal)",126
2813,"static sdm_return_t sdm_cram_read_labrow(cnoc_handle_t cnoc_handle, uint32_t jtag_id, uint32_t labrow)",280
2814,"static sdm_return_t sdm_cram_read_lfsr(cnoc_handle_t cnoc_handle, uint32_t delay_len, uint32_t command)",423
2815,"static sdm_return_t sdm_read_lsm_reserved_buffer(cnoc_handle_t cnoc_handle, uint32_t lsm_count, uint32_t words_read_per_lsm)",461
2816,"static sdm_return_t sdm_clear_lsm_reserved_buffer(cnoc_handle_t cnoc_handle, uint32_t lsm_count, uint32_t words_read_per_lsm)",551
2817,"void labrow_data_transfer_32_words(volatile uint32_t * fromaddr,volatile uint32_t * toaddr,int dummy, int dummy2)",643
2818,"void sdm_mbox_cram_s4swizzle_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",663
2819,"void sdm_mbox_read_cram_lfsr_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",694
2820,"void sdm_mbox_read_regscan_lfsr_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",728
2821,"void sdm_mbox_cram_read_labrow_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",762
2822,"void sdm_mbox_cram_read_cram_to_lfsr_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",796
2823,"void sdm_mbox_lsm_write_res_buf_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",835
2824,"void sdm_mbox_lsm_read_res_buf_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",909
2825,"void sdm_mbox_clear_all_buffers_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",945
2826,Copyright (2019) Intel Corporation,3
2827,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2828,"static sdm_return_t sdm_crete_single_jtag_and_test_enable(cnoc_handle_t cnoc_handle, uint8_t y_addr, uint8_t x_addr)",31
2829,static sdm_return_t sdm_crete_jtag_and_test_enable(cnoc_handle_t cnoc_handle),76
2830,"void sdm_mbox_crete_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",96
2831,Copyright (2019) Intel Corporation,3
2832,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2833,static void backup_register_value(dft_sr_struct_t * sr_struct_ptr),43
2834,"static void restore_register_value(dft_sr_struct_t * sr_struct_ptr, in_buf_handle_t in_buf_handle, sha_handle_t sha_handle)",70
2835,"static void test_crypto_cleanup(crypto_context_t *ctx, cmf_key_t *key_slot)",167
2836,static sdm_return_t test_crypto_bbram_clear(),179
2837,"static sdm_return_t test_ecb_encryption(crypto_context_t *const ctx,",208
2838,"void sdm_mbox_aes_ecb_encrypt_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",310
2839,Copyright (2020) Intel Corporation,3
2840,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2841,static void backup_register_value(dft_sr_struct_t * sr_struct_ptr),43
2842,static void restore_register_value(dft_sr_struct_t * sr_struct_ptr),57
2843,static void alt_sdm_cnoc_cvp_mode(void),124
2844,"void sdm_mbox_setup_cvp_path_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",139
2845,"void sdm_mbox_read_cvp_data_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",201
2846,"void sdm_mbox_clear_cvp_path_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",244
2847,Copyright (2019) Intel Corporation,3
2848,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2849,"static sdm_return_t get_cnoc_idx_arr(uint32_t onehot_calsel, uint32_t *idx_arr, uint32_t *idx_arr_size)",62
2850,"void sdm_mbox_dts_set_cal_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",102
2851,"void sdm_mbox_dts_temp_init_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",334
2852,"void sdm_mbox_dts_get_temp_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",400
2853,Copyright (2019) Intel Corporation,3
2854,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2855,extern void testfw_hook_hal_efuse_post_write_bank(void); ,49
2856,"void sdm_mbox_test_efuse_debug_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",51
2857,Copyright (2019) Intel Corporation,3
2858,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2859,"STATIC void sdm_mbox_efuse_write_common_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf, uint32_t is_virtual_write)",53
2860,"void sdm_mbox_efuse_write_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",112
2861,"void sdm_mbox_efuse_virtual_write_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",117
2862,Copyright (2019) Intel Corporation,3
2863,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2864,"void sdm_mbox_pwrtrim_redundancy_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",42
2865,"void sdm_mbox_biasgen_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",127
2866,"void sdm_mbox_vadc_init_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",171
2867,"void sdm_mbox_vadc_read_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",184
2868,Copyright (2019) Intel Corporation,3
2869,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2870,"static uint32_t sdm_eram_read_multi(cnoc_handle_t cnoc_handle, uint32_t eram_row_end_start, uint32_t dummy)",45
2871,"void sdm_mbox_eram_read_multi_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",163
2872,"void sdm_mbox_m20k_redundncy_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",194
2873,Copyright (2019) Intel Corporation,3
2874,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2875,"void sdm_mbox_esram_redundancy_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",35
2876,"void sdm_mbox_esram_read_beadbus_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",61
2877,"void sdm_mbox_esram_beadbus_usermode_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",116
2878,Copyright (2019) Intel Corporation,3
2879,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2880,"void sdm_mbox_core_interface_disable_setup_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",31
2881,"void sdm_mbox_statusio_setup_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",29
2882,"void sdm_mbox_loanio_setup_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",43
2883,"void sdm_mbox_config_io_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",73
2884,void sdm_status_io_setup(void),96
2885,sdm_return_t sdm_loan_io_setup(uint32_t setting),107
2886,sdm_return_t sdm_config_io(uint32_t setting),177
2887,Copyright (2020) Intel Corporation,3
2888,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2889,static void sdm_enable_hps_wb(uint32_t setting),34
2890,"void sdm_mbox_activate_hps_test_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",41
2891,"void sdm_mbox_enable_hps_wb_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",54
2892,"void sdm_mbox_scr_miscctrl_disable_hps_bsc_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",69
2893,"void sdm_mbox_hps_ram_repair_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf,",104
2894,Copyright (2019) Intel Corporation,3
2895,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2896,"void sdm_mbox_lsm_ram_repair_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",40
2897,"void sdm_mbox_lsm_sector_redundancy_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",69
2898,"void sdm_mbox_memrepair_load_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",108
2899,"void sdm_mbox_memconfig_load_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",153
2900,"void sdm_mbox_softredundancy_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",235
2901,Copyright (2019) Intel Corporation,3
2902,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2903,"sdm_return_t pio_send_single_cmd(cast_type_t type, uint32_t ipc_packet, uint32_t x, uint32_t y, uint32_t data)",32
2904,"void sdm_mbox_set_lsm_pio_oe(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",88
2905,"void sdm_mbox_set_lsm_pio_singleword_single_sector(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",101
2906,"void sdm_mbox_set_lsm_pio_block(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",121
2907,"void sdm_mbox_read_lsm_pio_single_sector(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",139
2908,"void sdm_mbox_set_lsm_pio_multicast(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",158
2909,Copyright (2019) Intel Corporation,3
2910,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2911,"static sdm_return_t cnt_cmd_process(cnoc_handle_t cnoc_handle, uint32_t broadcast, uint32_t param[], uint32_t param_size, uint32_t delay_len)",31
2912,"void sdm_mbox_cnt_cmd_broadcast_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",118
2913,"void sdm_mbox_send_unicast_packet_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",163
2914,Copyright (2019) Intel Corporation,3
2915,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2916,"void sdm_mbox_puf_pwr_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",45
2917,"static uint32_t sdm_intel_puf_array_capture(volatile uint32_t * const ram_buf_ptr, uint32_t array_select, uint32_t sample_size)",69
2918,"void sdm_mbox_intel_puf_capture_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",135
2919,"static uint32_t sdm_intel_puf_test_array_capture(volatile uint32_t * const ram_buf_ptr, uint32_t array_select, uint32_t sample_size)",164
2920,"void sdm_mbox_intel_puf_capture_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",216
2921,"void sdm_mbox_iid_puf_capture_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",248
2922,static uint32_t get_pattern_word(uint32_t addr),268
2923,"void sdm_mbox_iid_puf_rw_validate_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",274
2924,Copyright (2019) Intel Corporation,3
2925,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2926,"void sdm_mbox_signed_nsp_halt_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",37
2927,Copyright (2019) Intel Corporation,3
2928,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2929,"void sdm_mbox_sdm_read_data_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",37
2930,"void sdm_mbox_sdm_read_data_jtag_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, ",94
2931,"void sdm_read_data_transfer_32_words(volatile uint32_t * fromaddr, uint32_t * toaddr)",133
2932,"void sdm_read_data_transfer_16_words(volatile uint32_t * fromaddr, uint32_t * toaddr)",153
2933,"uint32_t sdm_read_data(uint32_t packet_and_word_size, uint32_t start_index)",215
2934,"uint32_t sdm_read_data16(uint32_t packet_and_word_size, uint32_t start_index, uint32_t delays)",378
2935,Copyright (2020) Intel Corporation,3
2936,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2937,"void sdm_mbox_uib_softadjsectorrow_setup_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",39
2938,"void sdm_mbox_uib_daughterdieinfo_setup_hdlr(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",76
2939,uint32_t find_uib_location(uint32_t *uibCnocTopographyIndex),113
2940,"void send_softadj_fuse_to_uib(cnoc_handle_t cnoc_handle, const uint32_t *uib_cnoctopography_idx, uint32_t uibtopfuse, uint32_t uibbotfuse)",131
2941,"void send_daughterdie_fuse_to_uib(cnoc_handle_t cnoc_handle, const uint32_t *uib_cnoctopography_idx, uint32_t data)",163
2942,"uint32_t get_softadjrow_fuse_in_word(uint32_t uibnum, uint32_t uib_redudancy_fz)",193
2943,"void send_fuse_word_packet_to_uib(cnoc_handle_t cnoc_handle, uint32_t bus, uint32_t x, uint32_t y, uint32_t data, uint32_t offset)",238
2944,uint32_t get_daughterdie_fuse_in_word(uint32_t dd_data),253
2945,Copyright (2019) Intel Corporation,3
2946,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2947,"static void send_cnt_single_packet(cnoc_handle_t cnoc_handle, uint32_t x_addr, uint32_t y_addr, bool delay)",36
2948,"void sdm_mbox_enter_usermode_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",62
2949,"void sdm_mbox_exit_usermode_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",121
2950,Copyright (2019) Intel Corporation,3
2951,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2952,"void sdm_mbox_test_vccl_force_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",30
2953,Copyright (2019) Intel Corporation,3
2954,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2955,"STATIC sdm_return_t cmf_config_aes_efuse_physical_decrypt_key_toram(const crypto_context_t * const crypto_ctx, ",90
2956,"STATIC void cmf_config_aes_efuse_clean_keys(cmf_key_t * key1, cmf_key_t * key2, cmf_key_t * key3, cmf_key_t * key4)",140
2957,"static sdm_return_t zero_check_protected_fuses(uint32_t packed_key_data, uint32_t * iszero)",168
2958,"static sdm_return_t efuse_zero_check_operation(const uint32_t bank, const uint32_t start_row, ",304
2959,"static sdm_return_t zero_check_redundant_row(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows,",340
2960,"static sdm_return_t zero_check(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows,",388
2961,"void sdm_mbox_test_zero_check_redundant_row_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",473
2962,"void sdm_mbox_test_zero_check_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf,",540
2963,Copyright (2017) Intel Corporation,3
2964,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2965,"sdm_return_t hex_encode(const uint8_t* bytes, uint32_t numbytes, uint8_t* output, uint32_t n, bool uppercase)",42
2966,"sdm_return_t base64url_encode(const uint8_t* bytes, uint32_t numbytes, uint8_t* output, uint32_t n)",84
2967,"uint32_t siglen(uint8_t* buf, uint32_t buflen, uint32_t size)",123
2968,Copyright (2020) Intel Corporation,3
2969,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2970,"int generate_bkp_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",333
2971,"int generate_cert_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",411
2972,@return the length of the certificate (in bytes) or -1 if there is an error,444
2973,"static int fill_certificate(const cert_variables_t * cert_vars, uint8_t * const buffer, uint32_t buffer_size, const cert_format_t * format) {",446
2974,"static uint32_t varlen_sum(const cert_format_t * format, const uint32_t * const locals, uint32_t index) {",544
2975,"static void write_asn1_length(uint8_t * ptr, uint32_t len) {",562
2976,static uint32_t get_asn1_lenlen(uint32_t len) {,582
2977,Copyright (2019) Intel Corporation,3
2978,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2979,"static void initialize_resp_header(resp_header_t* resp_header, cmd_header_t* cmd_header)",98
2980,"void sdm_mbox_create_certificates_on_reload(ALT_SDM_MBOX_CLIENT_t mbox_client, ",140
2981,"void sdm_mbox_get_attestation_certificate(ALT_SDM_MBOX_CLIENT_t mbox_client,",233
2982,Copyright (2018) Intel Corporation,3
2983,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2984,void bootstatus_set_cmf_reset_reason(uint8_t reset_reason_value),79
2985,static sdm_return_t action_operation_njp_power_on_reset(void),94
2986,sdm_return_t action_operation(base_action_t const * const action),112
2987,Copyright (2018) Intel Corporation,3
2988,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2989,int32_t compare_prov_data_in_device(test_jtag_action_t *jtag_action),65
2990,sdm_return_t action_test_jtag(base_action_t const * const action),216
2991,Copyright (2017-18) Intel Corporation,3
2992,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
2993,received with new CNT firmware(this only happens in development).,56
2994,@param p_block0_sha is the SHA 384 of block 0 of the CMF(ssbl).,58
2995,void cmf_compatible_hash_set(const hash_384_t * const p_block0_sha),62
2996,bool cmf_compatible(const hash_384_t * const p_block0_sha),88
2997,bool cmf_compatible_type(uint32_t type),128
2998,static sdm_return_t cmf_compatible_bitstream_device_type_check(main_descriptor_t const * p_main_desc),151
2999,static sdm_return_t cmf_compatible_bitstream_cmf_version_check(main_descriptor_t const * p_main_desc),186
3000,sdm_return_t cmf_compatible_bitstream_hash_set(cmf_descriptor_t const * p_cmf_descriptor),245
3001,sdm_return_t cmf_compatible_bitstream_check(main_descriptor_t const * p_main_desc),279
3002,Copyright (2018) Intel Corporation,3
3003,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3004,void cmf_config_aes_init(void),64
3005,-   call cmf_keys_fifo_section_key_valid() API to indicate a valid section key was discovered.,78
3006,sdm_return_t cmf_config_aes_check_encryption_enabled(const main_descriptor_t *main_descriptor),87
3007,sdm_return_t cmf_config_aes_check_root_key_enabled(const aes_key_select_t root_key_select),193
3008,sdm_return_t cmf_config_aes_get_root_key_to_kv(aes_key_select_t key_select),249
3009,void cmf_config_aes_clear_root_key_from_kv(void),315
3010,uint32_t cmf_config_aes_get_root_key_ukv_slot(void),334
3011,void cmf_config_aes_set_root_key_ukv_slot(const uint32_t ukv_slot_id),344
3012,-   call cmf_keys_fifo_section_key_valid() API to indicate a valid section key was discovered.,357
3013,sdm_return_t cmf_config_aes_process_section_key(const main_descriptor_t *main_descriptor),363
3014,bool cmf_config_aes_check_encrypt_enabled_for_section(const aes_key_select_t aes_root_key_select),564
3015,"sdm_return_t cmf_config_aes_check_key_update_enabled(const main_descriptor_t *main_descriptor,",582
3016,Copyright (2018) Intel Corporation,3
3017,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3018,"sdm_return_t cmf_config_aes_efuse_virtual_program(uint32_t * root_key, efuse_wrapping_key_type_t efuse_wrap_type)",62
3019,@brief This function decrypts data in key form (key as data) to a location in RAM and also key vault,197
3020,"STATIC sdm_return_t cmf_config_aes_efuse_physical_decrypt_key_toram(cmf_key_t *efuse_raw_key, cmf_key_t *test_key, cmf_key_t *decoded_key, cmf_mpi_t *mpi_decoded_key, uint32_t* p_data)",206
3021,"STATIC void cmf_config_aes_efuse_clean_keys(cmf_key_t * key1, cmf_key_t * key2, cmf_key_t * key3, cmf_key_t * key4)",281
3022,STATIC sdm_return_t cmf_config_aes_efuse_physical_program_check_validity(cmf_key_t *efuse_raw_key),321
3023,"sdm_return_t cmf_config_aes_efuse_physical_program(uint32_t * root_key, efuse_wrapping_key_type_t efuse_wrap_type)",482
3024,"STATIC sdm_return_t cmf_config_aes_efuse_wrap_key_from_key_vault(cmf_key_t * aes_root_key, efuse_wrapping_key_type_t efuse_wrap_type, cmf_key_t * efuse_raw_key, uint32_t * p_data, bool virtual_mode)",634
3025,"STATIC sdm_return_t cmf_config_aes_efuse_wrap_key_from_key_vault_for_physical_programming(cmf_key_t * aes_root_key, efuse_wrapping_key_type_t efuse_wrap_type, cmf_key_t * efuse_raw_key, uint32_t * p_data)",804
3026,"STATIC sdm_return_t cmf_config_aes_efuse_wrap_key(uint32_t * root_key, efuse_wrapping_key_type_t efuse_wrap_type, cmf_key_t * efuse_raw_key, uint32_t * p_data, bool virtual_mode)",933
3027,"sdm_return_t cmf_config_aes_efuse_unwrap_key(efuse_wrapping_key_type_t efuse_wrap_type, uint32_t * unwrapped_key_slot)",991
3028,bool cmf_config_aes_efuse_is_key_programmed(),1222
3029,static sdm_return_t dma_to_nsp_ram(uint32_t * p_data),1238
3030,Copyright (2018) Intel Corporation,3
3031,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3032,"sdm_return_t cmf_config_aes_config_context_and_decrypt_key(uint32_t *p_key,",64
3033,"sdm_return_t cmf_config_aes_keysource_clean_confirm(cmf_key_type_t key_type, uint32_t ukv_slot_num)",159
3034,"sdm_return_t cmf_config_aes_decrypt_key_from_inbuf_to_ukv(uint32_t key_ukv_slot,",372
3035,"sdm_return_t cmf_config_aes_decrypt_key_from_ram_to_ukv(uint32_t *p_key,",426
3036,"sdm_return_t cmf_config_aes_configure_context(cmf_key_t *key,",527
3037,"bool cmf_config_aes_swizzle_key_cipher(const uint32_t *const p_source,",577
3038,void cmf_config_aes_clean_and_free_ukv_slot(uint32_t slot),629
3039,Copyright (2017) Intel Corporation,3
3040,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3041,void sdm_dma_irq_init(void),62
3042,void register_dma_isr(void),77
3043,static void CRYPTO_DMA_isr(void* unused),103
3044,void CRYPTO_RD_DMA_isr(void* unused),215
3045,void CRYPTO_WR_DMA_isr(void* unused) {,244
3046,Copyright (2018) Intel Corporation,3
3047,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3048,uint32_t get_crypto_qspi_num_desc_needed(void),97
3049,void set_crypto_qspi_num_desc_needed(uint32_t val),107
3050,uint32_t get_qspi_src_addr(void),116
3051,void set_qspi_src_addr(uint32_t val),126
3052,bool get_crypto_qspi_config_enabled(void),135
3053,void set_crypto_qspi_config_enabled(bool val),145
3054,void qspi_check_failed_flash_img(void),156
3055,This function will get the x number of bytes (passed in as variable) from the QSPI,166
3056,sdm_return_t get_data_chunk_from_qspi(uint32_t number_of_bytes_to_get),173
3057,void qspi_load_max_rd_dma_descriptors(void),328
3058,void register_qspi_isr(void),392
3059,void qspi_error(uint32_t errcode),403
3060,sdm_return_t cmf_config_qspi_main_img_pointers_update(const signature_descriptor_t *sign_block_ptr),418
3061,"void cmf_config_qspi_config_enable(bool enable, uint32_t addr)",467
3062,and then continue to use interrupt(keep QSPI ISR enabled),522
3063,static uint32_t get_more_bytes_from_next_segment(void),527
3064,static void QSPI_isr(void* unused),647
3065,Copyright (2020) Intel Corporation,3
3066,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3067,sdm_return_t cmf_save_fw_build_string(const cmf_descriptor_t *const p_cmf_descriptor),60
3068,"sdm_return_t cmf_get_fw_build_string(uint32_t *p_fw_build_string, uint32_t string_size)",86
3069,sdm_return_t cmf_save_fw_security_version(const cmf_descriptor_t *const p_cmf_descriptor),110
3070,uint32_t cmf_get_fw_security_version(),127
3071,sdm_return_t cmf_save_fw_cmf_version(const cmf_descriptor_t *const p_cmf_descriptor),138
3072,uint32_t cmf_get_fw_cmf_version(),163
3073,Copyright (2020) Intel Corporation,3
3074,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3075,sdm_return_t cmf_iid_puf_act_help_data_integrity_check(cmf_iid_puf_enroll_help_data_t *help_data_ptr),85
3076,@brief This function update the status of the activation status for PUF (USER or UDS),117
3077,"static void cmf_iid_puf_update_act_status(iid_puf_type_t iid_puf_type, cmf_iid_puf_act_status_t act_status)",125
3078,@param iid_puf_type input parameter to indicate which IID_PUF type (User or UDS),146
3079,"sdm_return_t cmf_iid_puf_act_read_help_data(cmf_type_t cmf_type, uint32_t *data_block, iid_puf_type_t iid_puf_type)",152
3080,@param iid_puf_type input parameter to indicate which IID_PUF type (User or UDS) ,283
3081,"sdm_return_t cmf_iid_puf_act_activate(cmf_type_t cmf_type, bool is_enrollment, uint32_t *error_bit_rate, uint8_t* enroll_ac, uint8_t* enroll_mac, iid_puf_type_t iid_puf_type)",287
3082,"void cmf_iid_puf_act_puf_status_cmd_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",442
3083,sdm_return_t cmf_iid_puf_act_first_boot_puf_activate(cmf_type_t cmf_type),491
3084,uint32_t cmf_iid_puf_act_get_main_puf_offset0(),546
3085,uint32_t cmf_iid_puf_act_get_main_puf_offset1(),551
3086,sdm_return_t cmf_iid_puf_act_clear_puf_root_key(void),556
3087,Copyright (2019-2020) Intel Corporation,3
3088,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3089,static sdm_return_t dma_to_nsp_ram(uint32_t * p_data),72
3090,"static sdm_return_t cmf_iid_puf_wrap_derive_user_aes_key(cmf_key_t *  user_aes_aes_key,cmf_key_t *  user_aes_hmac_key)",160
3091,"static sdm_return_t cmf_iid_puf_wrap_crypt_aes( uint32_t * const aes_root_key, uint32_t *  iv, cmf_key_t *  user_aes_aes_key,cmf_key_t * output_key,uint32_t * p_data, bool is_wrap)",253
3092,"static sdm_return_t cmf_iid_puf_wrap_mac_derivation( cmf_key_t *  user_aes_hmac_key,uint32_t *const input_wrapped_data,uint32_t * const mac_output_data)",362
3093,"sdm_return_t cmf_iid_puf_wrap_user_aes_key_wrap( uint32_t *  aes_root_key, uint32_t *  iv, cmf_iid_puf_wrapped_aes_key_data_t *const wrapped_aes_key_data)",406
3094,"static sdm_return_t cmf_iid_puf_wrap_user_aes_key_unwrap(cmf_iid_puf_wrapped_aes_key_data_t *const wrapped_aes_key_data,uint32_t * unwrapped_key_slot)",512
3095,static sdm_return_t cmf_iid_puf_wrapped_aes_data_integrity_check(cmf_iid_puf_wrapped_aes_key_data_t *wrapped_key_data_ptr),617
3096,static sdm_return_t cmf_config_aes_read_puf_wrapped_key(uint32_t *data_block),659
3097,sdm_return_t cmf_config_aes_puf_unwrap_key(uint32_t *unwrapped_key_slot),761
3098,Copyright (2021) Intel Corporation,3
3099,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3100,bool cmf_puf_device_owned_check(puf_type_t puf_type),39
3101,Copyright (2018) Intel Corporation,3
3102,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3103,uint32_t get_qspi_fast_inbuf_bytes_remain(void),85
3104,void set_qspi_fast_inbuf_bytes_remain(uint32_t val),95
3105,bool get_qspi_fast_command_enable(void),104
3106,void set_qspi_fast_command_enable(bool val),114
3107,void qspi_load_max_wr_dma_descriptors(void),126
3108,@param resp_buf is a pointer to the response buffer to be filled by this function (for the response header),183
3109,"void alt_qspi_mbox_read_sha512_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",188
3110,using the PROGRAM scan chain in the same way as for configuration (this provides higher bandwidth over JTAG).,377
3111,1       Bytes to Write  The number of data to be written (in bytes).  Must be a multiple of 64,384
3112,@param resp_buf is a pointer to the response buffer to be filled by this function (for the response header),392
3113,"void alt_qspi_mbox_write_fast_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",397
3114,This command returns the status of the last QSPI_WRITE_FAST command (there is no need to check client as QSPI_WRITE_FAST is only supported from JTAG).,593
3115,"1       Error Location (TBD)    If the QSPI write failed, then this provides an address of",599
3116,2       Error Details(TBD)      This word provides more details of the error happened.,601
3117,@param resp_buf is a pointer to the response buffer to be filled by this function (for the response header),605
3118,"void alt_qspi_mbox_write_status_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",610
3119,"static bool check_param_and_hw_state(uint32_t cmd_hdr, uint32_t base_addr, uint32_t size_in_bytes, ALT_SDM_MBOX_CLIENT_t client)",682
3120,static __inline__ void qspi_fast_cmd_crypto_save(void),742
3121,void qspi_fast_cmd_crypto_restore(void),752
3122,static void restore_local_var(void),831
3123,"static void alt_qspi_mbox_flag_error(uint32_t message, uint32_t line, uint32_t *resp_buf)",846
3124,Copyright (2020) Intel Corporation,3
3125,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3126,static bool cmf_action_current_valid(void),74
3127,static sdm_return_t cmf_action_inc(void),91
3128,void cmf_action_init(void),135
3129,void cmf_action_free(void),148
3130,bool cmf_action_empty(void),169
3131,sdm_return_t cmf_action_add(base_action_t * action),192
3132,sdm_return_t cmf_action_handlers_fixed(void),227
3133,sdm_return_t action_comment(base_action_t const * const action),234
3134,"sdm_return_t action_padding(base_action_t *action, uint32_t size)",244
3135,static sdm_return_t cmf_check_first_cmd_action(base_action_t const * const action),289
3136,sdm_return_t cmf_action_handlers(void),318
3137,Copyright (2017-18) Intel Corporation,3
3138,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3139,static uint32_t pin_table_to_io(uint32_t idx),248
3140,static uint32_t pin_table_to_gpio(uint32_t idx),304
3141,"void pin_table_assert(uint32_t idx, bool assert)",344
3142,void pin_table_assert_conf_done(bool assert),398
3143,void pin_table_assert_init_done(bool assert),414
3144,void pin_table_assert_hps_reset(bool assert),427
3145,void pin_table_assert_tamper_event(bool assert),454
3146,void pin_table_assert_tamper_zerorized(bool assert),475
3147,sdm_return_t pin_table_init(const pin_table_t *pin_table),510
3148,pin_table_init().,839
3149,bool pin_table_valid(),843
3150,"void pin_table_pin_set(uint8_t role, uint32_t assert)",856
3151,void update_nstatus_pin(uint32_t nstatus_pin),892
3152,bool validate_pin_table_idx(uint32_t table_idx),910
3153,void gpio_pin_init(uint32_t sdmio_pin),929
3154,void gpio_pin_assert_hold_deassert(uint32_t sdmio_pin),958
3155,int32_t pin_function_get_gpio_input(uint32_t table_idx),979
3156,uint32_t get_gpio_idx_hps_reset(void) ,1001
3157,uint32_t get_table_idx_hps_reset(void),1014
3158,uint8_t pin_function_role_get(uint32_t sdm_pin_idx),1027
3159,bool is_qspi_pinmux_set(void),1040
3160,Copyright (2019) Intel Corporation,3
3161,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3162,It is used by all basic firmware as it is the starting point before main() is called. It,37
3163,purposefully is not enabling interrupt controller until after calling sdm_early_init() because,38
3164,sdm_early_init() is required to run before interrupts and OS have started in all cases.,39
3165,void sdm_startup(void),45
3166,Copyright (2017-18) Intel Corporation,3
3167,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3168,void SDM_trace_corrupt(uint32_t entry),72
3169,"uint32_t SDM_trace_get(sdm_trace_t *ptrace, uint32_t size_word)",90
3170,"uint32_t SDM_dfx_trace_get(uint32_t *ptrace, uint32_t size_word)",144
3171,"void SDM_trace(uint32_t key, uint32_t line)",192
3172,"void SDM_trace_ptr(uint32_t key, const void *ptr)",226
3173,void SDM_trace_clear(void),237
3174,bool SDM_trace_valid(void),250
3175,Copyright (2020) Intel Corporation,3
3176,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3177,static sdm_return_t cmf_iid_puf_enroll_sign_iid_puf_key(cmf_ecp_keypair_t *puf_key_pair),60
3178,static sdm_return_t cmf_iid_puf_enroll_generate_puf_pubkey(cmf_384b_pubkey_t *puf_pubkey),120
3179,static sdm_return_t cmf_iid_puf_enroll_double_sign_efuse_puf_key(void),188
3180,static void cmf_iid_puf_enroll_mask_ult_aes_efuse(void),273
3181,static sdm_return_t cmf_iid_puf_enroll_generate_attest_certificate(void),299
3182,sdm_return_t cmf_iid_puf_enroll_assemble_help_data(void),346
3183,"void cmf_iid_puf_enroll_user_cmd_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",376
3184,Copyright (2018) Intel Corporation,3
3185,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3186,static sdm_return_t bbram_store_key(uint32_t* aes_root_data),57
3187,"static sdm_return_t bbram_derive_wrapping_key(bbram_wrapping_key_t bbram_wrap_key_type, cmf_key_t *bbram_wrap_key)",89
3188,"static uint32_t bbram_wrap_key(cmf_aes_resource_t aes_context, bbram_wrapping_key_t bbram_wrap_key_type, cmf_key_t *unwrap_aes_root_key, cmf_key_t *wrap_aes_root_key)",141
3189,"sdm_return_t cmf_aes_bbram_wrap_key(uint32_t * root_key, bbram_wrapping_key_t bbram_wrap_key_type)",246
3190,"static cmf_crypto_ret_t kdf256_send_to_nsp_ram (cmf_key_t      *const      p_input_key,",334
3191,"static sdm_return_t get_derivation_key(cmf_key_t * keyslot, uint32_t *context, bbram_wrapping_key_t key_type)",345
3192,static sdm_return_t dma_to_nsp_ram(uint32_t * p_data),383
3193,Copyright (2019) Intel Corporation.,3
3194,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3195,static sdm_return_t init_bkp_dependencies(void),108
3196,static void cmf_bkp_handlers_common_teardown(void),121
3197,"void cmf_bkp_mbox_sigma_m1_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",140
3198,"void cmf_bkp_mbox_sigma_m3_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",294
3199,"void cmf_bkp_mbox_sigma_enc_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",423
3200,"void cmf_bkp_mbox_sigma_teardown_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",639
3201,Copyright (2019) Intel Corporation.,3
3202,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3203,static sdm_return_t cmf_iid_puf_wrap_assemble_wrap_data(cmf_iid_puf_wrapped_aes_key_data_t *const wrapped_aes_key_data),84
3204,"sdm_return_t cmf_prov_cert_cmd_wrap_aes_key(cmf_user_aes_root_key_cert_t *aes_root_cert, ",103
3205,"static bool check_all_zeroes(uint32_t * p_array, uint32_t size)",128
3206,static bool validate_static_owner_hash(const void *const p_data),155
3207,"void cmf_prov_cert_cmd_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",197
3208,Copyright (2020) Intel Corporation,3
3209,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3210,Copyright (2020) Intel Corporation,3
3211,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3212,void cmf_provision_set_por_skip_status(bool skip),51
3213,bool cmf_provision_get_por_skip_status(void),56
3214,void cmf_provision_update_njp_status(uint32_t status),61
3215,bool cmf_provision_is_njp_flow_enabled(),85
3216,bool cmf_provision_njp_intial_check(),91
3217,Copyright (2020) Intel Corporation,2
3218,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
3219,static void njp_update_bootstat(),55
3220,static void trigger_por(),73
3221,int trigger_njp_soft_por(void),90
3222,Copyright (2019) Intel Corporation.,3
3223,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3224,sdm_return_t cmf_provision_qspi_init(void),80
3225,Copyright (2020) Intel Corporation,3
3226,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3227,cmf_crypto_ret_t kdf256_send_to_key_vault (,77
3228,cmf_crypto_ret_t kdf256_send_to_nsp_ram (,86
3229,sdm_return_t service_root_key_encrypt_and_send_to_key_vault(,95
3230,sdm_return_t service_root_key_from_efuse(cmf_key_t* p_service_root_key),106
3231,void service_root_key_provision_on_startup(),157
3232,static uint32_t get_security_version(),190
3233,"void alt_sdm_mbox_generate_service_root_key_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",202
3234,"sdm_return_t service_root_key_generate_and_send_to_key_vault(hash_256_t  *p_user_entropy, ",332
3235,"sdm_return_t service_root_key_generate(cmf_mpi_t *const p_svc_root_key,hash_256_t *p_entropy)",376
3236,"cmf_crypto_ret_t service_root_key_derive_wrapping_key(uint32_t security_version, cmf_key_t* service_root_key_wrapping_key)",454
3237,cmf_crypto_ret_t kdf256_send_to_key_vault(,581
3238,cmf_crypto_ret_t kdf256_send_to_nsp_ram (,593
3239,"ALT_SDM_MBOX_RESP_CODE parse_cmd_buffer(uint32_t *cmd_buf, ",608
3240,service_root_key_encrypt_and_send_to_key_vault(,646
3241,"sdm_return_t service_root_key_efuse_virtual_program(cmf_key_t *p_service_root_key_wrapping_key,cmf_key_t *p_service_root_key)",712
3242,"sdm_return_t service_root_key_efuse_physical_program(cmf_key_t *p_service_root_key_wrapping_key,cmf_key_t *p_service_root_key)",778
3243,"void service_root_key_efuse_clean_keys(cmf_key_t * key1, cmf_key_t * key2, cmf_key_t * key3, cmf_key_t * key4)",922
3244,Copyright (2019) Intel Corporation.,3
3245,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3246,STATIC void provision_mbox_hook(ALT_SDM_MBOX_CMD cmd),422
3247,STATIC void cmf_provision_sm_clear(cmf_provision_sm_event_t event),447
3248,STATIC cmf_provision_sm_event_t cmf_provision_sm_get(void),462
3249,STATIC cmf_provision_sm_event_t get_highest_priority_event(void),481
3250,STATIC const cmf_provision_sm_state_desc_t *get_state_desc(tramp_state_t state),508
3251,STATIC void check_for_efuse_events(void),533
3252,STATIC tramp_state_t state_entry_no_event(void),565
3253,"STATIC tramp_return_t validate_section_sha(uint32_t main_image_start_addr, uint32_t size, uint32_t expected_sha)",637
3254,"tramp_return_t read_action_data_buf(uint64_t main_sec_start_add, uint32_t size)",674
3255,sdm_return_t njp_action_handler(),714
3256,STATIC tramp_state_t state_njp_processing_no_event(void),754
3257,STATIC tramp_state_t state_load_cmf_main_descriptor_no_event(void),876
3258,STATIC tramp_state_t state_load_cmf_signature_no_event(void),920
3259,STATIC tramp_state_t state_load_tramp_no_event(void),993
3260,STATIC tramp_state_t state_get_sync_block_no_event(void),1064
3261,STATIC sdm_return_t state_load_cmf_main_descriptor_entry(void),1091
3262,STATIC sdm_return_t state_load_cmf_main_descriptor_exit(void),1122
3263,STATIC sdm_return_t state_load_cmf_signature_entry(void),1134
3264,STATIC sdm_return_t state_load_cmf_signature_exit(void),1146
3265,STATIC sdm_return_t state_load_tramp_entry(void),1158
3266,STATIC sdm_return_t state_load_tramp_exit(void),1170
3267,STATIC sdm_return_t state_get_sync_block_entry(void),1182
3268,STATIC sdm_return_t state_get_sync_block_exit(void),1194
3269,STATIC sdm_return_t state_bitstream_processing_disabled_entry(void),1207
3270,STATIC sdm_return_t state_bitstream_processing_disabled_exit(void),1236
3271,STATIC sdm_return_t state_por_wait_entry(void),1257
3272,STATIC sdm_return_t state_bkp_processing_entry(void),1290
3273,STATIC sdm_return_t state_bkp_processing_exit(void),1310
3274,STATIC sdm_return_t state_qspi_fast_processing_entry(void),1334
3275,STATIC sdm_return_t state_qspi_fast_processing_exit(void),1354
3276,STATIC sdm_return_t state_njp_processing_entry(void),1377
3277,STATIC sdm_return_t state_njp_processing_exit(void),1391
3278,STATIC sdm_return_t state_recov_error_entry(void),1420
3279,STATIC sdm_return_t state_fatal_error_entry(void),1435
3280,STATIC tramp_state_t state_entry(cmf_provision_sm_event_t event),1458
3281,STATIC tramp_state_t state_idle(cmf_provision_sm_event_t event),1504
3282,STATIC tramp_state_t state_bitstream_processing_disabled(cmf_provision_sm_event_t event),1577
3283,STATIC tramp_state_t state_por_wait(cmf_provision_sm_event_t event),1625
3284,STATIC tramp_state_t state_load_cmf_main_descriptor(cmf_provision_sm_event_t event),1663
3285,STATIC tramp_state_t state_load_cmf_signature(cmf_provision_sm_event_t event),1728
3286,STATIC tramp_state_t state_load_tramp(cmf_provision_sm_event_t event),1790
3287,STATIC tramp_state_t state_get_sync_block(cmf_provision_sm_event_t event),1852
3288,STATIC tramp_state_t state_bkp_processing(cmf_provision_sm_event_t event),1919
3289,STATIC tramp_state_t state_qspi_fast_processing(cmf_provision_sm_event_t event),2034
3290,STATIC tramp_state_t state_njp_processing(cmf_provision_sm_event_t event),2125
3291,STATIC tramp_state_t state_recov_error(cmf_provision_sm_event_t event),2168
3292,STATIC tramp_state_t state_fatal_error(cmf_provision_sm_event_t event),2236
3293,void tramp_restart(tramp_config_event_t event),2253
3294,void cmf_provision_sm_post(cmf_provision_sm_event_t event),2307
3295,"@note Since this is not an entirely event-driven state machine (some states poll crypto path devices, e.g. for",2326
3296,sdm_return_t cmf_provision_state_machine(void),2329
3297,void cmf_provision_state_machine_init(void),2420
3298,Copyright (2019) Intel Corporation,3
3299,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3300,static uint32_t validate_rma_certificate(rma_compact_cert_t* cert),45
3301,static uint32_t get_rma_counter_fuse_value(rma_compact_cert_t* cert),164
3302,"void cmf_bkp_mbox_rma_cert_process_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",222
3303,Copyright (2019) Intel Corporation.,3
3304,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3305,int32_t alt_sdm_thermal_read(void),178
3306,static void cmf_provision_clock_init(void),188
3307,void cmf_provision_configure_avst8_pinmux(void),201
3308,void cmf_provision_configure_avst_ready(void),215
3309,void cmf_provision_setup_pin_mux(void),239
3310,@brief sysinit_main() supposed to be called from alt_main() before any of the OS init,275
3311,int sysinit_main(void),277
3312,void mcore_nios2_tmr_isr(void* isr_context),440
3313,int main(void),449
3314,Copyright (2020) Intel Corporation,3
3315,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3316,pre_handoff_data_t get_re_handoff_data_() {,53
3317,void pa_bre_handoff_ram_init(),64
3318,void pa_bre_handoff_flags_write_test_scenario(pa_test_scenario_t scenario),91
3319,static inline pa_tlv_type_t pa_convert_certificate_request_to_tlv_type(pa_certificate_request_t certificate_request),119
3320,"uint32_t pa_get_certificate_from_tlv(uint8_t *buf,",160
3321,pre_handoff_data_t get_re_handoff_data(),248
3322,uint32_t get_re_handoff_data_test_flags(),258
3323,pa_return_t pa_write_re_handoff_flag_certificates(pa_certificate_request_t certificate_request),272
3324,uint32_t pa_read_re_handoff_flags(),295
3325,void pa_init_re_handoff_flags(),305
3326,Copyright (2020) Intel Corporation,3
3327,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3328,"static pa_return_t get_bre_cert(pa_certificate_request_t request,",28
3329,"static pa_return_t get_cmf_cert(pa_certificate_request_t request,",46
3330,"pa_return_t pa_certificate_get(pa_certificate_request_t request,",96
3331,Copyright (2020) Intel Corporation,3
3332,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3333,static sdm_return_t fill_uid(),40
3334,static sdm_return_t fill_subject(pa_keypair_t* subject),69
3335,static sdm_return_t fill_authority(pa_keypair_t* issuer),109
3336,static sdm_return_t fill_general_parameters(),136
3337,static sdm_return_t sign(pa_keypair_t* issuer),157
3338,"sdm_return_t fill_cert_constants_common(pa_keypair_t* issuer,",178
3339,"uint32_t pa_certificate_generate(pa_certype_t cert_type,",234
3340,Copyright (2020) Intel Corporation,3
3341,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3342,void pa_design_hash_init(),88
3343,Copyright (2020) Intel Corporation,3
3344,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3345,"static sdm_return_t get_efuse(pa_efuse_t* efuse, uint8_t* buffer, uint32_t buffer_length)",33
3346,"sdm_return_t pa_efuse_get_uid(uint8_t* buffer, uint32_t buffer_length)",60
3347,Copyright (2020) Intel Corporation,3
3348,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3349,Copyright (2020) Intel Corporation,3
3350,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3351,void pa_entry_event(),36
3352,sdm_return_t pa_exit_event(bool* skip_cmf),54
3353,Copyright (2020) Intel Corporation,3
3354,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3355,bool pa_adi_is_present(),68
3356,void pa_provide_re_handoff_flags(re_handoff_flags_t re_handoff_flags),80
3357,void pa_provide_re_handoff_data(re_handoff_data_t* re_handoff_data),92
3358,bool pa_is_device_owned(),102
3359,Copyright (2020) Intel Corporation,3
3360,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3361,"static sdm_return_t create_keypair(pa_keypair_t* keypair,",89
3362,sdm_return_t pa_key_create_firmware_keypair(pa_keypair_t* firmware_keypair),132
3363,sdm_return_t pa_key_create_bkp_keypair(pa_keypair_t* bkp_keypair),149
3364,"sdm_return_t pa_key_sign(pa_keypair_t* issuer,",172
3365,"sdm_return_t pa_key_get_public_xy(pa_keypair_t* keypair,",248
3366,Copyright (2018) Intel Corporation,3
3367,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3368,"static cmf_crypto_ret_t cmf_aes_check_data_src_param(const cmf_aes_data_source_t  cmf_aes_data_source, ",40
3369,"static cmf_crypto_ret_t cmf_aes_check_cipher_param(uint32_t cipher, alt_sdm_aes_cipher_mode_t* alt_sdm_aes_cipher_mode);                                            ",44
3370,void cmf_aes_init(void),58
3371,cmf_crypto_ret_t cmf_aes_resource_subscribe(cmf_aes_resource_t* cmf_aes_resource),75
3372,"cmf_crypto_ret_t cmf_aes_resource_subscribe_ex(cmf_aes_resource_t* cmf_aes_resource,",80
3373,cmf_crypto_ret_t cmf_aes_resource_unsubscribe(cmf_aes_resource_t* cmf_aes_resource),138
3374,cmf_crypto_ret_t cmf_aes_clear_aes_context(const cmf_aes_resource_t cmf_aes_resource),178
3375,"cmf_crypto_ret_t cmf_aes_set_iv(cmf_aes_resource_t cmf_aes_resource,  cmf_aes_iv_data_t* cmf_aes_iv_data)",234
3376,"cmf_crypto_ret_t  cmf_aes_set_key_mode(cmf_aes_resource_t cmf_aes_resource,  uint32_t key_update_mode)",278
3377,"cmf_crypto_ret_t cmf_aes_set_key(const cmf_aes_resource_t cmf_aes_resource, cmf_key_t* key)",312
3378,"cmf_crypto_ret_t cmf_aes_set_key_ex(const cmf_aes_resource_t cmf_aes_resource, cmf_key_t* key, uint32_t key_update_mode, uint32_t key_update_intvl)",317
3379,cmf_crypto_ret_t cmf_aes_select_aes_context(cmf_aes_resource_t cmf_aes_resource),379
3380,"cmf_crypto_ret_t cmf_aes_crypt(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_opmode_t op_mode, cmf_aes_cipher_t cipher, ",409
3381,"cmf_crypto_ret_t cmf_aes_decrypt_key_and_send_to_key_vault_ex(const cmf_aes_resource_t cmf_aes_resource, uint32_t cipher,",563
3382,"cmf_crypto_ret_t cmf_aes_encrypt_key_and_send_to_key_vault_ex(const cmf_aes_resource_t cmf_aes_resource, uint32_t cipher,",579
3383,"cmf_crypto_ret_t cmf_aes_decrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",596
3384,"cmf_crypto_ret_t cmf_aes_encrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_encrypt, cmf_key_t* key_dest,",616
3385,"cmf_crypto_ret_t cmf_aes_decrypt_key_and_send_to_key_vault_and_ram(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",634
3386,"cmf_crypto_ret_t cmf_aes_encrypt_key_and_send_to_key_vault_and_ram(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t* key_to_encrypt, cmf_key_t* key_dest,",653
3387,"static sdm_return_t cmf_aes_start_xfer_aes_to_nsp_ram(uint32_t * const p_data, uint32_t p_data_words_sz)",673
3388,static bool cmf_aes_is_xfer_aes_to_nsp_ram_done(uint32_t timeout_count),700
3389,"cmf_crypto_ret_t cmf_aes_crypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_crypt, cmf_key_t* key_dest, alt_sdm_aes_opmode_t cypher_mode,",733
3390,bool cmf_aes_is_key_update_mode_enabled(cmf_aes_resource_t cmf_aes_resource),866
3391,"cmf_crypto_ret_t cmf_aes_decrypt_key_from_fifo_and_send_to_key_vault (const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_aes_data_source_t fifo, cmf_key_t* key_dest)",871
3392,cmf_crypto_ret_t cmf_aes_wait_for_aes_xfer_cmplt(uint32_t timeoutClockTicks),986
3393,"cmf_crypto_ret_t cmf_aes_wait_for_aes_to_dma_xfer_cmplt(uint32_t * const dma_buf, uint32_t dma_buf_words_sz, uint32_t timeoutClockTicks)",1005
3394,uint32_t cmf_aes_wait_for_aes_not_busy(void),1055
3395,"static cmf_crypto_ret_t cmf_aes_check_key_param(cmf_key_t* key_ptr, alt_sdm_aes_key_size_t* alt_sdm_aes_key_size_ptr)",1090
3396,"static cmf_crypto_ret_t cmf_aes_check_cipher_param(uint32_t cipher, alt_sdm_aes_cipher_mode_t* alt_sdm_aes_cipher_mode)",1114
3397,"static cmf_crypto_ret_t cmf_aes_check_data_src_param(const cmf_aes_data_source_t  cmf_aes_data_source, ",1137
3398,"cmf_crypto_ret_t cmf_aes_get_key_dest(cmf_aes_resource_t cmf_aes_resource, alt_sdm_aes_key_dest_sel_t* aes_key_dest)",1180
3399,"static cmf_crypto_ret_t cmf_aes_get_key_ctx_sel(cmf_aes_resource_t cmf_aes_resource, alt_sdm_aes_key_ctx_sel_t* aes_key_ctx_sel)",1198
3400,"static cmf_crypto_ret_t cmf_aes_setup_aes_context(const cmf_aes_resource_t cmf_aes_resource, cmf_key_t* root_key, cmf_aes_iv_data_t *iv_data_ptr)",1214
3401,Copyright (2019) Intel Corporation,3
3402,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3403,void cmf_attest_init(void),34
3404,"cmf_crypto_ret_t cmf_attest_sha(uint32_t *pdata, uint32_t byte_len, uint32_t mode, uint32_t *phash, uint32_t word_len)",60
3405,"cmf_crypto_ret_t cmf_attest_derive( const cmf_key_id_t key_id,",77
3406,"cmf_crypto_ret_t cmf_attest_keypair(uint32_t *rng_buffer, const cmf_ecp_group_id_t group_id,",133
3407,"cmf_crypto_ret_t cmf_attest_sign(uint32_t* secret_key_data, const cmf_ecp_group_id_t group_id, const cmf_key_size_t key_size, void* p_data, const uint32_t data_length, uint32_t* sig_r_mpi_data, uint32_t* sig_s_mpi_data)",168
3408,"sdm_return_t cmf_attest_clear_key_in_keyvault(cmf_key_id_t slot, cmf_key_size_t size)",205
3409,void cmf_attest_cleanup(void),225
3410,Copyright (2018) Intel Corporation,3
3411,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3412,"cmf_crypto_ret_t cmf_mpi_init(cmf_mpi_t         *p_mpi, ",33
3413,cmf_crypto_ret_t cmf_mpi_validate(const cmf_mpi_t *const p_mpi),54
3414,cmf_crypto_ret_t cmf_mpi_uninit(cmf_mpi_t* p_mpi),71
3415,cmf_crypto_ret_t cmf_mpi_zeroize(cmf_mpi_t* p_mpi),83
3416,bool cmf_mpi_is_zero(cmf_mpi_t* p_mpi),98
3417,"bool    cmf_mpi_equal(const cmf_mpi_t       *const p_mpi_1,",121
3418,"cmf_crypto_ret_t cmf_mpi_compare(const cmf_mpi_t        *const p_mpi_1, ",146
3419,"cmf_crypto_ret_t cmf_mpi_fill(cmf_mpi_t       *const p_mpi, ",217
3420,"cmf_crypto_ret_t cmf_mpi_copy(cmf_mpi_t        *const p_mpi_1, ",271
3421,Copyright (2019) Intel Corporation,2
3422,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
3423,"cmf_crypto_ret_t cmf_ecdh_compute_shared( const cmf_ecp_group_id_t          group_id, ",36
3424,Copyright (2018-2019) Intel Corporation,2
3425,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
3426,"cmf_crypto_ret_t cmf_ecdsa_keypair_init(cmf_ecp_keypair_t           *p_keypair,",81
3427,cmf_crypto_ret_t cmf_ecdsa_keypair_validate(const cmf_ecp_keypair_t *const  p_keypair),130
3428,"cmf_crypto_ret_t cmf_ecdsa_check_public_key(const cmf_ecp_group_id_t     group_id, ",160
3429,cmf_crypto_ret_t cmf_ecdsa_key_generation_init(const cmf_mpi_t *const    p_rng) ,172
3430,"cmf_crypto_ret_t cmf_ecdsa_key_generation_init_ex(  uint32_t            base_key_slot, ",201
3431,"cmf_crypto_ret_t cmf_ecdsa_gen_private_key(const cmf_ecp_group_id_t  group_id, ",258
3432,"cmf_crypto_ret_t cmf_ecdsa_get_public_key(const cmf_ecp_group_id_t  group_id, ",328
3433,"cmf_crypto_ret_t cmf_ecdsa_gen_keypair( const cmf_ecp_group_id_t  group_id, ",395
3434,cmf_crypto_ret_t cmf_ecdsa_key_generation_uninit( void ),428
3435,"cmf_crypto_ret_t cmf_ecdsa_sign( const cmf_ecp_group_id_t   group_id, ",445
3436,"cmf_crypto_ret_t cmf_ecdsa_verify(  const cmf_ecp_group_id_t          group_id, ",764
3437,Copyright (2018) Intel Corporation,2
3438,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
3439,Copyright (2018) Intel Corporation,3
3440,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3441,"static cmf_crypto_ret_t hmac_drbg_update(  const uint8_t *const p_provided_data,",91
3442,"cmf_crypto_ret_t cmf_hmac_drbg_init( const void  *const p_entropy_input,",114
3443,@fn: cmf_hmac_drbg_generate() ,294
3444,"cmf_crypto_ret_t cmf_hmac_drbg_generate(const void   *const p_additional_input,",304
3445,@fn:  cmf_hmac_drbg_reseed(),442
3446,"cmf_crypto_ret_t cmf_hmac_drbg_reseed(  const void   *const p_entropy_input,",455
3447,@fn: cmf_hmac_drbg_set_reseed_interval(),563
3448,cmf_crypto_ret_t cmf_hmac_drbg_set_reseed_interval(const uint32_t reseed_interval),569
3449,@fn: cmf_hmac_drbg_finish(),581
3450,cmf_crypto_ret_t cmf_hmac_drbg_finish(void),586
3451,bool cmf_hmac_drbg_initialized(void),600
3452,Function: hmac_drbg_update(),614
3453,"static cmf_crypto_ret_t hmac_drbg_update( const uint8_t *const  p_provided_data,",626
3454,@fn:hmac_drbg_get_v(),736
3455,cmf_mpi_t* hmac_drbg_get_v(void),740
3456,Copyright (2018-2019) Intel Corporation,3
3457,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3458,5.1 KDF in Counter Mode (From NIST SP 800-108),43
3459,1. n := ceiling(L/h).,52
3460,3. result(0):= null.,54
3461,"a. K(i) := PRF (KI, [i] || Label || 0x00 || Context || [L])",56
3462,b. result(i) := result(i-1) || K(i).,57
3463,5. Return: KO := the leftmost L bits of result(n).,58
3464,@Fn             cmf_hmac_kdf(),75
3465,"@note For cases where the output includes CMF_HMAC_MD_DEST_UKV (i.e. UKV only or UKV and RAM), the output key length",94
3466,"cmf_crypto_ret_t    cmf_hmac_kdf(const cmf_hmac_type_t      hmac_type,",99
3467,Copyright (2018) Intel Corporation,3
3468,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3469,@Fn                     cmf_key_init(),40
3470,"cmf_crypto_ret_t cmf_key_init(cmf_key_t  *p_key,",49
3471,@Fn                     cmf_key_cosnstruct(),93
3472,"cmf_crypto_ret_t cmf_key_construct(cmf_key_t  *p_key,",103
3473,cmf_crypto_ret_t cmf_key_validate(const cmf_key_t *const p_key),142
3474,"cmf_crypto_ret_t cmf_key_free(cmf_key_t *p_key, ",189
3475,Copyright (2018) Intel Corporation,3
3476,"SRC code (""Material"") are owned by Intel Corporation or its suppliers or",6
3477,static uint32_t   cmf_km_convert_put_source(cmf_km_src_t  key_src),60
3478,static uint32_t   cmf_km_convert_get_dest(cmf_km_dest_t key_dest),92
3479,"cmf_crypto_ret_t cmf_km_save_key(cmf_km_src_t  key_src,",134
3480,"cmf_crypto_ret_t cmf_km_load_key(cmf_km_dest_t key_dest, cmf_key_t  *p_key, bool clear_key, uint32_t top_half)",348
3481,Copyright (2018) Intel Corporation,3
3482,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3483,void cmf_km_init(),99
3484,"cmf_key_id_t cmf_km_alloc_key_slot(cmf_key_size_t key_size, cmf_km_dest_t key_dest)",110
3485,"void cmf_km_mask_key_slot(cmf_key_size_t key_size, cmf_key_id_t key_id)",167
3486,cmf_crypto_ret_t cmf_km_free_key_slot(cmf_key_t * p_key),216
3487,Copyright (2020) Intel Corporation,3
3488,"SRC code (""Material"") are owned by Intel Corporation or its suppliers or",6
3489,"uint32_t cmf_pkc_sign(cmf_mpi_t* p_rndm_num_k,",30
3490,"uint32_t cmf_pkc_verify(cmf_mpi_t* p_hash,",144
3491,"uint32_t cmf_pkc_point_multiply(pkc_supported_curves_t curve,",205
3492,"uint32_t cmf_pkc_mod_expo(pkc_supported_curves_t curve,",274
3493,"uint32_t cmf_pkc_mod_mult(pkc_supported_curves_t curve, cmf_mpi_t* x_in, cmf_mpi_t* y_in, cmf_mpi_t* value_out){",309
3494,"uint32_t cmf_pkc_mod_add(pkc_supported_curves_t curve, cmf_mpi_t* x_in, cmf_mpi_t* y_in, cmf_mpi_t* value_out){",340
3495,"uint32_t cmf_pkc_mod_sub(pkc_supported_curves_t curve, cmf_mpi_t* x_in, cmf_mpi_t* y_in, cmf_mpi_t* value_out){",370
3496,Copyright (2018) Intel Corporation,3
3497,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3498,static void save_hardware_registers(),69
3499,static void restore_hardware_registers(),84
3500,void crypto_aes_init(crypto_aes_use_mode_t aes_use_mode),111
3501,crypto_aes_ctx_id_t crypto_aes_allocate_context(),147
3502,cmf_crypto_ret_t crypto_aes_free_context(crypto_aes_ctx_id_t ctx_id),173
3503,cmf_crypto_ret_t crypto_aes_start(crypto_aes_ctx_t *aes_ctx),196
3504,"static cmf_crypto_ret_t crypto_aes_update(  crypto_aes_ctx_t    *aes_ctx,",330
3505,cmf_crypto_ret_t crypto_aes_finish(crypto_aes_ctx_t *aes_ctx),507
3506,static cmf_crypto_ret_t aes_ctx_param_validate(crypto_aes_ctx_t *aes_ctx),531
3507,"cmf_crypto_ret_t crypto_aes(crypto_aes_ctx_t *aes_ctx,",607
3508,Copyright (2018) Intel Corporation,3
3509,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3510,"cmf_crypto_ret_t cmf_ecp_multiply( const cmf_ecp_group_id_t     group_id, ",76
3511,"cmf_crypto_ret_t cmf_ecp_check_private_key( const cmf_ecp_group_id_t group_id, ",206
3512,@brief This function random generate register By (with retry),255
3513,"cmf_crypto_ret_t cmf_ecp_generate_By(const uint32_t RETRY, ",265
3514,Copyright (2018-2019) Intel Corporation,3
3515,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3516,"static cmf_crypto_ret_t hmac_send_data(const void *const p_data,",77
3517,@fn:            cmf_hmac_init(),85
3518,cmf_crypto_ret_t cmf_hmac_init(void),89
3519,@fn:            cmf_hmac_start(),97
3520,"cmf_crypto_ret_t cmf_hmac_start(const cmf_hmac_type_t   hmac_type,",108
3521,@fn:            cmf_hmac_upate(),212
3522,"cmf_crypto_ret_t cmf_hmac_update( const void *const p_data,",223
3523,@fn:            cmf_hmac_finish(),272
3524,"cmf_crypto_ret_t cmf_hmac_finish( const void        *const  p_data,",289
3525,@fn:            cmf_hmac(),394
3526,"cmf_crypto_ret_t cmf_hmac( const cmf_hmac_type_t    hmac_type,",415
3527,@fn:            hmac_cleanup(),441
3528,static void hmac_cleanup(void),445
3529,@fn:            hmac_send_data(),457
3530,"static cmf_crypto_ret_t hmac_send_data(const void *const p_data,",464
3531,Copyright (2018) Intel Corporation,3
3532,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3533,"cmf_crypto_ret_t cmf_ecp_multiply( const cmf_ecp_group_id_t     group_id, ",51
3534,"cmf_crypto_ret_t cmf_ecp_check_private_key( const cmf_ecp_group_id_t group_id, ",152
3535,Copyright (2018-2019) Intel Corporation,3
3536,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3537,"static cmf_crypto_ret_t hmac_send_data(const void *const p_data,",78
3538,@fn:            cmf_hmac_init(),87
3539,cmf_crypto_ret_t cmf_hmac_init(void),91
3540,@fn:            cmf_hmac_start(),99
3541,"cmf_crypto_ret_t cmf_hmac_start(const cmf_hmac_type_t   hmac_type,",110
3542,@fn:            cmf_hmac_upate(),207
3543,"cmf_crypto_ret_t cmf_hmac_update( const void *const p_data,",218
3544,@fn:            cmf_hmac_finish(),241
3545,"cmf_crypto_ret_t cmf_hmac_finish( const void        *const  p_data,",258
3546,@fn:            cmf_hmac(),360
3547,"cmf_crypto_ret_t cmf_hmac( const cmf_hmac_type_t    hmac_type,",381
3548,@fn:            hmac_cleanup(),407
3549,static void hmac_cleanup(void),411
3550,@fn:            hmac_send_data(),422
3551,"static cmf_crypto_ret_t hmac_send_data(const void *const p_data,",432
3552,Copyright (2020) Intel Corporation,3
3553,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3554,@param size is the of the AES data being processed.@sa alt_sdm_aes_config().,54
3555,uint32_t alt_sdm_aes_enable(uint32_t size),62
3556,void alt_sdm_aes_start(void),75
3557,void alt_sdm_aes_clear_keys(void),87
3558,void alt_sdm_aes_bypass(void),97
3559,void alt_sdm_aes_init(void),143
3560,- ALT_SDM_AES_OPMODE_ENCODE encode the input to the AES module. (NOT SUPPORTED YET),187
3561,- ALT_SDM_AES_OPMODE_DECODE decode the input to the AES module. (NOT SUPPORTED YET),188
3562,- ALT_SDM_AES_MODE_CBC ?? (NOT SUPPORTED YET),191
3563,- ALT_SDM_AES_MODE_CTR ?? (NOT SUPPORTED YET),192
3564,- ALT_SDM_AES_MODE_EBC ?? (NOT SUPPORTED YET),193
3565,alt_sdm_aes_config(ALT_SDM_AES_OPMODE_BYPASS |,217
3566,"void alt_sdm_aes_config(uint32_t mode, uint32_t size, uint32_t outsize_diff)",224
3567,void alt_sdm_aes_dest_set(uint32_t dest),269
3568,"void alt_sdm_aes_key_load(uint32_t key_dest, uint32_t key_size, uint32_t key_mode)",302
3569,uint32_t alt_sdm_aes_cmdfifo_full(void),324
3570,uint32_t alt_sdm_aes_cmdfifo_empty(void),335
3571,uint32_t alt_sdm_aes_cmdfifo_done(void),346
3572,uint32_t alt_sdm_aes_ready(void),357
3573,void alt_sdm_aes_int_clear(uint32_t mask),399
3574,void alt_sdm_aes_int_enable(uint32_t mask),420
3575,void alt_sdm_aes_int_disable(uint32_t mask),441
3576,if(status == ALT_SDM_AES_INT_TX_DONE),455
3577,uint32_t alt_sdm_aes_int_status(void),463
3578,"void alt_sdm_aes_get_data(uint8_t rdsel_fifo, uint32_t aes_mode, uint32_t size, uint32_t outcount)",474
3579,"void alt_sdm_aes_setup_bypass(alt_sdm_aes_cib_rd_fifo_t input_fifo, uint32_t xfer_length_words_64bits, alt_sdm_aes_data_dest_t output_destination)",491
3580,bool alt_sdm_aes_is_busy(void),518
3581,"@param interval_length update interval length (0=no update, 1/3/7/15/31/63/127/255 = update key every N*32 bytes)",531
3582,"sdm_return_t alt_sdm_aes_get_update_interval(uint32_t interval_length,",537
3583,sdm_return_t alt_sdm_aes_key_swap_mode_set(alt_sdm_aes_key_swap_mode_config_t* aes_key_swap),605
3584,"sdm_return_t alt_sdm_aes_iv_set(alt_sdm_aes_iv_dest_sel_t aes_iv_dest, alt_sdm_aes_iv_data_t*  iv_data)",633
3585,sdm_return_t alt_sdm_aes_key_info_set(alt_sdm_aes_key_info_t* aes_key_info),686
3586,"void alt_sdm_aes_setup_aes_regs(alt_sdm_aes_data_src_t  aes_data_source,",727
3587,"void alt_sdm_aes_setup_data_xfer(alt_sdm_aes_key_ctx_sel_t aes_key_ctx_sel,",761
3588,void alt_sdm_aes_key_as_data_last_operation_set(void),806
3589,void alt_sdm_aes_key_context_select_clear_to_zero(void),814
3590,Copyright (2020) Intel Corporation,3
3591,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3592,"STATIC uint32_t pll2_get_dft_table_entry(uint32_t refclk_mhz, uint32_t pllc2_mhz)",208
3593,sdm_return_t alt_sdm_pll_startup(alt_clkmgr_pll_t pll),247
3594,void alt_sdm_update_intosc_frequency(uint32_t divider),277
3595,void alt_sdm_ctrl_clk_scr_select(uint32_t sel),288
3596,void alt_sdm_data_clk_scr_select(uint32_t sel),299
3597,"void alt_sdm_clk_bypass_enable(uint32_t mask, uint32_t bypass_val)",310
3598,void alt_sdm_pll0_div(uint32_t div),320
3599,void alt_sdm_enter_power_state_reset(alt_clkmgr_pll_t pll),357
3600,void alt_sdm_enter_power_state_bypass(alt_clkmgr_pll_t pll),374
3601,"uint32_t alt_sdm_wait_for_pll_lock(alt_clkmgr_pll_t pll, uint32_t timeout_value)",397
3602,void alt_sdm_data_clk_set_cnt(uint32_t cnt),453
3603,void alt_sdm_clk_bypassr_clear(uint32_t bypassr_val),463
3604,"void alt_sdm_data_clk_mux_freq_change_cnt(uint32_t sel, uint32_t cnt, uint32_t bypass)",475
3605,"STATIC uint32_t compute_clkdiv_ratio(uint32_t refclk, uint32_t outclk)",491
3606,"STATIC uint32_t pll_calc_divq(uint32_t pll_out, uint32_t vco_mhz)",513
3607,"STATIC uint32_t pll2_calc_divq(uint32_t pll_out, uint32_t vco_mhz)",561
3608,"STATIC uint32_t pll_calc_divf(uint32_t refclk_mhz, uint32_t vco_mhz)",609
3609,"STATIC uint32_t pll2_calc_divf(uint32_t refclk_mhz, uint32_t vco_mhz, uint32_t pllc2_mhz)",639
3610,STATIC uint32_t __inline pll_calc_divr(uint32_t refclk_mhz),681
3611,"STATIC uint32_t pll2_get_table_entry(uint32_t refclk_mhz, uint32_t pllc2_mhz)",692
3612,"STATIC uint32_t pll2_calc_divr(uint32_t refclk_mhz, uint32_t pllc2_mhz)",728
3613,STATIC uint32_t pll_calc_post_div_refclk(uint32_t refclk_mhz),757
3614,STATIC uint32_t pll_get_range(uint32_t refclk_mhz),787
3615,"STATIC uint32_t pll2_get_range(uint32_t refclk_mhz, uint32_t pllc2_mhz)",838
3616,void alt_sdm_pllc0_clk_en(bool clk_en),908
3617,void alt_sdm_pllc1_clk_en(bool clk_en),927
3618,void alt_sdm_pllc2_clk_en(bool clk_en),945
3619,"int32_t alt_sdm_pll_config_mhz(uint32_t pllc0_mhz, uint32_t pllc1_mhz, uint32_t refclk_mhz, uint32_t vco_mhz)",966
3620,"int32_t alt_sdm_pll2_config_mhz(uint32_t pllc2_mhz, uint32_t qspi_clk_in, uint32_t refclk_mhz, uint32_t vco2_mhz)",1037
3621,"void alt_sdm_clk_set_qspi_clk(uint32_t pllc0_mhz, uint32_t pllc1_mhz, uint32_t qspi_clk)",1100
3622,"int32_t alt_sdm_config_pll2_for_nw_mhz(uint32_t pllc2_mhz, uint32_t refclk_mhz)",1125
3623,"sdm_return_t alt_sdm_clk_set_nw_clk(uint32_t nw_freq, uint32_t ref_clk)",1195
3624,void alt_sdm_clk_internal(void),1281
3625,void alt_sdm_bypass_clear_all(void),1295
3626,void alt_sdm_bypass_clear_except_ctrl(void),1329
3627,"void alt_sdm_clk_setup_divider_all(uint32_t pllc0_mhz, uint32_t pllc1_mhz, uint32_t cpu_clk, uint32_t sp_clk)",1367
3628,void alt_sdm_clk_set_safe_ref_clk_div(uint32_t value),1447
3629,void alt_sdm_set_clk_slices_to_default(),1472
3630,@param value represents enable (non-zero) or disable (zero) the sdm_sdata_crypto_clk and sdm_fdata_clk.,1532
3631,void switch_sdm_sdata_crypto_clk(uint32_t value),1535
3632,uint32_t get_sdm_sdata_crypto_clk_sleep_status(void),1561
3633,Copyright (2017) Intel Corporation,3
3634,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3635,static bool sdm_dma_ptr_valid(void * ptr),69
3636,static void dma_wr_id_update(),98
3637,static void dma_rd_id_update(),110
3638,void alt_sdm_dma_rd_int_clear(void),124
3639,void alt_sdm_dma_rd_int_disable(void),140
3640,void alt_sdm_dma_rd_int_enable(void),156
3641,uint32_t alt_sdm_dma_rd_status(void),172
3642,sdm_dma_bus_t alt_sdm_dma_rd_bus_get(void),182
3643,void alt_sdm_dma_rd_init(sdm_dma_bus_t bus),207
3644,int32_t alt_sdm_dma_rd_stop(void),236
3645,void alt_sdm_dma_rd_resume(void),288
3646,bool alt_sdm_dma_rd_active(void),298
3647,bool alt_sdm_dma_wr_active(void),317
3648,bool alt_sdm_dma_rd_desc_full(void),336
3649,"uint32_t alt_sdm_dma_rd_send_desc(uint32_t *p_src, uint32_t size,",366
3650,"uint32_t alt_sdm_dma_rd_send_desc_burst_fixed(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt,uint32_t burst)",465
3651,"void alt_sdm_dma_rd_send_desc_fixed(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt){",516
3652,"int32_t alt_sdm_dma_rd_nsp_ram(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt)",568
3653,void alt_sdm_dma_wr_int_clear(void),626
3654,void alt_sdm_dma_wr_int_disable(void),642
3655,void alt_sdm_dma_wr_int_enable(void),659
3656,uint32_t alt_sdm_dma_wr_status(void),676
3657,sdm_dma_bus_t alt_sdm_dma_wr_bus_get(void),686
3658,void alt_sdm_dma_wr_init(sdm_dma_bus_t bus),711
3659,"int32_t alt_sdm_dma_wr_nsp_ram(uint32_t *pDest, uint32_t size, uint32_t enable_interrupt)",753
3660,int32_t alt_sdm_dma_wr_stop(void),814
3661,void alt_sdm_dma_wr_resume(void),858
3662,bool alt_sdm_dma_wr_desc_full(void),868
3663,@note The \e size value must be an integer multiple of the (burst size * 8).,890
3664,"uint32_t alt_sdm_dma_wr_send_desc(uint32_t *p_dest, uint32_t size, uint32_t flags, uint32_t burst)",899
3665,"uint32_t alt_sdm_dma_wr_send_desc_burst_fixed(uint32_t *p_dest, uint32_t size, uint32_t enable_interrupt,uint32_t burst)",995
3666,uint32_t alt_sdm_dma_wr_get_desc_remain(void),1029
3667,uint32_t alt_sdm_dma_rd_get_desc_remain(void),1039
3668,bool alt_sdm_dma_rd_if_stop(void),1050
3669,int32_t alt_sdm_dma_rd_stop_desc(bool enable),1073
3670,bool alt_sdm_dma_wr_if_stop(void),1126
3671,int32_t alt_sdm_dma_wr_stop_desc(bool enable),1150
3672,uint32_t alt_sdm_dma_calc_burst_size(uint32_t size_in_bytes),1203
3673,Copyright (2020) Intel Corporation,3
3674,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3675,"static sdm_return_t altera_sdm_efuse_check_fail(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, const uint32_t readback_efuse_values[], bool skip_cache_update, bool is_last_block,",490
3676,const br_efuse_t * get_efuse_cache_ptr(void),575
3677,"static uint32_t altera_sdm_efuse_bank_to_addr (const uint32_t bank, const uint32_t row)",597
3678,static sdm_return_t altera_sdm_efuse_power_on_reset(void),609
3679,static sdm_return_t altera_sdm_pre_read_ops(void),652
3680,"static sdm_return_t alt_read_row(const uint32_t bank, const uint32_t row, uint32_t *row_read_data)",683
3681,static uint32_t alt_read_ecc(const uint32_t addr) {,777
3682,"static uint32_t altera_sdm_efuse_calculate_key_index (const uint32_t bank, const uint32_t start_row) {",825
3683,static sdm_return_t altera_sdm_read_aes_rows(const uint32_t key_index),857
3684,static void altera_sdm_post_read_ops(void),896
3685,@param bank_ptr is a pointer to the bank array (either primary or reload cache),905
3686,"STATIC bool altera_sdm_efuse_is_bank_valid(const br_efuse_bank_t* bank_ptr, uint32_t bank_num)",909
3687,STATIC bool altera_sdm_efuse_reload_cache_bank_valid(uint32_t bank_num),932
3688,STATIC bool altera_sdm_efuse_cache_bank_valid(uint32_t bank_num),949
3689,STATIC bool efuse_self_test(void),969
3690,"Called from altera_sdm_efuse_init() to determine whether or not it's necessary to read bank1-4,6 physical fuses",1043
3691,STATIC sdm_return_t altera_sdm_efuse_init_need_physical_read(bool* phy_rd_needed),1051
3692,"sdm_return_t altera_sdm_efuse_init(br_efuse_t *p_efuse, br_efuse_t *p_efuse_reload_cache)",1109
3693,This function performs efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',1252
3694,"static sdm_return_t altera_sdm_read_bank(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row)",1260
3695,This function performs the steps to read the rows in efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',1290
3696,"static sdm_return_t altera_sdm_read_rows(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row)",1298
3697,"static sdm_return_t altera_sdm_fuse_program_read(uint32_t addr, uint8_t bit) {",1342
3698,"static sdm_return_t altera_sdm_pre_write_bank(uint32_t addr, uint8_t bit) {",1380
3699,static void altera_sdm_post_write_bank(void),1424
3700,"static sdm_return_t altera_sdm_pgm_efuse(uint32_t addr, uint8_t bit)",1436
3701,"static sdm_return_t altera_sdm_write_efuse_bank(const uint32_t bank, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1486
3702,static uint16_t alt_sdm_calculate_ecc (uint32_t data),1614
3703,"static sdm_return_t altera_sdm_set_fuse_byte (uint32_t addr, uint8_t data) {",1648
3704,"static sdm_return_t altera_sdm_efuse_program_keys (uint32_t bank, uint32_t start_row, uint32_t * p_data)",1673
3705,"static ALT_SDM_EFUSE_CHECK_CODE altera_sdm_efuse_row_readable(uint32_t bank, uint32_t row)",1717
3706,"STATIC sdm_return_t altera_sdm_write_cached_efuse_bank(br_efuse_bank_t *bank_p, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows, const uint32_t bank_num)",1757
3707,"static sdm_return_t altera_sdm_efuse_check_fail(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, const uint32_t readback_efuse_values[], bool skip_cache_update, bool is_last_block,",1822
3708,"static uint32_t altera_sdm_update_efuse_block(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, bool skip_cache_update, uint32_t error_info[], uint32_t * error_info_length, bool row_repair_enable)",1942
3709,@brief Primary eFuse read capability for both external (mbox-originated) and internal(CMF-originated) requestors.,2129
3710,"sdm_return_t altera_sdm_efuse_read(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",2139
3711,"sdm_return_t altera_sdm_efuse_read_force(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",2187
3712,@brief Primary eFuse write capability for external (mbox-originated) requests. Internal (CMF-originated),2221
3713,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2229
3714,"sdm_return_t altera_sdm_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t is_virtual_write, uint32_t *p_error_info, uint32_t *p_error_info_length, bool row_repair_enable)",2236
3715,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2284
3716,static sdm_return_t altera_sdm_efuse_pgm_user_crc(uint32_t is_virtual_write),2287
3717,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2346
3718,sdm_return_t altera_sdm_efuse_user_crc_write(uint32_t is_virtual_write),2349
3719,STATIC uint32_t chip_state_owned(),2398
3720,@param error_info is a buffer to place information about failed row writes. This buffer must be at least 20 words in size (up to 4 errors * 5 words per error),2417
3721,"static sdm_return_t altera_sdm_efuse_program_rows(uint32_t bank, uint32_t start_row, uint32_t * p_data, const uint32_t total_num_rows, uint32_t is_virtual_write, bool skip_cache_update, uint32_t * p_error_buf, uint32_t * p_error_buf_length, bool row_repair_enable)",2422
3722,"static uint32_t altera_sdm_efuse_cancel_psg_public_key(uint32_t key_id, uint32_t is_virtual_write)",2497
3723,STATIC sdm_return_t altera_sdm_efuse_calculate_crc2(uint32_t * crc2value),2544
3724,"sdm_return_t altera_sdm_efuse_get_crc1(uint32_t favor, uint32_t * crc1value)",2592
3725,"STATIC sdm_return_t altera_sdm_efuse_cancel_rolled_keys(uint32_t oldest_valid_key_id, uint32_t is_virtual_write)",2606
3726,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2680
3727,"sdm_return_t altera_sdm_efuse_user_pubkey_write(uint32_t *p_data, uint32_t user_key_type, uint32_t is_virtual_write)",2683
3728,sdm_return_t altera_sdm_efuse_reload_cache(void),2827
3729,sdm_return_t altera_sdm_efuse_write_disable(void),2854
3730,sdm_return_t altera_sdm_efuse_hw_disable_and_lock(void),2864
3731,sdm_return_t altera_sdm_efuse_aes_key_disable_and_lock(void),2884
3732,sdm_return_t altera_sdm_efuse_clr_security_fuse_cache(void),2907
3733,"@param num_words number of words (ie rows) to read, should be set to match p_data buffer length",2947
3734,"sdm_return_t altera_sdm_efuse_puf_key_read(uint32_t *p_data, uint32_t num_words, uint32_t idx)",2951
3735,"sdm_return_t altera_sdm_efuse_puf_key_write(uint32_t *p_data, uint32_t data_len, uint32_t idx)",2967
3736,"sdm_return_t altera_sdm_efuse_rma_counter_write(uint32_t data,uint32_t is_virtual_write)",3017
3737,static bool is_service_root_key_prog_start_fuse_blown(),3039
3738,static bool is_service_root_key_prog_end_fuse_blown(),3057
3739,bool altera_sdm_aes_efuse_is_service_root_key_programmed(),3075
3740,sdm_return_t altera_sdm_efuse_service_root_key_prog_start_write(uint32_t is_virtual_write),3090
3741,sdm_return_t altera_sdm_efuse_service_root_key_prog_end_write(uint32_t is_virtual_write),3114
3742,sdm_return_t altera_sdm_efuse_service_root_key_write(uint32_t *p_data),3138
3743,sdm_return_t altera_sdm_efuse_service_root_key_read(uint32_t *p_data),3166
3744,sdm_return_t altera_sdm_efuse_aes_root_key_write(uint32_t *p_data),3181
3745,sdm_return_t altera_sdm_efuse_aes_key_prog_start_write(uint32_t is_virtual_write),3215
3746,sdm_return_t altera_sdm_efuse_aes_key_prog_end_write(uint32_t is_virtual_write),3239
3747,"sdm_return_t altera_sdm_efuse_aes_security_version_write(uint32_t key_id, uint32_t is_virtual_write)",3263
3748,@brief  Programs the counter (VAB specific),3284
3749,"sdm_return_t altera_sdm_efuse_counter_write(uint32_t *p_data , cmf_efuse_counter_type_t counter_type, uint32_t is_virtual_write)",3289
3750,@brief  Programs the user pubkey cancel (VAB specific),3343
3751,"sdm_return_t altera_sdm_efuse_user_pubkey_cancel_write(uint32_t *p_data , uint32_t user_root_hash_id, uint32_t cancel_id, uint32_t is_virtual_write)",3349
3752,@brief  Programs the user pubkey disable (VAB specific),3396
3753,"sdm_return_t altera_sdm_efuse_user_pubkey_disable_write(uint32_t mask, uint32_t is_virtual_write)",3401
3754,"sdm_return_t altera_sdm_efuse_intel_pubkey_cancel_write(uint32_t key_id , uint32_t is_virtual_write, uint32_t *resp_buf)",3431
3755,"static sdm_return_t copy_crc1_protected_region_to_array(br_efuse_t *pFuses, uint32_t * p_data, uint32_t num_rows)",3481
3756,static bool is_umk_disabled(void),3511
3757,static bool is_efuse_hw_disabled(void),3534
3758,STATIC bool efuse_get_efuse_write_disable(void),3548
3759,static void __inline__ aes_key_select_efuse(void),3552
3760,sdm_return_t altera_sdm_efuse_aes_reg_clean(void),3560
3761,"sdm_return_t altera_sdm_read_protected_fuses(uint32_t bank, uint32_t start_row, uint32_t end_row, const uint32_t favor)",3606
3762,@brief This function reads one row from the actual physical efuse (not cache).,3659
3763,"sdm_return_t altera_sdm_efuse_read_physical(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t favor)",3669
3764,sdm_return_t altera_sdm_efuse_eng_fuse_write(uint32_t is_virtual_write),3732
3765,"sdm_return_t altera_sdm_efuse_dft_burn(uint32_t bank, uint32_t row, uint32_t burn_data)",3762
3766,"static ALT_SDM_EFUSE_CHECK_CODE efuse_parameter_range_check(uint32_t bank, uint32_t start_row, uint32_t total_num_rows)",3804
3767,@brief This function returns the crcen1 fuse. used same as CRC0EN (manufacture CRC) in DM,3839
3768,static uint32_t altera_sdm_efuse_get_crc1en(void),3841
3769,"static bool user_security_fuses_set(uint32_t fuses[], uint32_t start_row, uint32_t num_rows, uint32_t skip_user_cancel_fuses)",3871
3770,@param total_num_rows is the number of rows of efuse to write (length of valid data),3936
3771,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_production_fuses_protected_region_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",3940
3772,@param total_num_rows is the number of rows of efuse to write (length of valid data),3972
3773,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_oct_redundant_fuse_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",3976
3774,@param total_num_rows is the number of rows of efuse to write (length of valid data),4040
3775,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_crc0en_fuses_protected_region_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",4044
3776,@param fuses efuse cache pointer to bank being written (to check existing fuse settings),4217
3777,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_security_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",4221
3778,@param total_num_rows is the number of rows of efuse to write (length of valid data),4299
3779,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_crc_en_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",4303
3780,@param total_num_rows is the number of rows of efuse to write (length of valid data),4328
3781,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_crc_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",4331
3782,@param total_num_rows is the number of rows of efuse to write (length of valid data),4366
3783,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_engdev_fuse_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",4371
3784,@param total_num_rows is the number of rows of efuse to write (length of valid data),4431
3785,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_public_key_check(uint32_t bank, uint32_t start_row, uint32_t *data, uint32_t total_num_rows, bool bank_specific)",4435
3786,@param total_num_rows is the number of rows of efuse to write (length of valid data),4523
3787,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_aes_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",4528
3788,"static ALT_SDM_EFUSE_CHECK_CODE  efuse_policy_row_writable(uint32_t bank, uint32_t row)",4568
3789,@param total_num_rows is the number of rows of efuse to write (length of valid data),4596
3790,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_writable_range_fuses_check(uint32_t start_row, uint32_t total_num_rows, uint32_t bank)",4600
3791,@ param total_num_rows is the number of rows of efuse to write (length of valid data),4618
3792,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_crc1en_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t bank)",4623
3793,@ param total_num_rows is the number of rows of efuse to write (length of valid data),4684
3794,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_gap_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t gapRow, uint32_t gapMask)",4689
3795,"STATIC uint32_t extract_efuse_field(uint32_t * input_data, uint32_t input_start_row, uint32_t input_num_rows, uint32_t * field_data, uint32_t field_start_row, uint32_t field_num_rows)",4717
3796,"static uint32_t rotate_right_32(uint32_t value, uint32_t shift_amount) {",4773
3797,static uint32_t check_key_cancellation_bitmask_valid(const uint32_t * p_data),4788
3798,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_key_cancellation_fuse_check(bool is_efuse_write, uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",4832
3799,@param total_num_rows is the number of rows in the data to check (length of valid data),4975
3800,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_quad_redundant_fuse_check(uint32_t bank, uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",4978
3801,@ param total_num_rows is the number of rows of efuse to write (length of valid data),5030
3802,"STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_bank0_write_policy(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",5034
3803,@ param total_num_rows is the number of rows of efuse to write (length of valid data),5079
3804,"ALT_SDM_EFUSE_CHECK_CODE altera_efuse_bank5_write_policy(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",5083
3805,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_ROM_eFuse_csum_valid_policy(br_efuse_t *fuses),5136
3806,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_crc0_valid_policy(br_efuse_t *fuses),5167
3807,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_crc2_valid_policy(br_efuse_t *fuses),5188
3808,STATIC ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_crc_valid(const br_efuse_t *fuses),5225
3809,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_user_pubkey_write_policy(br_efuse_t *fuses),5252
3810,@ param total_num_rows is the number of rows of efuse to write (length of valid data),5281
3811,"STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_write_policy(uint32_t fuses[], uint32_t bank, uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",5285
3812,static bool is_key_address( const uint32_t addr),5412
3813,static bool is_counter_address (const uint32_t addr),5428
3814,sdm_return_t altera_sdm_efuse_blank_check_test(void),5445
3815,static sdm_return_t fuse_counter_protection_protocol (const uint32_t addr) ,5537
3816,static uint32_t altera_sdm_decode4oo8 (uint8_t encoded_value) {,5633
3817,static uint32_t altera_sdm_encode4oo8(uint8_t bit_number) {,5643
3818,static sdm_return_t altera_sdm_efuse_test_mode_setup(ALT_SDM_FUSE_OTP_TESTMODES test_mode) {,5654
3819,sdm_return_t altera_sdm_efuse_test_dec(void),5694
3820,"void cmf_sdm_efuse_debug_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",5765
3821,bool usr_cancellation_fuse_table_valid(void),5954
3822,en_usr_cancell_fuse_parse_status_t permitted_usr_cancellation_fuse_table_init(const main_descriptor_t *main_descriptor),5964
3823,"void set_permitted_usr_cancellation_fuse_mask(uint32_t enable_bitmask,bool table_valid)",5992
3824,uint32_t get_en_usr_cancellation_fuse_bitmask(void),6004
3825,sdm_return_t altera_sdm_efuse_permit_kill_write(uint32_t is_virtual_write),6021
3826,Copyright (2017) Intel Corporation,3
3827,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3828,sdm_return_t alt_sdm_inbuf_adjust(uint32_t count),62
3829,uint32_t alt_sdm_inbuf_fifo_read_word(uint32_t offset),111
3830,"int32_t alt_sdm_inbuf_fifo_config(uint32_t fifo, uint32_t start, uint32_t size)",141
3831,void alt_sdm_inbuf_start(uint32_t size),183
3832,void alt_sdm_prebuf_start(uint32_t size),210
3833,void alt_sdm_inbuf_init(void),226
3834,"void alt_sdm_inbuf_mode(uint32_t input, uint32_t fifo_in, uint32_t fifo_out)",373
3835,void alt_sdm_inbuf_memmode_enable(void),392
3836,void alt_sdm_inbuf_memmode_disable(void),409
3837,from reset. This call should have be preceded by a call to alt_sdm_inbuf_pipe_clear_set(),425
3838,void alt_sdm_inbuf_pipe_clear_clr(void),429
3839,This call should be followed by a call to alt_sdm_inbuf_pipe_clear_clr() to bring the,440
3840,void alt_sdm_inbuf_pipe_clear_set(void),445
3841,This function returns a value that can be passed to the alt_sdm_inbuf_src_set() function.,455
3842,uint32_t alt_sdm_inbuf_src_get(void),459
3843,void alt_sdm_inbuf_src_set(uint32_t inbuf_src),483
3844,void alt_sdm_inbuf_sha_enable(bool enable),502
3845,void alt_sdm_flush_intermediate_bridges(void),516
3846,uint32_t alt_sdm_inbuf_fifo0_datalvl_get(void),547
3847,uint32_t alt_sdm_inbuf_fifo3_datalvl_get(void),559
3848,void alt_sdm_inbuf_data_moving_start(void),569
3849,@brief This function checks if input buffer has advanced since last check (or initialization) and updates counters,576
3850,uint32_t alt_sdm_inbuf_data_moving_check(void),579
3851,Copyright (2017) Intel Corporation,3
3852,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3853,void alt_sdm_pkc_init(void),74
3854,void alt_sdm_pkc_uninit(void),113
3855,"- ALT_SDM_PKC_OP_ECDSASIGN ECDSA Sign to generate a new (r,s) signature.",131
3856,- ALT_SDM_PKC_OP_ECMULT EC Point Multiply. (NOT SUPPORTED YET),133
3857,"uint32_t alt_sdm_pkc_config(uint32_t operation, uint32_t length)",145
3858,void alt_sdm_pkc_fm_reset(){,192
3859,void alt_sdm_pkc_int_clear(uint32_t mask),226
3860,void alt_sdm_pkc_int_enable(uint32_t mask),246
3861,void alt_sdm_pkc_int_disable(uint32_t mask),266
3862,if(ALT_PKC_CSR_INTRCLR_DONE_GET(status)),280
3863,uint32_t alt_sdm_pkc_int_status(void),288
3864,void alt_sdm_pkc_start(void),298
3865,uint32_t alt_sdm_pkc_ready(void),309
3866,uint32_t alt_sdm_pkc_wait4ready(void),333
3867,"static void alt_sdm_pkc_fm_fifo_push(void* addr, const uint32_t* data, uint8_t words_to_push){",362
3868,"static void alt_sdm_pkc_fm_fifo_pull(uint32_t* data, void* addr, uint8_t words_to_pull){",383
3869,uint32_t alt_sdm_pkc_select_curve(pkc_supported_curves_t curve){,403
3870,"uint32_t alt_sdm_pkc_get_curve_parameters(pkc_supported_curves_t curve, const altr_br40_pkc_domain_parameters_t** params){",420
3871,static uint32_t alt_sdm_pkc_get_curve_length(pkc_supported_curves_t curve){,458
3872,"uint32_t alt_sdm_pkc_fm_ecdsa_sign_put(pkc_supported_curves_t curve, sdm_pkc_hash_t* k_ephemeral, sdm_pkc_hash_t* hash, const uint32_t * By){",492
3873,static uint32_t alt_sdm_pkc_fm_get_key(void* dest_addr){,510
3874,uint32_t alt_sdm_pkc_fm_ecdsa_sign_fetch_256b_key(){,528
3875,uint32_t alt_sdm_pkc_fm_ecdsa_sign_get(sdm_pkc_signature_t* result ){,541
3876,"uint32_t alt_sdm_pkc_fm_ecdsa_verify_put(pkc_supported_curves_t curve, sdm_pkc_key_t* key, sdm_pkc_signature_t* signature, sdm_pkc_hash_t* hash){",562
3877,uint32_t alt_sdm_pkc_fm_ecdsa_verify_get(const sdm_pkc_signature_t *sig){,594
3878,uint32_t alt_sdm_pkc_fm_ecdsa_verify_get(){,618
3879,"uint32_t compare_big_number(const uint32_t *a, const uint32_t *b, uint32_t sz_words)",658
3880,"uint32_t alt_sdm_pkc_fm_sm2p256_sign(sdm_pkc_hash_t* k_ephemeral, sdm_pkc_hash_t* hash, sdm_pkc_rndm_num_k_t* sca_rand, sdm_pkc_signature_t* result){",697
3881,NOTE: This verify is NOT currently compatible with OpenSSL (1.1.1d),837
3882,"uint32_t alt_sdm_pkc_fm_sm2p256_verify(sdm_pkc_key_t* key, sdm_pkc_signature_t* signature, sdm_pkc_hash_t* hash, sdm_pkc_rndm_num_k_t* rndm_num_k){",845
3883,"@brief Provide support for PKC MULTIPLY, ADDITION, and SUBTRACTION (modular or point)",943
3884,"uint32_t alt_sdm_pkc_fm_ec_operation(uint32_t opcode, pkc_supported_curves_t curve,",956
3885,uint32_t alt_sdm_pkc_fm_ec_pt_mult_fetch_256b_key(){,1003
3886,"uint32_t alt_sdm_pkc_fm_ec_point_multiply_put(pkc_supported_curves_t curve, sdm_pkc_pt_multiplicand_t* input, const uint32_t * By){",1016
3887,uint32_t alt_sdm_pkc_fm_ec_point_multiply_get(sdm_pkc_pt_mult_result_t* result){,1038
3888,"uint32_t alt_sdm_pkc_fm_ec_point_add_put(pkc_supported_curves_t curve, sdm_pkc_add_operand_t* a, sdm_pkc_add_operand_t* b){",1058
3889,uint32_t alt_sdm_pkc_fm_ec_point_add_get(sdm_pkc_add_result_t* result){,1080
3890,"uint32_t alt_sdm_pkc_fm_ec_point_double_put(pkc_supported_curves_t curve, sdm_pkc_pt_multiplicand_t* input){",1092
3891,uint32_t alt_sdm_pkc_fm_ec_point_double_get(sdm_pkc_pt_mult_result_t* result){,1102
3892,"uint32_t alt_sdm_pkc_fm_ec_mod_operation_put(uint32_t opcode, pkc_supported_curves_t curve, sdm_pkc_mod_operand_t* input){",1113
3893,uint32_t alt_sdm_pkc_fm_ec_mod_operation_get(sdm_pkc_mod_result_t* result){,1122
3894,Copyright (2018) Intel Corporation,3
3895,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3896,void alt_sdm_ram_puf_poweroff(void),46
3897,void alt_sdm_ram_puf_poweroff_lock(void),61
3898,void iid_puf_power_on(),68
3899,void iid_puf_power_off_and_discharge(),76
3900,void iid_puf_ram_setup(),82
3901,uint32_t iid_puf_read_word(uint32_t const addr),90
3902,void iid_puf_read_ram(uint32_t * const buf),98
3903,"void iid_puf_read_ram_xor(uint32_t * const xor_input,uint32_t size,uint32_t * const output_data)",105
3904,Copyright (2017) Intel Corporation,3
3905,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3906,void alt_sdm_scr_cnoc_warm_reset(bool assert),51
3907,void alt_sdm_scr_fpga_core_rst_deassert(void),82
3908,void alt_sdm_scr_fpga_core_rst_assert(void),95
3909,uint32_t alt_sdm_scr_fpga2sdm_brdg_init(void),108
3910,uint32_t alt_sdm_scr_fpga2sdm_brdg_shutdown(uint32_t graceful),149
3911,uint32_t alt_sdm_scr_sdm2fpga_brdg_init(void),257
3912,uint32_t alt_sdm_scr_sdm2fpga_brdg_shutdown(void),291
3913,void alt_sdm_scr_nsp_dbg_enable(void),329
3914,void alt_sdm_scr_nsp_dbg_disable(void),347
3915,void alt_sdm_scr_nsp_dbg_disable_lock(void),363
3916,void alt_sdm_scr_cfg_dbg_enable(void),376
3917,void alt_sdm_scr_cfg_dbg_disable(void),390
3918,void alt_sdm_scr_cfg_dbg_disable_lock(void),405
3919,void alt_sdm_scr_sdm_bypass_enable(void),418
3920,void alt_sdm_scr_sdm_bypass_disable(void),433
3921,void alt_sdm_scr_sdm_bypass_disable_lock(void),447
3922,void alt_sdm_scr_sdm_cfg_bypass_enable(void),460
3923,void alt_sdm_scr_sdm_cfg_bypass_disable(void),474
3924,void alt_sdm_scr_sdm_cfg_bypass_disable_lock(void),490
3925,void alt_sdm_scr_cnt_bypass_enable(void),504
3926,void alt_sdm_scr_cnt_bypass_disable(void),523
3927,void alt_sdm_scr_cnt_bypass_disable_lock(void),543
3928,void alt_sdm_scr_hps_debug_enable(void),564
3929,void alt_sdm_scr_hps_debug_disable(void),616
3930,Copyright (2017) Intel Corporation,3
3931,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3932,alt_sdm_sha_ram_region() function which uses the full input path to perform a SHA operation,64
3933,"controls, SHA configuration(eg: 256, 384, and 512 bit), enable/disable SHA, SHA read/compare,",66
3934,void alt_sdm_sha_init(void),83
3935,Optionally the caller can set interrupt delay using the @ref ALT_SDM_SHA_MODE_DELAY_COUNT(),126
3936,void alt_sdm_sha_enable(uint32_t mode),136
3937,void alt_sdm_sha_disable(void),159
3938,void alt_sdm_sha_last(void),173
3939,uint32_t alt_sdm_sha_csr_lastblk_get(void),184
3940,void alt_sdm_sha_int_clear(uint32_t mask),205
3941,void alt_sdm_sha_int_enable(uint32_t mask),227
3942,void alt_sdm_sha_int_disable(uint32_t mask),247
3943,if(status == ALT_SDM_SHA_INT_FINAL),261
3944,uint32_t alt_sdm_sha_int_status(void),269
3945,if(status == ALT_SDM_SHA_INT_FINAL),281
3946,uint32_t alt_sdm_sha_int_status_unmasked(void),289
3947,void alt_sdm_sha_enable_final_int(void),309
3948,void alt_sdm_sha_enable_intermediate_int(void),329
3949,void alt_sdm_sha_disable_final_int(void),349
3950,void alt_sdm_sha_disable_intermediate_int(void),369
3951,bool alt_sdm_sha_is_final_int(void),390
3952,bool alt_sdm_sha_is_intermediate_int(void),411
3953,void alt_sdm_sha_clear_ints(void),431
3954,void alt_sdm_sha_enable_fifo_read(void),450
3955,void alt_sdm_sha_clear_digest_present(void),469
3956,parameter. This call only performs the calculation and must be followed by alt_sdm_sha_read(),489
3957,"sdm_return_t alt_sdm_sha_ram_region(uint32_t *p_data, uint32_t size_bytes, uint32_t sha_type)",502
3958,"8(SHA 256), 12(SHA 384), or 16(SHA 512). Any other values could produce invalid results.",650
3959,"void alt_sdm_sha_read(uint32_t *hash, uint32_t size)",657
3960,"sdm_return_t alt_sdm_sha_compare(const uint32_t *data, uint32_t size)",733
3961,void alt_sdm_sha_read_digest(hash_t hash_out),778
3962,uint32_t switch_word_endianess(const uint32_t num),790
3963,"sdm_return_t alt_sdm_sha_sw_finalized(uint32_t * const msg,",841
3964,Copyright (2017) Intel Corporation,3
3965,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3966,"void cmf_sdm_efuse_read_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",139
3967,"STATIC void cmf_sdm_efuse_write_common_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf, uint32_t is_virtual_write)",217
3968,"void cmf_sdm_efuse_write_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",298
3969,"void cmf_sdm_efuse_virtual_write_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",322
3970,"void cmf_sdm_efuse_user_pubkey_program_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",349
3971,"void cmf_sdm_efuse_reload_cache_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",531
3972,"void cmf_sdm_efuse_write_disable_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",584
3973,"void cmf_sdm_efuse_blow_eng_fuse_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",661
3974,"void cmf_sdm_efuse_testdec_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",750
3975,"void cmf_sdm_efuse_blank_check_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",814
3976,Copyright (2018) Intel Corporation,3
3977,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
3978,void alt_sdm_mbox_fpga_clear(uint32_t base),52
3979,void alt_sdm_mbox_fpga_gpo_write(uint32_t value),86
3980,Copyright (2020) Intel Corporation,4
3981,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
3982,"void cmf_efuse_field_init(cmf_efuse_field_t *p_efuse_field, const uint32_t *p_start)",56
3983,"uint32_t cmf_efuse_get_field(cmf_efuse_field_t *p_efuse_field, uint32_t size)",73
3984,sdm_return_t cmf_efuse_get_chipid(uint32_t *p_data),105
3985,sdm_return_t cmf_efuse_get_ult(uint32_t *p_data),124
3986,sdm_return_t cmf_efuse_compare_ulthash(const uint32_t *p_data),147
3987,uint32_t cmf_efuse_get_int_osc_trim(void),187
3988,uint32_t cmf_efuse_get_hps_int_osc_trim(void),197
3989,uint32_t cmf_efuse_get_uhdsp_1rw(void),210
3990,uint32_t cmf_efuse_get_hs2p_1r1w(void),222
3991,uint32_t cmf_efuse_get_uhd2p_1r1w(void),233
3992,uint32_t cmf_efuse_get_hps_ram_config_1r1w(void),243
3993,uint32_t cmf_efuse_get_hps_ram_config_1rw(void),253
3994,uint32_t cmf_efuse_get_hps_mpu_config_1r1w(void),263
3995,uint32_t cmf_efuse_get_hps_mpu_config_1rw(void),273
3996,uint32_t cmf_efuse_get_hps_ddr_config_1r1w(void),283
3997,uint32_t cmf_efuse_get_hps_ddr_config_1rw(void),293
3998,"sdm_return_t cmf_efuse_get_hps_mem_repair(uint32_t *p_data, uint32_t num_rows)",303
3999,"sdm_return_t cmf_efuse_get_lsm_mem_repair(uint32_t *p_data, uint32_t num_rows)",328
4000,"sdm_return_t cmf_efuse_get_crete_dd(uint32_t *p_data, uint32_t num_rows)",341
4001,uint32_t cmf_efuse_get_bg_trim(void),352
4002,uint32_t cmf_efuse_get_jtag_id(void),366
4003,uint32_t cmf_efuse_get_subdev_id(void),387
4004,sdm_return_t cmf_efuse_get_vid(uint32_t *p_data),399
4005,uint32_t cmf_efuse_get_vr_aux_trim(void),412
4006,uint32_t cmf_efuse_get_rma_counter_bit(void),421
4007,uint32_t cmf_efuse_get_vr_leaf_ctrl_bf(uint32_t sector),432
4008,"sdm_return_t cmf_efuse_get_crete_location_info(uint8_t *p_data, uint32_t num_cretes)",443
4009,"sdm_return_t cmf_efuse_get_uib_location_info(uint8_t *p_data, uint32_t num_uib)",455
4010,@brief This functions gets the aib redundancy info from fuse bank given AIB index (from 0..5),464
4011,@param aib_pos is a the position of AIB as an index from (0...5),465
4012,"sdm_return_t cmf_efuse_get_aib_redundancy(uint8_t aib_pos, uint32_t *p_data)",469
4013,"void alt_sdm_read_eram_repair_efuse(int fieldidx, uint32_t *eram_fusefield)",481
4014,"void alt_sdm_read_esram_repair_efuse(int fieldidx, uint32_t *esram_fusefield)",491
4015,void alt_sdm_read_esram_config_efuse(uint32_t *esram_fusefield),501
4016,void alt_sdm_read_dts_overtemp_efuse(uint32_t *dts_overtemp) {,511
4017,"void alt_sdm_read_dts_trim_efuse(uint32_t index, uint32_t *dts_trim, uint32_t *remote_dts_trim)",522
4018,"sdm_return_t cmf_efuse_get_vadc_trim(uint32_t * vadc_rvsvcmtrim, uint32_t * vadc_rvsreftrim, uint32_t * vadc_rvsibiasstg1, uint32_t * vadc_rvsibiasstg23,uint32_t * vadc_rvsibiasvrefbuf,uint32_t * vadc_rvscompdlyctrl)",532
4019,"sdm_return_t cmf_efuse_get_vadc_adjust(uint32_t* slope, uint32_t* intercept)",543
4020,"sdm_return_t cmf_efuse_get_bad_sector_rows(efuse_bad_row_s *p_rows, uint32_t total_rows)",560
4021,bool is_production_fuse_blown(void),572
4022,bool is_untested_fuse_blown(void),599
4023,bool is_no_sgx_fuse_blown(void),626
4024,bool is_nl_part_fuse_blown(void),648
4025,bool is_engineering_fuse_blown(void),669
4026,bool is_user_root_pubkey_blown(void),691
4027,bool is_jtag_disable_fuse_blown(void),716
4028,bool is_key_prog_start_fuse_blown(void),738
4029,bool is_key_prog_end_fuse_blown(void),759
4030,uint32_t cmf_efuse_get_security_version(void),781
4031,bool is_hps_jtag_disable_fuse_blown(void),797
4032,bool is_non_jtag_provision_enable_fuse_blown(void),819
4033,sdm_return_t cmf_efuse_get_force_pki_slct(cmf_efuse_force_pki_slct_t *p_data),844
4034,bool is_force_pki_slct_blown(void),901
4035,bool is_joint_cmf_pka_blown(void),928
4036,"uint32_t cmf_efuse_get_user_public_key(uint32_t *p_data, uint32_t n)",946
4037,"sdm_return_t cmf_efuse_get_user_public_key_cancel(uint32_t *p_data, uint32_t n)",986
4038,uint32_t cmf_efuse_get_user_public_key_disable(void),1025
4039,"uint32_t cmf_efuse_get_counter(uint32_t *p_data, cmf_efuse_counter_type_t type)",1034
4040,"sdm_return_t cmf_efuse_get_public_key(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct, uint32_t msw_only)",1094
4041,"uint32_t cmf_efuse_get_key_cancellation(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct)",1161
4042,"sdm_return_t cmf_efuse_get_owned_constant_fuses(uint32_t *p_data, uint32_t num_rows)",1206
4043,Local defines for the altera_sdm_efuse_eng_cert_zero_check_policy() function.,1257
4044,sdm_return_t cmf_efuse_policy_eng_zero_check(void),1280
4045,"static uint32_t rotate_right_32(uint32_t value, uint32_t shift_amount)",1313
4046,"static uint32_t rotate_left_32(uint32_t value, uint32_t shift_amount)",1329
4047,uint32_t cmf_efuse_get_oldest_working_psg_key_id(void),1342
4048,"sdm_return_t cmf_efuse_generate_key_cancel_bitmask(uint32_t *p_data, uint32_t key_id)",1410
4049,bool is_intel_signing_key_cancelled(uint32_t keyid),1437
4050,bool is_intel_puf_enroll_fuse_blown(void),1472
4051,bool is_uds_iid_puf_enroll_disable_fuse_blown(void),1498
4052,uint32_t cmf_efuse_get_key_disable_value(cmf_efuse_aes_root_key_disable_slct_t key),1511
4053,"sdm_return_t cmf_efuse_get_silicon_unique_data_hash(uint32_t *efuse_hash, uint32_t size, const void *const label,const uint32_t label_length,bool use_pubkey_hash, iid_puf_type_t iid_puf_type)",1561
4054,sdm_return_t cmf_efuse_get_cbssm_redundancy(uint32_t *p_data),1680
4055,uint32_t cmf_efuse_get_env_mon_voltage_k3_fuse(void),1703
4056,uint32_t cmf_efuse_get_env_mon_voltage_n0_fuse(void),1712
4057,uint32_t cmf_efuse_get_env_mon_a_calib_fuse(void),1721
4058,uint32_t cmf_efuse_get_env_mon_b_calib_fuse(void),1730
4059,"sdm_return_t cmf_efuse_get_bootrom_patch_values(uint32_t* p_data, uint32_t size)",1743
4060,Copyright (2017) Intel Corporation,3
4061,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4062,static void cmf_gpio_timer_start(void),92
4063,static void cmf_gpio_timer_stop(void),115
4064,static void cmf_gpio_rising_edge(uint32_t pin_mask),136
4065,static void cmf_gpio_falling_edge(uint32_t pin_mask),162
4066,call once per clocking interval that was provided to the cmf_gpio_init() function. This,182
4067,static void cmf_gpio_timer_isr(void * unused),190
4068,static void cmf_gpio_isr(void * unused),351
4069,"int32_t cmf_gpio_init(const uint32_t *p_pins, uint32_t size, uint32_t interval)",383
4070,passed into the cmf_gpio_init() function.,442
4071,cmf_gpio_event_t cmf_gpio_get(uint32_t pin),446
4072,Restart monitoring the GPIOs after a call to cmf_gpio_stop() was made. It is not necessary to call,479
4073,this function after cmf_gpio_init() since this call automatically starts monitoring the GPIOs.,480
4074,void cmf_gpio_start(void),484
4075,Stop monitoring the GPIOs until a call to cmf_gpio_start() is made again.,501
4076,void cmf_gpio_stop(void),505
4077,Copyright (2018) Intel Corporation,4
4078,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
4079,"static sdm_return_t aes_crypt_data(uint32_t op_mode,cmf_aes_resource_t cmf_aes_resource,  ",73
4080,"static sdm_return_t get_encrypted_data(uint32_t * key_data,uint32_t * encrypted_data)",258
4081,"static sdm_return_t check_key_decryption(uint32_t * encrypted_data, uint32_t keyid, cmf_key_type_t key_type)",322
4082,static sdm_return_t allow_puf_enrollment(bool write_real_efuse),382
4083,"sdm_return_t puf_enroll_efuse(bool write_real_efuse, cmf_mpi_t * p_efuse_data)",487
4084,"sdm_return_t zero_check_protected_fuses(uint32_t packed_fuse_data, uint32_t * pdata)",600
4085,"sdm_return_t check_key_fuse_contents(uint32_t * pdata, uint32_t key_packed, cmf_key_type_t key_type)",640
4086,Copyright (2018) Intel Corporation,3
4087,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4088,uint32_t sdm_hal_cnoc_input_avst_mode(void),40
4089,void sdm_hal_cnoc_input_drop_requested_beats(uint8_t req_beats),51
4090,Copyright (2017) Intel Corporation,7
4091,"source code (""Material"") are owned by Intel Corporation or its suppliers or",10
4092,void alt_sdm_aes_start(void),60
4093,void alt_sdm_aes_clear_keys(void),88
4094,void alt_sdm_aes_bypass(void),98
4095,void alt_sdm_aes_init(void),144
4096,- ALT_SDM_AES_OPMODE_ENCODE encode the input to the AES module. (NOT SUPPORTED YET),188
4097,- ALT_SDM_AES_OPMODE_DECODE decode the input to the AES module. (NOT SUPPORTED YET),189
4098,- ALT_SDM_AES_MODE_CBC ?? (NOT SUPPORTED YET),192
4099,- ALT_SDM_AES_MODE_CTR ?? (NOT SUPPORTED YET),193
4100,- ALT_SDM_AES_MODE_EBC ?? (NOT SUPPORTED YET),194
4101,alt_sdm_aes_config(ALT_SDM_AES_OPMODE_BYPASS |,218
4102,"void alt_sdm_aes_config(uint32_t mode, uint32_t size, uint32_t outsize_diff)",225
4103,void alt_sdm_aes_dest_set(uint32_t dest),270
4104,"void alt_sdm_aes_key_load(uint32_t key_dest, uint32_t key_size, uint32_t key_mode)",303
4105,uint32_t alt_sdm_aes_cmdfifo_full(void),333
4106,uint32_t alt_sdm_aes_cmdfifo_empty(void),344
4107,uint32_t alt_sdm_aes_cmdfifo_done(void),355
4108,uint32_t alt_sdm_aes_ready(void),366
4109,void alt_sdm_aes_int_clear(uint32_t mask),408
4110,void alt_sdm_aes_int_enable(uint32_t mask),429
4111,void alt_sdm_aes_int_disable(uint32_t mask),450
4112,if(status == ALT_SDM_AES_INT_TX_DONE),464
4113,uint32_t alt_sdm_aes_int_status(void),472
4114,"void alt_sdm_aes_get_data(uint8_t rdsel_fifo, uint32_t aes_mode, uint32_t size, uint32_t outcount)",483
4115,"void alt_sdm_aes_setup_bypass(alt_sdm_aes_cib_rd_fifo_t input_fifo, uint32_t xfer_length_words_64bits, alt_sdm_aes_data_dest_t output_destination)",500
4116,bool alt_sdm_aes_is_busy(void),527
4117,"@param interval_length update interval length (0=no update, 1/3/7/15/31/63/127/255 = update key every N*32 bytes)",540
4118,"sdm_return_t alt_sdm_aes_get_update_interval(uint32_t interval_length,",546
4119,sdm_return_t alt_sdm_aes_key_swap_mode_set(alt_sdm_aes_key_swap_mode_config_t* aes_key_swap),614
4120,"sdm_return_t alt_sdm_aes_iv_set(alt_sdm_aes_iv_dest_sel_t aes_iv_dest, alt_sdm_aes_iv_data_t*  iv_data)",638
4121,sdm_return_t alt_sdm_aes_key_info_set(alt_sdm_aes_key_info_t* aes_key_info),688
4122,"void alt_sdm_aes_setup_aes_regs(alt_sdm_aes_data_src_t  aes_data_source,alt_sdm_aes_data_dest_t aes_data_dest,uint32_t ctx_id,uint32_t op_mode,uint32_t aes_mode,uint32_t endian_in,uint32_t endian_out)",731
4123,"void alt_sdm_aes_setup_data_xfer(alt_sdm_aes_key_ctx_sel_t aes_key_ctx_sel,",756
4124,void alt_sdm_aes_key_as_data_last_operation_set(void),797
4125,void alt_sdm_aes_key_context_select_clear_to_zero(void),805
4126,Copyright (2017) Intel Corporation,3
4127,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4128,uint32_t refclk_div_get(uint32_t refclk_value_mhz),75
4129,int32_t alt_sdm_pll_startup(void),102
4130,void alt_sdm_update_intosc_frequency(uint32_t divider),120
4131,void alt_sdm_ctrl_clk_scr_select(uint32_t sel),131
4132,void alt_sdm_data_clk_scr_select(uint32_t sel),142
4133,"void alt_sdm_clk_bypass_enable(uint32_t mask, uint32_t bypass_val)",153
4134,void alt_sdm_pll0_div(uint32_t div),163
4135,void alt_sdm_pll1_div(uint32_t div),175
4136,void alt_sdm_enter_power_state_reset(void),192
4137,void alt_sdm_exit_power_state_reset(void),205
4138,uint32_t alt_sdm_wait_for_pll_lock(uint32_t timeout_value),218
4139,void alt_sdm_data_clk_set_cnt(uint32_t cnt),264
4140,void alt_sdm_clk_bypassr_clear(uint32_t bypassr_val),275
4141,"void alt_sdm_data_clk_mux_freq_change_cnt(uint32_t sel, uint32_t cnt, uint32_t bypass)",283
4142,"static uint32_t compute_clkdiv_ratio(uint32_t refclk, uint32_t outclk)",294
4143,"void alt_sdm_clk_set_qspi_clk(uint32_t pllc0_mhz, uint32_t pllc1_mhz, uint32_t qspi_clk)",315
4144,void alt_sdm_clk_internal(void),347
4145,void alt_sdm_bypass_clear_all(void),360
4146,void alt_sdm_bypass_clear_except_ctrl(void),370
4147,"void alt_sdm_clk_setup_divider_all(uint32_t pllc0_mhz, uint32_t pllc1_mhz, uint32_t cpu_clk, uint32_t sp_clk)",385
4148,void alt_sdm_clk_set_safe_ref_clk_div(uint32_t value),472
4149,void alt_sdm_set_clk_slices_to_default(),497
4150,@param value represents enable (non-zero) or disable (zero) the sdm_sdata_crypto_clk and sdm_fdata_clk.,543
4151,void switch_sdm_sdata_crypto_clk(uint32_t value),546
4152,uint32_t get_sdm_sdata_crypto_clk_sleep_status(void),572
4153,Copyright (2017) Intel Corporation,3
4154,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4155,static bool sdm_dma_ptr_valid(void * ptr),69
4156,static void dma_wr_id_update(),98
4157,static void dma_rd_id_update(),110
4158,void alt_sdm_dma_rd_int_clear(void),124
4159,void alt_sdm_dma_rd_int_disable(void),140
4160,void alt_sdm_dma_rd_int_enable(void),156
4161,uint32_t alt_sdm_dma_rd_status(void),172
4162,sdm_dma_bus_t alt_sdm_dma_rd_bus_get(void),182
4163,void alt_sdm_dma_rd_init(sdm_dma_bus_t bus),207
4164,int32_t alt_sdm_dma_rd_stop(void),236
4165,void alt_sdm_dma_rd_resume(void),288
4166,bool alt_sdm_dma_rd_active(void),298
4167,bool alt_sdm_dma_wr_active(void),317
4168,bool alt_sdm_dma_rd_desc_full(void),336
4169,"uint32_t alt_sdm_dma_rd_send_desc(uint32_t *p_src, uint32_t size,",366
4170,"uint32_t alt_sdm_dma_rd_send_desc_burst_fixed(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt,uint32_t burst)",465
4171,"void alt_sdm_dma_rd_send_desc_fixed(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt){",516
4172,"int32_t alt_sdm_dma_rd_nsp_ram(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt)",568
4173,void alt_sdm_dma_wr_int_clear(void),626
4174,void alt_sdm_dma_wr_int_disable(void),642
4175,void alt_sdm_dma_wr_int_enable(void),659
4176,uint32_t alt_sdm_dma_wr_status(void),676
4177,sdm_dma_bus_t alt_sdm_dma_wr_bus_get(void),686
4178,void alt_sdm_dma_wr_init(sdm_dma_bus_t bus),711
4179,"int32_t alt_sdm_dma_wr_nsp_ram(uint32_t *pDest, uint32_t size, uint32_t enable_interrupt)",753
4180,int32_t alt_sdm_dma_wr_stop(void),814
4181,void alt_sdm_dma_wr_resume(void),858
4182,bool alt_sdm_dma_wr_desc_full(void),868
4183,@note The \e size value must be an integer multiple of the (burst size * 8).,890
4184,"uint32_t alt_sdm_dma_wr_send_desc(uint32_t *p_dest, uint32_t size, uint32_t flags, uint32_t burst)",899
4185,"uint32_t alt_sdm_dma_wr_send_desc_burst_fixed(uint32_t *p_dest, uint32_t size, uint32_t enable_interrupt,uint32_t burst)",995
4186,uint32_t alt_sdm_dma_wr_get_desc_remain(void),1028
4187,uint32_t alt_sdm_dma_rd_get_desc_remain(void),1038
4188,bool alt_sdm_dma_rd_if_stop(void),1049
4189,int32_t alt_sdm_dma_rd_stop_desc(bool enable),1072
4190,bool alt_sdm_dma_wr_if_stop(void),1125
4191,int32_t alt_sdm_dma_wr_stop_desc(bool enable),1149
4192,uint32_t alt_sdm_dma_calc_burst_size(uint32_t size_in_bytes),1202
4193,"Copyright (2017,2020) Intel Corporation",3
4194,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4195,/*! eFuse Redundant Bits (ODD) */,140
4196,/*! eFuse Redundant Bits (EVEN) */,151
4197,"static sdm_return_t altera_sdm_read_bank(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor); ",389
4198,"static sdm_return_t altera_sdm_efuse_check_fail(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, const uint32_t readback_efuse_values[], bool skip_cache_update, bool is_last_block,",406
4199,static void altera_sdm_efuse_sense_delay(),480
4200,const br_efuse_t * get_efuse_cache_ptr(void),495
4201,"static sdm_return_t altera_sdm_pre_read_bank(const uint32_t bank, const bool is_aes_key)",544
4202,"static sdm_return_t alt_read_row(const uint32_t row, const bool is_last_row, const uint32_t favor, uint32_t * row_read_data)",608
4203,"static sdm_return_t alt_read_aes_row(const uint32_t start_row, const uint32_t row, const bool is_last_row, const uint32_t favor)",724
4204,static void altera_sdm_post_read_bank(void),830
4205,static void altera_program_to_sense_same_block_wait(void),851
4206,static void altera_sense_to_sense_diff_block_wait(void),859
4207,@param bank_ptr is a pointer to the bank array (either primary or reload cache),866
4208,"STATIC bool altera_sdm_efuse_is_bank_valid(const br_efuse_bank_t* bank_ptr, uint32_t bank_num)",870
4209,STATIC bool altera_sdm_efuse_reload_cache_bank_valid(uint32_t bank_num),893
4210,STATIC bool altera_sdm_efuse_cache_bank_valid(uint32_t bank_num),910
4211,STATIC bool efuse_policy_bist(void),930
4212,"Called from altera_sdm_efuse_init() to determine whether or not it's necessary to read bank1-4,6 physical fuses",1014
4213,STATIC sdm_return_t altera_sdm_efuse_init_need_physical_read(bool* phy_rd_needed),1022
4214,static void zeroize_secret_fuse_fields(void),1072
4215,"sdm_return_t altera_sdm_efuse_init(br_efuse_t *p_efuse, br_efuse_t *p_efuse_reload_cache)",1132
4216,This function performs efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',1310
4217,"static sdm_return_t altera_sdm_read_bank(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor)",1319
4218,This function performs the steps to read the rows in efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',1361
4219,"static sdm_return_t altera_sdm_read_rows(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor, const bool is_last_block)",1370
4220,/* Here is the write operation in one efuse block ENGRQ-31325 (02 Dec 2015),1397
4221,6.    Program SCR efuse_pgm_favor to all 1s (b111111) FB285783 (MAS 3.0 Device Key Vault),1403
4222,12.    Program SCR efuse_pgm_pgmen to blow the fuse (pulse high for 20us in new Intel spec),1411
4223,13.    Repeat steps 11-12 for desired columns to be programmed. (MAS 3.0 Device Key Vault),1412
4224,14.    Repeat steps 10-13 for desired rows to be programmed. (MAS 3.0 Device Key Vault),1413
4225,static sdm_return_t altera_sdm_pre_write_bank(const uint32_t bank),1466
4226,static void altera_sdm_post_write_bank(void),1568
4227,"static sdm_return_t altera_sdm_pgm_efuse(const uint32_t bank,const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1626
4228,"static sdm_return_t altera_sdm_write_efuse_bank(const uint32_t bank, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1758
4229,"static ALT_SDM_EFUSE_CHECK_CODE altera_sdm_efuse_row_readable(uint32_t bank, uint32_t row)",1856
4230,"int altera_sdm_efuse_map_bank_row(const uint32_t bank, const uint32_t row, uint32_t *mapped_bank, uint32_t *mapped_row)",1902
4231,"STATIC sdm_return_t altera_sdm_write_cached_efuse_bank(br_efuse_bank_t *bank_p, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows, const uint32_t bank_num)",1977
4232,"static sdm_return_t altera_sdm_efuse_check_fail(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, const uint32_t readback_efuse_values[], bool skip_cache_update, bool is_last_block,",2060
4233,"static uint32_t altera_sdm_update_efuse_block(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, bool skip_cache_update, uint32_t error_info[], uint32_t * error_info_length, bool row_repair_enable)",2180
4234,static int32_t altera_sdm_efuse_get_temperature(void),2423
4235,"static sdm_return_t altera_sdm_efuse_read_control_row(const uint32_t bank, const bool control_rows_only, const uint32_t favor)",2444
4236,@brief Primary eFuse read capability for both external (mbox-originated) and internal(CMF-originated) requestors.,2484
4237,"sdm_return_t altera_sdm_efuse_read(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",2494
4238,"sdm_return_t altera_sdm_efuse_read_force(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",2559
4239,@brief Primary eFuse write capability for external (mbox-originated) requests. Internal (CMF-originated) ,2593
4240,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2601
4241,"sdm_return_t altera_sdm_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t is_virtual_write, uint32_t *p_error_info, uint32_t *p_error_info_length, bool row_repair_enable)",2608
4242,"static sdm_return_t one_to_zero_policy_check(uint32_t bank, uint32_t row, uint32_t fuseval,uint32_t newfuseval)",2658
4243,STATIC uint32_t chip_state_owned(),2698
4244,@param error_info is a buffer to place information about failed row writes. This buffer must be at least 20 words in size (up to 4 errors * 5 words per error),2717
4245,"static sdm_return_t altera_sdm_efuse_program_rows_helper(uint32_t bank, uint32_t start_row, uint32_t * p_data, const uint32_t total_num_rows, uint32_t is_virtual_write, bool skip_cache_update, uint32_t * p_error_buf, uint32_t * p_error_buf_length, bool row_repair_enable)",2722
4246,"static sdm_return_t altera_sdm_efuse_program_rows(uint32_t bank, uint32_t start_row, uint32_t * p_data, const uint32_t total_num_rows, uint32_t is_virtual_write, bool skip_cache_update, uint32_t * p_error_buf, uint32_t * p_error_buf_length, bool row_repair_enable)",2801
4247,"static uint32_t altera_sdm_efuse_cancel_psg_public_key(uint32_t key_id, uint32_t is_virtual_write)",2852
4248,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2897
4249,STATIC sdm_return_t altera_sdm_efuse_pgm_crc0(uint32_t is_virtual_write),2900
4250,"STATIC sdm_return_t altera_sdm_efuse_calculate_crc1(uint32_t favor, uint32_t * crc1value)",2953
4251,"sdm_return_t altera_sdm_efuse_get_crc1(uint32_t favor, uint32_t * crc1value)",3000
4252,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache), any other value = no fuse write",3013
4253,STATIC sdm_return_t altera_sdm_efuse_pgm_crc1(uint32_t is_virtual_write),3017
4254,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",3075
4255,static sdm_return_t altera_sdm_efuse_pgm_user_crc(uint32_t is_virtual_write),3078
4256,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",3136
4257,sdm_return_t altera_sdm_efuse_user_crc_write(uint32_t is_virtual_write),3139
4258,"STATIC sdm_return_t altera_sdm_efuse_cancel_rolled_keys(uint32_t oldest_valid_key_id, uint32_t is_virtual_write)",3192
4259,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",3266
4260,"sdm_return_t altera_sdm_efuse_user_pubkey_write(uint32_t *p_data,",3271
4261,"sdm_return_t altera_sdm_efuse_user_pubkey_write(uint32_t *p_data,",3276
4262,@brief  Programs the counter (VAB specific),3455
4263,"sdm_return_t altera_sdm_efuse_counter_write(uint32_t *p_data , cmf_efuse_counter_type_t counter_type, uint32_t is_virtual_write)",3460
4264,@brief  Programs the user pubkey cancel (VAB specific),3511
4265,"sdm_return_t altera_sdm_efuse_user_pubkey_cancel_write(uint32_t *p_data , uint32_t user_root_hash_id, uint32_t cancel_id, uint32_t is_virtual_write)",3517
4266,@brief  Programs the user pubkey disable (VAB specific),3561
4267,"sdm_return_t altera_sdm_efuse_user_pubkey_disable_write(uint32_t mask, uint32_t is_virtual_write)",3566
4268,"sdm_return_t altera_sdm_efuse_intel_pubkey_cancel_write(uint32_t key_id , uint32_t is_virtual_write, uint32_t *resp_buf)",3596
4269,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",3644
4270,"sdm_return_t altera_sdm_efuse_pr_pubkey_write(uint32_t *p_data, uint32_t user_key_type, uint32_t is_virtual_write, uint32_t bank, uint32_t start_row)",3649
4271,sdm_return_t altera_sdm_efuse_secondary_owner_pubkey_hash_write(uint32_t is_virtual_write),3692
4272,sdm_return_t altera_sdm_efuse_reload_cache(void),3723
4273,sdm_return_t altera_sdm_efuse_write_disable(void),3750
4274,"sdm_return_t altera_sdm_efuse_dft_zero_check_redundant_row(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows,",3767
4275,"sdm_return_t altera_sdm_efuse_dft_zero_check(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows,",3815
4276,"static sdm_return_t efuse_zero_check_operation(const uint32_t bank, const uint32_t start_row, ",3879
4277,"static sdm_return_t efuse_zero_check_operation(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows, const uint32_t repair, uint32_t * result)",3976
4278,"@param p_datasize pointer to a word with the status data size, normally 1 (FM test firmware is 2)",4202
4279,"sdm_return_t altera_sdm_efuse_status(uint32_t *p_data, uint32_t *p_datasize)",4205
4280,"static void altera_sdm_efuse_redundant_enable_get(const uint32_t bank, uint32_t redundant_rows_enable[2][2], uint32_t rows_left[2], uint32_t redundant_bits_enable[2][8], uint32_t bits_left[2], uint32_t bit_available[2])",4287
4281,"static uint32_t altera_sdm_efuse_write_redundancy_policy(const uint32_t bank, const uint32_t rows[2][2], const uint32_t rows_data[2][2], const uint32_t rows_length[2],",4368
4282,"static sdm_return_t altera_sdm_efuse_write_ctrl_redundancy(const uint32_t bank, const uint32_t rows[2][2], const uint32_t rows_data[2][2], const uint32_t rows_length[2], ",4582
4283,"static sdm_return_t altera_sdm_efuse_write_row_redundancy_check(uint32_t fuses[], const uint32_t bank, const uint32_t rows[2][2], const uint32_t rows_data[2][2], const uint32_t rows_length[2], const uint32_t favor[], const bool skip_cache_update)",4703
4284,"static sdm_return_t altera_sdm_efuse_write_bit_redundancy_check(uint32_t fuses[], const uint32_t bank, const uint32_t bits_row[2][8], const uint32_t bits_col[2][8], const uint32_t bits_length[2], const uint32_t bits_value[2][8], const uint32_t favor[], const bool skip_cache_update)",4805
4285,sdm_return_t altera_sdm_efuse_hw_disable_and_lock(void),4901
4286,sdm_return_t altera_sdm_efuse_aes_key_disable_and_lock(void),4922
4287,sdm_return_t altera_sdm_efuse_clr_security_fuse_cache(void),4947
4288,"@param num_words number of words (ie rows) to read, should be set to match p_data buffer length",4989
4289,"sdm_return_t altera_sdm_efuse_puf_key_read(uint32_t *p_data, uint32_t num_words, uint32_t idx)",4993
4290,"sdm_return_t altera_sdm_efuse_puf_key_write(uint32_t *p_data, uint32_t data_len, uint32_t idx)",5111
4291,"sdm_return_t altera_sdm_efuse_rma_counter_write(uint32_t data,uint32_t is_virtual_write)",5156
4292,sdm_return_t altera_sdm_efuse_aes_root_key_write(uint32_t *p_data),5183
4293,sdm_return_t altera_sdm_efuse_aes_key_prog_start_write(uint32_t is_virtual_write),5238
4294,sdm_return_t altera_sdm_efuse_aes_key_prog_end_write(uint32_t is_virtual_write),5262
4295,"sdm_return_t altera_sdm_efuse_aes_security_version_write(uint32_t key_id, uint32_t is_virtual_write)",5286
4296,static bool is_service_root_key_prog_start_fuse_blown(),5305
4297,static bool is_service_root_key_prog_end_fuse_blown(),5323
4298,bool altera_sdm_aes_efuse_is_service_root_key_programmed(),5341
4299,sdm_return_t altera_sdm_efuse_service_root_key_prog_start_write(uint32_t is_virtual_write),5356
4300,sdm_return_t altera_sdm_efuse_service_root_key_prog_end_write(uint32_t is_virtual_write),5380
4301,sdm_return_t altera_sdm_efuse_service_root_key_write(uint32_t *p_data),5404
4302,sdm_return_t altera_sdm_efuse_service_root_key_read(uint32_t *p_data),5452
4303,"static sdm_return_t copy_crc1_protected_region_to_array(br_efuse_t *pFuses, uint32_t * p_data, uint32_t num_rows)",5505
4304,static bool is_umk_disabled(void),5540
4305,static bool is_efuse_hw_disabled(void),5563
4306,STATIC bool efuse_get_efuse_write_disable(void),5576
4307,static void __inline__ aes_key_select_efuse(void),5580
4308,sdm_return_t altera_sdm_efuse_aes_reg_clean(void),5588
4309,"sdm_return_t altera_sdm_read_aes_fuses(const uint32_t start_row, const uint32_t end_row, const uint32_t favor)",5623
4310,"sdm_return_t altera_sdm_read_protected_fuses(uint32_t bank, uint32_t start_row, uint32_t end_row, const uint32_t favor)",5638
4311,This is only for use in this file (static) with parameter checking already done by calling routine,5697
4312,"static sdm_return_t altera_sdm_read_aes_rows(const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor)",5705
4313,@brief This function senses/reads one row from the actual physical efuse (not cache). ,5724
4314,"sdm_return_t altera_sdm_efuse_read_physical(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t favor)",5734
4315,sdm_return_t altera_sdm_efuse_eng_fuse_write(uint32_t is_virtual_write),5791
4316,"sdm_return_t altera_sdm_efuse_dft_burn(uint32_t bank, uint32_t row, uint32_t burn_data)",5820
4317,"static ALT_SDM_EFUSE_CHECK_CODE efuse_parameter_range_check(uint32_t bank, uint32_t start_row, uint32_t total_num_rows)",5864
4318,static uint32_t altera_sdm_efuse_get_crc1en(void),5907
4319,"static bool user_security_fuses_set(uint32_t fuses[], uint32_t start_row, uint32_t num_rows, uint32_t skip_user_cancel_fuses)",5937
4320,"static uint32_t efuse_user_public_key_set(uint32_t fuses[], uint32_t fuses_start_idx, uint32_t total_num_rows)",6013
4321,@param total_num_rows is the number of rows of efuse to write (length of valid data),6033
4322,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_production_fuses_protected_region_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",6037
4323,@param total_num_rows is the number of rows of efuse to write (length of valid data),6071
4324,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_oct_redundant_fuse_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",6075
4325,@param fuses efuse cache pointer to bank being written (to check existing fuse settings),6161
4326,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_security_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",6165
4327,@param total_num_rows is the number of rows of efuse to write (length of valid data),6243
4328,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_crc_en_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",6247
4329,@param total_num_rows is the number of rows of efuse to write (length of valid data),6272
4330,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_crc_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",6275
4331,@param total_num_rows is the number of rows of efuse to write (length of valid data),6310
4332,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_engdev_fuse_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",6315
4333,@param total_num_rows is the number of rows of efuse to write (length of valid data),6375
4334,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_psg_design_root_fuse_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",6379
4335,@param total_num_rows is the number of rows of efuse to write (length of valid data),6402
4336,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_public_key_check(uint32_t start_row, uint32_t * data, uint32_t total_num_rows)",6406
4337,@param total_num_rows is the number of rows of efuse to write (length of valid data),6452
4338,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_aes_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",6457
4339,@param total_num_rows is the number of rows of efuse to write (length of valid data),6495
4340,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_writable_range_fuses_check(uint32_t start_row, uint32_t total_num_rows, uint32_t bank)",6500
4341,@ param total_num_rows is the number of rows of efuse to write (length of valid data),6561
4342,"static ALT_SDM_EFUSE_CHECK_CODE efuse_write_policy_crc0_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t bank)",6566
4343,@ param total_num_rows is the number of rows of efuse to write (length of valid data),6614
4344,"static ALT_SDM_EFUSE_CHECK_CODE efuse_write_policy_crc1_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t bank)",6619
4345,@ param total_num_rows is the number of rows of efuse to write (length of valid data),6673
4346,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_gap_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t gapRow, uint32_t gapMask)",6678
4347,"STATIC uint32_t extract_efuse_field(uint32_t * input_data, uint32_t input_start_row, uint32_t input_num_rows, uint32_t * field_data, uint32_t field_start_row, uint32_t field_num_rows)",6706
4348,"static uint32_t rotate_right_32(uint32_t value, uint32_t shift_amount) {",6762
4349,static uint32_t check_key_cancellation_bitmask_valid(const uint32_t * p_data),6777
4350,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_key_cancellation_fuse_check(bool is_efuse_write, uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",6821
4351,@param total_num_rows is the number of rows in the data to check (length of valid data),7001
4352,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_quad_redundant_fuse_check(uint32_t bank, uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",7004
4353,@ param total_num_rows is the number of rows of efuse to write (length of valid data),7056
4354,"STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_bank0_write_policy(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",7060
4355,@ param total_num_rows is the number of rows of efuse to write (length of valid data),7125
4356,"ALT_SDM_EFUSE_CHECK_CODE altera_efuse_bank5_write_policy(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",7129
4357,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_ROM_eFuse_csum_valid_policy(br_efuse_t *fuses),7190
4358,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_crc0_valid_policy(br_efuse_t *fuses),7221
4359,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_crc1_valid_policy(br_efuse_t *fuses),7242
4360,STATIC ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_crc_valid(const br_efuse_t *fuses),7279
4361,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_user_pubkey_write_policy(br_efuse_t *fuses),7306
4362,@ param total_num_rows is the number of rows of efuse to write (length of valid data),7340
4363,"STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_write_policy(uint32_t fuses[], uint32_t bank, uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",7344
4364,"void cmf_sdm_efuse_debug_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",7456
4365,bool usr_cancellation_fuse_table_valid(void),7644
4366,en_usr_cancell_fuse_parse_status_t permitted_usr_cancellation_fuse_table_init(const main_descriptor_t *main_descriptor),7654
4367,"void set_permitted_usr_cancellation_fuse_mask(uint32_t enable_bitmask,bool table_valid)",7682
4368,uint32_t get_en_usr_cancellation_fuse_bitmask(void),7694
4369,sdm_return_t altera_sdm_efuse_permit_kill_write(uint32_t is_virtual_write),7711
4370,Copyright (2017) Intel Corporation,3
4371,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4372,sdm_return_t alt_sdm_inbuf_adjust(uint32_t count),62
4373,uint32_t alt_sdm_inbuf_fifo_read_word(uint32_t offset),111
4374,"int32_t alt_sdm_inbuf_fifo_config(uint32_t fifo, uint32_t start, uint32_t size)",142
4375,void alt_sdm_inbuf_start(uint32_t size),180
4376,void alt_sdm_prebuf_start(uint32_t size),207
4377,void alt_sdm_inbuf_init(void),223
4378,"void alt_sdm_inbuf_mode(uint32_t input, uint32_t fifo_in, uint32_t fifo_out)",370
4379,void alt_sdm_inbuf_memmode_enable(void),389
4380,void alt_sdm_inbuf_memmode_disable(void),406
4381,from reset. This call should have be preceded by a call to alt_sdm_inbuf_pipe_clear_set(),422
4382,void alt_sdm_inbuf_pipe_clear_clr(void),426
4383,This call should be followed by a call to alt_sdm_inbuf_pipe_clear_clr() to bring the,437
4384,void alt_sdm_inbuf_pipe_clear_set(void),442
4385,This function returns a value that can be passed to the alt_sdm_inbuf_src_set() function.,452
4386,uint32_t alt_sdm_inbuf_src_get(void),456
4387,void alt_sdm_inbuf_src_set(uint32_t inbuf_src),480
4388,void alt_sdm_inbuf_sha_enable(bool enable),499
4389,void alt_sdm_flush_intermediate_bridges(void),513
4390,uint32_t alt_sdm_inbuf_fifo0_datalvl_get(void),544
4391,uint32_t alt_sdm_inbuf_fifo3_datalvl_get(void),556
4392,void alt_sdm_inbuf_data_moving_start(void),566
4393,@brief This function checks if input buffer has advanced since last check (or initialization) and updates counters,573
4394,uint32_t alt_sdm_inbuf_data_moving_check(void),576
4395,Copyright (2017) Intel Corporation,3
4396,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4397,void alt_sdm_pkc_init(void),75
4398,void alt_sdm_pkc_uninit(void),114
4399,"- ALT_SDM_PKC_OP_ECDSASIGN ECDSA Sign to generate a new (r,s) signature.",132
4400,- ALT_SDM_PKC_OP_ECMULT EC Point Multiply. (NOT SUPPORTED YET),134
4401,"uint32_t alt_sdm_pkc_config(uint32_t operation, uint32_t length)",146
4402,void alt_sdm_pkc_fm_reset(){,193
4403,void alt_sdm_pkc_int_clear(uint32_t mask),227
4404,void alt_sdm_pkc_int_enable(uint32_t mask),247
4405,void alt_sdm_pkc_int_disable(uint32_t mask),267
4406,if(ALT_PKC_CSR_INTRCLR_DONE_GET(status)),281
4407,uint32_t alt_sdm_pkc_int_status(void),289
4408,void alt_sdm_pkc_start(void),299
4409,uint32_t alt_sdm_pkc_ready(void),310
4410,uint32_t alt_sdm_pkc_wait4ready(void),334
4411,"static void alt_sdm_pkc_fm_fifo_push(void* addr, const uint32_t* data, uint8_t words_to_push){",361
4412,"static void alt_sdm_pkc_fm_fifo_pull(uint32_t* data, void* addr, uint8_t words_to_pull){",382
4413,uint32_t alt_sdm_pkc_select_curve(pkc_supported_curves_t curve){,402
4414,"uint32_t alt_sdm_pkc_get_curve_parameters(pkc_supported_curves_t curve, const altr_br40_pkc_domain_parameters_t** params){",419
4415,static uint32_t alt_sdm_pkc_get_curve_length(pkc_supported_curves_t curve){,457
4416,"uint32_t alt_sdm_pkc_fm_ecdsa_sign_put(pkc_supported_curves_t curve, sdm_pkc_hash_t* k_ephemeral, sdm_pkc_hash_t* hash, const uint32_t * By){",491
4417,static uint32_t alt_sdm_pkc_fm_get_key(void* dest_addr){,509
4418,uint32_t alt_sdm_pkc_fm_ecdsa_sign_fetch_256b_key(){,527
4419,uint32_t alt_sdm_pkc_fm_ecdsa_sign_get(sdm_pkc_signature_t* result ){,540
4420,"uint32_t alt_sdm_pkc_fm_ecdsa_verify_put(pkc_supported_curves_t curve, sdm_pkc_key_t* key, sdm_pkc_signature_t* signature, sdm_pkc_hash_t* hash){",561
4421,uint32_t alt_sdm_pkc_fm_ecdsa_verify_get(const sdm_pkc_signature_t *sig){,593
4422,uint32_t alt_sdm_pkc_fm_ecdsa_verify_get(){,617
4423,"uint32_t compare_big_number(const uint32_t *a, const uint32_t *b, uint32_t sz_words)",657
4424,"uint32_t alt_sdm_pkc_fm_sm2p256_sign(sdm_pkc_hash_t* k_ephemeral, sdm_pkc_hash_t* hash, sdm_pkc_rndm_num_k_t* sca_rand, sdm_pkc_signature_t* result){",696
4425,NOTE: This verify is NOT currently compatible with OpenSSL (1.1.1d),836
4426,"uint32_t alt_sdm_pkc_fm_sm2p256_verify(sdm_pkc_key_t* key, sdm_pkc_signature_t* signature, sdm_pkc_hash_t* hash, sdm_pkc_rndm_num_k_t* rndm_num_k){",844
4427,"@brief Provide support for PKC MULTIPLY, ADDITION, and SUBTRACTION (modular or point)",942
4428,"uint32_t alt_sdm_pkc_fm_ec_operation(uint32_t opcode, pkc_supported_curves_t curve,",955
4429,uint32_t alt_sdm_pkc_fm_ec_pt_mult_fetch_256b_key(){,1002
4430,"uint32_t alt_sdm_pkc_fm_ec_point_multiply_put(pkc_supported_curves_t curve, sdm_pkc_pt_multiplicand_t* input, const uint32_t * By){",1015
4431,uint32_t alt_sdm_pkc_fm_ec_point_multiply_get(sdm_pkc_pt_mult_result_t* result){,1038
4432,"uint32_t alt_sdm_pkc_fm_ec_point_add_put(pkc_supported_curves_t curve, sdm_pkc_add_operand_t* a, sdm_pkc_add_operand_t* b){",1058
4433,uint32_t alt_sdm_pkc_fm_ec_point_add_get(sdm_pkc_add_result_t* result){,1080
4434,"uint32_t alt_sdm_pkc_fm_ec_point_double_put(pkc_supported_curves_t curve, sdm_pkc_pt_multiplicand_t* input){",1092
4435,uint32_t alt_sdm_pkc_fm_ec_point_double_get(sdm_pkc_pt_mult_result_t* result){,1102
4436,"uint32_t alt_sdm_pkc_fm_ec_mod_operation_put(uint32_t opcode, pkc_supported_curves_t curve, sdm_pkc_mod_operand_t* input){",1113
4437,uint32_t alt_sdm_pkc_fm_ec_mod_operation_get(sdm_pkc_mod_result_t* result){,1122
4438,Copyright (2018) Intel Corporation,3
4439,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4440,void alt_sdm_ram_puf_poweroff(void),49
4441,void alt_sdm_ram_puf_poweroff_lock(void),73
4442,static void ram_puf_set_read_write_mode(uint32_t write_or_read),100
4443,void iid_puf_power_on(),128
4444,void iid_puf_power_off_and_discharge(),146
4445,void iid_puf_ram_setup(),159
4446,uint32_t iid_puf_read_word(uint32_t const addr),182
4447,uint32_t iid_puf_read_word(uint32_t const addr),193
4448,static void puf_iid_fpga_read_disable(void),213
4449,void iid_puf_read_ram(uint32_t * const buf),223
4450,"void iid_puf_read_ram_xor(uint32_t * const xor_input,uint32_t size,uint32_t * const output_data)",240
4451,Copyright (2017) Intel Corporation,3
4452,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4453,void alt_sdm_scr_cnoc_warm_reset(bool assert),54
4454,void alt_sdm_scr_fpga_core_rst_deassert(void),85
4455,void alt_sdm_scr_fpga_core_rst_assert(void),98
4456,uint32_t alt_sdm_scr_fpga2sdm_brdg_init(void),111
4457,uint32_t alt_sdm_scr_fpga2sdm_brdg_shutdown(uint32_t graceful),152
4458,uint32_t alt_sdm_scr_sdm2fpga_brdg_init(void),260
4459,uint32_t alt_sdm_scr_sdm2fpga_brdg_shutdown(void),294
4460,void alt_sdm_scr_hps_debug_enable(void),360
4461,void alt_sdm_scr_hps_debug_disable(void),412
4462,Copyright (2017) Intel Corporation,3
4463,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4464,alt_sdm_sha_ram_region() function which uses the full input path to perform a SHA operation,65
4465,"controls, SHA configuration(eg: 256, 384, and 512 bit), enable/disable SHA, SHA read/compare,",67
4466,void alt_sdm_sha_init(void),84
4467,Optionally the caller can set interrupt delay using the @ref ALT_SDM_SHA_MODE_DELAY_COUNT(),127
4468,void alt_sdm_sha_enable(uint32_t mode),137
4469,void alt_sdm_sha_disable(void),160
4470,void alt_sdm_sha_last(void),174
4471,uint32_t alt_sdm_sha_csr_lastblk_get(void),185
4472,void alt_sdm_sha_int_clear(uint32_t mask),206
4473,void alt_sdm_sha_int_enable(uint32_t mask),228
4474,void alt_sdm_sha_int_disable(uint32_t mask),248
4475,if(status == ALT_SDM_SHA_INT_FINAL),262
4476,uint32_t alt_sdm_sha_int_status(void),270
4477,if(status == ALT_SDM_SHA_INT_FINAL),282
4478,uint32_t alt_sdm_sha_int_status_unmasked(void),290
4479,void alt_sdm_sha_enable_final_int(void),310
4480,void alt_sdm_sha_enable_intermediate_int(void),330
4481,void alt_sdm_sha_disable_final_int(void),350
4482,void alt_sdm_sha_disable_intermediate_int(void),370
4483,bool alt_sdm_sha_is_final_int(void),391
4484,bool alt_sdm_sha_is_intermediate_int(void),412
4485,void alt_sdm_sha_clear_ints(void),432
4486,void alt_sdm_sha_enable_fifo_read(void),451
4487,void alt_sdm_sha_clear_digest_present(void),470
4488,parameter. This call only performs the calculation and must be followed by alt_sdm_sha_read(),490
4489,"sdm_return_t alt_sdm_sha_ram_region(uint32_t *p_data, uint32_t size_bytes, uint32_t sha_type)",503
4490,"8(SHA 256), 12(SHA 384), or 16(SHA 512). Any other values could produce invalid results.",653
4491,"void alt_sdm_sha_read(uint32_t *hash, uint32_t size)",660
4492,"sdm_return_t alt_sdm_sha_compare(const uint32_t *data, uint32_t size)",736
4493,void alt_sdm_sha_read_digest(hash_t hash_out),781
4494,uint32_t switch_word_endianess(const uint32_t num),793
4495,"sdm_return_t alt_sdm_sha_sw_finalized(uint32_t * const msg,",844
4496,Copyright (2017) Intel Corporation,3
4497,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4498,"void cmf_sdm_efuse_read_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",161
4499,"STATIC void cmf_sdm_efuse_write_common_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf, uint32_t is_virtual_write)",238
4500,"void cmf_sdm_efuse_write_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",317
4501,"void cmf_sdm_efuse_virtual_write_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",341
4502,"void cmf_sdm_efuse_user_pubkey_program_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",368
4503,"void cmf_sdm_efuse_user_crc_program_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",616
4504,"void cmf_sdm_efuse_reload_cache_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",700
4505,"void cmf_sdm_efuse_write_disable_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",751
4506,"void cmf_sdm_efuse_status_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",820
4507,"void cmf_sdm_efuse_blow_eng_fuse_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",886
4508,"void cmf_sdm_efuse_zero_check_redundant_row_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",983
4509,"void cmf_sdm_efuse_zero_check_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1059
4510,Copyright (2018) Intel Corporation,3
4511,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4512,void alt_sdm_mbox_fpga_clear(uint32_t base),52
4513,void alt_sdm_mbox_fpga_gpo_write(uint32_t value),87
4514,"Copyright (2017,2020) Intel Corporation",3
4515,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4516,"static void alt_sdm_read_efuse_field(uint8_t startbank, uint8_t startrow, uint8_t startoffset, uint8_t fieldsize, uint32_t fieldidx,",44
4517,"static uint32_t bitreverse_data(uint32_t data, uint8_t bitlen)",77
4518,"void cmf_efuse_field_init(cmf_efuse_field_t *p_efuse_field, const uint32_t *p_start)",94
4519,"uint32_t cmf_efuse_get_field(cmf_efuse_field_t *p_efuse_field, uint32_t size)",111
4520,sdm_return_t cmf_efuse_get_chipid(uint32_t *p_data),143
4521,sdm_return_t cmf_efuse_get_ult(uint32_t *p_data),162
4522,sdm_return_t cmf_efuse_compare_ulthash(const uint32_t *p_data),184
4523,uint32_t cmf_efuse_get_int_osc_trim(void),213
4524,uint32_t cmf_efuse_get_hps_int_osc_trim(void),223
4525,uint32_t cmf_efuse_get_uhdsp_1rw(void),236
4526,uint32_t cmf_efuse_get_hs2p_1r1w(void),248
4527,uint32_t cmf_efuse_get_uhd2p_1r1w(void),259
4528,uint32_t cmf_efuse_get_hps_ram_config_1r1w(void),270
4529,uint32_t cmf_efuse_get_hps_ram_config_1rw(void),281
4530,uint32_t cmf_efuse_get_hps_mpu_config_1r1w(void),292
4531,uint32_t cmf_efuse_get_hps_mpu_config_1rw(void),303
4532,"sdm_return_t cmf_efuse_get_hps_mem_repair(uint32_t *p_data, uint32_t num_rows)",312
4533,"sdm_return_t cmf_efuse_get_lsm_mem_repair(uint32_t *p_data, uint32_t num_rows)",337
4534,"sdm_return_t cmf_efuse_get_crete_dd(uint32_t *p_data, uint32_t num_rows)",363
4535,uint32_t cmf_efuse_get_bg_trim(void),385
4536,uint32_t cmf_efuse_get_jtag_id(void),399
4537,sdm_return_t cmf_efuse_get_vid(uint32_t *p_data),444
4538,uint32_t cmf_efuse_get_vr_aux_trim(void),463
4539,uint32_t cmf_efuse_get_io_aux_trim(void),473
4540,uint32_t cmf_efuse_get_rma_counter_bit(void),483
4541,uint32_t cmf_efuse_get_vr_leaf_ctrl_bf(uint32_t sector),494
4542,"sdm_return_t cmf_efuse_get_crete_location_info(uint8_t *p_data, uint32_t num_cretes)",510
4543,"sdm_return_t cmf_efuse_get_uib_location_info(uint8_t *p_data, uint32_t num_uib)",558
4544,@brief This functions gets the aib redundancy info from fuse bank given AIB index (from 0..5),581
4545,@param aib_pos is a the position of AIB as an index from (0...5),582
4546,"sdm_return_t cmf_efuse_get_aib_redundancy(uint8_t aib_pos, uint32_t *p_data)",586
4547,"void alt_sdm_read_eram_repair_efuse(int fieldidx, uint32_t *eram_fusefield)",638
4548,"void alt_sdm_read_esram_repair_efuse(int fieldidx, uint32_t *esram_fusefield)",654
4549,void alt_sdm_read_esram_config_efuse(uint32_t *esram_fusefield),670
4550,void alt_sdm_read_dts_overtemp_efuse(uint32_t *dts_overtemp) {,680
4551,"void alt_sdm_read_dts_trim_efuse(uint32_t index, uint32_t *dts_trim, uint32_t *remote_dts_trim)",690
4552,"sdm_return_t cmf_efuse_get_vadc_trim(uint32_t * vadc_rvsvcmtrim, uint32_t * vadc_rvsreftrim, uint32_t * vadc_rvsibiasstg1, uint32_t * vadc_rvsibiasstg23,uint32_t * vadc_rvsibiasvrefbuf,uint32_t * vadc_rvscompdlyctrl)",705
4553,"static int32_t sign_extend(int32_t data, uint8_t bits_width)",757
4554,sdm_return_t cmf_efuse_get_vadc_adjust(vadc_adjust_fuse_t * const vadc_adjust_fuse),782
4555,"sdm_return_t cmf_efuse_get_bad_sector_rows(efuse_bad_row_s *p_rows, uint32_t total_rows)",844
4556,bool is_production_fuse_blown(void),887
4557,bool is_untested_fuse_blown(void),914
4558,bool is_no_sgx_fuse_blown(void),941
4559,bool is_nl_part_fuse_blown(void),963
4560,bool is_engineering_fuse_blown(void),984
4561,bool is_user_root_pubkey_blown(void),1006
4562,bool is_jtag_disable_fuse_blown(void),1031
4563,bool is_key_prog_start_fuse_blown(void),1053
4564,bool is_key_prog_end_fuse_blown(void),1074
4565,uint32_t cmf_efuse_get_security_version(void),1096
4566,bool is_hps_jtag_disable_fuse_blown(void),1112
4567,sdm_return_t cmf_efuse_get_force_pki_slct(cmf_efuse_force_pki_slct_t *p_data),1138
4568,bool is_force_pki_slct_blown(void),1195
4569,bool is_joint_cmf_pka_blown(void),1222
4570,bool is_puf_license_reg_fuse_blown(void),1246
4571,bool is_user_iid_puf_enroll_disable_fuse_blown(void),1270
4572,bool is_user_iid_puf_act_disable_fuse_blown(void),1297
4573,bool is_secondary_owner_pubkey_hash_fuse_blown(void),1324
4574,"uint32_t cmf_efuse_get_user_public_key(uint32_t *p_data, uint32_t n)",1341
4575,"sdm_return_t cmf_efuse_get_user_public_key_cancel(uint32_t *p_data, uint32_t n)",1383
4576,uint32_t cmf_efuse_get_user_public_key_disable(void),1424
4577,"uint32_t cmf_efuse_get_counter(uint32_t *p_data, cmf_efuse_counter_type_t type)",1433
4578,"sdm_return_t cmf_efuse_get_public_key(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct, uint32_t msw_only)",1495
4579,"uint32_t cmf_efuse_get_key_cancellation(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct)",1562
4580,"sdm_return_t cmf_efuse_get_owned_constant_fuses(uint32_t *p_data, uint32_t num_rows, iid_puf_type_t iid_puf_type)",1607
4581,Local defines for the altera_sdm_efuse_eng_cert_zero_check_policy() function.,1674
4582,sdm_return_t cmf_efuse_policy_eng_zero_check(void),1697
4583,"static uint32_t rotate_right_32(uint32_t value, uint32_t shift_amount)",1730
4584,"static uint32_t rotate_left_32(uint32_t value, uint32_t shift_amount)",1746
4585,uint32_t cmf_efuse_get_oldest_working_psg_key_id(void),1759
4586,"sdm_return_t cmf_efuse_generate_key_cancel_bitmask(uint32_t *p_data, uint32_t key_id)",1828
4587,bool is_intel_signing_key_cancelled(uint32_t keyid),1855
4588,bool is_uds_iid_puf_enroll_disable_fuse_blown(void),1890
4589,bool is_uds_iid_puf_act_disable_fuse_blown(void),1916
4590,uint32_t cmf_efuse_get_key_disable_value(cmf_efuse_aes_root_key_disable_slct_t key),1944
4591,"sdm_return_t cmf_efuse_get_silicon_unique_data_hash(uint32_t *efuse_hash, uint32_t size, const void *const label,const uint32_t label_length,bool use_pub_key_hash, iid_puf_type_t iid_puf_type)",2001
4592,"sdm_return_t cmf_efuse_get_bootrom_patch_values(uint32_t* p_data, uint32_t size)",2138
4593,Copyright (2017) Intel Corporation,3
4594,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4595,static void cmf_gpio_timer_start(void),92
4596,static void cmf_gpio_timer_stop(void),115
4597,static void cmf_gpio_rising_edge(uint32_t pin_mask),136
4598,static void cmf_gpio_falling_edge(uint32_t pin_mask),162
4599,call once per clocking interval that was provided to the cmf_gpio_init() function. This,182
4600,static void cmf_gpio_timer_isr(void * unused),190
4601,static void cmf_gpio_isr(void * unused),351
4602,"int32_t cmf_gpio_init(const uint32_t *p_pins, uint32_t size, uint32_t interval)",383
4603,passed into the cmf_gpio_init() function.,441
4604,cmf_gpio_event_t cmf_gpio_get(uint32_t pin),445
4605,Restart monitoring the GPIOs after a call to cmf_gpio_stop() was made. It is not necessary to call,478
4606,this function after cmf_gpio_init() since this call automatically starts monitoring the GPIOs.,479
4607,void cmf_gpio_start(void),483
4608,Stop monitoring the GPIOs until a call to cmf_gpio_start() is made again.,500
4609,void cmf_gpio_stop(void),504
4610,Copyright (2018) Intel Corporation,3
4611,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4612,"static sdm_return_t aes_crypt_data(uint32_t op_mode,cmf_aes_resource_t cmf_aes_resource,  ",76
4613,"static sdm_return_t get_encrypted_data(uint32_t * key_data,uint32_t * encrypted_data)",245
4614,"static sdm_return_t check_key_decryption(uint32_t * encrypted_data, uint32_t keyid, cmf_key_type_t key_type)",301
4615,static sdm_return_t allow_puf_enrollment(bool write_real_efuse),351
4616,"sdm_return_t puf_enroll_efuse(bool write_real_efuse, cmf_mpi_t * p_efuse_data)",455
4617,"sdm_return_t zero_check_protected_fuses(uint32_t packed_fuse_data, uint32_t * pdata)",564
4618,"sdm_return_t check_key_fuse_contents(uint32_t * pdata, uint32_t key_packed, cmf_key_type_t key_type)",601
4619,"sdm_return_t puf_enroll_efuse_test(bool write_real_efuse, cmf_mpi_t * p_efuse_data)",622
4620,"void puf_enroll_efuse_test_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",673
4621,Copyright (2018) Intel Corporation,3
4622,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4623,uint32_t sdm_hal_cnoc_input_avst_mode(void),40
4624,void sdm_hal_cnoc_input_drop_requested_beats(uint8_t req_beats),51
4625,Copyright (2017) Intel Corporation,5
4626,"source code (""Material"") are owned by Intel Corporation or its suppliers or",8
4627,void alt_sdm_aes_init(void),43
4628,"void alt_sdm_aes_config(uint32_t mode, uint32_t size, uint32_t outsize_diff)",75
4629,void alt_sdm_aes_start(void),110
4630,uint32_t alt_sdm_aes_int_status(void),132
4631,"void alt_sdm_aes_get_data(uint8_t fifo, uint32_t aes_mode, uint32_t size, uint32_t outcount)",143
4632,void alt_sdm_aes_int_clear(uint32_t mask),156
4633,void alt_sdm_aes_int_enable(uint32_t mask),162
4634,void alt_sdm_aes_int_disable(uint32_t mask),168
4635,uint32_t alt_sdm_aes_ready(void),179
4636,void alt_sdm_aes_dest_set(uint32_t dest),213
4637,"void alt_sdm_aes_key_load(uint32_t key_dest, uint32_t key_size, uint32_t key_mode)",245
4638,void alt_sdm_aes_clear_keys(void),267
4639,"void alt_sdm_aes_setup_bypass(alt_sdm_aes_cib_rd_fifo_t input_fifo, uint32_t xfer_length_words_64bits, alt_sdm_aes_data_dest_t output_destination)",274
4640,bool alt_sdm_aes_is_busy(void),299
4641,"@param interval_length update interval length (0=no update, 1/3/7/15/31/63/127/255 = update key every N*32 bytes)",313
4642,"sdm_return_t alt_sdm_aes_get_update_interval(uint32_t interval_length,",319
4643,sdm_return_t alt_sdm_aes_key_swap_mode_set(alt_sdm_aes_key_swap_mode_config_t* aes_key_swap),387
4644,"sdm_return_t alt_sdm_aes_iv_set(alt_sdm_aes_iv_dest_sel_t aes_iv_dest, alt_sdm_aes_iv_data_t*  iv_data)",415
4645,sdm_return_t alt_sdm_aes_key_info_set(alt_sdm_aes_key_info_t* aes_key_info),469
4646,"void alt_sdm_aes_setup_aes_regs(alt_sdm_aes_data_src_t  aes_data_source,alt_sdm_aes_data_dest_t aes_data_dest,uint32_t ctx_id,uint32_t op_mode,uint32_t aes_mode,uint32_t endian_in,uint32_t endian_out)",511
4647,"void alt_sdm_aes_setup_data_xfer(alt_sdm_aes_key_ctx_sel_t aes_key_ctx_sel,",531
4648,void alt_sdm_aes_key_as_data_last_operation_set(void),572
4649,void alt_sdm_aes_key_context_select_clear_to_zero(void),580
4650,Copyright (2017) Intel Corporation,3
4651,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4652,uint32_t refclk_div_get(uint32_t refclk_value_mhz),75
4653,int32_t alt_sdm_pll_startup(void),96
4654,void alt_sdm_update_intosc_frequency(uint32_t divider),114
4655,void alt_sdm_ctrl_clk_scr_select(uint32_t sel),125
4656,void alt_sdm_data_clk_scr_select(uint32_t sel),136
4657,"void alt_sdm_clk_bypass_enable(uint32_t mask, uint32_t bypass_val)",147
4658,void alt_sdm_pll0_div(uint32_t div),157
4659,void alt_sdm_pll1_div(uint32_t div),169
4660,void alt_sdm_enter_power_state_reset(void),176
4661,void alt_sdm_exit_power_state_reset(void),189
4662,uint32_t alt_sdm_wait_for_pll_lock(uint32_t timeout_value),202
4663,void alt_sdm_data_clk_set_cnt(uint32_t cnt),248
4664,void alt_sdm_clk_bypassr_clear(uint32_t bypassr_val),259
4665,"void alt_sdm_data_clk_mux_freq_change_cnt(uint32_t sel, uint32_t cnt, uint32_t bypass)",267
4666,"void alt_sdm_clk_set_qspi_clk(uint32_t pllc0_mhz, uint32_t pllc1_mhz, uint32_t qspi_clk)",289
4667,void alt_sdm_clk_internal(void),321
4668,uint32_t alt_sdm_get_bypass(void),335
4669,void alt_sdm_bypass_clear_all(void),345
4670,void alt_sdm_bypass_clear_except_ctrl(void),355
4671,"void alt_sdm_clk_setup_divider_all(uint32_t pllc0_mhz, uint32_t pllc1_mhz, uint32_t cpu_clk, uint32_t sp_clk)",370
4672,void alt_sdm_clk_set_safe_ref_clk_div(uint32_t value),454
4673,void alt_sdm_set_clk_slices_to_default(),479
4674,void alt_sdm_clk_freq_det_enable(void),527
4675,void alt_sdm_clk_freq_det_disable(void),537
4676,void alt_sdm_clk_freq_det_int_enable(void),547
4677,void alt_sdm_clk_freq_det_int_disable(void),559
4678,uint32_t alt_sdm_clk_get_safe_ref_clk_div(void),573
4679,void alt_sdm_clk_write_freq_det_cfg(void),585
4680,void alt_sdm_clk_write_freq_det_cfg_default(void),594
4681,"sdm_return_t alt_sdm_anti_tamper_get_freq_det_cfg(uint32_t ext_refclk_mhz, uint32_t tolerance)",610
4682,"sdm_return_t alt_sdm_clk_update_freq_det_cfg(uint32_t ext_ref_clk, uint32_t tolerance)",664
4683,Copyright (2017) Intel Corporation,3
4684,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4685,static bool sdm_dma_ptr_valid(void * ptr),69
4686,static void dma_wr_id_update(),98
4687,static void dma_rd_id_update(),110
4688,void alt_sdm_dma_rd_int_clear(void),124
4689,void alt_sdm_dma_rd_int_disable(void),140
4690,void alt_sdm_dma_rd_int_enable(void),156
4691,uint32_t alt_sdm_dma_rd_status(void),172
4692,sdm_dma_bus_t alt_sdm_dma_rd_bus_get(void),182
4693,void alt_sdm_dma_rd_init(sdm_dma_bus_t bus),207
4694,int32_t alt_sdm_dma_rd_stop(void),236
4695,void alt_sdm_dma_rd_resume(void),288
4696,bool alt_sdm_dma_rd_active(void),298
4697,bool alt_sdm_dma_wr_active(void),317
4698,bool alt_sdm_dma_rd_desc_full(void),336
4699,@note The \e size value must be an integer multiple of the (burst size * 8).,358
4700,"uint32_t alt_sdm_dma_rd_send_desc(uint32_t *p_src, uint32_t size,",367
4701,"int32_t alt_sdm_dma_rd_nsp_ram(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt)",480
4702,void alt_sdm_dma_wr_int_clear(void),538
4703,void alt_sdm_dma_wr_int_disable(void),554
4704,void alt_sdm_dma_wr_int_enable(void),571
4705,uint32_t alt_sdm_dma_wr_status(void),588
4706,sdm_dma_bus_t alt_sdm_dma_wr_bus_get(void),598
4707,void alt_sdm_dma_wr_init(sdm_dma_bus_t bus),623
4708,"int32_t alt_sdm_dma_wr_nsp_ram(uint32_t *pDest, uint32_t size, uint32_t enable_interrupt)",665
4709,int32_t alt_sdm_dma_wr_stop(void),726
4710,void alt_sdm_dma_wr_resume(void),770
4711,bool alt_sdm_dma_wr_desc_full(void),780
4712,@note The \e size value must be an integer multiple of the (burst size * 8).,802
4713,"uint32_t alt_sdm_dma_wr_send_desc(uint32_t *p_dest, uint32_t size, uint32_t flags, uint32_t burst)",811
4714,uint32_t alt_sdm_dma_wr_get_desc_remain(void),898
4715,uint32_t alt_sdm_dma_rd_get_desc_remain(void),908
4716,bool alt_sdm_dma_rd_if_stop(void),919
4717,int32_t alt_sdm_dma_rd_stop_desc(bool enable),942
4718,bool alt_sdm_dma_wr_if_stop(void),995
4719,int32_t alt_sdm_dma_wr_stop_desc(bool enable),1019
4720,uint32_t alt_sdm_dma_calc_burst_size(uint32_t size_in_bytes),1072
4721,Copyright (2017) Intel Corporation,3
4722,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4723,"static sdm_return_t altera_sdm_read_bank(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor); ",372
4724,const br_efuse_t * get_efuse_cache_ptr(void),445
4725,"static sdm_return_t altera_sdm_pre_read_bank(const uint32_t bank, const bool is_aes_key)",467
4726,"static sdm_return_t alt_read_row(const uint32_t row, const bool is_last_row, const uint32_t favor, uint32_t * row_read_data)",527
4727,"sdm_return_t alt_read_aes_row(const uint32_t row, const bool is_last_row, const uint32_t favor)",620
4728,static void altera_sdm_post_read_bank(void),704
4729,static void altera_program_to_sense_same_block_wait(void),725
4730,static void altera_sense_to_sense_diff_block_wait(void),733
4731,@param bank_ptr is a pointer to the bank array (either primary or reload cache),740
4732,"STATIC bool altera_sdm_efuse_is_bank_valid(const br_efuse_bank_t* bank_ptr, uint32_t bank_num)",744
4733,STATIC bool altera_sdm_efuse_reload_cache_bank_valid(uint32_t bank_num),767
4734,STATIC bool altera_sdm_efuse_cache_bank_valid(uint32_t bank_num),784
4735,STATIC bool efuse_self_test(void),804
4736,Called from altera_sdm_efuse_init() to determine whether or not it's necessary to read bank1-3 physical fuses,870
4737,STATIC sdm_return_t altera_sdm_efuse_init_need_physical_read(bool* phy_rd_needed),878
4738,sdm_return_t altera_sdm_efuse_init(br_efuse_t *p_efuse),931
4739,This function performs efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',1086
4740,"static sdm_return_t altera_sdm_read_bank(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor)",1095
4741,This function performs the steps to read the rows in efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',1137
4742,"static sdm_return_t altera_sdm_read_rows(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor, const bool is_last_block)",1146
4743,static sdm_return_t altera_sdm_pre_write_bank(const uint32_t bank),1177
4744,static void altera_sdm_post_write_bank(void),1252
4745,"static sdm_return_t altera_sdm_pgm_efuse(const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1304
4746,"static sdm_return_t altera_sdm_write_efuse_bank(const uint32_t bank, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1408
4747,"static ALT_SDM_EFUSE_CHECK_CODE altera_sdm_efuse_row_readable(uint32_t bank, uint32_t row)",1508
4748,"STATIC sdm_return_t altera_sdm_write_cached_efuse_bank(br_efuse_bank_t *bank_p, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows, const uint32_t bank_num)",1557
4749,"static uint32_t altera_sdm_update_efuse_block(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, bool skip_cache_update, uint32_t error_info[], uint32_t * error_info_length, bool row_repair_enable)",1609
4750,static int32_t altera_sdm_efuse_get_temperature(void),1786
4751,"static sdm_return_t altera_sdm_efuse_read_control_row(const uint32_t bank, const bool control_rows_only, const uint32_t favor)",1807
4752,@brief Primary eFuse read capability for both external (mbox-originated) and internal(CMF-originated) requestors.,1842
4753,"sdm_return_t altera_sdm_efuse_read(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",1851
4754,"sdm_return_t altera_sdm_efuse_read_force(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",1901
4755,@brief Primary eFuse write capability for external (mbox-originated) requests. Internal (CMF-originated) ,1935
4756,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",1943
4757,"sdm_return_t altera_sdm_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t is_virtual_write, uint32_t *p_error_info, uint32_t *p_error_info_length, bool row_repair_enable)",1950
4758,@param error_info is a buffer to place information about failed row writes. This buffer must be at least 20 words in size (up to 4 errors * 5 words per error),2005
4759,"static sdm_return_t altera_sdm_efuse_program_rows(uint32_t bank, uint32_t start_row, uint32_t * p_data, const uint32_t total_num_rows, uint32_t is_virtual_write, bool skip_cache_update, uint32_t * p_error_buf, uint32_t * p_error_buf_length, bool row_repair_enable)",2010
4760,"static uint32_t altera_sdm_efuse_cancel_psg_public_key(uint32_t key_id, uint32_t is_virtual_write)",2065
4761,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2105
4762,STATIC sdm_return_t altera_sdm_efuse_pgm_crc0(uint32_t is_virtual_write),2108
4763,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2152
4764,STATIC sdm_return_t altera_sdm_efuse_pgm_crc1(uint32_t is_virtual_write),2155
4765,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2211
4766,STATIC sdm_return_t altera_sdm_efuse_pgm_user_crc(uint32_t is_virtual_write),2214
4767,"STATIC sdm_return_t altera_sdm_efuse_cancel_rolled_keys(uint32_t oldest_valid_key_id, uint32_t is_virtual_write)",2265
4768,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2339
4769,"sdm_return_t altera_sdm_efuse_user_pubkey_write(uint32_t *p_data, uint32_t user_key_type, uint32_t is_virtual_write,uint32_t skip_cancel_keys)",2343
4770,"sdm_return_t altera_sdm_efuse_user_pubkey_write(uint32_t *p_data, uint32_t user_key_type, uint32_t is_virtual_write)",2345
4771,@brief  Programs the user pubkey cancel (VAB specific),2498
4772,"sdm_return_t altera_sdm_efuse_user_pubkey_cancel_write(uint32_t *p_data , uint32_t user_root_hash_id, uint32_t cancel_id, uint32_t is_virtual_write)",2504
4773,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",2541
4774,sdm_return_t altera_sdm_efuse_user_crc_write(uint32_t is_virtual_write),2544
4775,"sdm_return_t altera_sdm_efuse_intel_pubkey_cancel_write(uint32_t key_id, uint32_t is_virtual_write, uint32_t *resp_buf)",2594
4776,sdm_return_t altera_sdm_efuse_reload_cache(void),2647
4777,sdm_return_t altera_sdm_efuse_write_disable(void),2674
4778,"static sdm_return_t efuse_zero_check_operation(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows, const uint32_t repair, uint32_t * result)",2688
4779,@param repair_enable when set this enables repair of efuse rows (if repair rows are availiable) which read non-zero,2830
4780,"sdm_return_t altera_sdm_efuse_dft_zero_check(uint32_t bank, uint32_t start_row, uint32_t num_rows, uint32_t repair_enable, uint32_t * p_data)",2834
4781,sdm_return_t altera_sdm_efuse_status(uint32_t *p_data),2876
4782,"static uint32_t altera_sdm_efuse_redundant_rows_enable_get(const uint32_t bank, uint32_t redundant_rows_enable[4])",2913
4783,"static uint32_t altera_sdm_efuse_write_redundancy_policy(const uint32_t bank, const uint32_t rows[], const uint32_t data_length, uint32_t * new_efuse_control_row_data)",2938
4784,"static sdm_return_t altera_sdm_efuse_write_redundancy(uint32_t fuses[], const uint32_t bank, const uint32_t rows[], const uint32_t data[], const uint32_t data_length, const uint32_t favor, uint32_t new_efuse_control_row, bool skip_cache_update)",3054
4785,sdm_return_t altera_sdm_efuse_hw_disable_and_lock(void),3221
4786,sdm_return_t altera_sdm_efuse_aes_key_disable_and_lock(void),3242
4787,sdm_return_t altera_sdm_efuse_clr_security_fuse_cache(void),3262
4788,"@param num_words number of words (ie rows) to read, should be set to match p_data buffer length",3300
4789,"sdm_return_t altera_sdm_efuse_puf_key_read(uint32_t *p_data, uint32_t num_words, uint32_t idx)",3304
4790,"sdm_return_t altera_sdm_efuse_puf_key_write(uint32_t *p_data, uint32_t data_len, uint32_t idx)",3414
4791,"sdm_return_t altera_sdm_efuse_rma_counter_write(uint32_t data,uint32_t is_virtual_write)",3459
4792,sdm_return_t altera_sdm_efuse_service_root_key_read(uint32_t* p_data),3481
4793,sdm_return_t altera_sdm_efuse_aes_root_key_write(uint32_t *p_data),3491
4794,sdm_return_t altera_sdm_efuse_aes_key_prog_start_write(uint32_t is_virtual_write),3535
4795,sdm_return_t altera_sdm_efuse_aes_key_prog_end_write(uint32_t is_virtual_write),3559
4796,"sdm_return_t altera_sdm_efuse_aes_security_version_write(uint32_t key_id, uint32_t is_virtual_write)",3583
4797,"static sdm_return_t copy_crc1_protected_region_to_array(br_efuse_t *pFuses, uint32_t * p_data, uint32_t num_rows)",3610
4798,static bool is_umk_disabled(void),3639
4799,static bool is_efuse_hw_disabled(void),3661
4800,STATIC bool efuse_get_efuse_write_disable(void),3674
4801,static void __inline__ aes_key_select_efuse(void),3679
4802,sdm_return_t altera_sdm_efuse_aes_reg_clean(void),3687
4803,sdm_return_t altera_sdm_read_aes_fuses(const uint32_t favor),3731
4804,"sdm_return_t altera_sdm_read_aes_rows(const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor, const bool is_last_block)",3779
4805,@brief This function senses/reads one row from the actual physical efuse (not cache). ,3809
4806,"sdm_return_t altera_sdm_efuse_read_physical(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t favor)",3819
4807,sdm_return_t altera_sdm_efuse_eng_fuse_write(uint32_t is_virtual_write),3885
4808,"sdm_return_t altera_sdm_efuse_dft_burn(uint32_t bank, uint32_t row, uint32_t burn_data)",3914
4809,"static ALT_SDM_EFUSE_CHECK_CODE efuse_parameter_range_check(uint32_t bank, uint32_t start_row, uint32_t total_num_rows)",3956
4810,static uint32_t altera_sdm_efuse_get_crc1en(void),3993
4811,"static bool user_security_fuses_set(uint32_t fuses[], uint32_t start_row, uint32_t num_rows, uint32_t skip_user_cancel_fuses)",4023
4812,@param total_num_rows is the number of rows of efuse to write (length of valid data),4085
4813,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_production_fuses_protected_region_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",4089
4814,@param total_num_rows is the number of rows of efuse to write (length of valid data),4122
4815,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_oct_redundant_fuse_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",4126
4816,@param total_num_rows is the number of rows of efuse to write (length of valid data),4191
4817,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_crc0en_fuses_protected_region_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",4195
4818,@param fuses efuse cache pointer to bank being written (to check existing fuse settings),4369
4819,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_security_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",4373
4820,@param total_num_rows is the number of rows of efuse to write (length of valid data),4449
4821,"static ALT_SDM_EFUSE_CHECK_CODE efuse_user_security_crc_en_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",4453
4822,@param total_num_rows is the number of rows of efuse to write (length of valid data),4474
4823,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_user_crc_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",4477
4824,@param total_num_rows is the number of rows of efuse to write (length of valid data),4508
4825,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_engdev_fuse_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",4513
4826,@param total_num_rows is the number of rows of efuse to write (length of valid data),4564
4827,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_public_key_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",4568
4828,@param total_num_rows is the number of rows of efuse to write (length of valid data),4606
4829,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_aes_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[])",4611
4830,@param total_num_rows is the number of rows of efuse to write (length of valid data),4651
4831,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_writable_range_fuses_check(uint32_t start_row, uint32_t total_num_rows, uint32_t bank)",4656
4832,@ param total_num_rows is the number of rows of efuse to write (length of valid data),4728
4833,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_crc1en_fuses_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t bank)",4733
4834,@ param total_num_rows is the number of rows of efuse to write (length of valid data),4795
4835,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_gap_check(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t gapRow, uint32_t gapMask)",4800
4836,"STATIC uint32_t extract_efuse_field(uint32_t * input_data, uint32_t input_start_row, uint32_t input_num_rows, uint32_t * field_data, uint32_t field_start_row, uint32_t field_num_rows)",4828
4837,"static uint32_t rotate_right_32(uint32_t value, uint32_t shift_amount) {",4884
4838,static uint32_t check_key_cancellation_bitmask_valid(const uint32_t * p_data),4898
4839,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_key_cancellation_fuse_check(bool is_efuse_write, uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",4942
4840,@param total_num_rows is the number of rows in the data to check (length of valid data),5108
4841,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_quad_redundant_fuse_check(uint32_t bank, uint32_t start_row, uint32_t *data, uint32_t total_num_rows)",5111
4842,@ param total_num_rows is the number of rows of efuse to write (length of valid data),5163
4843,"STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_bank0_write_policy(uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t fuses[], uint32_t is_virtual_write)",5167
4844,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_ROM_eFuse_csum_valid_policy(br_efuse_t *fuses),5254
4845,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_crc0_crc1_valid_policy(br_efuse_t *fuses),5285
4846,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_user_crc_valid_policy(br_efuse_t *fuses),5335
4847,STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_user_pubkey_write_policy(br_efuse_t *fuses),5362
4848,@ param total_num_rows is the number of rows of efuse to write (length of valid data),5399
4849,"STATIC ALT_SDM_EFUSE_CHECK_CODE altera_efuse_write_policy(uint32_t fuses[], uint32_t bank, uint32_t start_row, uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",5403
4850,"static ALT_SDM_EFUSE_CHECK_CODE efuse_policy_zero_check_range(uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows)",5488
4851,"STATIC ALT_SDM_EFUSE_CHECK_CODE altera_sdm_efuse_zero_check_policy(uint32_t fuses[],const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows)",5583
4852,bool usr_cancellation_fuse_table_valid(void),5616
4853,en_usr_cancell_fuse_parse_status_t permitted_usr_cancellation_fuse_table_init(const main_descriptor_t *main_descriptor),5626
4854,"void set_permitted_usr_cancellation_fuse_mask(uint32_t enable_bitmask,bool table_valid)",5654
4855,sdm_return_t altera_sdm_efuse_permit_kill_write(uint32_t is_virtual_write),5668
4856,Copyright (2017) Intel Corporation,3
4857,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4858,sdm_return_t alt_sdm_inbuf_adjust(uint32_t count),52
4859,uint32_t alt_sdm_inbuf_fifo_read_word(uint32_t offset),101
4860,"uint32_t alt_sdm_inbuf_fifo_read(uint32_t fifo, uint32_t *pDest, uint32_t size)",110
4861,"int32_t alt_sdm_inbuf_fifo_config(uint32_t fifo, uint32_t start, uint32_t size)",156
4862,void alt_sdm_inbuf_start(uint32_t size),193
4863,void alt_sdm_prebuf_start(uint32_t size),226
4864,void alt_sdm_inbuf_init(void),248
4865,"void alt_sdm_inbuf_mode(uint32_t input, uint32_t fifo_in, uint32_t fifo_out)",377
4866,void alt_sdm_inbuf_memmode_enable(void),396
4867,void alt_sdm_inbuf_memmode_disable(void),414
4868,from reset. This call should have be preceded by a call to alt_sdm_inbuf_pipe_clear_set(),430
4869,void alt_sdm_inbuf_pipe_clear_clr(void),434
4870,This call should be followed by a call to alt_sdm_inbuf_pipe_clear_clr() to bring the,445
4871,void alt_sdm_inbuf_pipe_clear_set(void),450
4872,This function returns a value that can be passed to the alt_sdm_inbuf_src_set() function.,460
4873,uint32_t alt_sdm_inbuf_src_get(void),464
4874,void alt_sdm_inbuf_src_set(uint32_t inbuf_src),488
4875,void alt_sdm_inbuf_sha_enable(bool enable),507
4876,void alt_sdm_flush_intermediate_bridges(void),521
4877,uint32_t alt_sdm_inbuf_fifo0_datalvl_get(void),552
4878,@brief This function is used to get the current fifo3 (keys fifo) data level in the input buffer.,558
4879,uint32_t alt_sdm_inbuf_fifo3_datalvl_get(void),562
4880,Copyright (2017) Intel Corporation,3
4881,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4882,"static uint32_t alt_sdm_pkc_perform_op_ptmult_sign(uint32_t operation,",97
4883,"static uint32_t alt_sdm_pkc_get_ecmult_sign_result(uint32_t *x_addr,",100
4884,void alt_sdm_pkc_init(void),108
4885,void alt_sdm_pkc_uninit(void),152
4886,"- ALT_SDM_PKC_OP_ECDSASIGN ECDSA Sign to generate a new (r,s) signature.",171
4887,- ALT_SDM_PKC_OP_ECMULT EC Point Multiply. (NOT SUPPORTED YET),173
4888,"alt_sdm_pkc_config(ALT_SDM_PKC_OP_ECDSAVERIFY,",189
4889,"uint32_t alt_sdm_pkc_config(uint32_t operation, uint32_t length, uint32_t endian)",196
4890,"@brief This function programs the (x,y) key into the PKC interface.",232
4891,"This function programs the passed in key (x,y) into the correlating",237
4892,"uint32_t alt_sdm_pkc_set_key(uint32_t *x_addr,",246
4893,"@brief This function programs the (r,s) signature into the PKC interface.",281
4894,"This function programs the passed in signature (r,s) into the correlating",286
4895,"uint32_t alt_sdm_pkc_set_signature(uint32_t *r_addr, uint32_t *s_addr)",295
4896,"@brief This function programs the hash of the key (x,y) into the PKC interface.",330
4897,"This function programs the passed in hash of the key (x,y) into the correlating",334
4898,uint32_t alt_sdm_pkc_set_hash(uint32_t *hash_addr),343
4899,2. Poll until BUSY=0 (operation is complete).,380
4900,uint32_t alt_sdm_pkc_perform_op_verify(void),386
4901,"uint32_t alt_sdm_pkc_set_ptmult_xy(uint32_t *x_addr, uint32_t *y_addr)",461
4902,This function programs the passed in scalar multiplier (n) into the correlating,472
4903,uint32_t alt_sdm_pkc_set_ptmult_scalar_mult(uint32_t *n_addr),478
4904,2. Poll until BUSY=0 (operation is complete).,490
4905,"uint32_t alt_sdm_pkc_perform_op_point_mult(uint32_t *x_addr,",495
4906,"uint32_t alt_sdm_pkc_set_sign_inputs(uint32_t *random_number_addr,",517
4907,2. Poll until BUSY=0 (operation is complete).,536
4908,"3. Get the resulting Signature (r, s) values.",537
4909,"uint32_t alt_sdm_pkc_perform_op_sign(uint32_t *r_addr, uint32_t *s_addr)",541
4910,void alt_sdm_pkc_int_clear(uint32_t mask),563
4911,void alt_sdm_pkc_int_enable(uint32_t mask),583
4912,void alt_sdm_pkc_int_disable(uint32_t mask),603
4913,if(ALT_PKC_CSR_INTRCLR_DONE_GET(status)),617
4914,uint32_t alt_sdm_pkc_int_status(void),625
4915,static void alt_sdm_pkc_start(void),635
4916,static uint32_t alt_sdm_pkc_ready(void),646
4917,static uint32_t alt_sdm_pkc_wait4ready(void),670
4918,@param length is the size of the signature (256 or 384 bit).,691
4919,static uint32_t alt_sdm_pkc_r_signature_compare(void),695
4920,"uint32_t alt_sdm_pkc_verify_signature(const sdm_pkc_key_t *const p_key,",742
4921,"Point Multiply operation.  For an ECDSA Sign operation, the Signature (r, s)",844
4922,"static uint32_t alt_sdm_pkc_get_ecmult_sign_result(uint32_t *x_addr,",851
4923,2. Poll until BUSY=0 (operation is complete).,884
4924,"static uint32_t alt_sdm_pkc_perform_op_ptmult_sign(uint32_t operation,",889
4925,"@param input p_secret_key pointer to a secret key data (X, Y) for which a signature",943
4926,@param input operation_length bit length for this operation (ALT_SDM_PKC_SIZE_256 or,947
4927,"uint32_t alt_sdm_pkc_sign(const sdm_pkc_rndm_num_k_t *const p_rndm_num_k,",952
4928,"@param input p_pt_multiplier pointer to (X, Y) point multiplier used in this operation",1034
4929,"@param output p_xy_result pointer to a structure to hold the operation result (X, Y)",1036
4930,@param input signature_type bit length of this operation (ALT_SDM_PKC_SIZE_256,1037
4931,"uint32_t alt_sdm_pkc_point_multiply(const sdm_pkc_pt_multiplicand_t *const p_pt_multiplier,",1042
4932,Copyright (2018) Intel Corporation,3
4933,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4934,void alt_sdm_ram_puf_poweroff(void),48
4935,void alt_sdm_ram_puf_poweroff_lock(void),72
4936,static void ram_puf_set_read_write_mode(uint32_t write_or_read),99
4937,void iid_puf_power_on(),127
4938,void iid_puf_power_off_and_discharge(),142
4939,void iid_puf_ram_setup(),155
4940,uint32_t iid_puf_read_word(uint32_t const addr),174
4941,uint32_t iid_puf_read_word(uint32_t const addr),185
4942,void iid_puf_read_ram(uint32_t * const buf),202
4943,"void iid_puf_read_ram_xor(uint32_t * const xor_input,uint32_t size,uint32_t * const output_data)",218
4944,Copyright (2017) Intel Corporation,3
4945,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4946,void alt_sdm_scr_cnoc_warm_reset(bool assert),54
4947,void alt_sdm_scr_fpga_core_rst_deassert(void),83
4948,void alt_sdm_scr_fpga_core_rst_assert(void),96
4949,uint32_t alt_sdm_scr_fpga2sdm_brdg_init(void),109
4950,uint32_t alt_sdm_scr_fpga2sdm_brdg_shutdown(uint32_t graceful),150
4951,uint32_t alt_sdm_scr_sdm2fpga_brdg_init(void),258
4952,uint32_t alt_sdm_scr_sdm2fpga_brdg_shutdown(void),292
4953,void alt_sdm_scr_nsp_dbg_enable(void),331
4954,void alt_sdm_scr_nsp_dbg_disable(void),350
4955,void alt_sdm_scr_nsp_dbg_disable_lock(void),366
4956,void alt_sdm_scr_cfg_dbg_enable(void),380
4957,void alt_sdm_scr_cfg_dbg_disable(void),394
4958,void alt_sdm_scr_cfg_dbg_disable_lock(void),409
4959,void alt_sdm_scr_sdm_bypass_enable(void),422
4960,void alt_sdm_scr_sdm_bypass_disable(void),437
4961,void alt_sdm_scr_sdm_bypass_disable_lock(void),451
4962,void alt_sdm_scr_sdm_cfg_bypass_enable(void),463
4963,void alt_sdm_scr_sdm_cfg_bypass_disable(void),476
4964,void alt_sdm_scr_sdm_cfg_bypass_disable_lock(void),490
4965,void alt_sdm_scr_hps_debug_enable(void),511
4966,void alt_sdm_scr_hps_debug_disable(void),563
4967,void alt_sdm_scr_hps_debug_disable_lock(void),613
4968,void alt_sdm_scr_cnt_bypass_enable(void),648
4969,void alt_sdm_scr_cnt_bypass_disable(void),667
4970,void alt_sdm_scr_cnt_bypass_disable_lock(void),687
4971,Copyright (2017) Intel Corporation,3
4972,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4973,alt_sdm_sha_ram_region() function which uses the full input path to perform a SHA operation,64
4974,"controls, SHA configuration(eg: 256, 384, and 512 bit), enable/disable SHA, SHA read/compare,",66
4975,void alt_sdm_sha_init(void),83
4976,Optionally the caller can set interrupt delay using the @ref ALT_SDM_SHA_MODE_DELAY_COUNT(),126
4977,void alt_sdm_sha_enable(uint32_t mode),136
4978,void alt_sdm_sha_disable(void),156
4979,void alt_sdm_sha_last(void),168
4980,uint32_t alt_sdm_sha_csr_lastblk_get(void),179
4981,void alt_sdm_sha_int_clear(uint32_t mask),200
4982,void alt_sdm_sha_int_enable(uint32_t mask),220
4983,void alt_sdm_sha_int_disable(uint32_t mask),240
4984,if(status == ALT_SDM_SHA_INT_FINAL),254
4985,uint32_t alt_sdm_sha_int_status(void),262
4986,if(status == ALT_SDM_SHA_INT_FINAL),274
4987,uint32_t alt_sdm_sha_int_status_unmasked(void),282
4988,parameter. This call only performs the calculation and must be followed by alt_sdm_sha_read(),302
4989,"sdm_return_t alt_sdm_sha_ram_region(uint32_t *p_data, uint32_t size_bytes, uint32_t sha_type)",314
4990,uint32_t switch_word_endianess(const uint32_t num),439
4991,"sdm_return_t alt_sdm_sha_sw_finalized(uint32_t * const msg,",490
4992,"void alt_sdm_sha_read(uint32_t *hash, uint32_t size)",860
4993,"sdm_return_t alt_sdm_sha_compare(const uint32_t *data, uint32_t size)",901
4994,Copyright (2017) Intel Corporation,3
4995,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
4996,"void cmf_sdm_efuse_read_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",129
4997,"sdm_return_t cmf_sdm_efuse_write_non_jtag_range_check_range(ALT_SDM_MBOX_CLIENT_t client, uint32_t bank, uint32_t start_row, uint32_t total_num_rows)",197
4998,"STATIC void cmf_sdm_efuse_write_common_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf, uint32_t is_virtual_write)",267
4999,"void cmf_sdm_efuse_write_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",356
5000,"void cmf_sdm_efuse_virtual_write_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",380
5001,"void cmf_sdm_efuse_user_pubkey_program_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",407
5002,"void cmf_sdm_efuse_user_crc_program_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",546
5003,"void cmf_sdm_efuse_reload_cache_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",631
5004,"void cmf_sdm_efuse_write_disable_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",685
5005,"void cmf_sdm_efuse_status_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",738
5006,"void cmf_sdm_efuse_blow_eng_fuse_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",800
5007,"void cmf_sdm_efuse_zero_check_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",899
5008,Copyright (2018) Intel Corporation,3
5009,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5010,void alt_sdm_mbox_fpga_clear(uint32_t base),52
5011,void alt_sdm_mbox_fpga_gpo_write(uint32_t value),87
5012,Copyright (2017) Intel Corporation,3
5013,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5014,"void cmf_efuse_field_init(cmf_efuse_field_t *p_efuse_field, const uint32_t *p_start)",49
5015,"uint32_t cmf_efuse_get_field(cmf_efuse_field_t *p_efuse_field, uint32_t size)",66
5016,sdm_return_t cmf_efuse_get_chipid(uint32_t *p_data),98
5017,sdm_return_t cmf_efuse_get_ult(uint32_t *p_data),117
5018,sdm_return_t cmf_efuse_compare_ulthash(const uint32_t *p_data),136
5019,sdm_return_t cmf_efuse_get_ulthash(uint32_t *p_data),160
5020,uint32_t cmf_efuse_get_int_osc_trim(void),178
5021,uint32_t cmf_efuse_get_hps_int_osc_trim(void),188
5022,uint32_t cmf_efuse_get_intel_rf_1r1w(void),211
5023,uint32_t cmf_efuse_get_synopsys_sram_1rw(void),223
5024,uint32_t cmf_efuse_get_synopsys_rf_1rw(void),240
5025,uint32_t cmf_efuse_get_synopsys_hd_1r1w(void),250
5026,"sdm_return_t cmf_efuse_get_hps_mem_repair(uint32_t *p_data, uint32_t num_rows)",260
5027,"sdm_return_t cmf_efuse_get_lsm_mem_repair(uint32_t *p_data, uint32_t num_rows)",293
5028,"sdm_return_t cmf_efuse_get_crete_dd(uint32_t *p_data, uint32_t num_rows)",327
5029,uint32_t cmf_efuse_get_bg_trim(void),349
5030,uint32_t cmf_efuse_get_jtag_id(void),363
5031,sdm_return_t cmf_efuse_get_vid(uint32_t *p_data),408
5032,uint32_t cmf_efuse_get_vr_aux_trim(void),427
5033,uint32_t cmf_efuse_get_io_aux_trim(void),437
5034,uint32_t cmf_efuse_get_rma_counter_bit(void),447
5035,uint32_t cmf_efuse_get_vr_leaf_sector_trim(uint32_t sector),460
5036,uint32_t cmf_efuse_get_vr_leaf_ctrl_bf(void),487
5037,"sdm_return_t cmf_efuse_get_crete_location_info(uint8_t *p_data, uint32_t num_cretes)",500
5038,"sdm_return_t cmf_efuse_get_uib_location_info(uint8_t *p_data, uint32_t num_uib)",548
5039,@brief This functions gets the aib redundancy info from fuse bank given AIB index (from 0..5),571
5040,@param aib_pos is a the position of AIB as an index from (0...5),572
5041,"sdm_return_t cmf_efuse_get_aib_redundancy(uint8_t aib_pos, uint32_t *p_data)",576
5042,"sdm_return_t cmf_efuse_get_dts_trim(uint32_t * dts_caldataoffset,uint32_t * dts_caldataslope)",628
5043,"sdm_return_t cmf_efuse_get_vadc_trim(uint32_t * vadc_rvsvcmtrim, uint32_t * vadc_rvsreftrim, uint32_t * vadc_rvsibiasstg1, uint32_t * vadc_rvsibiasstg23,uint32_t * vadc_rvsibiasvrefbuf,uint32_t * vadc_rvscompdlyctrl)",658
5044,"sdm_return_t cmf_efuse_get_bad_sector_rows(uint8_t *p_rows, uint32_t total_rows)",705
5045,bool is_production_fuse_blown(void),743
5046,bool is_untested_fuse_blown(void),770
5047,bool is_no_sgx_fuse_blown(void),797
5048,bool is_engineering_fuse_blown(void),821
5049,bool is_user_root_pubkey_blown(void),843
5050,bool is_jtag_disable_fuse_blown(void),868
5051,bool is_key_prog_start_fuse_blown(void),890
5052,bool is_key_prog_end_fuse_blown(void),912
5053,uint32_t cmf_efuse_get_security_version(void),934
5054,bool is_hps_jtag_disable_fuse_blown(void),951
5055,sdm_return_t cmf_efuse_get_force_pki_slct(cmf_efuse_force_pki_slct_t *p_data),977
5056,bool is_force_pki_slct_blown(void),1044
5057,bool is_joint_cmf_pka_blown(void),1071
5058,bool is_puf_license_reg_fuse_blown(void),1095
5059,bool is_user_iid_puf_enroll_disable_fuse_blown(void),1119
5060,"sdm_return_t cmf_efuse_get_public_key(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct, uint32_t msw_only)",1147
5061,"uint32_t cmf_efuse_get_key_cancellation(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct)",1217
5062,"sdm_return_t cmf_efuse_get_owned_constant_fuses(uint32_t *p_data, uint32_t num_rows,bool use_pubkey_hash)",1267
5063,"sdm_return_t cmf_efuse_get_silicon_unique_data_hash(uint32_t *efuse_hash, uint32_t size, const void *const label,const uint32_t label_length,bool use_pubkey_hash, iid_puf_type_t iid_puf_type)",1319
5064,Local defines for the altera_sdm_efuse_eng_cert_zero_check_policy() function.,1447
5065,sdm_return_t cmf_efuse_policy_eng_zero_check(void),1469
5066,"static uint32_t rotate_right_32(uint32_t value, uint32_t shift_amount)",1502
5067,"static uint32_t rotate_left_32(uint32_t value, uint32_t shift_amount)",1516
5068,uint32_t cmf_efuse_get_oldest_working_psg_key_id(void),1527
5069,uint32_t cmf_efuse_get_most_significant_cancelled_key_id(uint32_t *p_data),1604
5070,"sdm_return_t cmf_efuse_generate_key_cancel_bitmask(uint32_t *p_data, uint32_t key_id)",1668
5071,bool is_intel_signing_key_cancelled(uint32_t keyid),1693
5072,bool is_intel_puf_enroll_fuse_blown(void),1728
5073,uint32_t cmf_efuse_get_key_disable_value(cmf_efuse_aes_root_key_disable_slct_t key),1757
5074,"*     eSRAM repair fuses                    Read from BANK0, WORD34, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1831
5075,"*     eSRAM repair fuses                    Read from BANK0, WORD35, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1833
5076,"*     eSRAM repair fuses                    Read from BANK0, WORD36, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1835
5077,"*     eSRAM repair fuses                    Read from BANK0, WORD37, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1837
5078,"* eSRAM repair fuses                    Read from BANK0, WORD38, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1839
5079,"*     eSRAM repair fuses                    Read from BANK0, WORD39, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1841
5080,"*     eSRAM repair fuses                    Read from BANK0, WORD40, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1843
5081,"*     eSRAM repair fuses                    Read from BANK0, WORD41, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1845
5082,"*     eSRAM repair fuses                    Read from BANK0, WORD42, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1847
5083,"*     eSRAM repair fuses                    Read from BANK0, WORD43, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1849
5084,"*     eSRAM repair fuses                    Read from BANK0, WORD44, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1851
5085,"*     eSRAM repair fuses                    Read from BANK0, WORD45, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1853
5086,"*     eSRAM repair fuses                    Read from BANK0, WORD46, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1855
5087,"*     [21:0]  :  eSRAM repair fuses        Read from BANK0, WORD47, #Bits22    RSH0          -> MASK 0x003FFFFF (0,21)",1857
5088,"*     [31:22] :  HBMC RF Config            Read from BANK0, WORD0,  #Bits10    RSH22          -> MASK 0xFFC00000 (31,22)",1858
5089,"*     [31:0]  :  HBMC RF repair fuses        Read from BANK0, WORD62, #Bits31    RSH0          -> MASK 0xFFFFFFFF (0,31)",1860
5090,"*     [17:0]  :  HBMC RF repair fuses        Read from BANK0, WORD63, #Bits18    RSH0          -> MASK 0x0007FFFF (0,17)",1862
5091,"*     [23:18] :  Adj row redundancy        Read from BANK2, WORD63, #Bits06    RSH17          -> MASK 0x00FC0000 (18,23)",1863
5092,*     [31:24] :  padding of zero            Read from BANKFF    (PAD Zero),1864
5093,"*     [18:0]  :  eSRAM SRAM type config    Read from BANK2, WORD58, #Bits19    RSH0          -> MASK 0x00FC0000 (18,23)",1866
5094,@param uib_index UIB index to return fuse data for. Can be 0 (UIB Bottom) or 1 (UIB Top),1903
5095,"sdm_return_t cmf_efuse_get_uib_redundancy(uint32_t uib_index, uint32_t *p_data)",1907
5096,"sdm_return_t cmf_efuse_get_dib_redundancy(uint32_t dib_index, uint32_t *p_data)",2051
5097,Copyright (2017) Intel Corporation,3
5098,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5099,static void cmf_gpio_timer_start(void),92
5100,static void cmf_gpio_timer_stop(void),115
5101,static void cmf_gpio_rising_edge(uint32_t pin_mask),136
5102,static void cmf_gpio_falling_edge(uint32_t pin_mask),162
5103,call once per clocking interval that was provided to the cmf_gpio_init() function. This,182
5104,static void cmf_gpio_timer_isr(void * unused),190
5105,static void cmf_gpio_isr(void * unused),351
5106,"int32_t cmf_gpio_init(const uint32_t *p_pins, uint32_t size, uint32_t interval)",383
5107,passed into the cmf_gpio_init() function.,441
5108,cmf_gpio_event_t cmf_gpio_get(uint32_t pin),445
5109,Restart monitoring the GPIOs after a call to cmf_gpio_stop() was made. It is not necessary to call,478
5110,this function after cmf_gpio_init() since this call automatically starts monitoring the GPIOs.,479
5111,void cmf_gpio_start(void),483
5112,Stop monitoring the GPIOs until a call to cmf_gpio_start() is made again.,500
5113,void cmf_gpio_stop(void),504
5114,Copyright (2018) Intel Corporation,3
5115,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5116,"sdm_return_t puf_enroll_efuse(bool write_real_efuse, cmf_mpi_t * p_efuse_data)",60
5117,static sdm_return_t allow_puf_enrollment(bool write_real_efuse),191
5118,Copyright (2018) Intel Corporation,3
5119,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5120,uint32_t sdm_hal_cnoc_input_avst_mode(void),40
5121,void sdm_hal_cnoc_input_drop_requested_beats(uint8_t req_beats),51
5122,Copyright (2017) Intel Corporation,3
5123,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5124,"uint32_t bbram_write_aes_gp_regs(bbram_regs_t bbram_register, uint32_t high_dwdata, uint32_t low_dwdata, bool key_flip_bit)",102
5125,uint32_t bbram_read_gp_register(),183
5126,uint32_t bbram_key_clean(),225
5127,uint32_t bbram_read_testpor_reg(),289
5128,uint32_t bbram_write_testpor_reg(uint32_t testpor_reg_val),313
5129,uint32_t bbram_read_key(bbram_regs_t bbram_register),352
5130,STATIC void gen_one_bbram_clock(),392
5131,static void __inline__ bbram_clken(),406
5132,static void __inline__ bbram_source_select(),415
5133,static void __inline__ bbram_init(),424
5134,static void __inline__ bbram_clkgate(),439
5135,STATIC void bbram_unlock_code(),453
5136,STATIC void bbram_regs_clean(),473
5137,"uint32_t bbram_write_aes_gp_regs(bbram_regs_t bbram_register, uint32_t high_dwdata, uint32_t low_dwdata, bool key_flip_bit)",496
5138,uint32_t bbram_read_gp_register(),500
5139,uint32_t bbram_key_clean(),504
5140,uint32_t bbram_read_testpor_reg(),508
5141,uint32_t bbram_write_testpor_reg(uint32_t testpor_reg_val),512
5142,uint32_t bbram_read_key(bbram_regs_t bbram_register),516
5143,void setup_bbram_testpor(uint32_t value),520
5144,Copyright (2017) Intel Corporation,3
5145,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5146,The defines used with the alt_sdm_jtag_clk_gate_set() function.,43
5147,void alt_sdm_jtag_usercode_set(uint32_t usercode),65
5148,uint32_t alt_sdm_jtag_id_get(void),77
5149,uint32_t alt_sdm_jtag_fifo_flush(void),89
5150,uint32_t alt_sdm_jtag_prg_fifo_status(void),121
5151,void alt_sdm_jtag_int_clear(uint32_t mask),142
5152,void alt_sdm_jtag_int_enable(uint32_t mask),165
5153,void alt_sdm_jtag_int_disable(uint32_t mask),188
5154,uint32_t alt_sdm_jtag_int_status(void),210
5155,static void alt_sdm_jtag_clk_gate_set(uint32_t config),231
5156,void alt_sdm_jtag_master_select(alt_sdm_jtag_master_select_t select),253
5157,void alt_sdm_jtag_init(void),274
5158,void alt_sdm_jtag_disable_main_int(void),306
5159,uint32_t alt_sdm_jtag_get_cmdword_info(void),317
5160,uint32_t alt_sdm_jtag_get_cmdword_payload(void),327
5161,void alt_sdm_jtag_set_jtag_cmd_watermark(uint32_t wmark),337
5162,uint32_t alt_sdm_jtag_rsp_fifo_stat(void),348
5163,uint32_t is_jtag_rsp_fifo_full(void),358
5164,void alt_sdm_jtag_rsp_fifo_normal_word(uint32_t val),368
5165,void alt_sdm_jtag_rsp_fifo_sync_word(uint32_t val),378
5166,uint32_t alt_sdm_jtag_get_rsp_fifo_fill_level(void),387
5167,uint32_t alt_sdm_jtag_get_jtag_id_code_ctl(void),396
5168,uint32_t alt_sdm_jtag_get_jtag_id_subdev_code_ctl(void),405
5169,uint32_t alt_sdm_jtag_get_usercode(void),414
5170,uint32_t alt_sdm_jtag_get_fifo_clr_status(void),423
5171,void alt_sdm_jtag_set_fifo_clr(uint32_t val),433
5172,void alt_sdm_jtag_clear_program_fifo(void),442
5173,void alt_sdm_jtag_bootstatus_set(uint32_t error_code),470
5174,Copyright (2017) Intel Corporation,3
5175,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5176,void alt_sdm_mbox_init(void),49
5177,void alt_sdm_mbox_stream_config(uint32_t mode),95
5178,void alt_sdm_mbox_stream_int_clear(uint32_t mask),114
5179,void alt_sdm_mbox_int_clear(uint32_t mask),125
5180,void alt_sdm_mbox_stream_int_enable(uint32_t mask),146
5181,void alt_sdm_mbox_stream_int_disable(uint32_t mask),167
5182,void alt_sdm_mbox_int_disable(uint32_t mask),177
5183,void alt_mbox_flash_stream_init(void),194
5184,"void populate_response_buf(uint32_t *resp_buf, ALT_SDM_MBOX_RESP_CODE code, uint32_t len)",212
5185,"static uint32_t iid_puf_ram_bias_check(uint32_t const iid_puf_bias_lb,",73
5186,static uint32_t iid_puf_ram_address_line_check(),182
5187,static uint32_t count_bits(uint32_t word),234
5188,"static uint32_t iid_puf_ram_stability_check(uint32_t const num_iterations,uint32_t const iid_puf_stability_mismatch_max)",254
5189,"uint32_t iid_puf_ram_test(uint32_t const iid_puf_bias_lb, uint32_t const iid_puf_bias_ub,",328
5190,Copyright (2017) Intel Corporation,3
5191,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5192,uint32_t alt_sdm_qspi_read_id(),234
5193,"sdm_return_t alt_qspi_read(void * dst, uint32_t src, uint32_t size)",273
5194,"sdm_return_t alt_qspi_indirect_read_start(const uint32_t flash_addr,",375
5195,"sdm_return_t alt_qspi_indirect_write_start(const uint32_t flash_addr, const uint32_t num_bytes)",452
5196,"sdm_return_t alt_qspi_write(uint32_t dst, const void * src, uint32_t size)",514
5197,sdm_return_t alt_qspi_flash_wren(void),608
5198,"sdm_return_t alt_qspi_device_config_flash(uint32_t opcode, uint32_t timeout)",613
5199,sdm_return_t alt_qspi_stig_cmd(ALT_QSPI_STIG_CONFIG_t *p_stig_cmd),630
5200,"sdm_return_t alt_qspi_erase(uint32_t address, uint32_t size)",744
5201,void perform_qspi_calibration(uint32_t baudrate),832
5202,sdm_return_t alt_qspi_init(uint32_t nconfigTriggered),852
5203,uint32_t get_qspi_device_size(void),976
5204,flash_controller_mode_t get_qspi_controller_mode(void),981
5205,sdm_return_t alt_qspi_update_cs_and_config(uint32_t cs),989
5206,static sdm_return_t alt_qspi_reset_flash_device_foolproof(void),1031
5207,void prepare_qspi_for_cmf_transition(),1079
5208,sdm_return_t reset_qspi_controller_and_flash(void),1091
5209,void alt_qspi_mbox_hps_release(void),1161
5210,void alt_qspi_mbox_fpga_release(void),1187
5211,bool alt_qspi_mbox_isbusy(void),1211
5212,void cleanup_qspi(),1243
5213,bool does_client_have_exclusive_qspi_access(uint32_t requestID),1316
5214,void get_exclusive_access_to_qspi(uint32_t requestID),1328
5215,bool is_qspi_mbox_interface_busy(void),1336
5216,void reset_qspi_boot_number(void),1341
5217,void release_qspi_ownership(void),1346
5218,void qspi_hps_in_use(bool val),1352
5219,void qspi_fpga_in_use(bool val),1358
5220,void set_qspi_error_status(uint32_t val),1364
5221,uint32_t get_qspi_error_status(void),1369
5222,uint32_t get_qspi_flash_size(void),1375
5223,uint32_t get_qspi_flash_die_size(void),1380
5224,bool is_qspi_initialized(void),1385
5225,void set_is_qspi_initialized_flag(bool val),1390
5226,static void qspi_table_default_init(void),1403
5227,"static sdm_return_t alt_qspi_write_helper(uint32_t dst, const void * src, uint32_t size)",1448
5228,"static sdm_return_t alt_qspi_stig_cmd_helper(uint32_t reg_value, uint32_t timeout)",1503
5229,static void alt_qspi_find_what_flash_device(uint32_t rdid),1533
5230,static bool is_qspi_clock_ok(),1600
5231,static void switch_flash_to_x4(),1653
5232,static sdm_return_t handle_non_micron_flash(),1698
5233,static sdm_return_t parse_sfdp_table(),1742
5234,static void disable_fpga_access_to_qspi(),1924
5235,static void alt_qspi_setup_controller_regs(),1932
5236,static void alt_qspi_enter_4byte_mode(void),1980
5237,static void setup_qspi_controller_in_good_state(),2013
5238,static sdm_return_t alt_qspi_update_config_from_table(uint32_t idx),2078
5239,static void delay_cpu_ticks(uint32_t val),2188
5240,static sdm_return_t cmf_qspi_flash_wait_for_idle(uint32_t timeout),2202
5241,"static sdm_return_t alt_qspi_read_register(uint8_t opcode, uint8_t * reg)",2254
5242,static flash_controller_mode_t qspi_controller_in_x1_x4(),2276
5243,static qspi_controller_state_t is_qspi_controller_in_good_state(),2310
5244,sdm_return_t alt_qspi_reset_flash_device(void),2366
5245,"static sdm_return_t alt_qspi_erase_helper(uint32_t address, uint32_t idx)",2398
5246,"static sdm_return_t alt_qspi_query_erase_span(uint32_t address, uint32_t size, uint32_t * actual_address, uint32_t * actual_size)",2452
5247,"static void alt_qspi_indirect_write_start_bank(uint32_t flash_addr, uint32_t num_bytes)",2490
5248,"static void alt_qspi_indirect_read_start_bank(uint32_t flash_addr, uint32_t num_bytes)",2499
5249,"static sdm_return_t alt_qspi_read_helper(void * dst, uint32_t src, uint32_t size)",2507
5250,"static sdm_return_t alt_qspi_chip_select_config_set(const uint32_t cs, const ALT_QSPI_CS_MODE_t cs_mode)",2570
5251,"static sdm_return_t alt_sdm_qspi_calibration(calib_flash_id_t device_id, flash_controller_mode_t mode, uint32_t calib_baudrate, uint32_t (*read_id_func_ptr)(void))",2600
5252,Copyright (2017) Intel Corporation,3
5253,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5254,@return Returns true if both 'ptr_to_chk' and quantity ('ptr_to_chk' + SDM_INBUF_PACKET_SIZE bytes) lie within the,65
5255,bool action_data_ptr_is_valid(const uint32_t *ptr_to_chk),68
5256,@brief This function should be called once before using any action_data_alloc() or,81
5257,void action_data_init(void),85
5258,"uint32_t *action_data_alloc_entry(uint32_t index, action_data_owner_t owner)",106
5259,uint32_t *action_data_alloc(action_data_owner_t owner),133
5260,int32_t action_data_ref_add(uint32_t *p_src),163
5261,int32_t action_data_ref_count(uint32_t *p_data_in),221
5262,void action_data_free(uint32_t *p_free),267
5263,"@brief  This function wraps action_data_free(), but memsets the buffer to zero before doing so.",316
5264,void action_data_free_and_wipe(uint32_t* p_free),322
5265,@brief This function releases all action data blocks (regardless of the ref count),337
5266,void action_data_release_owned(action_data_owner_t owner),342
5267,void sdm_register_bootrom_isr(exception_isr_t isr),368
5268,int32_t alt_sdm_system_init(void),384
5269,"void sdm_cnoc_timeout_init(uint32_t timeout_value, sdm_cnoc_timeout_t *timeout)",403
5270,bool sdm_cnoc_timeout(const sdm_cnoc_timeout_t *timeout),433
5271,void sdm_cnoc_delay(uint32_t timeout_value),480
5272,uint32_t* sdm_get_action_data_address(void),493
5273,Copyright (2017) Intel Corporation,3
5274,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5275,We need double dimensional array to hold values for different channels or programming (HPS/FPGA/JTAG/SDM) */,48
5276,"void alt_sdm_cfg_status_reconfig_set(uint8_t mbox_id, ALT_SDM_MBOX_CLIENT_t mbox_client)",71
5277,void alt_sdm_cfg_status_reconfig(bool enable),93
5278,bool alt_sdm_cfg_status_get_reconfig_flag(),102
5279,void alt_sdm_cfg_status_init(void),110
5280,"bool is_valid_recfg_status_avail(ALT_SDM_MBOX_CLIENT_t mbox_client, uint32_t expected_id)",142
5281,"uint32_t alt_sdm_reconfig_status_get(ALT_SDM_MBOX_CLIENT_t mbox_client, uint32_t expected_id, uint32_t index)",161
5282,void alt_sdm_cfg_status_set_state(uint32_t val),181
5283,uint32_t alt_sdm_cfg_status_get_state(void),191
5284,void alt_sdm_cfg_status_set_version(uint32_t val),201
5285,uint32_t alt_sdm_cfg_status_get_version(void),213
5286,void alt_sdm_cfg_status_set_softstat(uint32_t val),223
5287,uint32_t alt_sdm_cfg_status_get_softstat(void),233
5288,void alt_sdm_cfg_status_set_cfgpos(uint32_t val),243
5289,uint32_t alt_sdm_cfg_status_get_cfgpos(void),253
5290,void alt_sdm_cfg_status_set_errdetail(uint32_t val),263
5291,uint32_t alt_sdm_cfg_status_get_errdetail(void),273
5292,void alt_sdm_config_status_reset(uint32_t cfgstat_state),284
5293,"void alt_sdm_config_status_update(uint32_t cfgstat_state, uint32_t flash_idx, uint32_t cfgpos, uint32_t errdetail)",296
5294,"static void alt_sdm_cfg_status_set(uint32_t value, uint32_t index)",316
5295,The idea here is that multiple channels can request reconfig (HPS/FPGA/AVST/JTAG) and when we have a reconfig_status request we send the,330
5296,5-CNOCADDR(Err Details),342
5297,"static void alt_sdm_reconfig_status_set(uint32_t value, uint32_t index)",346
5298,Copyright (2017) Intel Corporation,3
5299,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5300,void alt_sdm_jtag_isr_init(uint32_t wmark),80
5301,static void alt_sdm_jtag_isr(void* unused),119
5302,"void alt_sdm_jtag_send_resp(uint32_t *resp, uint32_t *big_buf)",466
5303,"sdm_return_t alt_sdm_jtag_send_resp_dfx_buffer(const uint32_t header, const uint32_t * const data_src, uint32_t word_count, bool * const g_mbox_skip_response)",595
5304,static void alt_sdm_mbox_jtag_wait_for_rsp_fifo(void),670
5305,"@brief OSTimeDly wrapper. In OS environments, calls OSTimeDly() for 'dly' ticks. No-op in non-os environments.",694
5306,static void alt_sdm_mbox_jtag_sleep(uint32_t dly),699
5307,static bool does_command_need_bigbuf(uint32_t opcode),731
5308,Copyright (2017) Intel Corporation,3
5309,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5310,static bool alt_sdm_mbox_msg_ptr_is_valid(const mbox_msg_t * const ptr_to_chk),171
5311,static bool alt_sdm_mbox_is_config_busy(void){,188
5312,@note  see note above alt_sdm_mbox_reformat_input(),220
5313,"static sdm_return_t alt_sdm_mbox_reformat_output(mbox_msg_t *msg, uint32_t transition_index)",225
5314,"static sdm_return_t alt_sdm_mbox_reformat_input(mbox_msg_t *msg, uint32_t transition_index)",353
5315,"static sdm_return_t alt_sdm_mbox_check_reformat_cmd_data(ALT_SDM_MBOX_CMD code, mbox_msg_t *msg)",499
5316,"static sdm_return_t alt_sdm_mbox_check_reformat_rsp_data(ALT_SDM_MBOX_CMD code, mbox_msg_t *msg)",522
5317,void alt_sdm_mbox_command_handler(mbox_msg_t *pmsg),546
5318,mbox_msg_t * alt_sdm_mbox_message_alloc(ALT_SDM_MBOX_CLIENT_t client),733
5319,void alt_sdm_mbox_message_free(mbox_msg_t * pmsg),765
5320,mbox_msg_t * alt_sdm_mbox_message_get(void),839
5321,"int32_t alt_sdm_mbox_message_init(mbox_cmd_t const * const mbox_commands, uint32_t num_commands)",869
5322,int32_t alt_sdm_mbox_message_put(mbox_msg_t * message),923
5323,uint32_t alt_sdm_get_mbox_response(),978
5324,void alt_sdm_set_mbox_response(uint32_t resp),988
5325,void alt_sdm_mbox_send_response(mbox_msg_t *pmsg),1005
5326,static void alt_sdm_mbox_message_queue_init(message_queue_t *p_queue),1050
5327,"static int32_t alt_sdm_mbox_message_queue_fifo_add(message_queue_t *p_queue, mbox_msg_t *p_msg)",1065
5328,"static int32_t alt_sdm_mbox_message_queue_lifo_add(message_queue_t *p_queue, mbox_msg_t *p_msg)",1102
5329,static mbox_msg_t * alt_sdm_mbox_message_queue_get(message_queue_t *p_queue),1142
5330,@brief query whether or not the device is a config state (non-os case),1171
5331,static bool alt_sdm_mbox_no_os_config_active_get(void),1174
5332,void alt_sdm_mbox_no_os_config_active_set(bool new_val),1184
5333,"uint32_t get_aes_output(uint32_t *data,uint32_t data_size_words)",77
5334,"uint32_t aes_ctr_crypto(uint32_t * data, uint32_t data_size_words, uint32_t *iv, uint32_t iv_size_words, bool is_encrypt)",81
5335,"void alt_sdm_mbox_efuse_aes_program_hdlr(ALT_SDM_MBOX_CLIENT_t client,",95
5336,Copyright (2017) Intel Corporation,3
5337,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5338,"void alt_sdm_mbox_get_chipid_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",44
5339,Copyright (2020) Intel Corporation,3
5340,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5341,"void alt_sdm_mbox_usr_defined_fuses_program(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",66
5342,"void alt_sdm_mbox_usr_defined_fuses_read(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",200
5343,Copyright (2017) Intel Corporation,3
5344,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5345,"void alt_sdm_mbox_usr_security_option_program(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",56
5346,Copyright (2017) Intel Corporation,3
5347,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5348,sdm_return_t get_sfdp_signature(uint32_t *ret_value),71
5349,uint32_t sfdp_signature_for_calib(),78
5350,sdm_return_t get_sfdp_num_param_header(uint32_t *sfdp_number_of_param_hdr),85
5351,sdm_return_t get_sfdp_header0_id(uint32_t *sfdp_header0_id),92
5352,sdm_return_t get_sfdp_hdr0_table_pointer(uint32_t *sfdp_hdr0_table_pointer),112
5353,sdm_return_t get_sfdp_flash_size(uint32_t *sfdp_flash_size),130
5354,sdm_return_t get_sfdp_addr_bytes(uint32_t *sfdp_addr_bytes),138
5355,"sdm_return_t get_sfdp_erase_table(uint32_t *sfdp_erase_size, uint32_t *sfdp_erase_opcode, uint32_t *num_ent)",147
5356,sdm_return_t get_4_4_4_supported(uint32_t *sfdp_4_4_4_supported),221
5357,sdm_return_t get_4_4_4_fast_read_dummy_clock(uint32_t *sfdp_4_4_4_fast_read_dummy_clock),233
5358,sdm_return_t get_4_4_4_fast_read_opcode(uint32_t *sfdp_4_4_4_supported),242
5359,sdm_return_t get_sfdp_page_size(uint32_t *sfdp_page_size),250
5360,sdm_return_t get_status_busy_register_polling(uint32_t *sfdp_status_busy_register_polling),281
5361,sdm_return_t get_sfdp_4_4_4_enable_sequence(uint32_t *sfdp_4_4_4_enable_sequence),305
5362,sdm_return_t get_sfdp_enter_4_byte_addr(uint32_t *sfdp_enter_4_byte_addr),329
5363,uint32_t check_for_valid_sfdp_signature(uint32_t sfdp_read_sign),362
5364,sdm_return_t parse_and_setup_qe(uint32_t qe_en_seq),374
5365,sdm_return_t parse_and_setup_4_byte_addr(uint32_t sfdp_enter_4_byte_addr),456
5366,sdm_return_t compute_flash_size_in_bytes(uint32_t *sfdp_data),505
5367,"sdm_return_t sort_erase_table(uint32_t *sfdp_erase_size, uint32_t *sfdp_erase_opcode, uint8_t max_ent)",549
5368,"STATIC sdm_return_t get_sfdp_data(uint32_t sfdp_addr, uint32_t sfdp_data_bytes, uint32_t *ret_value)",587
5369,STATIC sdm_return_t get_sfdp_hdr0_length(uint32_t *sfdp_hdr0_length),645
5370,"STATIC void swap(uint32_t *xp, uint32_t *yp)",652
5371,Copyright (2018) Intel Corporation,3
5372,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5373,static void save_critical_registers(sr_struct_t *sr_struct_ptr),49
5374,static void restore_critical_registers(sr_struct_t *sr_struct_ptr),66
5375,static uint32_t ecies_swap_endian(const uint32_t num),81
5376,"static bool ecies_swizzle_data_block(const uint32_t *const p_source,",101
5377,1. The application will call \b generate_kdf_label_empty_context() to generate a label.,141
5378,will be passed throught he HMAC engine. The user can pass in a ASCII string(byte array) of,144
5379,2. The Application will then call the \b hmac_key_derivation() function and pass in the context label,147
5380,it just generated. It also have to call the \b ukv_put_key() function to put a key in the UKV(user key vault) or,148
5381,Also the hmac_key_derivation() does not do any key checks.,151
5382,\b is_key_valid() function. if the key is invalid the application must modify the counter value and,154
5383,0x00    |  32   |          0                  |     Counter Value (start with 0),180
5384,"uint32_t generate_kdf_label_empty_context(  uint32_t *hmac_data_value,",188
5385,"static int32_t handle_return(uint32_t error_code, sr_struct_t *sr_values)",303
5386,not store the data in the cpu buffer passed in (sha_output). The data in that case is expected to be stored in the UKV.,334
5387,"uint32_t hmac_key_derivation(   uint32_t base_key_slot,",343
5388,"uint32_t hmac_key_derivation(   uint32_t base_key_slot,",582
5389,@param  key_size_word is the size of the array in int (words).,895
5390,for SHA 256 the value of n (order n of G) is,903
5391,for SHA 384 the value of n (order n of G) is,905
5392,"bool is_key_valid(const uint32_t *key_val, uint32_t key_size_word)",916
5393,Copyright (2018) Intel Corporation,3
5394,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5395,"static uint32_t alt_qspi_ns_to_multiplier(int ns, int mhz)",52
5396,bool is_qspi_indirect_read_complete(void),61
5397,void cmf_qspi_indirect_rd_clear_complete(void),80
5398,bool is_qspi_indrd_read_in_progress(void),100
5399,bool cmf_qspi_is_idle(void),114
5400,bool cmf_qspi_is_stig_interface_idle(void),125
5401,void cmf_qspi_wait_for_qspi_idle(void),143
5402,void cmf_qspi_wait_for_qspi_stig_idle(void),177
5403,void cmf_qspi_controller_reset(reset_val_t reset),213
5404,void cmf_qspi_ecc_diag_reset(reset_val_t reset),234
5405,bool cmf_qspi_is_controller_in_reset(),252
5406,void cmf_qspi_stop_inprogress_rd_wr(),269
5407,void cmf_qspi_clear_disable_interrupts(),291
5408,void cmf_qspi_set_baud_divisor(const uint32_t div),306
5409,sdm_return_t cmf_qspi_sram_partition_set(const uint32_t read_part_size),323
5410,bool cmf_qspi_is_indirect_write_complete(void),341
5411,bool cmf_qspi_indirect_write_clear_complete(void),354
5412,sdm_return_t cmf_qspi_set_indirect_write_watermark(const uint32_t watermark),376
5413,bool is_qspi_controller_enabled(void),394
5414,"void cmf_qspi_setup_cfg_reg(uint32_t clk_phase, uint32_t clk_pol, uint32_t baud_rate)",406
5415,"void cmf_qspi_setup_devrd_reg(uint32_t read_opcode,uint32_t inst_type, uint32_t addr_type, uint32_t read_type, uint32_t dummy_cycles)",420
5416,"void cmf_qspi_setup_devwr_reg(uint32_t write_opcode, uint32_t addr_type, uint32_t write_type, uint32_t dummy_cycles)",448
5417,void setDelayRegs(uint32_t new_desired_as_clk),487
5418,bool cmf_qspi_get_controller_status(void),615
5419,void cmf_qspi_set_controller_read_mode(uint32_t mode),645
5420,Copyright (2018) Intel Corporation,3
5421,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5422,uint32_t get_qspi_controller_clock(void),86
5423,void set_qspi_int_osc_val(),96
5424,qspi_clock_source_t get_qspi_clock_mode(void),121
5425,"void set_qspi_clock_mux(uint32_t bypass, uint32_t mux_5_to_1,uint32_t cnt)",149
5426,"sdm_return_t alt_qspi_change_qspi_freq(uint32_t req_as_clk, uint32_t extpll, uint32_t intosc)",190
5427,static void qspi_clock_intosc(uint32_t baud_divisor),344
5428,Copyright (2018) Intel Corporation,3
5429,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5430,"void alt_qspi_mbox_read_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",72
5431,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),199
5432,"void alt_qspi_mbox_open_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",203
5433,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),247
5434,"void alt_qspi_mbox_close_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",251
5435,"void alt_qspi_mbox_write_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",331
5436,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),451
5437,"void alt_qspi_mbox_erase_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",455
5438,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),538
5439,"void alt_qspi_mbox_send_dev_op_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",542
5440,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),641
5441,"void alt_qspi_mbox_write_dev_reg_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",645
5442,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),780
5443,"void alt_qspi_mbox_set_cs_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",784
5444,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),882
5445,"void alt_qspi_mbox_read_dev_reg_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",886
5446,@param big_buf is a pointer to a 4K buffer in RAm that contains additional data (if needed by the handler or future expansion),1041
5447,"void alt_qspi_mbox_direct_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1045
5448,Copyright (2018) Intel Corporation,3
5449,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5450,@brief  This function will enable All the RO's for TRNG(all 32 of them),91
5451,static __inline__ void trng_enable_all_ro(void),95
5452,@brief  This function will disable All the RO's for TRNG(all 32 of them),101
5453,static __inline__ void trng_disable_all_ro(void),105
5454,static __inline__ void trng_disable_fifo(void),115
5455,static __inline__ void trng_enable_fifo(void),125
5456,"static sdm_return_t handle_return(uint32_t error_code, sr_struct_t *sr_values)",140
5457,static sdm_return_t setup_hmac_for_trng_data(),159
5458,static void setup_input_buf_for_trng_data(void),222
5459,static void trng_status_set(cmf_trng_status_t new_val),267
5460,static sdm_return_t check_trng_status(void),285
5461,cmf_trng_status_t trng_status_get(void),346
5462,bool trng_random_number_gen_is_valid(),367
5463,bool is_trng_enabled_for_aes(),395
5464,void trng_disable(),414
5465,"sdm_return_t trng_enable(uint32_t longdelay, uint32_t sampledelay, uint32_t shortdelay, trng_dest_sel_t dest)",433
5466,"sdm_return_t trng_enable_private(uint32_t longdelay, uint32_t sampledelay, uint32_t shortdelay, trng_dest_sel_t dest)",457
5467,void save_critical_registers(sr_struct_t *sr_struct_ptr),530
5468,void restore_critical_registers(sr_struct_t *sr_struct_ptr),551
5469,"sdm_return_t generate_random_number(uint32_t *truncated_key, uint32_t truncated_key_size_w)",580
5470,"static sdm_return_t generate_random_number_private_fm(uint32_t *truncated_key, uint32_t truncated_key_size_words)",644
5471,"static sdm_return_t generate_random_number_private(uint32_t *truncated_key, uint32_t truncated_key_size_words)",693
5472,"sdm_return_t generate_random_number_using_drbg( cmf_mpi_t *const final_random_num_hmac_generated,uint32_t requested_security_strength,bool re_initialize)",839
5473,Copyright (2019) Intel Corporation,3
5474,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5475,@brief  This function will disable All the RO's for TRNG(all 32 of them),39
5476,static __inline__ void trng_disable_all_ro(void),43
5477,static __inline__ void trng_disable_fifo(void),53
5478,static __inline__ uint32_t get_trng_csr_value(void),63
5479,static __inline__ uint32_t get_trng_fifo_rand_value(void),73
5480,static __inline__ void pop_trng_fifo(void),83
5481,static sdm_return_t trng_init(void),93
5482,static sdm_return_t get_trng_rand_value(uint32_t *rand_value),140
5483,"uint32_t get_trng_sample(uint32_t *sample, uint32_t sample_size)",174
5484,"uint32_t fill_bias_bsc_count(uint32_t* sample,uint32_t sample_size,uint32_t * col_bias_count,uint32_t * col_bsc_count)",211
5485,"static uint32_t fill_bias_bsc_count(uint32_t* sample,uint32_t sample_size,uint32_t * col_bias_count,uint32_t * col_bsc_count)",213
5486,@brief  scc = ((n-1)count11 - count1^2)/((n-1)count1 - count1^2),263
5487,"static __inline__ uint32_t scc_calculation(uint32_t n, uint32_t count1, uint32_t count11)",269
5488,"uint32_t trng_test(uint32_t *trng_sample,uint32_t trng_sample_size,trng_test_results_t* results)",302
5489,"static void alt_sdm_mbox_trng_self_test_common( ALT_SDM_MBOX_CMD cmd_code,",388
5490,"void alt_sdm_mbox_trng_self_test_hdlr(ALT_SDM_MBOX_CLIENT_t client,",491
5491,"void alt_sdm_mbox_trng_customer_test_hdlr(ALT_SDM_MBOX_CLIENT_t client,",517
5492,Copyright (2017) Intel Corporation,3
5493,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5494,Functions in this module primarily enable transfer of keys from the User Key Vault (UKV) to Crypto hardware,50
5495,source. There is no support for firmware to read keys out of UKV into NSP RAM (hardware limitation).,52
5496,void ukv_init(void),60
5497,"uint32_t ukv_put_key(uint32_t key_src, uint32_t key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits)",80
5498,"uint32_t ukv_put_key_xor(uint32_t key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits)",494
5499,"uint32_t ukv_get_key(uint32_t key_dest, uint32_t key_slot, uint32_t key_size_bits, uint32_t top_half)",619
5500,uint32_t ukv_clear_key(uint32_t key_slot),826
5501,uint32_t ukv_clear_all_keys(void),838
5502,sdm_return_t ukv_clean_key_reg(void),862
5503,static bool metal_key_disabled_and_locked(void),900
5504,sdm_return_t metal_key_disable_and_lock(void),940
5505,"uint32_t ukv_clear_all_keys_except_key_slots(uint32_t * const key_slots, const uint32_t * const excepted_slots, uint32_t excepted_slots_len)",975
5506,"uint32_t ukv_clear_all_keys_except_key_slots(const uint32_t * const excepted_slots, uint32_t excepted_slots_len)",977
5507,Copyright (2017) Intel Corporation,3
5508,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5509,"static uint32_t fw_add_crc(uint32_t crc,const void * const iBuffer,const uint32_t num)",64
5510,"uint32_t fw_generate_crc(const void * buffer, const uint32_t size_in_words)",78
5511,Copyright (2018) Intel Corporation,3
5512,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5513,uint32_t sdm_env_mon_temp_get(void),43
5514,Copyright (2018) Intel Corporation,3
5515,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5516,uint32_t alt_scr_gpr_0_val_get(void),36
5517,uint32_t alt_scr_gpr_1_val_get(void),46
5518,void alt_scr_gpr_1_val_set(uint32_t v),56
5519,Copyright (2020) Intel Corporation,3
5520,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5521,@brief enum describing mailbox whitelist/blacklist (wlbl) state,39
5522,void sdm_mbox_hook_execute(ALT_SDM_MBOX_CMD cmd),77
5523,sdm_return_t sdm_mbox_hook_disable(sdm_mbox_hook_cb_t cb),110
5524,sdm_return_t sdm_mbox_hook_enable(sdm_mbox_hook_cb_t cb),137
5525,Copyright (2020) Intel Corporation,3
5526,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5527,@brief enum describing mailbox whitelist/blacklist (wlbl) state,46
5528,STATIC bool not_threadsafe_wlbl_is_cmd_runable(const ALT_SDM_MBOX_CMD code),89
5529,"STATIC sdm_return_t not_threadsafe_wlbl_enable(const sdm_mbox_wlbl_cmd_group_t *g, sdm_mbox_wlbl_state_t new_state)",150
5530,STATIC sdm_return_t not_threadsafe_wblist_disable(const sdm_mbox_wlbl_cmd_group_t *g),183
5531,bool sdm_mbox_wlbl_is_cmd_runable(const ALT_SDM_MBOX_CMD code),216
5532,sdm_return_t sdm_mbox_wblist_disable(const sdm_mbox_wlbl_cmd_group_t *g),235
5533,sdm_return_t sdm_mbox_wlbl_whitelist_cmds(const sdm_mbox_wlbl_cmd_group_t *g),254
5534,sdm_return_t sdm_mbox_wlbl_blacklist_cmds(const sdm_mbox_wlbl_cmd_group_t *g),273
5535,"return_t IidEntropyEncode(const uint8_t * const maskedPuf,",26
5536,"return_t IidErrorEncode(const uint8_t * const sEnl,",49
5537,"return_t IidEntropyExtractErrorDecode(const uint8_t * const maskedPuf,",78
5538,/* Encoding table (2 bits pairs):,26
5539,"void IidEntropyEncode32(const uint8_t * const code, uint8_t * const activationCode, uint16_t size)",36
5540,/* Extraction table (2 bit pairs):,79
5541,"void IidEntropyExtract32(const uint8_t * const activationCode, const uint8_t * const puf, uint8_t * const code, uint16_t size)",90
5542,/* log_alpha(i) == logtab256[i-1] (which is equal to logtab256[i] when 0x00 is added to the table) */,58
5543,/* get degree da of polynomial a(x) (la is length of array a[]) */,101
5544,"static PRE_INLINE void poly_deg(const uint8_t * const a,",102
5545,uint8_t gf256_inv(uint8_t a),109
5546,/* polynomial division (q[] and r[] should be arrays of length lengthPolynomA) */,116
5547,void Galois256PolynomialDivision(,117
5548,/* get degree da of polynomial a(x) (la is length of array a[]) */,179
5549,"static PRE_INLINE void poly_deg(const uint8_t * const a,",180
5550,uint8_t gf256_plog(uint8_t a),192
5551,void Galois256PolynomialAddition(,199
5552,void Galois256PolynomialMultiplication(,221
5553,"uint8_t Galois256PolynomialEvaluation(const uint8_t * const polynom, uint8_t lengthPolynom, uint8_t x)",256
5554,"uint8_t Galois256PolynomialDerivedEvaluation(const uint8_t * const polynom, uint8_t lengthPolynom, uint8_t x)",281
5555,* Sx[] is the syndrome polynomnial (S_1 + S_2.x) + S_3.x^2 + ...) of length 2*RS_t,38
5556,*  Omega(x) = S(x) * Lambda(x) (mod x^dr_thresh),40
5557,"/* real Chien search algo (also exhaustive, but less work/iteration, no explicit poly eval) */",45
5558,/* get degree da of polynomial a(x) (la is length of array a[]) */,56
5559,"static PRE_INLINE void poly_deg(const uint8_t * const a,",57
5560,"void IidReedSolomon48_32Encode(const uint8_t * const message, uint8_t * const codeword)",66
5561,"void IidReedSolomon48_32Decode(const uint8_t * const codeword, const uint8_t * const erasures, uint8_t * const message, uint8_t * errors_unerased)",106
5562,/* get degree da of polynomial a(x) (la is length of array a[]) */,236
5563,"static PRE_INLINE void poly_deg(const uint8_t * const a,",237
5564,"static void ReedSolomonSyndromes(const uint8_t * const symbols, uint8_t * const syndromes)",249
5565,"static int32_t Sugiyama(const uint8_t * const Sx, uint8_t dr_thresh, uint8_t * const om, uint8_t * const lam)",265
5566,"static uint8_t ChienSearch(const uint8_t * const gam, uint8_t * const roots)",353
5567,"static uint8_t Forney(const uint8_t * const om, const uint8_t * const lam, const uint8_t * const gam, const uint8_t * const erasures, const uint8_t * const roots, uint8_t rf, uint8_t * const e)",387
5568,"void IidSoftReedMuller1_7_Rep2Encode(const uint8_t * const messages, uint8_t * const codewords)",37
5569,"void IidSoftReedMuller1_7_Rep2Decode(const uint8_t * const codewords, uint8_t * const messages, uint8_t * const erasures, uint32_t * cumulative_hd)",90
5570,"static uint8_t decode(const uint8_t * const codeword, uint8_t * const message)",167
5571,return_t IidEnrollmentTest(const uint8_t * const activationCode),39
5572,static return_t IidActivationCodeHealthCheck(const uint8_t * const activationCode),60
5573,"return_t IidFEUPTest(const uint8_t * const activationCode, const uint8_t * const maskedPuf)",26
5574,return_t IidFCSTest(uint8_t unerased_errors),163
5575,return_t IidCDDTest(uint32_t cumulative_hd),185
5576,"return_t IidZNTest(const uint8_t * const activationCode, const uint8_t * const maskedPuf)",207
5577,"return_t IidDScore(uint32_t cumulative_hd, uint8_t unerased_errors, uint8_t *score)",259
5578,return_t IidProductionTest(const uint8_t * const puf),38
5579,static return_t IidSramHealthCheck(const uint8_t * const puf),59
5580,"void iid_memcpy32(void *dest, const void *source, uint32_t n)",17
5581,Copyright (2017-2018) Intel Corporation,3
5582,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5583,uint32_t cmf_authenticate_get_root_hash_id(),96
5584,bool cmf_authenticate_get_is_sec_owner(),103
5585,"@return: Returns CMF_AUTH_SUCCESS(0) if authentication is successful, ",128
5586,"uint32_t cmf_authenticate(const signature_descriptor_t *const p_signature_desc,",136
5587,"@return: Returns CMF_AUTH_SUCCESS(0) if certificate authentication is successful, ",280
5588,"uint32_t cmf_authenticate_cert(const signature_descriptor_t *const p_signature_desc,",288
5589,"@return: Returns CMF_AUTH_SUCCESS(0) if certificate authentication is successful, ",400
5590,"uint32_t cmf_authenticate_cmd_cert( const void     *const p_cmd_cert,",405
5591,"@return: Returns CMF_AUTH_SUCCESS(0) if certificate authentication is successful, ",567
5592,"uint32_t cmf_authenticate_data( const void     *const p_data,",570
5593,"@return: Returns CMF_AUTH_SUCCESS(0) if certificate authentication is successful, ",665
5594,"uint32_t cmf_verify_signature(  const void     *const p_data,",668
5595,void cmf_auth_context_reset(void),720
5596,"uint32_t cmf_auth_find_valid_keychain(const signature_descriptor_t *const p_signature_desc,",735
5597,"uint32_t cmf_auth_process_keychain(const void     *const p_data,",904
5598,"uint32_t cmf_auth_process_root_key_entry(const root_entry_t *const p_root_entry,",1175
5599,"uint32_t cmf_auth_process_multi_root_key_entry(const root_entry_t *const p_root_entry,",1343
5600,"uint32_t cmf_auth_process_public_key_entry(const pubkey_entry_t *const p_pubkey_entry,",1746
5601,"uint32_t cmf_auth_process_signed_data_entry(const signed_data_entry_t *const p_signed_data_entry,",1937
5602,"static uint32_t cmf_auth_get_word_msb(uint32_t *p_data, uint32_t n)",2059
5603,"static uint32_t cmf_auth_get_byte_msb(uint8_t *p_data, uint32_t n)",2083
5604,"static uint32_t cmf_auth_rotate_right(uint32_t n, uint32_t b)",2107
5605,"bool cmf_auth_key_cancel(const uint32_t cancellation,",2111
5606,"bool cmf_auth_key_cancel(const uint32_t cancellation,",2261
5607,"uint32_t cmf_auth_verify_signature(const cmf_auth_key_type_t    *const p_signing_pubkey,",2356
5608,Copyright (2017-2018) Intel Corporation,3
5609,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5610,void set_auth_is_engr_key(bool is_engr_key) {,64
5611,bool get_auth_is_engr_key() {,69
5612,"static uint32_t key_hash_compare(cmf_auth_hash_type_t rootkey_hash,",74
5613,"uint32_t verify_key(cmf_auth_hash_type_t rootkey_hash,",92
5614,"uint32_t verify_multi_key(const root_entry_t *const p_root_entry,",133
5615,Copyright (2017-2018) Intel Corporation,3
5616,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5617,void set_auth_is_engr_key(bool engr_key) {,47
5618,bool get_auth_is_engr_key() {,52
5619,"static uint32_t verify_root_key(cmf_auth_hash_type_t rootkey_hash,",57
5620,"uint32_t verify_key(cmf_auth_hash_type_t rootkey_hash,",74
5621,"uint32_t verify_multi_key(const root_entry_t *const p_root_entry,",83
5622,Copyright (2018) Intel Corporation,3
5623,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5624,void cmf_avst_input_select(uint32_t bits),48
5625,void cmf_avst16tst_input_select(void),125
5626,Copyright (2018) Intel Corporation,3
5627,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5628,bool cmf_main_descriptor_valid(const main_descriptor_t *p_descriptor),41
5629,bool cmf_rma_eng_descriptor_valid(const rma_eng_descriptor_t *p_descriptor),91
5630,"Copyright (2017, 2018) Intel Corporation",3
5631,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5632,void * cmf_common_br_load_addr_get(const altr_common_br_info_t * br_info),43
5633,bool cmf_common_br_first_boot(void),89
5634,@return Returns a pointer to the Boot ROM's common firmware structure (altr_common_fw_data_t).,108
5635,const altr_common_fw_data_t * cmf_common_br_fw_data_get(void),110
5636,@return Returns a pointer to the Boot ROM's firmware shared data structure (br_shared_t).,164
5637,const br_shared_t * cmf_common_br_shared_get(void),166
5638,"Copyright (2017, 2018) Intel Corporation",3
5639,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5640,"The endaddr is calculated by doing (srcAddr + sizeInBytes - 1), -1 since the end address is",37
5641,"int32_t check_for_die_crossing(uint32_t srcAddr, uint32_t sizeInBytes)",49
5642,Copyright (2018) Intel Corporation,3
5643,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5644,bool cmf_common_stickybit_get(uint32_t bit),32
5645,uint32_t cmf_common_stickybit_get_word(uint32_t word),60
5646,void cmf_common_stickybit_set(uint32_t bit),87
5647,Copyright (2018) Intel Corporation,3
5648,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5649,void sdm_dead_loop(uint32_t error_code),32
5650,"sdm_return_t cmf_derive_user_aes_wrapping_key(cmf_key_t *input_key,",65
5651,Copyright (2017) Intel Corporation,3
5652,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5653,void unset_key_override() {blt_key_override = false;},70
5654,void set_key_override(const uint32_t * const key),71
5655,uint32_t boot_dimk_override(uint32_t * boot_dimk),77
5656,void unset_intel_root_key_hash_override() {blt_intel_root_key_hash_override = false;},88
5657,"void set_intel_root_key_hash_override(const void * const root_key, uint32_t root_key_len)",90
5658,void unset_context_override() {blt_context_override = false;},97
5659,"void set_context_override(const void * const ctx, uint32_t ctx_len)",98
5660,static uint32_t get_security_version(void),120
5661,uint32_t convert_security_version_to_cancelid(uint32_t svn),145
5662,static sdm_return_t is_limited_signed_key(uint32_t bootdimk_id),167
5663,uint32_t get_dimk_id(uint32_t security_version),185
5664,static uint32_t get_boot_dimk_id(void),203
5665,static sdm_return_t cmf_dimk_metal_equivalent_key_flow_run_hw(uint32_t dest_key_slot),219
5666,static sdm_return_t cmf_dimk_aes_kad_workaround_before(void),366
5667,static sdm_return_t cmf_dimk_aes_kad_workaround_after(void),401
5668,static void cmf_dimk_aes_kad_workaround_clean_aes(void),427
5669,"static sdm_return_t cmf_dimk_aes_kad_workaround_ram_to_inbuf(uint32_t *p_data, uint32_t size_bytes)",445
5670,"static sdm_return_t cmf_dimk_aes_kad_workaround_inbuf_to_ram(uint32_t *key_ram_buffer, uint32_t size_bytes)",538
5671,static sdm_return_t cmf_dimk_generate_metal_equivalent_key(uint32_t dest_key_slot),609
5672,sdm_return_t cmf_dimk_generate_boot_dimk(void),671
5673,"sdm_return_t cmf_dimk_generate_dimk(uint32_t start_dimk_id, uint32_t end_dimk_id, uint32_t dest_key_slot)",708
5674,"sdm_return_t cmf_dimk_generate_dimk(uint32_t start_dimk_id, uint32_t end_dimk_id, uint32_t dest_key_slot)",788
5675,static sdm_return_t get_key_derivation_key_from_dimk(,857
5676,"sdm_return_t cmf_dimk_derive_user_aes_wrapping_key(uint32_t security_version,",923
5677,"sdm_return_t cmf_dimk_derive_intel_aes_wrapping_key(uint32_t dimk_id, uint32_t dest_key_slot)",977
5678,sdm_return_t cmf_dimk_derive_metal_key_check(uint32_t dest_key_slot),1079
5679,"STATIC sdm_return_t cmf_dimk_derive_device_identity(cmf_mpi_t * device_identity, uint32_t * device_id_resp)",1150
5680,"sdm_return_t cmf_dimk_get_metal_key_check_string(uint32_t * const key_check, uint32_t key_check_length)",1275
5681,"sdm_return_t cmf_dimk_get_device_identity_string(uint32_t * const device_id, uint32_t device_id_length)",1293
5682,sdm_return_t cmf_dimk_init(),1324
5683,Copyright (2018) Intel Corporation,3
5684,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5685,void cmf_dma_init(void),39
5686,void cmf_dma_wr_done_set(bool val),55
5687,void cmf_dma_rd_done_set(bool val),71
5688,bool cmf_dma_wr_done_status(void),84
5689,bool cmf_dma_rd_done_status(void),109
5690,Copyright (2017-2018) Intel Corporation,3
5691,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5692,"static sdm_return_t iid_puf_generate_PUF_root_key( cmf_key_t * const input_key, cmf_key_t * const output_key, iid_puf_type_t iid_puf_type)",71
5693,"static sdm_return_t iid_puf_generate_masked_puf(const uint32_t * const sEnl, uint32_t *  codeword,uint32_t * maskedPuf,bool enroll, iid_puf_type_t iid_puf_type)",185
5694,"static sdm_return_t iid_puf_read_ram_xor_hmac(uint32_t * const codeword,uint32_t codeword_word_size,uint32_t * const maskedPuf, iid_puf_type_t iid_puf_type)",210
5695,"static sdm_return_t iid_puf_generate_MAC(const uint32_t * const activation_code, uint32_t * const mac_data, iid_puf_type_t iid_puf_type)",294
5696,"sdm_return_t iid_puf_enroll(uint32_t * const activation_code,uint32_t *const mac_data, iid_puf_type_t iid_puf_type)",464
5697,"sdm_return_t iid_puf_activate(const uint32_t* const activation_code, const uint32_t* const mac_data, uint32_t* const err_bit_rate, iid_puf_type_t iid_puf_type)",611
5698,"static bool iid_puf_validate(const uint32_t* const mac_data_passed_in, uint32_t* mac_data_generated)",776
5699,Copyright (2017) Intel Corporation,3
5700,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5701,"void alt_sdm_mbox_config_status_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",50
5702,static uint32_t get_pin_status(void),105
5703,Copyright (2018) Intel Corporation,3
5704,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5705,"void cmf_mbox_get_device_identity_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",60
5706,Copyright (2018) Intel Corporation,3
5707,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5708,sdm_return_t cmf_security_challenge_valid(const rma_eng_descriptor_t *certificate),61
5709,bool cmf_eng_challenge_mode(void),90
5710,static sdm_return_t security_challenge_generate(void),105
5711,cmf_mbox_get_security_challenge_hdlr().,194
5712,sdm_return_t cmf_security_challenge_clear(void),199
5713,@param resp_buf is a (12 + 1) * 32-bit response buffer that this function is responsible for,214
5714,"void cmf_mbox_get_security_challenge_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",220
5715,Copyright (2017) Intel Corporation,3
5716,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5717,(read from fuses by the boot rom). For use over JTAG this command is not necessary – a,40
5718,"void cmf_mbox_jtag_idcode_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",51
5719,Copyright (2017) Intel Corporation,3
5720,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5721,"void cmf_mbox_jtag_subdeviceid_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",48
5722,Copyright (2017) Intel Corporation,3
5723,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5724,"void cmf_mbox_jtag_usercode_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",50
5725,Copyright (2017) Intel Corporation,3
5726,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5727,"void cmf_mbox_nop_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf,",43
5728,Copyright (2017) Intel Corporation,3
5729,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5730,"void cmf_mbox_sync_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf,",52
5731,Copyright (2020) Intel Corporation,3
5732,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5733,"static bool is_zero(uint32_t *p_data, uint32_t n)",70
5734,"static uint32_t cmf_prov_cert_validate_flags(const cmf_auth_cert_t cert_type, uint32_t *cert_ptr)",83
5735,"static bool alt_sdm_mbox_vab_user_pubkey_cancellation(uint32_t cancel_id, uint32_t *resp_buf, uint32_t is_virtual_write)",117
5736,"static bool alt_sdm_mbox_vab_user_pubkey_cancellation(uint32_t cancel_id, uint32_t *resp_buf, uint32_t is_virtual_write)",164
5737,"static bool sdm_mbox_vab_pts_counter_set(uint32_t counter_value, uint32_t *resp_buf, uint32_t is_virtual_write)",192
5738,"static bool alt_sdm_mbox_vab_svn_counter_set(uint32_t counter_type, uint32_t counter_value, uint32_t *big_buf, uint32_t is_virtual_write)",288
5739,"static bool sdm_mbox_vab_process_counter_set_cert(counter_set_cert_t *counter_cert, uint32_t *resp_buf, uint32_t is_virtual_write)",361
5740,"void alt_sdm_mbox_vab_cert_cmd_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",570
5741,"void alt_sdm_mbox_vab_get_provision_data_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",694
5742,"void sdm_mbox_vab_pr_pubkey_program_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",845
5743,"void sdm_mbox_vab_counter_set_preauth_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1048
5744,"void alt_sdm_mbox_vab_random_number_gen_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",1122
5745,Copyright (2018) Intel Corporation,3
5746,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5747,"void cmf_mbox_volatile_aes_write_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",55
5748,"void cmf_mbox_volatile_aes_erase_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",157
5749,Copyright (2018) Intel Corporation,3
5750,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5751,static void cmf_persistent_init_update_id(void),107
5752,"static bool cmf_efuse_magic_number_is_valid(uint32_t bank, uint32_t magic)",130
5753,static cmf_persistent_result_t cmf_persistent_efuse_init(const br_shared_t *p_br_shared),155
5754,"static void cmf_persistent_init_intel_and_user_pubkey_ids(bool first_boot, uint32_t id)",202
5755,"static void cmf_persistent_init_version_105_fields(bool first_boot, uint32_t id)",230
5756,"static void cmf_persistent_init_version_106_fields(bool first_boot, uint32_t id)",262
5757,"static void cmf_persistent_init_version_108_fields(bool first_boot, uint32_t id)",285
5758,"static void cmf_persistent_init_version_109_fields(bool first_boot, uint32_t id)",305
5759,"static void cmf_persistent_init_version_110_fields(bool first_boot, uint32_t id)",333
5760,"static void cmf_persistent_init_version_111_fields(bool first_boot, uint32_t id)",348
5761,"static void cmf_persistent_init_version_10A_fields(bool first_boot, uint32_t id)",366
5762,"static void cmf_persistent_init_version_10B_fields(bool first_boot, uint32_t id)",389
5763,"static void cmf_persistent_init_version_10C_fields(bool first_boot, uint32_t id)",411
5764,"static void cmf_persistent_init_version_10D_fields(bool first_boot, uint32_t id)",427
5765,"static void cmf_persistent_init_version_10E_fields(bool first_boot, uint32_t id)",438
5766,"void persistent_set_vab_cancel_counters(uint32_t root_hash_id, uint32_t exp_cancel_mask, uint32_t svna, uint32_t svnb, uint32_t svnc, uint32_t svnd, uint32_t pts)",450
5767,void persistent_reset_vab_cancel_counters(),483
5768,uint32_t persistent_vab_cancel_is_root_hash_used(uint32_t root_hash_id),493
5769,uint32_t persistent_get_vab_user_exp_cancel_mask(uint32_t root_hash_id),498
5770,uint32_t persistent_get_vab_cancel_svn_a(),503
5771,uint32_t persistent_get_vab_cancel_svn_b(),508
5772,uint32_t persistent_get_vab_cancel_svn_c(),513
5773,uint32_t persistent_get_vab_cancel_svn_d(),518
5774,uint32_t persistent_get_vab_cancel_pts(),523
5775,"static void cmf_persistent_init_efuse_write_disabled_cache_modified(bool first_boot, uint32_t id)",538
5776,void persistent_rsu_handoff_clear(void),593
5777,@brief This function shall be called before sysinit_main() get called.,602
5778,void cmf_persistent_upgrade_from_handoff(void),608
5779,cmf_persistent_result_t cmf_persistent_init(void),634
5780,"cmf_persistent_result_t cmf_persistent_secondary_init(void * desc_dest, void * signature_dest)",790
5781,"cmf_persistent_result_t cmf_persistent_params_set(const cmf_br_header_t * p_cmf_br_header,",839
5782,const cmf_br_header_t * cmf_persistent_br_header_data_get(void),854
5783,void persistent_update_g_persistent_msel(uint32_t mselval),889
5784,void cmf_persistent_njp_status_update(uint32_t status),894
5785,uint32_t cmf_persistent_njp_status_get(void),899
5786,uint32_t cmf_persistent_njp_bootstatus_95_64_get(void),904
5787,void cmf_persistent_rsu_log_update(void),915
5788,"void cmf_persistent_rsu_error_log_update_dcmf(uint32_t dcmf_error_state, uint32_t err_addr_high, uint32_t err_addr_low)",943
5789,void cmf_persistent_rsu_log_clear(void),970
5790,void cmf_persistent_rsu_log_clear_version(void),985
5791,void cmf_persistent_rsu_log_update_flash_version(bool is_dcmf),993
5792,void cmf_handoff_rsu_err_cmf_update(void),1019
5793,void cmf_persistent_rsu_err_cmf_clear(void),1032
5794,void cmf_persistent_rsu_mbox_event_clear(void),1044
5795,void cmf_persistent_rsu_flags_update(rsu_flags_t  new_flags),1062
5796,"void cmf_persistent_rsu_cmf_addr_update(uint32_t cmf_addr_high, uint32_t cmf_addr_low)",1076
5797,"void cmf_persistent_rsu_error_addr_update(uint32_t cmf_addr_high, uint32_t cmf_addr_low)",1092
5798,void cmf_persistent_rsu_cmf_prev_addr_clear(void),1103
5799,void cmf_persistent_rsu_cmf_prev_addr_update(void),1119
5800,"void cmf_persistent_rsu_clocks_update(uint32_t int_osc_en, uint32_t osc_clk_freq, uint32_t as_clk)",1140
5801,uint32_t cmf_persistent_get_osc_clk_flag(void),1165
5802,uint32_t cmf_persistent_get_osc_clk_freq(void),1175
5803,uint32_t cmf_persistent_get_as_clk(void),1185
5804,"void cmf_persistent_rsu_pin_update(uint32_t new_pin_idx, uint8_t new_pin_role)",1199
5805,uint32_t cmf_persistent_get_rsu_pin_idx(void),1210
5806,This function returns the load factory pin role (pin_function),1216
5807,uint8_t cmf_persistent_get_rsu_pin_role(void),1220
5808,void cmf_persistent_rsu_max_retry_set(uint32_t dcio_max_retry),1231
5809,uint32_t cmf_persistent_rsu_max_retry_get(void),1252
5810,void cmf_persistent_rsu_curr_retry_counter_reset(void),1262
5811,uint32_t cmf_persistent_rsu_curr_retry_counter_get(void),1272
5812,bool cmf_persistent_rsu_retry_curr_image(void),1282
5813,cmf_persistent_result_t cmf_persistent_rsu_curr_retry_counter_increment(void),1300
5814,void update_g_persistent_msel_hardware(uint32_t mselval),1321
5815,@fn     cmf_persistent_get_pubkey_id(),1329
5816,uint32_t cmf_persistent_get_pubkey_id(uint32_t root_key),1336
5817,@fn     cmf_persistent_set_pubkey_id(),1350
5818,"void cmf_persistent_set_pubkey_id(uint32_t root_key, uint32_t key_id)",1357
5819,@fn     cmf_persistent_set_iid_puf_act_info(),1375
5820,@param  iid_put_type  indicate the type of PUF (UDS or USER),1381
5821,"void cmf_persistent_set_iid_puf_act_info(uint8_t puf_act_status, uint8_t err_level, iid_puf_type_t iid_puf_type)",1383
5822,@fn     cmf_persistent_set_iid_puf_lock(),1414
5823,void cmf_persistent_set_iid_puf_lock(),1418
5824,@fn     cmf_persistent_get_iid_puf_lock(),1440
5825,uint32_t cmf_persistent_get_iid_puf_lock(),1444
5826,@fn     cmf_persistent_get_user_iid_puf_act_info(),1466
5827,uint32_t cmf_persistent_get_user_iid_puf_act_info(void),1469
5828,@fn     cmf_persistent_get_uds_iid_puf_act_info(),1476
5829,uint32_t cmf_persistent_get_uds_iid_puf_act_info(void),1479
5830,@fn     cmf_persistent_get_msel_hardware(),1486
5831,uint32_t cmf_persistent_get_msel_hardware(void),1490
5832,@fn     cmf_persistent_get_rom_version(),1496
5833,uint32_t cmf_persistent_get_rom_version(void),1500
5834,bool cmf_persistent_get_efuse_cache_modified(void),1519
5835,void cmf_persistent_set_efuse_cache_modified(bool new_val),1524
5836,bool cmf_persistent_get_efuse_write_disabled(void),1529
5837,void cmf_persistent_disable_efuse_writes(void),1534
5838,"cmf_persistent_result_t cmf_persistent_update_decision_pointers(uint64_t spt0_addr,",1550
5839,"cmf_persistent_result_t cmf_persisent_adjust_main_section_ptrs(uint32_t dest_addr, uint32_t src_addr)",1588
5840,"cmf_persistent_result_t cmf_persisent_adjust_main_section_ptr(uint64_t dest_addr, uint32_t ptr_num)",1651
5841,cmf_persistent_result_t cmf_persistent_set_security_version(uint32_t security_version),1686
5842,uint32_t cmf_persistent_get_security_version(void),1703
5843,void cmf_persistent_set_aes_root_key_virtual_mode(void),1711
5844,bool cmf_persistent_get_aes_root_key_virtual_mode(void),1719
5845,void cmf_persistent_handle_failed_flash_img(void),1728
5846,void cmf_persistent_set_flash_image(uint32_t slot_number),1742
5847,uint8_t cmf_persistent_get_efuse_physical_fuse_burned(void),1754
5848,void cmf_persistent_set_efuse_physical_fuse_burned(void),1764
5849,uint8_t cmf_persistent_get_efuse_physical_pubkey_burned(void),1773
5850,void cmf_persistent_set_efuse_physical_pubkey_burned(void),1783
5851,uint32_t cmf_persistent_get_rsu_error_log_config_state(void),1792
5852,void set_handoff_pointer(cmf_handoff_data_t * p_handoff_data),1802
5853,sdm_return_t persistent_wdt_init(wdt_t *wdt),1809
5854,sdm_return_t persistent_wdt_get(wdt_t *wdt),1822
5855,cmf_persistent_result_t cmf_persistent_set_ddr_hash(uint32_t *p_slot_hash),1842
5856,@param [untrusted] mask Each bit (8 bits total) indicates one particular flag (refer @see hps_config_flags definition in persistent.h),1862
5857,"void cmf_persistent_set_hps_config_flag(uint8_t mask, bool enable)",1868
5858,void cmf_persistent_set_virtual_kill(bool new_value),1885
5859,bool cmf_persistent_get_virtual_kill(void),1893
5860,Copyright (2017) Intel Corporation,3
5861,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5862,"STATIC void cmf_reload_decomp_stub_run(uint32_t stub_entry, uint32_t r5, uint32_t r6,",80
5863,cmf_reload_trampoline_load() function must have been called before this function,127
5864,STATIC sdm_return_t cmf_reload_decomp_stub_load(uint32_t *load_addr),136
5865,"void cmf_reload_decomp_stub_load_and_run(uint32_t *load_addr, uint32_t stub_entry, uint32_t r5, uint32_t r6,",184
5866,sdm_return_t cmf_reload_trampoline_init(uint32_t size),216
5867,sdm_return_t cmf_reload_trampoline_load(const hash_512_t sha_expected),309
5868,void pre_transition_cleanup(void),380
5869,Copyright (2020) Intel Corporation,3
5870,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5871,bool is_in_rma_state_user(void),36
5872,uint32_t get_rma_counter_value(uint32_t rma_counter_bit),131
5873,bool is_in_rma_state_manufacturing(void),203
5874,Copyright (2019) Intel Corporation,2
5875,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
5876,"sdm_return_t cmf_sec_options_interpret_option_values(const uint32_t efuse_value,",124
5877,sdm_return_t cmf_sec_options_init(const main_descriptor_t *p_main_descriptor),137
5878,sdm_return_t cmf_sec_options_clear_bitstream_options(void),223
5879,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",243
5880,"sdm_return_t cmf_sec_options_get_bitstream_option(cmf_security_option_id_t sec_option_id,",314
5881,"sdm_return_t cmf_sec_options_get_efuse_option(cmf_security_option_id_t sec_option_id,",370
5882,"sdm_return_t cmf_sec_options_get_sticky_option(cmf_security_option_id_t sec_option_id,",458
5883,"sdm_return_t cmf_sec_options_interpret_option_values(const uint32_t efuse_value,",487
5884,"STATIC sdm_return_t usr_sec_option_fuse(const uint32_t is_virtual_write, uint32_t row_data[], uint32_t *resp_buf, uint32_t *err_buff, uint32_t *err_res_length)",584
5885,"STATIC bool usr_sec_option_fused(const uint32_t option_mask, uint32_t expected_val, uint32_t read_val1, uint32_t read_val2, uint32_t read_val3)",608
5886,"STATIC bool usr_sec_option_validate_row_bank(uint32_t row, uint32_t bank)",629
5887,"STATIC sdm_return_t usr_sec_option_efuse_fuse_get_failed_flags(usr_sec_fuse_inf_p fuse_inf_p, const uint32_t *err_buff, const uint32_t err_res_length)",647
5888,STATIC bool usr_sec_option_post_fuse_action_req(const usr_sec_option_flags_t usr_sec_option_flags),783
5889,"STATIC sdm_return_t usr_sec_option_post_fuse_take_action(const usr_sec_option_flags_t usr_sec_option_flags, const usr_sec_option_flags_t usr_sec_option_failed_flags)",800
5890,"STATIC  sdm_return_t usr_sec_option_get_fuse_rows(const usr_sec_option_flags_t option_flags, usr_sec_fuse_inf_p fuse_inf_p)",871
5891,"sdm_return_t usr_sec_option_program(const usr_sec_option_flags_t usr_sec_option_flags, uint32_t *resp_buf, uint32_t *err_buff)",954
5892,Copyright (2019-) Intel Corporation,3
5893,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5894,"@return: Returns CMF_SIGMA_SUCCESS(0) if message is successful processed and verified, ",105
5895,uint32_t cmf_sigma_init(void),108
5896,"@return: Returns CMF_SIGMA_SUCCESS(0) if message is successful processed and verified, ",151
5897,"uint32_t cmf_sigma_process_m1(const cmf_sigma_m1_msg_t *const p_sigma_m1, uint32_t msg_len_bytes)",154
5898,"@return: Returns CMF_SIGMA_SUCCESS(0) if message is successful processed and verified, ",253
5899,"uint32_t cmf_sigma_process_m3(const cmf_sigma_m3_msg_t *const p_sigma_m3, uint32_t msg_max_length)",256
5900,@param input: msg_length - length of message (including header) in bytes,542
5901,"@return: Returns CMF_SIGMA_SUCCESS(0) if message is successful processed and verified, ",545
5902,"uint32_t cmf_sigma_process_enc(const cmf_sigma_enc_msg_header_t *const p_sigma_enc_msg_header, ",549
5903,"@param input: bytes_in_resp - contains the number of bytes in the enc_response (including space for header, though",754
5904,"@return: Returns CMF_SIGMA_SUCCESS(0) if message is successful processed and verified, ",756
5905,"uint32_t cmf_sigma_send_enc_response( void *p_response, ",759
5906,"@return: Returns CMF_SIGMA_SUCCESS(0) if message is successful processed and verified, ",942
5907,"uint32_t cmf_sigma_process_teardown(const cmf_sigma_teardown_msg_t *const p_teardown_msg, uint32_t msg_max_length)",945
5908,"@return: Returns CMF_SIGMA_SUCCESS(0) if message is successful processed and verified, ",977
5909,"uint32_t cmf_sigma_assemble_m2(cmf_sigma_m2_msg_t *p_sigma_m2, uint32_t msg_max_length, uint32_t *bytes_written)",980
5910,"@return: Returns CMF_SIGMA_SUCCESS(0) if message is successful processed and verified, ",1469
5911,uint32_t sigma_finish(void),1472
5912,@return: Returns CMF_SIGMA_SUCCESS(0)  ,1486
5913,void sigma_error_handler(uint32_t error_code),1488
5914,Copyright (2020) Intel Corporation,3
5915,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5916,"STATIC sdm_return_t execute_normal_cmd(void(*mbox_cmd_fn_ptr)(ALT_SDM_MBOX_CLIENT_t, uint32_t*, uint32_t*, uint32_t*),",53
5917,@param pt_resp_buf is a buffer to hold the plaintext response (can overlap with 'dp'),69
5918,"STATIC sdm_return_t execute_normal_cmd(void(*mbox_cmd_fn_ptr)(ALT_SDM_MBOX_CLIENT_t, uint32_t*, uint32_t*, uint32_t*),",73
5919,@param pt_resp_buf is a buffer to hold the plaintext response (can overlap with 'dp'),119
5920,"STATIC sdm_return_t execute_cert_cmd(uint32_t *dp, uint32_t dp_len_words, uint32_t dp_buf_size_words,",127
5921,@param dp_buf_size_words the number of words in the 'dp' buffer (can be greater than dp_len_words),189
5922,"sdm_return_t cmf_sigma_enc_mbox_execute_handler(uint32_t *dp, uint32_t dp_len_words, uint32_t dp_buf_size_words,",196
5923,Copyright (2018) Intel Corporation,3
5924,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5925,bool cmf_ram_ptr_valid(const void *const ptr),41
5926,"bool cmf_ram_range_valid(const void *const ptr, const uint32_t size)",66
5927,"sdm_return_t cmf_array_compare(const uint32_t * const ptr1, const uint32_t * const ptr2, uint32_t size)",99
5928,void cmf_init_stickybits(void),140
5929,bool cmf_hps_ocram_addr_valid(const uint32_t addr),178
5930,"bool cmf_hps_ocram_range_valid(const uint32_t addr, const uint32_t size)",202
5931,bool cmf_hps_sdram_addr_valid(const uint32_t addr),232
5932,"bool cmf_hps_sdram_range_valid(const uint32_t addr, const uint32_t size)",256
5933,Copyright (2018) Intel Corporation,3
5934,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5935,uint32_t cmf_system_reset_crypto(void),50
5936,void empty_prebuffer(void),279
5937,Copyright (2018) Intel Corporation,3
5938,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5939,sdm_return_t cmf_set_default_security_protection(bool unconditional_lock),67
5940,uint32_t cmf_as_compatibility_check(uint32_t section_mode_flags),78
5941,sdm_return_t cmf_set_default_security_protection(bool unconditional_lock),84
5942,uint32_t cmf_as_compatibility_check(uint32_t section_mode_flags),171
5943,Copyright (2018) Intel Corporation,3
5944,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5945,delay and return they can use the cmf_timeout_init() and cmf_timeout(),38
5946,void cmf_delay(uint32_t timeout_value),45
5947,cmf_timeout_init() function.,59
5948,cmf_timeout_init() function.,62
5949,bool cmf_timeout(const cmf_timeout_t *timeout),66
5950,@param timeout is a structure that is used when calling to the cmf_timeout(),110
5951,"void cmf_timeout_init(uint32_t timeout_value, cmf_timeout_t *timeout)",115
5952,void cmf_perf_timer_start(void),155
5953,Copyright (2018) Intel Corporation,3
5954,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5955,@Fn     cmf_swizzle_data_block(),44
5956,"sdm_return_t cmf_swizzle_data_block(const uint32_t *const p_source,",51
5957,"sdm_return_t cmf_swizzle_word_endianness(const uint32_t *const p_source,",83
5958,@Fn     cmf_memset(),118
5959,"void cmf_memset(void *const p_dest,",127
5960,@Fn     cmf_memcpy(),143
5961,"void cmf_memcpy(void *const p_dest,",152
5962,@param size is the number of bytes to compare but must be a multiple of sizeof(uint32_t).,172
5963,"sdm_return_t cmf_memcmp(const uint32_t * const ptr1, uint32_t size_1,",177
5964,"@brief Function to get position count of most significant non-zero bit in the given array of words (32-bit),",206
5965,"uint32_t cmf_get_word_msb(uint32_t *p_data, uint32_t n)",214
5966,"uint32_t cmf_get_byte_msb(uint8_t *p_data, uint32_t n)",250
5967,"uint32_t cmf_rotate_right(uint32_t n, uint32_t b)",278
5968,Copyright (2020) Intel Corporation,3
5969,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5970,void vab_counter_clear_preauth(void),37
5971,bool vab_counter_set_preauth(const preauth_vab_counter_t counter_type),49
5972,bool vab_counter_is_preauth_set(const preauth_vab_counter_t counter_type),75
5973,void vab_pr_owner_clear_authorization(void),96
5974,void vab_pr_owner_set_authorization(void),104
5975,bool vab_pr_owner_is_authorization_set(void),113
5976,"sdm_return_t cmf_derive_user_aes_wrapping_key(cmf_key_t *input_key,",61
5977,Copyright (2018) Intel Corporation.,3
5978,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5979,tramp_return_t tramp_cert_check_device_identity(rma_eng_descriptor_t const * certificate),55
5980,tramp_return_t tramp_cert_check_uid(rma_eng_descriptor_t const * certificate),96
5981,Copyright (2017) Intel Corporation.,3
5982,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5983,void set_cfgstatus_state(uint32_t val),57
5984,void set_cfgstatus_position(uint32_t val),69
5985,uint32_t get_cfgstatus_state(void),79
5986,uint32_t get_cfgstatus_position(),89
5987,@param flash_idx is the current flash image index in use (boot from flash) ,96
5988,void set_cfgstatus_version(uint32_t flash_idx),99
5989,void tramp_set_cfg_status_state(uint32_t cfg_state),112
5990,void tramp_set_cfg_status_pos(uint32_t cfg_pos),131
5991,Copyright (2017-18) Intel Corporation.,3
5992,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
5993,void nstatus_error_toggle(void),69
5994,void tramp_avstif_disable(void),92
5995,static void tramp_config_restart(tramp_config_event_t event),114
5996,void tramp_config_state_event(tramp_config_event_t event),163
5997,tramp_config_state_t tramp_config_state_get(void),582
5998,bool tramp_config_state_loading(void),592
5999,void tramp_config_state_init(tramp_boot_mode_t boot_mode),610
6000,Copyright (2017) Intel Corporation.,3
6001,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6002,void tramp_dma_init(void),46
6003,"tramp_return_t tramp_dma_start(uint32_t *p_data, uint32_t size)",66
6004,bool tramp_dma_done(void),92
6005,Copyright (2018) Intel Corporation,3
6006,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6007,"void tramp_gpio_config_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *p_cmd_buf, uint32_t *p_response,",49
6008,Copyright (2017-18) Intel Corporation.,3
6009,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6010,/*! Sync block fetch timeout val (~1s w/a 200MHZ SDM Clk) */,75
6011,tramp_input_sel_t tramp_input_get(void),168
6012,static void config_input_jtag(void),178
6013,static void config_input_avst8(void),197
6014,static void config_input_avst16(void),212
6015,static void config_input_avst16tst(void),227
6016,static void config_input_avst32(void),242
6017,static void config_input_qspi(void),257
6018,tramp_return_t tramp_input_set(uint32_t msel_used),275
6019,static tramp_return_t tramp_inbuf_drain(void),332
6020,void tramp_inbuf_fill(void),412
6021,void state_tramp_inbuf_restart(void),495
6022,bool tramp_inbuf_done(void),543
6023,tramp_return_t tramp_inbuf_init(uint32_t input),600
6024,tramp_return_t tramp_inbuf_sha_check(uint32_t *p_sha),682
6025,tramp_return_t tramp_inbuf_sync(void),709
6026,"tramp_return_t tramp_inbuf_start(const void * const load, uint32_t size, uint32_t sha_config)",933
6027,"tramp_return_t tramp_inbuf_persist_sig_start(uint32_t size, uint32_t sha_config)",1054
6028,"tramp_return_t tramp_inbuf_persist_br_start(uint32_t size, uint32_t sha_config)",1083
6029,void tramp_inbuf_update(void),1103
6030,static tramp_return_t tramp_jtag_sync_block_alignment(uint32_t sync_data),1145
6031,static void tramp_avst_drop_beat_to_resync(void),1235
6032,@param data will be the value that we have read off the IB(which needs to be re-aligned),1328
6033,"static void drop_beats_to_align_64bit(uint64_t data, uint8_t shift_bits)",1333
6034,static int32_t tramp_fetch_two_words_into_ib(void),1386
6035,static uint64_t get_8_bytes_memmode(uint32_t offset),1427
6036,"tramp_return_t tramp_inbuf_sha_input(uint32_t size, uint32_t sha_config)",1451
6037,tramp_return_t tramp_inbuf_clear_go_bits(),1475
6038,Copyright (2018) Intel Corporation,3
6039,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6040,(not available if configuration via JTAG is disabled for security reasons).,43
6041,"void tramp_jtag_config_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf,",54
6042,Copyright (2017-18) Intel Corporation.,3
6043,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6044,"tramp_return_t tramp_mailbox_init(mbox_cmd_t const * const mbox_commands, uint32_t num_commands)",55
6045,void tramp_mailbox_update(void),91
6046,Copyright (2017-18) Intel Corporation.,3
6047,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6048,void tramp_qspi_init(void),87
6049,void tramp_qspi_read_address_set(uint32_t val),108
6050,uint32_t tramp_qspi_read_address_get(void),118
6051,void tramp_qspi_check_failed_flash_img(void),128
6052,void tramp_config_input_qspi(void),156
6053,int32_t tramp_start_transfer_from_qspi(uint32_t size_in_bytes),179
6054,static void tramp_qspi_load_max_rd_dma_descriptors(uint32_t *desc_cnt),204
6055,void tramp_qspi_load_more_dma_descriptors(void),258
6056,This function will get the x number of bytes (passed in as variable) from the QSPI,300
6057,static uint32_t tramp_get_data_chunk_from_qspi(uint32_t number_of_bytes_to_get),308
6058,continue to use interrupt(keep QSPI ISR enabled),443
6059,static uint32_t tramp_get_more_bytes_from_next_segment(void),448
6060,void QSPI_isr(void* unused),563
6061,is needed to be setup for an nconfig toggle(tramp restart) or to the end of ssbl (regular,596
6062,void qspi_nconfig_trigg(bool val),605
6063,static uint32_t get_right_qspi_src_addr(void),617
6064,Copyright (2017-18) Intel Corporation.,3
6065,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6066,void tramp_save_trampoline_size(void),69
6067,static void reset_peripherals(void),74
6068,"tramp_return_t tramp_system_sha_compare(uint32_t const * const p_sha_1,",124
6069,void tramp_system_call_cmf(uint32_t flags),158
6070,void tramp_system_init_early(void),221
6071,"tramp_return_t tramp_system_init(mbox_cmd_t const * const mbox_commands, uint32_t num_commands)",245
6072,tramp_return_t tramp_system_reset(void),285
6073,"@brief When trampoline is running (note not DCMF), any error happened while RSU_enabled persistent flag",305
6074,void tramp_system_update_error(void),316
6075,tramp_return_t validate_auth_header(void),345
6076,tramp_return_t prep_for_dcmf_transition(void),488
6077,Copyright (2017-18) Intel Corporation.,3
6078,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6079,"void TRAMP_trace(uint32_t key, uint32_t line)",50
6080,void TRAMP_trace_clear(void),67
6081,Copyright (2019) Intel Corporation,3
6082,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6083,void main(void),23
6084,Copyright (2019) Intel Corporation,3
6085,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6086,"static sdm_return_t fill_cert_constants_did_as_subject(cert_variables_t* vars, uint8_t edi_id, const uint32_t* cmfd, const persistent_data_t* persist, ",69
6087,"static sdm_return_t fill_cert_constants_firmware_aliasl1(cert_variables_t* vars, uint8_t edi_id, const uint32_t* cmfd, const persistent_data_t* persist, ",73
6088,"void fill_tbs_hash(uint8_t * ptr, uint32_t ptrlen, uint8_t * buffer, uint32_t buflen)",190
6089,static bool is_pubkey_hash_zero(const br_efuse_t* efuse),241
6090,static bool is_pki_slct_blown(const br_efuse_t* efuse),255
6091,"Get the type of OWNERSHIP (None, Virtual, Physical)",266
6092,static relib_ownership_t get_ownership(const persistent_data_t* persist),273
6093,static bool is_device_owned(const persistent_data_t* persist),311
6094,This is_virtual_owned() function must always be used in conjunction with,319
6095,is_device_owned() function to determine whether device is physically or,320
6096,static bool is_virtual_owned(const persistent_data_t* persist),328
6097,static bool is_persist_valid(const persistent_data_t* persist),341
6098,static bool is_br_shared_valid(const br_shared_t* br_shared),368
6099,"static sdm_return_t create_signed_certificate(const re_cert_t* cert, cert_variables_t* vars, re_keypair_t* issuer)",416
6100,"static uint32_t get_efuse_raw(const persistent_data_t* persist, const re_efuse_t* efuse, uint32_t efuse_len,",486
6101,"static sdm_return_t get_efuse_hash(const persistent_data_t* persist, const re_efuse_t* efuse, uint32_t efuse_len,",516
6102,static sdm_return_t validate_pmtab(const re_pmtab_header_t* pmtab),545
6103,"static sdm_return_t get_persist_hash(const re_pmtab_header_t* pmtab, uint32_t* persist_hash, uint32_t persist_hash_len)",598
6104,"static sdm_return_t fill_cert_rimuri(cert_variables_t* vars, const re_rimuri_header_t* rim_header)",659
6105,"static sdm_return_t fill_cert_constants_common(cert_variables_t* vars, uint8_t edi_id, const persistent_data_t* persist,",701
6106,"static sdm_return_t fill_cert_constants_did_as_subject(cert_variables_t* vars, uint8_t edi_id, const uint32_t* cmfd, const persistent_data_t* persist, ",776
6107,"static sdm_return_t fill_cert_constants_firmware_aliasl1(cert_variables_t* vars, uint8_t edi_id, const uint32_t* cmfd, const persistent_data_t* persist, ",807
6108,"static sdm_return_t fill_cert_constants(const re_cert_t* cert, cert_variables_t* vars, const uint32_t* cmfd, const persistent_data_t* persist,",878
6109,"static sdm_return_t fill_key_id(const re_keypair_t* key_pair, cert_variables_t* vars, uint32_t* entropy_data,",926
6110,"static sdm_return_t fill_cert_entity(cert_variables_t* vars, const re_keypair_t* subject, const re_keypair_t* issuer)",976
6111,void cmf_relib_cleanup(bool is_failure),1016
6112,"static uint32_t create_cdi1_context(uint8_t* context, uint32_t context_size, const uint32_t* cmfd,",1049
6113,"static bool key_is_in_keyvault(cmf_key_id_t slot, uint32_t ukvmask)",1127
6114,@param persist - Pointer of CMF persistent data (validated by caller),1141
6115,static bool is_aliasl1_disable(const persistent_data_t* persist),1145
6116,"static sdm_return_t create_keypair(re_keypair_t* keypair, const re_key_info_t* key_info, uint32_t ukvmask)",1167
6117,"static inline sdm_return_t create_certificate(const re_cert_t* cert, re_keypair_t* issuer, const re_keypair_t* subject, ",1216
6118,"static bool certificate_requested(re_certype_t type, uint32_t certmask)",1253
6119,"static sdm_return_t if_needed_create_keypair_in_ram(re_keypair_t* keypair, const re_key_info_t* key_info,",1267
6120,"static sdm_return_t if_needed_create_certificate(const re_cert_t* cert, re_keypair_t* issuer, re_keypair_t* subject,",1306
6121,"static sdm_return_t generate_cdi_1(const uint32_t* cmfd, const persistent_data_t* persist,",1335
6122,static void clear_keypair_in_ram(re_keypair_t* keypair),1373
6123,"static sdm_return_t validate_relib_handler(uint32_t bootstatus, uint32_t certmask, const uint32_t* cmfd,",1389
6124,"BootROM will read bank 0, 1 (revB) and 5 during ARB. We want to make sure BR and CMF version are identical",1446
6125,This should be done before we start the cmf_relib_handler(),1449
6126,@param br_shared  - Address of BR shared (this is R4 register),1453
6127,@param persist    - Pointer of CMF persistent data (validated by caller),1454
6128,"static sdm_return_t cmf_relib_check_br_efuse(const br_shared_t* br_shared, const persistent_data_t* persist)",1458
6129,@param persist - Pointer of CMF persistent data (validated by caller),1499
6130,static bool is_efuse_untampered(const persistent_data_t* persist),1503
6131,@param skip_efuse_check -- boolean indicating we do not need to check the efuse (more explaination in cmf_relib_check_br_efuse),1560
6132,"void cmf_relib_handler(uint32_t bootstatus, re_handoff_data_t* handoff, uint32_t certmask, uint32_t ukvmask,",1565
6133,Copyright (2019) Intel Corporation,3
6134,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6135,"static bool is_address_valid(const uint32_t startaddr, const uint32_t endaddr, const uint32_t address,",41
6136,"bool cmf_relib_handoff_address_is_valid(uint32_t handoff, uint32_t size)",78
6137,"bool cmf_relib_handoff_unaligned_address_is_valid(uint32_t unaligned_address, uint32_t size)",83
6138,"bool cmf_relib_persist_address_is_valid(uint32_t persist, uint32_t size)",97
6139,Copyright (2019) Intel Corporation,3
6140,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6141,"sdm_return_t cmf_relib_handoff_add_entry(uint16_t tag, uint16_t length, uint8_t* value)",45
6142,static sdm_return_t cmf_relib_validate_handoff_region(re_handoff_data_t* handoff),110
6143,void cmf_relib_handoff_init(re_handoff_data_t* handoff),158
6144,@return bool for validity of handoff (i.e. was it set up correctly?),202
6145,bool cmf_relib_handoff_is_valid(),204
6146,void cmf_relib_handoff_set_result_code_driver_status(uint16_t status),216
6147,void cmf_relib_handoff_set_result_code_handoff_status(uint16_t status),231
6148,alt_uds_options_t cmf_relib_handoff_get_test_flags(),246
6149,void cmf_relib_handoff_set_test_flags(uint32_t test_flags),265
6150,void cmf_relib_handoff_update_size(),284
6151,void cmf_relib_handoff_cleanup(),297
6152,void cmf_relib_handoff_clear_certificates(),309
6153,Copyright (2019) Intel Corporation,3
6154,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6155,static void get_ukv_snapshot(uint32_t* ukv_snapshot),52
6156,"static bool slot_is_in(const uint32_t* slots, uint32_t num_slots, uint32_t slot_to_check)",85
6157,"(Besides CDI 1 of course, should be in slots_to_keep)",100
6158,"static sdm_return_t clear_keyslots_if_not_set_before(uint32_t* ukvmask_before,        uint32_t* ukvmask_current,",108
6159,void cmf_relib_ukv_snapshot_hold_before(),142
6160,sdm_return_t cmf_relib_ukv_snapshot_clear_keyslots_if_not_set_before(bool is_failure),147
6161,Copyright (2019) Intel Corporation,3
6162,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6163,static uint32_t romext_get_entry(uint32_t *entry_params),35
6164,void alt_main(uint32_t *entry_params),70
6165,void cmf_romext_exit(bool is_failure),215
6166,Copyright (2019) Intel Corporation,3
6167,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6168,void watchdog_enable(void),48
6169,void watchdog_disable(void),79
6170,void watchdog_kick(void),91
6171,void watchdog_restore(void),105
6172,"void cmf_romext_memset(void *const p_dest,",124
6173,"void cmf_romext_memcpy(void *const p_dest,",146
6174,void romext_remove_br_cmf_handlers(void),165
6175,void romext_int_disable(void),181
6176,void romext_unexpected_reset_handler(void),216
6177,__attribute__((noreturn)),262
6178,void __stack_chk_fail(void),263
6179,uint32_t get_key_vault_slots_used(void),271
6180,void trigger_tamper_reset(void),283
6181,Copyright (2019) Intel Corporation,3
6182,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6183,void testenv_putc(char c),30
6184,void testenv_putc(char c),41
6185,void testenv_puts(char *s),49
6186,void testenv_puth(unsigned n),57
6187,"void testenv_printf(const char *format, ...)",63
6188,Copyright (2020) Intel Corporation,3
6189,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6190,"int generate_firmware_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1287
6191,"int generate_aliasl1_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1555
6192,"int generate_deviceid_self_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1768
6193,"int generate_enrolment_deviceid_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1986
6194,"int generate_enrolment_self_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",2093
6195,"int generate_cert_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",2172
6196,static inline bool format_is_valid(const cert_format_t* format),2177
6197,@return the length of the certificate (in bytes) or -1 if there is an error,2248
6198,"STATIC int fill_certificate(const cert_variables_t * cert_vars, uint8_t * const buffer, uint32_t buffer_size, const cert_format_t * format) {",2250
6199,"static uint32_t varlen_sum(const cert_format_t * format, const uint32_t * const locals, uint32_t index) {",2373
6200,"static void write_asn1_length(uint8_t * ptr, uint32_t len) {",2395
6201,static uint32_t get_asn1_lenlen(uint32_t len) {,2415
6202,Copyright (2020) Intel Corporation,3
6203,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6204,"int generate_firmware_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1284
6205,"int generate_aliasl1_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1550
6206,"int generate_deviceid_self_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1763
6207,"int generate_enrolment_deviceid_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",1981
6208,"int generate_enrolment_self_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",2088
6209,"int generate_cert_cert(const cert_variables_t * cert_vars, uint8_t * buffer, int buffer_length) {",2167
6210,@return the length of the certificate (in bytes) or -1 if there is an error,2200
6211,"STATIC int fill_certificate(const cert_variables_t * cert_vars, uint8_t * const buffer, uint32_t buffer_size, const cert_format_t * format) {",2202
6212,"static uint32_t varlen_sum(const cert_format_t * format, const uint32_t * const locals, uint32_t index) {",2326
6213,"static void write_asn1_length(uint8_t * ptr, uint32_t len) {",2348
6214,static uint32_t get_asn1_lenlen(uint32_t len) {,2368
6215,Copyright (2019) Intel Corporation,3
6216,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6217,void sdm_early_init(void),58
6218,int main(void),115
6219,void bitstream_source_cnoc_master(cnoc_handle_t cnoc_handle),39
6220,static sdm_return_t st_bitstream_source_cvp_start(cnoc_handle_t cnoc_handle),78
6221,static sdm_return_t st_bistream_source_qspi_start(cnoc_handle_t cnoc_handle),87
6222,"static sdm_return_t st_bitstream_source_qspi_get_data(dma_handle_t dma_read_handle, uint32_t size)",94
6223,static sdm_return_t st_bitstream_source_avst_start(cnoc_handle_t cnoc_handle),108
6224,static sdm_return_t st_bitstream_source_jtag_start(cnoc_handle_t cnoc_handle),113
6225,static sdm_return_t st_bitstream_source_sdmmc_start(cnoc_handle_t cnoc_handle),123
6226,bitstream_control_t *st_bitstream_source_open(void),135
6227,void st_bitstream_source_close( void ),206
6228,"void bitstream_source_qspi_read(cnoc_handle_t cnoc_handle, dma_handle_t dma_handle, uint32_t size)",244
6229,st_bitstream_source_select_t st_bitstream_source_get(void),257
6230,in_buf_src_sel_t st_bitstream_input_source_get(void),262
6231,st_bitstream_source_select_t st_bistream_source_from_msel(void),267
6232,void st_bitstream_source_set_qspi_cs(uint32_t qspi_cs),326
6233,uint32_t st_bitstream_source_get_qspi_cs(void),331
6234,Copyright (2019-2021) Intel Corporation,3
6235,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6236,main_descriptor_t* bitstream_parse_section_main_desc_get(void),30
6237,signature_descriptor_t* bitstream_parse_section_sig_desc_get(void),35
6238,Copyright (2019) Intel Corporation,3
6239,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6240,void st_config_update_qspi_src_addr(uint32_t val),70
6241,uint32_t st_config_get_qspi_src_addr(void),80
6242,sdm_return_t st_config_input_accept_header(void),89
6243,void st_config_input_close(void),140
6244,void st_state_handler_idle(void),153
6245,void st_state_handler_configure(void),293
6246,void st_state_handler_wipe(void),350
6247,static void jtag_transition_after_wipe(void),558
6248,void nstatus_error_toggle(void),583
6249,"/*! Register a hook to execute inside st_config_input_accept_header(), for APP specific setup for",599
6250,void st_config_input_header_hook_register(st_config_input_header_hook_cb_t cb),604
6251,void st_config_init_hook_register(st_config_init_hook_cb_t cb),617
6252,void st_config_state_hook_register(st_config_state_hook_cb_t cb),630
6253,void st_wipe_state_hook_register(st_wipe_state_hook_cb_t cb),643
6254,st_config_state_t st_config_state_get(void),655
6255,void st_config_flags_set(uint32_t flag_pos),666
6256,st_config_event_flag_t st_config_event_get(void),675
6257,void st_config_flags_clear(uint32_t flag_pos),685
6258,st_config_status_t st_config_status_get(void),694
6259,void st_config_state_init(void),704
6260,STATIC void st_mailbox_update(void),742
6261,static void event_nconfig_assert_handler(void),758
6262,static void event_nconfig_deassert_handler(void),789
6263,static void event_jtag_config_handler(void),814
6264,static void event_anti_tamper_handler(void),842
6265,static void event_transition_handler(void),862
6266,void st_config_state_async_event_inject(st_config_event_t event),881
6267,void st_config_main(),1023
6268,"sdm_return_t st_config_init(mbox_cmd_t const * const mbox_commands, uint32_t num_commands)",1059
6269,Copyright (2020-2021) Intel Corporation,3
6270,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6271,static void gpio_isr(void * context),33
6272,sdm_return_t gpio_debounce_logic_enable(),67
6273,sdm_return_t gpio_setup_pin_monitoring(uint32_t pin),83
6274,void gpio_setup_irq(),103
6275,Copyright (2017) Intel Corporation,3
6276,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6277,The defines used with the alt_sdm_jtag_clk_gate_set() function.,51
6278,void st_jtag_isr_init(uint32_t wmark),116
6279,STATIC void alt_sdm_jtag_isr(void* unused),155
6280,"void st_jtag_send_resp(uint32_t *resp, uint32_t *big_buf)",502
6281,"sdm_return_t alt_sdm_jtag_send_resp_dfx_buffer(const uint32_t header, const uint32_t * const data_src, uint32_t word_count, bool * const g_mbox_skip_response)",634
6282,static void alt_sdm_mbox_jtag_wait_for_rsp_fifo(void),710
6283,static bool does_command_need_bigbuf(uint32_t opcode),739
6284,void st_jtag_int_enable(uint32_t mask),777
6285,void st_jtag_disable_main_int(void),787
6286,void st_jtag_usercode_set(uint32_t usercode),818
6287,sdm_return_t st_jtag_fifo_flush(void),834
6288,uint32_t st_jtag_prg_fifo_status(void),866
6289,static void alt_sdm_jtag_int_clear(uint32_t mask),888
6290,static void alt_sdm_jtag_int_disable(uint32_t mask),911
6291,static void alt_sdm_jtag_clk_gate_set(uint32_t config),932
6292,static void alt_sdm_jtag_master_select(alt_sdm_jtag_master_select_t select),954
6293,void st_jtag_init(void),975
6294,static uint32_t alt_sdm_jtag_get_cmdword_info(void),998
6295,static uint32_t alt_sdm_jtag_get_cmdword_payload(void),1008
6296,static void alt_sdm_jtag_set_jtag_cmd_watermark(uint32_t wmark),1018
6297,static uint32_t alt_sdm_jtag_rsp_fifo_stat(void),1029
6298,static uint32_t is_jtag_rsp_fifo_full(void),1039
6299,static void alt_sdm_jtag_rsp_fifo_normal_word(uint32_t val),1049
6300,static void alt_sdm_jtag_rsp_fifo_sync_word(uint32_t val),1059
6301,static uint32_t alt_sdm_jtag_get_rsp_fifo_fill_level(void),1068
6302,uint32_t st_jtag_get_jtag_id_code_ctl(void),1078
6303,uint32_t st_jtag_get_jtag_id_subdev_code_ctl(void),1088
6304,uint32_t st_jtag_get_usercode(void),1098
6305,void alt_sdm_jtag_bootstatus_set(uint32_t error_code),1111
6306,bool jtagctrlsync_issue_22013514671_workaround(),1126
6307,Copyright (2017) Intel Corporation,3
6308,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6309,static bool alt_sdm_mbox_msg_ptr_is_valid(const mbox_msg_t * const ptr_to_chk),169
6310,static bool alt_sdm_mbox_is_config_busy(void){,190
6311,@note  see note above alt_sdm_mbox_reformat_input(),222
6312,"static sdm_return_t alt_sdm_mbox_reformat_output(mbox_msg_t *msg, uint32_t transition_index)",227
6313,"static sdm_return_t alt_sdm_mbox_reformat_input(mbox_msg_t *msg, uint32_t transition_index)",355
6314,"static sdm_return_t alt_sdm_mbox_check_reformat_cmd_data(ALT_SDM_MBOX_CMD code, mbox_msg_t *msg)",493
6315,"static sdm_return_t alt_sdm_mbox_check_reformat_rsp_data(ALT_SDM_MBOX_CMD code, mbox_msg_t *msg)",516
6316,void st_mbox_command_handler(mbox_msg_t *pmsg),540
6317,mbox_msg_t * st_mbox_message_alloc(ALT_SDM_MBOX_SOURCE_t client),739
6318,void st_mbox_message_free(mbox_msg_t * pmsg),771
6319,mbox_msg_t * st_mbox_message_get(void),845
6320,"int32_t st_mbox_message_init(mbox_cmd_t const * const mbox_commands, uint32_t num_commands)",875
6321,int32_t st_mbox_message_put(mbox_msg_t * message),929
6322,uint32_t st_get_mbox_response(),985
6323,void st_mbox_send_response(mbox_msg_t *pmsg),1002
6324,static void alt_sdm_mbox_message_queue_init(message_queue_t *p_queue),1046
6325,"static int32_t alt_sdm_mbox_message_queue_fifo_add(message_queue_t *p_queue, mbox_msg_t *p_msg)",1061
6326,"static int32_t alt_sdm_mbox_message_queue_lifo_add(message_queue_t *p_queue, mbox_msg_t *p_msg)",1097
6327,static mbox_msg_t * alt_sdm_mbox_message_queue_get(message_queue_t *p_queue),1136
6328,@brief query whether or not the device is a config state (non-os case),1165
6329,static bool alt_sdm_mbox_no_os_config_active_get(void),1168
6330,void st_mbox_no_os_config_active_set(bool new_val),1178
6331,"sdm_return_t st_mbox_init(mbox_cmd_t const * const mbox_commands, uint32_t num_commands)",1188
6332,Copyright (2020) Intel Corporation,3
6333,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6334,@brief enum describing mailbox whitelist/blacklist (wlbl) state,41
6335,void st_mbox_hook_execute(ALT_SDM_MBOX_CMD cmd),79
6336,sdm_return_t st_mbox_hook_disable(st_mbox_hook_cb_t cb),113
6337,sdm_return_t st_mbox_hook_enable(st_mbox_hook_cb_t cb),140
6338,Copyright (2018-19) Intel Corporation,3
6339,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6340,"void sdm_mbox_jtag_config_hdlr(ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",52
6341,Copyright (2020) Intel Corporation,3
6342,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6343,@brief enum describing mailbox whitelist/blacklist (wlbl) state,48
6344,STATIC bool not_threadsafe_wlbl_is_cmd_runable(const ALT_SDM_MBOX_CMD code),91
6345,"STATIC sdm_return_t not_threadsafe_wlbl_enable(const st_mbox_wlbl_cmd_group_t *g, st_mbox_wlbl_state_t new_state)",152
6346,STATIC sdm_return_t not_threadsafe_wblist_disable(const st_mbox_wlbl_cmd_group_t *g),185
6347,bool st_mbox_wlbl_is_cmd_runable(const ALT_SDM_MBOX_CMD code),218
6348,sdm_return_t st_mbox_wblist_disable(const st_mbox_wlbl_cmd_group_t *g),237
6349,sdm_return_t st_mbox_wlbl_whitelist_cmds(const st_mbox_wlbl_cmd_group_t *g),256
6350,sdm_return_t st_mbox_wlbl_blacklist_cmds(const st_mbox_wlbl_cmd_group_t *g),275
6351,Copyright (2021) Intel Corporation,3
6352,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6353,@note This is already included in the sequence of sdm_common_early_init().,50
6354,void st_sdm_reset_peripheral(),53
6355,void isr_exception(void),102
6356,This function is called from sdm_early_init(). ,112
6357,void sdm_common_early_init(void),118
6358,This function is called from sdm_startup() as a basic routine of the early initialization. ,203
6359,"APP owners can add APP-specific initialization in this function, in addition to sdm_common_early_init() ",204
6360,It is used by all basic firmware as it is the starting point before main() is called. It,229
6361,purposefully is not enabling interrupt controller until after calling sdm_early_init() because,230
6362,sdm_early_init() is required to run before interrupts and OS have started in all cases. ,231
6363,void sdm_startup(void),239
6364,Copyright (2017-18) Intel Corporation.,3
6365,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6366,@brief sysinit_main() supposed to be called from alt_main() before any of the OS init,145
6367,void sdm_early_init(void),154
6368,void mcore_nios2_tmr_isr(void* isr_context),242
6369,int main(void),261
6370,sdm_return_t tramp_rsu_input_setup_cb(void),308
6371,sdm_return_t tramp_rsu_init_cb(void),343
6372,void tramp_rsu_init_boot(void),378
6373,void tramp_rsu_config_cb(void),476
6374,Note that wipe state already did big hammer (crypto_reset) before calling this callback.,794
6375,sdm_return_t tramp_rsu_wipe_cb(void),800
6376,sdm_return_t tramp_rsu_nconfig_deassert_after_wipe(void),961
6377,Copyright (2018) Intel Corporation.,3
6378,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6379,static tramp_state_t state_load_cmf_main_descriptor(void),151
6380,static tramp_state_t state_load_cmf_signature(void),196
6381,static tramp_state_t state_cmf_transition(void),253
6382,static tramp_state_t state_load_cmf_descriptors(void),301
6383,static tramp_state_t state_upgrade_rsu_images(void),322
6384,static tramp_state_t state_ucmf_error_handling(),342
6385,void sdm_early_init(void),370
6386,void mcore_nios2_tmr_isr(void* isr_context),398
6387,int main(void),408
6388,sdm_return_t tramp_upgrade_input_setup_cb(void),462
6389,sdm_return_t tramp_upgrade_init_cb(void),496
6390,void tramp_upgrade_config_cb(void),530
6391,Note that wipe state already did big hammer (crypto_reset) before calling this callback.,576
6392,sdm_return_t tramp_upgrade_wipe_cb(void),582
6393,sdm_return_t tramp_upgrade_nconfig_deassert_after_wipe(void),682
6394,Copyright (2017) Intel Corporation,3
6395,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6396,STATIC tramp_return_t validate_ssbl_sha(tramp_image_info_t *p_load_img),105
6397,"STATIC tramp_return_t sha_and_read_data_into_ram(const uint32_t *data_ptr, uint32_t *main_hash, uint32_t sha_mode)",147
6398,STATIC tramp_return_t factory_image_size_fit_check(void),213
6399,STATIC tramp_return_t get_old_user_rsu_version(uint32_t *old_user_rsu_version),255
6400,"STATIC tramp_return_t get_old_dcmf_version_and_old_user_rsu_version(uint32_t *old_dcmf_version, uint32_t *old_user_rsu_version)",279
6401,STATIC tramp_return_t get_old_factory_slot_size(uint32_t *size),341
6402,STATIC tramp_return_t validate_and_get_new_factory_image_size(uint32_t *size_in_bytes),416
6403,"STATIC tramp_return_t validate_section_sha(uint32_t main_image_start_addr, uint32_t size, uint32_t expected_sha)",567
6404,"STATIC tramp_return_t read_old_dcmf_pointer(const signature_descriptor_t *sigs, old_dcmf_pointers_t *old_dcmf_ptr)",604
6405,STATIC tramp_return_t validate_new_factory_desc(void),671
6406,STATIC tramp_return_t validate_new_factory_ssbl(void),690
6407,tramp_return_t read_main_image_pointers(const signature_descriptor_t *sigptr),742
6408,tramp_return_t validate_new_dcmf_hdr(void),855
6409,tramp_return_t validate_new_dcmf_ssbl(void),899
6410,tramp_return_t validate_new_dcio(void),949
6411,tramp_return_t validate_new_factory(void),988
6412,2. Then we erase the entire 256K COPY of DCMF located at #(x << 18) where x will increment from 0-3,1059
6413,tramp_return_t copy_new_dcmf_block(void),1065
6414,tramp_return_t copy_new_dcio_block(void),1276
6415,tramp_return_t copy_new_factory_block(void),1342
6416,tramp_return_t adjust_new_dcmf_pointers(void),1437
6417,tramp_return_t erase_all_traces_of_ucmf(void),1477
6418,tramp_return_t remove_ucmf_from_cpb(void),1557
6419,tramp_return_t prep_for_app_img_transition(void),1601
6420,void pre_transition_cleanup_for_ucmf(void),1637
6421,void upgrade_fail_reset(void),1657
6422,Copyright (2018) Intel Corporation,3
6423,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6424,This function will get x size of data (must be 4k aligned),62
6425,@param size_in_bytes is the number of data bytes to fetch from QSPI (must be 4k aligned),67
6426,"tramp_return_t upgrade_qspi_relocate_data(uint32_t qspi_dest_addr, uint32_t qspi_src_addr, uint32_t size_in_bytes)",70
6427,"STATIC tramp_return_t upgrade_transfer_from_qspi_to_inbuf(uint32_t qspi_src_addr, uint32_t size_in_bytes)",186
6428,"STATIC tramp_return_t upgrade_transfer_from_inbuf_to_qspi(uint32_t qspi_dest_addr, uint32_t size_in_bytes)",265
6429,"STATIC tramp_return_t upgrade_check_qspi_addr_size_align(uint32_t qspi_addr, uint32_t size_in_bytes)",372
6430,STATIC sdm_return_t upgrade_qspi_to_inbuf_path_setup(uint32_t size_in_bytes),391
6431,Copyright (2018) Intel Corporation,3
6432,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6433,"tramp_return_t spt_get_factory_partition_len(const sub_partition_table_t* spt0_ptr, const sub_partition_table_t* spt1_ptr, uint32_t *size)",40
6434,Copyright (2017) Intel Corporation,3
6435,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6436,STATIC upgrade_state_t state_idle_handler(void),115
6437,STATIC upgrade_state_t state_val_new_dcmf_desc(void),149
6438,STATIC upgrade_state_t state_val_new_dcmf_ssbl(void),181
6439,STATIC upgrade_state_t state_val_new_dcio(void),210
6440,STATIC upgrade_state_t state_val_new_factory(void),242
6441,STATIC upgrade_state_t state_copy_new_dcmf(void),283
6442,STATIC upgrade_state_t state_copy_new_dcio(void),308
6443,STATIC upgrade_state_t state_copy_new_factory(void),337
6444,STATIC upgrade_state_t state_adjust_new_dcmf_pointers(void),362
6445,STATIC upgrade_state_t state_erase_all_ucmf_trace(void),392
6446,STATIC upgrade_state_t state_remove_ucmf_from_cpb(void),417
6447,STATIC upgrade_state_t state_prep_for_new_dcmf_jump(void),442
6448,STATIC upgrade_state_t state_prep_for_dcmf_jump_on_err(void),529
6449,tramp_return_t upgrade_state_machine(void),575
6450,Copyright (2018) Intel Corporation,3
6451,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6452,delay and return they can use the cmf_timeout_init() and cmf_timeout(),38
6453,void cmf_delay(uint32_t timeout_value),45
6454,cmf_timeout_init() function.,59
6455,cmf_timeout_init() function.,62
6456,bool cmf_timeout(const cmf_timeout_t *timeout),66
6457,@param timeout is a structure that is used when calling to the cmf_timeout(),110
6458,"void cmf_timeout_init(uint32_t timeout_value, cmf_timeout_t *timeout)",115
6459,void cmf_perf_timer_start(void),155
6460,Copyright (2017-2021) Intel Corporation.,3
6461,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6462,void set_cfgstatus_state(uint32_t val),55
6463,void set_cfgstatus_position(uint32_t val),67
6464,uint32_t get_cfgstatus_state(void),77
6465,uint32_t get_cfgstatus_position(),87
6466,@param flash_idx is the current flash image index in use (boot from flash) ,94
6467,void set_cfgstatus_version(uint32_t flash_idx),97
6468,void tramp_set_cfg_status_state(uint32_t cfg_state),110
6469,void tramp_set_cfg_status_pos(uint32_t cfg_pos),129
6470,Copyright (2021) Intel Corporation.,3
6471,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6472,void crypto_context_open(void),44
6473,void crypto_context_set(void),67
6474,const crypto_context_t * const crypto_context_get(),91
6475,sdm_return_t crypto_context_verify(void),100
6476,used after crypto_context_open(),114
6477,void crypto_context_close(void),116
6478,Copyright (2018) Intel Corporation.,3
6479,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6480,static uint32_t tramp_pin_table_to_io(uint32_t idx),319
6481,static uint32_t tramp_pin_table_to_gpio(uint32_t idx),375
6482,"void tramp_pin_table_assert(uint32_t idx, bool assert)",415
6483,tramp_return_t tramp_pin_table_init(const pin_table_t *pin_table),475
6484,pin_table_init().,635
6485,bool tramp_pin_table_valid(),639
6486,bool tramp_validate_pin_table_idx(uint32_t table_idx),650
6487,int32_t tramp_pin_function_get_gpio_input(uint32_t table_idx),666
6488,uint32_t tramp_get_gpio_idx(uint32_t sdm_pin_idx),691
6489,uint8_t tramp_pin_function_role_get(uint32_t sdm_pin_idx),708
6490,uint32_t tramp_get_table_idx_load_factory(void),721
6491,void tramp_set_load_factory_pin(uint32_t pin_value),733
6492,"tramp_return_t tramp_gpio_pin_init(uint32_t sdmio_pin, uint8_t pin_role)",746
6493,"tramp_return_t tramp_dcio_qspi_freq_change(uint32_t as_clk, uint32_t osc_flag, uint32_t osc_freq)",799
6494,bool tramp_dcio_process_loadfactory(void),863
6495,Copyright (2017) Intel Corporation.,3
6496,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6497,void tramp_dma_init(void),53
6498,"tramp_return_t tramp_dma_start(uint32_t *p_data, uint32_t size)",71
6499,bool tramp_dma_done(void),97
6500,"sdm_return_t tramp_dma_rd_nsp_ram(uint32_t *p_src, uint32_t size, bool enable_interrupt)",129
6501,"sdm_return_t tramp_dma_wr_nsp_ram(uint32_t *pDest, uint32_t size, bool enable_interrupt)",196
6502,tramp_return_t tramp_get_load_image_info(,11
6503,Copyright (2017-18) Intel Corporation.,3
6504,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6505,STATIC inline const inbuf_fill_profile_t * const tramp_inbuf_get_current_profile(void),103
6506,tramp_input_sel_t tramp_input_get(void),120
6507,static sdm_return_t config_input_jtag(void),130
6508,static void config_input_avst8(void),157
6509,static void config_input_avst16(void),170
6510,static void config_input_avst16tst(void),183
6511,static void config_input_avst32(void),196
6512,static void config_input_qspi(void),209
6513,tramp_return_t tramp_input_set(uint32_t msel_used),225
6514,STATIC tramp_return_t tramp_inbuf_drain(void),282
6515,STATIC void tramp_inbuf_fill(void),367
6516,void state_tramp_inbuf_restart(void),460
6517,bool tramp_inbuf_done(void),516
6518,tramp_return_t tramp_inbuf_init(in_buf_src_sel_t input),581
6519,tramp_return_t tramp_inbuf_sha_check(uint32_t *p_sha),684
6520,static tramp_return_t reset_jtag_program_fifo_pointers(),720
6521,tramp_return_t tramp_inbuf_sync(void),764
6522,STATIC bool tramp_inbuf_is_last_profile(void),1058
6523,STATIC bool tramp_inbuf_is_last_transfer(void),1063
6524,STATIC tramp_return_t tramp_inbuf_setup_profile(const inbuf_fill_profile_t * const profile),1069
6525,STATIC bool tramp_inbuf_profile_advance(void),1132
6526,"tramp_return_t tramp_inbuf_start(const inbuf_fill_profile_t * const profiles,",1163
6527,"tramp_return_t tramp_inbuf_persist_sig_start(uint32_t size, uint32_t sha_config)",1303
6528,"tramp_return_t tramp_inbuf_persist_br_start(uint32_t size, uint32_t sha_config)",1339
6529,void tramp_inbuf_update(void),1366
6530,static tramp_return_t tramp_jtag_sync_block_alignment(uint32_t sync_data),1407
6531,static void tramp_avst_drop_beat_to_resync(void),1497
6532,@param data will be the value that we have read off the IB(which needs to be re-aligned),1590
6533,"static void drop_beats_to_align_64bit(uint64_t data, uint8_t shift_bits)",1595
6534,static int32_t tramp_fetch_two_words_into_ib(void),1648
6535,static uint64_t get_8_bytes_memmode(uint32_t offset),1696
6536,"tramp_return_t tramp_inbuf_sha_input(uint32_t size, uint32_t sha_config)",1729
6537,static bool tramp_inbuf_is_active(void),1759
6538,"static sdm_return_t tramp_inbuf_adjust(in_buf_select_t fifo, uint32_t count)",1775
6539,Copyright (2017-18) Intel Corporation.,3
6540,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6541,void tramp_bistream_source_qspi_init(void),67
6542,void tramp_bitstream_source_qspi_addr_set(uint32_t val),101
6543,void tramp_qspi_check_failed_flash_img(void),111
6544,is needed to be setup for an nconfig toggle(tramp restart) or to the end of ssbl (regular,132
6545,void qspi_nconfig_boot_trigg(bool val),141
6546,Copyright (2017-18) Intel Corporation.,3
6547,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6548,"static tramp_return_t update_rsu_pointers_from_br_sig(signature_descriptor_t const *sigs,",135
6549,"static tramp_return_t update_rsu_pointers_from_br_sig(signature_descriptor_t const *sigs,",154
6550,void tramp_rsu_factory_image_set(uint8_t value),204
6551,static void process_factory_pin(void),217
6552,static tramp_return_t handle_dcio_section(void),269
6553,static tramp_return_t parse_dcio_section(main_descriptor_t const *main_descriptor),335
6554,static tramp_return_t qspi_freq_change(void),406
6555,void set_rsu_error_var(uint32_t dcmf_error_state),445
6556,tramp_return_t image_failed_boot_handling(void),464
6557,int32_t is_factory_failed(void),608
6558,tramp_return_t find_and_boot_right_image(void),642
6559,static tramp_return_t fetch_and_auth_bitstream_header(uint32_t desc_type),883
6560,@brief This function will copy the data passed in by the ACMF (MBOX data) into local variables.,1015
6561,static void backup_mbox_data_from_handoff(void),1022
6562,static void backup_error_cmf_data_from_handoff(void),1075
6563,failover to the previous running image (that accepted mailbox command) no matter where the failure is.,1089
6564,static void update_rsu_mbox_request_img_failed(void),1094
6565,void update_error_addr_from_curr_add(void),1165
6566,tramp_return_t tramp_rsu_first_boot_check(void),1180
6567,void tramp_rsu_error_addr_get(rsu_err_addr_t *p_error_addr),1252
6568,void tramp_rsu_error_addr_check_before_cpb(void),1268
6569,uint32_t tramp_rsu_get_prev_cmf_addr(void),1301
6570,tramp_return_t tramp_rsu_init(void),1325
6571,tramp_return_t update_handoff_on_error(void),1472
6572,bool tramp_rsu_cmf_compatible_type(uint32_t type),1501
6573,void set_rsu_cmf_type(uint32_t type),1522
6574,void rsu_local_data_clear(void),1531
6575,Copyright (2017-18) Intel Corporation.,3
6576,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6577,static inline uint32_t get_word_from_qspi(void),74
6578,static inline bool cancel_qspi_indrd_cmd(void),94
6579,static inline bool all_qspi_data_consumed(void),133
6580,@param next_image is a ptr that holds the next valid cmf image (needs to be passed in by reference),156
6581,"tramp_return_t tramp_parse_cpb(uint64_t cpb_addr, uint64_t* next_image)",167
6582,"bool tramp_isAddrInCpb(uint64_t cpb_addr, uint64_t image_addr)",393
6583,"tramp_return_t tramp_remove_addr_in_cpb(uint64_t cpb_addr, uint64_t image_addr)",507
6584,Copyright (2019) Intel Corporation,3
6585,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6586,void alt_sdm_sha_enable(uint32_t mode),44
6587,void alt_sdm_sha_last(void),58
6588,uint32_t alt_sdm_sha_csr_lastblk_get(void),70
6589,void alt_sdm_sha_init(void),81
6590,void alt_sdm_sha_clear_digest_present(void),113
6591,void alt_sdm_sha_enable_fifo_read(void),121
6592,void alt_sdm_sha_int_enable(uint32_t mask),135
6593,void alt_sdm_sha_int_disable(uint32_t mask),150
6594,uint32_t alt_sdm_sha_int_status_unmasked(void),157
6595,Copyright (2017-18) Intel Corporation.,3
6596,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6597,static void reset_peripherals(void),80
6598,"tramp_return_t tramp_system_sha_compare(uint32_t const * const p_sha_1,",112
6599,lower 8 bits are 0 and this tramp_system_call_cmf() will manage the lower 8 bits according to BRE requriement.,140
6600,void tramp_system_call_cmf(uint32_t flags),147
6601,void tramp_system_init_early(void),275
6602,"@brief When trampoline is running (note not DCMF), any error happened while RSU_enabled persistent flag",284
6603,void tramp_system_update_error(void),295
6604,tramp_return_t validate_auth_header(void),324
6605,tramp_return_t prep_for_dcmf_transition(void),464
6606,"tramp_return_t read_cmf_version(const cmf_descriptor_t *cmf_ptr, uint32_t *cmf_version)",516
6607,Copyright (2017-18) Intel Corporation.,3
6608,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6609,"void TRAMP_trace(uint32_t key, uint32_t line)",50
6610,void TRAMP_trace_clear(void),67
6611,"static void construct_init_key(cmf_key_t * key, uint32_t slot)",90
6612,"static void tramp_br_pa_setup_test_mode(uintptr_t ssbl_load_addr, uint32_t test_mode)",102
6613,static void tramp_br_pa_setup_none_test_mode(),189
6614,static bool is_rom_patch_enabled(),239
6615,bool tramp_enable_br_pa(),256
6616,uint32_t tramp_pa_get_test_mode(),274
6617,void tramp_br_pa_setup(uintptr_t ssbl_load_addr),292
6618,bool is_re_handoff_valid(),308
6619,Copyright (C) 2021 Intel Corporation. All rights reserved.,3
6620,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
6621,"static sdm_return_t qspi_stig_cmd_read_32_wa( uint32_t opcode,",64
6622,static void perf_timer_start(),97
6623,static void trigger_por(),111
6624,static void qspi_reset_with_stig(),127
6625,"static sdm_return_t qspi_stig_cmd_read_32_wa( uint32_t opcode,",173
6626,static sdm_return_t qspi_sfdp_calib_get( uint32_t *data),194
6627,static sdm_return_t qspi_calibration(),205
6628,static sdm_return_t qspi_dvr_find_width( void ),319
6629,static sdm_return_t hps_assert_por_reset(),363
6630,static void qspi_reset_with_gpio(),432
6631,static void qspi_reset(),450
6632,int __attribute__((noreturn)) main(void),477
6633,"*                          (c) Copyright 2004-2013; Micrium, Inc.; Weston, FL",6
6634,* Programmer(s) : SR,31
6635,* Note(s) : (1) Index into bit pattern table determines the number of leading zeros in an 8-bit value :,87
6636,*                                             CPU_Init(),170
6637,* Description : (1) Initialize CPU module :,172
6638,*                   (a) Initialize CPU timestamps,174
6639,*                   (b) Initialize CPU interrupts disabled time measurements,175
6640,*                   (c) Initialize CPU host name,176
6641,* Argument(s) : none.,179
6642,* Return(s)   : none.,181
6643,* Caller(s)   : Your Product's Application.,183
6644,*               initialization function(s).,186
6645,* Note(s)     : (2) CPU_Init() MUST be called ... :,188
6646,*                   (a) ONLY ONCE from a product's application; ...,190
6647,*                   (b) BEFORE product's application calls any core CPU module function(s),191
6648,*               (3) The following initialization functions MUST be sequenced as follows :,193
6649,*                   (a) CPU_TS_Init()           SHOULD precede ALL calls to other CPU timestamp functions,195
6650,*                   (b) CPU_IntDisMeasInit()    SHOULD precede ALL calls to CPU_CRITICAL_ENTER()/CPU_CRITICAL_EXIT(),197
6651,void  CPU_Init (void),202
6652,*                                         CPU_SW_Exception(),227
6653,* Argument(s) : none.,231
6654,* Return(s)   : none.,233
6655,* Caller(s)   : various.,235
6656,* Note(s)     : (1) CPU_SW_Exception() deadlocks the current code execution -- whether multi-tasked/,237
6657,*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.,241
6658,void  CPU_SW_Exception (void),245
6659,*                                            CPU_NameClr(),255
6660,* Argument(s) : none.,259
6661,* Return(s)   : none.,261
6662,"* Caller(s)   : CPU_NameInit(),",263
6663,*               This function is a CPU module application programming interface (API) function & MAY be,266
6664,*               called by application function(s).,267
6665,* Note(s)     : none.,269
6666,void  CPU_NameClr (void),274
6667,*                                            CPU_NameGet(),289
6668,* Argument(s) : p_name      Pointer to an ASCII character array that will receive the return CPU host,293
6669,*                               name ASCII string from this function (see Note #1).,294
6670,* Return(s)   : none.,301
6671,* Caller(s)   : Application.,303
6672,*               This function is a CPU module application programming interface (API) function & MAY,305
6673,*               be called by application function(s).,306
6674,* Note(s)     : (1) The size of the ASCII character array that will receive the return CPU host name,308
6675,*                   (a) MUST   be greater than or equal to the current CPU host name's ASCII string,311
6676,*                   (b) SHOULD be greater than or equal to CPU_CFG_NAME_SIZE,313
6677,"void  CPU_NameGet (CPU_CHAR  *p_name,",318
6678,*                                            CPU_NameSet(),346
6679,* Argument(s) : p_name      Pointer to CPU host name to set.,350
6680,*                               CPU_ERR_NAME_SIZE               Invalid CPU host name size (see Note #1).,356
6681,* Return(s)   : none.,358
6682,* Caller(s)   : Application.,360
6683,*               This function is a CPU module application programming interface (API) function & MAY be,362
6684,*               called by application function(s).,363
6685,"* Note(s)     : (1) 'p_name' ASCII string size, including the terminating NULL character, MUST be less",365
6686,"void  CPU_NameSet (const  CPU_CHAR  *p_name,",371
6687,*                                           CPU_TS_Get32(),406
6688,* Argument(s) : none.,410
6689,* Return(s)   : Current 32-bit CPU timestamp (in timestamp timer counts).,412
6690,* Caller(s)   : Application.,414
6691,*               This function is a CPU module application programming interface (API) function & MAY,416
6692,*               be called by application function(s).,417
6693,"* Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by",419
6694,*                       (a) Time measured  =  Number timer counts  *  Timer period,422
6695,*                                                               (fractional) seconds,428
6696,*                                                               units of (fractional) seconds,430
6697,*                       (b) Time measured  =  ---------------------,434
6698,*                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.,444
6699,"*               (3) After initialization, 'CPU_TS_32_Accum' & 'CPU_TS_32_TmrPrev' MUST ALWAYS",450
6700,CPU_TS32  CPU_TS_Get32 (void),457
6701,*                                           CPU_TS_Get64(),487
6702,* Argument(s) : none.,491
6703,* Return(s)   : Current 64-bit CPU timestamp (in timestamp timer counts).,493
6704,* Caller(s)   : Application.,495
6705,*               This function is a CPU module application programming interface (API) function & MAY,497
6706,*               be called by application function(s).,498
6707,"* Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by",500
6708,*                       (a) Time measured  =  Number timer counts  *  Timer period,503
6709,*                                                               (fractional) seconds,509
6710,*                                                               units of (fractional) seconds,511
6711,*                       (b) Time measured  =  ---------------------,515
6712,*                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.,525
6713,"*               (3) After initialization, 'CPU_TS_64_Accum' & 'CPU_TS_64_TmrPrev' MUST ALWAYS",531
6714,CPU_TS64  CPU_TS_Get64 (void),538
6715,*                                           CPU_TS_Update(),568
6716,* Description : Update current CPU timestamp(s).,570
6717,* Argument(s) : none.,572
6718,* Return(s)   : none.,574
6719,* Caller(s)   : Application/BSP periodic time handler (see Note #1).,576
6720,*               application/BSP function(s).,579
6721,* Note(s)     : (1) (a) CPU timestamp(s) MUST be updated periodically by some application (or BSP) time,581
6722,*                       handler in order to (adequately) maintain CPU timestamp(s)' time.,582
6723,*                   (b) CPU timestamp(s) MUST be updated more frequently than the CPU timestamp timer,584
6724,"*                       overflows; otherwise, CPU timestamp(s) will lose time.",585
6725,*                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c2'.,587
6726,void  CPU_TS_Update (void),592
6727,*                                         CPU_TS_TmrFreqGet(),609
6728,* Argument(s) : p_err       Pointer to variable that will receive the return error code from this function :,613
6729,"* Return(s)   : CPU timestamp's timer frequency (in Hertz), if NO error(s).",620
6730,* Caller(s)   : Application.,624
6731,*               This function is a CPU module application programming interface (API) function & MAY be,626
6732,*               called by application function(s).,627
6733,* Note(s)     : none.,629
6734,CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err),634
6735,*                                         CPU_TS_TmrFreqSet(),653
6736,* Argument(s) : freq_hz     Frequency (in Hertz) to set for CPU timestamp's timer.,657
6737,* Return(s)   : none.,659
6738,"* Caller(s)   : CPU_TS_TmrInit(),",661
6739,*               Application/BSP initialization function(s).,662
6740,*               application/BSP function(s) [see Note #1].,665
6741,* Note(s)     : (1) (a) (1) CPU timestamp timer frequency is NOT required for internal CPU timestamp,667
6742,*                           operations but may OPTIONALLY be configured by CPU_TS_TmrInit() or other,668
6743,*                       (2) CPU timestamp timer frequency MAY be used with optional CPU_TSxx_to_uSec(),671
6744,*                           See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2a'.,674
6745,*                   (b) CPU timestamp timer period SHOULD be less than the typical measured time but MUST,676
6746,*                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2b'.,680
6747,void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz),685
6748,*                                     CPU_IntDisMeasMaxCurReset(),694
6749,* Argument(s) : none.,698
6750,* Return(s)   : Maximum interrupts disabled time (in CPU timestamp timer counts) before resetting.,700
6751,*               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c',702
6752,*                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.,703
6753,* Caller(s)   : Application.,705
6754,*               This function is a CPU module application programming interface (API) function,707
6755,*               & MAY be called by application function(s).,708
6756,"* Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed",710
6757,CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void),716
6758,*                                      CPU_IntDisMeasMaxCurGet(),734
6759,* Argument(s) : none.,738
6760,* Return(s)   : Current maximum interrupts disabled time (in CPU timestamp timer counts).,740
6761,*               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c',742
6762,*                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.,743
6763,"* Caller(s)   : CPU_IntDisMeasMaxCurReset(),",745
6764,*               This function is a CPU module application programming interface (API) function,748
6765,*               & MAY be called by application function(s).,749
6766,"* Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed",751
6767,CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void),757
6768,*                                       CPU_IntDisMeasMaxGet(),776
6769,* Description : Get (non-resetable) maximum interrupts disabled time.,778
6770,* Argument(s) : none.,780
6771,* Return(s)   : (Non-resetable) maximum interrupts disabled time (in CPU timestamp timer counts).,782
6772,*               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c',784
6773,*                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.,785
6774,"* Caller(s)   : CPU_IntDisMeasInit(),",787
6775,*               This function is a CPU module application programming interface (API) function,790
6776,*               & MAY be called by application function(s).,791
6777,"* Note(s)     : (1) After initialization, 'CPU_IntDisMeasMax_cnts' MUST ALWAYS be accessed",793
6778,CPU_TS_TMR  CPU_IntDisMeasMaxGet (void),799
6779,*                                        CPU_IntDisMeasStart(),818
6780,* Argument(s) : none.,822
6781,* Return(s)   : none.,824
6782,* Caller(s)   : CPU_CRITICAL_ENTER().,826
6783,*               function(s).,829
6784,* Note(s)     : none.,831
6785,void  CPU_IntDisMeasStart (void),836
6786,*                                        CPU_IntDisMeasStop(),849
6787,* Argument(s) : none.,853
6788,* Return(s)   : none.,855
6789,* Caller(s)   : CPU_CRITICAL_EXIT().,857
6790,*               function(s).,860
6791,* Note(s)     : (1) (a) The total amount of time interrupts are disabled by system &/or application code,862
6792,*                       (1) When interrupts disabled time measurements are disabled :,865
6793,*                                          |              (via application)    |,884
6794,*                           (A) time            =  [ time            -  time           ]  -  time,890
6795,*                               (via application),893
6796,*                           (B) time       =  time              +  time,896
6797,*                                                disabled               last  critical section exit (i.e.,905
6798,*                                           (via application)           minus total overhead time),906
6799,*                       (2) When interrupts disabled time measurements are enabled :,930
6800,*                                   time                  (via application)      time,950
6801,*                           (A) time            =  [ time       -  time      ]  -  time,955
6802,*                               (via application),958
6803,*                           (B) time            =  time            +  time,961
6804,*                                                disabled               section exit (i.e. minus measurement,970
6805,"*                                           (via application)           overhead time; however, this does NOT",971
6806,*                                               start                   measurement (in timer counts),977
6807,*                                               stop                    measurement (in timer counts),981
6808,*                                               total meas              interrupts time measurements (in timer,986
6809,*                                                 ovrhd                 function  (in timer counts),991
6810,*                                                 ovrhd                 stop time (in timer counts),995
6811,*                   (b) (1) (A) In order to correctly handle unsigned subtraction overflows of start times,998
6812,*                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2a'.,1002
6813,*                           (B) Since unsigned subtraction of start times from stop times assumes increasing,1004
6814,*                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2b'.,1007
6815,*                       (2) (A) To expedite & reduce interrupts disabled time measurement overhead; only the,1009
6816,*                           (B) The final calculations to subtract the interrupts disabled time measurement,1012
6817,*                               See also 'CPU_IntDisMeasMaxCalc()  Note #1b'.,1015
6818,void  CPU_IntDisMeasStop (void),1020
6819,*                                         CPU_CntLeadZeros(),1045
6820,* Argument(s) : val         Data value to count leading zero bits.,1049
6821,"* Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val', if NO error(s).",1051
6822,"* Caller(s)   : CPU_CntTrailZeros(),",1055
6823,*               This function is a CPU module application programming interface (API) function & MAY,1058
6824,*               be called by application function(s).,1059
6825,* Note(s)     : (1) (a) Supports the following data value sizes :,1061
6826,*                       (1)  8-bits,1063
6827,*                       (2) 16-bits,1064
6828,*                       (3) 32-bits,1065
6829,*                       (4) 64-bits,1066
6830,*                   (b) (1) For  8-bit values :,1070
6831,*                       (2) For 16-bit values :,1085
6832,*                       (3) For 32-bit values :,1101
6833,*                       (4) For 64-bit values :,1118
6834,CPU_DATA  CPU_CntLeadZeros (CPU_DATA  val),1140
6835,*                                        CPU_CntLeadZeros08(),1169
6836,* Argument(s) : val         Data value to count leading zero bits.,1173
6837,"* Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.",1175
6838,"* Caller(s)   : CPU_CntLeadZeros(),",1177
6839,"*               CPU_CntTrailZeros08(),",1178
6840,*               This function is a CPU module application programming interface (API) function & MAY be,1181
6841,*               called by application function(s).,1182
6842,* Note(s)     : (1) Supports  8-bit values :,1184
6843,CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val),1204
6844,*                                        CPU_CntLeadZeros16(),1234
6845,* Argument(s) : val         Data value to count leading zero bits.,1238
6846,"* Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.",1240
6847,"* Caller(s)   : CPU_CntLeadZeros(),",1242
6848,"*               CPU_CntTrailZeros16(),",1243
6849,*               This function is a CPU module application programming interface (API) function & MAY be,1246
6850,*               called by application function(s).,1247
6851,* Note(s)     : (1) Supports 16-bit values :,1249
6852,CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val),1271
6853,*                                        CPU_CntLeadZeros32(),1307
6854,* Argument(s) : val         Data value to count leading zero bits.,1311
6855,"* Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.",1313
6856,"* Caller(s)   : CPU_CntLeadZeros(),",1315
6857,"*               CPU_CntTrailZeros32(),",1316
6858,*               This function is a CPU module application programming interface (API) function & MAY be,1319
6859,*               called by application function(s).,1320
6860,* Note(s)     : (1) Supports 32-bit values :,1322
6861,CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val),1344
6862,*                                        CPU_CntLeadZeros64(),1394
6863,* Argument(s) : val         Data value to count leading zero bits.,1398
6864,"* Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.",1400
6865,"* Caller(s)   : CPU_CntLeadZeros(),",1402
6866,"*               CPU_CntTrailZeros64(),",1403
6867,*               This function is a CPU module application programming interface (API) function & MAY be,1406
6868,*               called by application function(s).,1407
6869,* Note(s)     : (1) Supports 64-bit values :,1409
6870,CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val),1431
6871,*                                         CPU_CntTrailZeros(),1509
6872,* Argument(s) : val         Data value to count trailing zero bits.,1513
6873,"* Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.",1515
6874,* Caller(s)   : Application.,1517
6875,*               This function is a CPU module application programming interface (API) function & MAY,1519
6876,*               be called by application function(s).,1520
6877,* Note(s)     : (1) (a) Supports the following data value sizes :,1522
6878,*                       (1)  8-bits,1524
6879,*                       (2) 16-bits,1525
6880,*                       (3) 32-bits,1526
6881,*                       (4) 64-bits,1527
6882,*                   (b) (1) For  8-bit values :,1531
6883,*                       (2) For 16-bit values :,1546
6884,*                       (3) For 32-bit values :,1563
6885,*                       (4) For 64-bit values :,1580
6886,"*               (2) For non-zero values, the returned number of contiguous, least-significant, trailing",1596
6887,*               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculations :,1599
6888,*                   (a) CPU_CntTrailZeros()'s final conditional statement calculates 'val's number of,1601
6889,*                           if (val != 0u) {,1605
6890,CPU_DATA  CPU_CntTrailZeros (CPU_DATA  val),1617
6891,*                                        CPU_CntTrailZeros08(),1642
6892,* Argument(s) : val         Data value to count trailing zero bits.,1646
6893,"* Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.",1648
6894,* Caller(s)   : Application.,1650
6895,*               This function is a CPU module application programming interface (API) function & MAY be,1652
6896,*               called by application function(s).,1653
6897,* Note(s)     : (1) Supports  8-bit values :,1655
6898,"*               (2) For non-zero values, the returned number of contiguous, least-significant, trailing",1670
6899,*               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculations :,1673
6900,"*                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's",1675
6901,*                       If the returned number of zeros exceeds CPU_CntTrailZeros08()'s  8-bit return,1677
6902,*                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros08()'s return data size :,1679
6903,*                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_08  * DEF_OCTET_NBR_BITS)) {,1682
6904,*                       optimized CPU_CntTrailZeros() avoids having to offset the number of returned,1690
6905,"*                   (b) For CPU_CntTrailZeros08()'s C implementation, the final conditional statement",1693
6906,*                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros08()'s,1694
6907,*                           if (val != 0u) {,1698
6908,CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val),1710
6909,*                                        CPU_CntTrailZeros16(),1744
6910,* Argument(s) : val         Data value to count trailing zero bits.,1748
6911,"* Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.",1750
6912,* Caller(s)   : Application.,1752
6913,*               This function is a CPU module application programming interface (API) function & MAY be,1754
6914,*               called by application function(s).,1755
6915,* Note(s)     : (1) Supports 16-bit values :,1757
6916,"*               (2) For non-zero values, the returned number of contiguous, least-significant, trailing",1774
6917,*               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculations :,1777
6918,"*                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's",1779
6919,*                       If the returned number of zeros exceeds CPU_CntTrailZeros16()'s 16-bit return,1781
6920,*                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros16()'s return data size :,1783
6921,*                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_16  * DEF_OCTET_NBR_BITS)) {,1786
6922,*                       optimized CPU_CntTrailZeros() avoids having to offset the number of returned,1794
6923,"*                   (b) For CPU_CntTrailZeros16()'s C implementation, the final conditional statement",1797
6924,*                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros16()'s,1798
6925,*                           if (val != 0u) {,1802
6926,CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val),1814
6927,*                                        CPU_CntTrailZeros32(),1848
6928,* Argument(s) : val         Data value to count trailing zero bits.,1852
6929,"* Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.",1854
6930,* Caller(s)   : Application.,1856
6931,*               This function is a CPU module application programming interface (API) function & MAY be,1858
6932,*               called by application function(s).,1859
6933,* Note(s)     : (1) Supports 32-bit values :,1861
6934,"*               (2) For non-zero values, the returned number of contiguous, least-significant, trailing",1878
6935,*               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculations :,1881
6936,"*                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's",1883
6937,*                       If the returned number of zeros exceeds CPU_CntTrailZeros32()'s 32-bit return,1885
6938,*                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros32()'s return data size :,1887
6939,*                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_32  * DEF_OCTET_NBR_BITS)) {,1890
6940,*                       optimized CPU_CntTrailZeros() avoids having to offset the number of returned,1898
6941,"*                   (b) For CPU_CntTrailZeros32()'s C implementation, the final conditional statement",1901
6942,*                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros32()'s,1902
6943,*                           if (val != 0u) {,1906
6944,CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val),1918
6945,*                                        CPU_CntTrailZeros64(),1952
6946,* Argument(s) : val         Data value to count trailing zero bits.,1956
6947,"* Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.",1958
6948,* Caller(s)   : Application.,1960
6949,*               This function is a CPU module application programming interface (API) function & MAY be,1962
6950,*               called by application function(s).,1963
6951,* Note(s)     : (1) Supports 64-bit values :,1965
6952,"*               (2) For non-zero values, the returned number of contiguous, least-significant, trailing",1982
6953,*               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculations :,1985
6954,"*                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's",1987
6955,*                       If the returned number of zeros exceeds CPU_CntTrailZeros64()'s 64-bit return,1989
6956,*                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros64()'s return data size :,1991
6957,*                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_64  * DEF_OCTET_NBR_BITS)) {,1994
6958,*                       optimized CPU_CntTrailZeros() avoids having to offset the number of returned,2002
6959,"*                   (b) For CPU_CntTrailZeros64()'s C implementation, the final conditional statement",2005
6960,*                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros64()'s,2006
6961,*                           if (val != 0u) {,2010
6962,CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val),2022
6963,*                                           CPU_NameInit(),2064
6964,* Argument(s) : none.,2068
6965,* Return(s)   : none.,2070
6966,* Caller(s)   : CPU_Init().,2072
6967,* Note(s)     : none.,2074
6968,static  void  CPU_NameInit (void),2079
6969,*                                            CPU_TS_Init(),2088
6970,* Description : (1) Initialize CPU timestamp :,2090
6971,*                   (a) Initialize/start CPU timestamp timer                            See Note #1,2092
6972,*                   (b) Initialize       CPU timestamp controls,2093
6973,* Argument(s) : none.,2096
6974,* Return(s)   : none.,2098
6975,* Caller(s)   : CPU_Init().,2100
6976,* Note(s)     : (1) The following initialization MUST be sequenced as follows :,2102
6977,*                   (a) CPU_TS_TmrFreq_Hz     MUST be initialized prior to CPU_TS_TmrInit(),2104
6978,*                   See also 'CPU_Init()  Note #3a'.,2109
6979,static  void  CPU_TS_Init (void),2115
6980,*                                        CPU_IntDisMeasInit(),2157
6981,* Description : (1) Initialize interrupts disabled time measurements feature :,2159
6982,*                   (a) Initialize interrupts disabled time measurement controls,2161
6983,*                   (b) Calculate  interrupts disabled time measurement overhead,2162
6984,* Argument(s) : none.,2165
6985,* Return(s)   : none.,2167
6986,* Caller(s)   : CPU_Init().,2169
6987,* Note(s)     : (2) CPU_IntDisMeasInit() SHOULD precede ALL calls to CPU_CRITICAL_ENTER()/CPU_CRITICAL_EXIT(),2171
6988,*                   See also 'CPU_Init()  Note #3b'.,2175
6989,*               (3) (a) (1) Interrupts disabled time measurement overhead performed multiple times to calculate,2177
6990,"*                       (2) However, a single overhead time measurement is recommended, even for instruction-",2180
6991,*                   (b) Interrupts MUST be disabled while measuring the interrupts disabled time measurement,2186
6992,static  void  CPU_IntDisMeasInit (void),2194
6993,*                                       CPU_IntDisMeasMaxCalc(),2230
6994,"* Argument(s) : time_tot_cnts   Total interrupt disabled time, in timer counts.",2234
6995,* Return(s)   : Maximum interrupts disabled time (in CPU timestamp timer counts).,2236
6996,"* Caller(s)   : CPU_IntDisMeasMaxCurGet(),",2238
6997,*               CPU_IntDisMeasMaxGet().,2239
6998,* Note(s)     : (1) (a) The total amount of time interrupts are disabled by system &/or application code,2241
6999,*                       (1) time            =   [ time      -  time      ]  -  time,2244
7000,*                           (via application),2247
7001,*                       (2) time            =  time            +  time,2250
7002,*                                       (via application)           time measurement overhead,2260
7003,*                                           start                   measurement (in timer counts),2263
7004,*                                           stop                    measurement (in timer counts),2267
7005,*                                           total meas              interrupts time measurements (in timer,2271
7006,*                                             ovrhd                 function  (in timer counts),2276
7007,*                                             ovrhd                 stop time (in timer counts),2280
7008,"*                   (b) To expedite & reduce interrupts disabled time measurement overhead, the final",2283
7009,*                       See also 'CPU_IntDisMeasStop()  Note #1b2'.,2287
7010,*                   (c) The amount of time interrupts are disabled is calculated by either of the,2289
7011,*                       (1) Interrupts disabled time  =  Number timer counts  *  Timer period,2292
7012,*                                                                       (fractional) seconds,2298
7013,*                                                                       (fractional) seconds as the,2301
7014,*                       (2) Interrupts disabled time  =  ---------------------,2305
7015,*                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c',2316
7016,*                              & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.,2317
7017,"*               (2) Although it is not typical, it is possible for an interrupts disabled time",2319
7018,static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc (CPU_TS_TMR  time_tot_cnts),2327
7019,"*                                      (c) Copyright 2009, Micrium, Weston, FL",7
7020,* Note(s)    : none,51
7021,void  OSIdleTaskHook (void),55
7022,* Description: This function is called by OSInit() at the beginning of OSInit().,69
7023,* Note(s)    : none,73
7024,void  OSInitHook (void),77
7025,* Note(s)    : none,91
7026,void  OSStatTaskHook (void),95
7027,* Note(s)    : none,113
7028,void  OSTaskCreateHook (OS_TCB *p_tcb),116
7029,* Note(s)    : none,138
7030,void  OSTaskDelHook (OS_TCB *p_tcb),142
7031,* Note(s)    : none,163
7032,void  OSTaskReturnHook (OS_TCB  *p_tcb),167
7033,* Description: This function is called by OS_Task_Create() to initialize the stack frame of the task being created. This,183
7034,*              opt           specifies options that can be used to alter the behavior of OS_Task_StkInit().,195
7035,*                            (see OS.H for OS_TASK_OPT_xxx).,196
7036,* Note(s)    : 1) Interrupts are enabled when your task starts executing.,201
7037,"CPU_STK     *OSTaskStkInit         (OS_TASK_PTR     p_task,",206
7038,* Note(s)    : 1) Interrupts are disabled during this call.,271
7039,"*                 'switched in' (i.e. the highest priority task) and, 'OSTCBCurPtr' points to the task being switched out",273
7040,*                 (i.e. the preempted task).,274
7041,void  OSTaskSwHook (void),278
7042,* Note(s)    : 1) This function is assumed to be called from the Tick ISR.,341
7043,void  OSTimeTickHook (void),349
7044,"*                          (c) Copyright 2004-2013; Micrium, Inc.; Weston, FL",6
7045,* Programmer(s) : MG,34
7046,*                                            CPU_SR_Save(),57
7047,* Argument(s) : none.,61
7048,"* Return(s)   : The CPU's status register, so that interrupts can later be returned to their original",63
7049,* Note(s)     : none.,66
7050,CPU_SR  CPU_SR_Save (void),70
7051,*                                          CPU_SR_Restore(),78
7052,* Argument(s) : cpu_sr    The interrupt status that will be restored.,82
7053,* Return(s)   : none.,84
7054,* Note(s)     : none.,86
7055,void  CPU_SR_Restore (CPU_SR  cpu_sr),90
7056,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7057,* Note(s)    : none,48
7058,void  App_OS_SetAllHooks (void),52
7059,* Note(s)    : none,80
7060,void  App_OS_ClrAllHooks (void),84
7061,* Note(s)    : none,112
7062,void  App_OS_TaskCreateHook (OS_TCB  *p_tcb),116
7063,* Note(s)    : none,130
7064,void  App_OS_TaskDelHook (OS_TCB  *p_tcb),134
7065,* Note(s)    : none,149
7066,void  App_OS_TaskReturnHook (OS_TCB  *p_tcb),153
7067,* Note(s)    : none,168
7068,void  App_OS_IdleTaskHook (void),172
7069,* Description: This function is called by OSInit() at the beginning of OSInit().,182
7070,* Note(s)    : none,186
7071,void  App_OS_InitHook (void),190
7072,* Note(s)    : none,205
7073,void  App_OS_StatTaskHook (void),209
7074,* Note(s)    : 1) Interrupts are disabled during this call.,224
7075,"*                 'switched in' (i.e. the highest priority task) and, 'OSTCBCurPtr' points to the task being switched out",226
7076,*                 (i.e. the preempted task).,227
7077,void  App_OS_TaskSwHook (void),231
7078,* Note(s)    : 1) This function is assumed to be called from the Tick ISR.,245
7079,void  App_OS_TimeTickHook (void),249
7080,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7081,*                                       OS CONFIGURATION (APPLICATION SPECIFICS),9
7082,* Note(s) : DO NOT CHANGE THIS FILE!,33
7083,CPU_INT32U     const  OSCfg_DataSizeRAM          = sizeof(OSCfg_IdleTaskStk),186
7084,"* Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out the 'const'",223
7085,*              (2) You may decide to 'compile out' the code (by using #if 0/#endif) INSIDE the function if your compiler,225
7086,void  OSCfg_Init (void),230
7087,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7088,"*              creating any uC/OS-III object and, prior to calling OS_Start().",52
7089,*                                Other          Other OS_ERR_xxx depending on the sub-functions called by OSInit().,57
7090,void  OSInit (OS_ERR  *p_err),62
7091,*              (ISR).  This allows uC/OS-III to keep track of interrupt nesting and thus only perform rescheduling at,254
7092,* Note(s)    : 1) This function MUST be called with interrupts already disabled,261
7093,*              3) You MUST still call OSIntExit() even though you increment 'OSIntNestingCtr' directly.,267
7094,"*              4) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every call to OSIntEnter()",269
7095,*                 (or direct increment to OSIntNestingCtr) at the beginning of the ISR you MUST have a call to OSIntExit(),270
7096,void  OSIntEnter (void),277
7097,"* Note(s)    : 1) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every call to OSIntEnter()",303
7098,*                 (or direct increment to OSIntNestingCtr) at the beginning of the ISR you MUST have a call to OSIntExit(),304
7099,*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock()),307
7100,void  OSIntExit (void),311
7101,* Note(s)    : none,371
7102,void  OSSafetyCriticalStart (void),376
7103,*              from ISRs (see OSIntExit() for ISR rescheduling).,390
7104,* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock()),396
7105,void  OSSched (void),400
7106,"* Note(s)    : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for every",456
7107,*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().,457
7108,void  OSSchedLock (OS_ERR  *p_err),461
7109,"* Note(s)    : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for every call to",517
7110,*                 OSSchedLock() you MUST have a call to OSSchedUnlock().,518
7111,void  OSSchedUnlock (OS_ERR  *p_err),522
7112,* Arguments  : en                determines whether round-robin will be enabled (when DEF_EN) or not (when DEF_DIS),576
7113,"void  OSSchedRoundRobinCfg (CPU_BOOLEAN   en,",589
7114,* Argument(s): p_err      is a pointer to a variable that will contain an error code returned by this function.,628
7115,* Note(s)    : 1) This function MUST be called from a task.,638
7116,void  OSSchedRoundRobinYield (OS_ERR  *p_err),643
7117,"*              created.  Before you can call OSStart(), you MUST have called OSInit() and you MUST have created at least",704
7118,* Argument(s): p_err      is a pointer to a variable that will contain an error code returned by this function.,707
7119,*                             OS_ERR_FATAL_RETURN    OS was running and OSStart() returned.,709
7120,"*                             OS_ERR_OS_RUNNING      OS is already running, OSStart() has no effect",710
7121,* Note(s)    : 1) OSStartHighRdy() MUST:,714
7122,"*                 a) Call OSTaskSwHook() then,",715
7123,"*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.",719
7124,void  OSStart (OS_ERR  *p_err),723
7125,"* Arguments  : p_err   is a pointer to a variable that will receive an error code.  However, OSVersion() set this",753
7126,CPU_INT16U  OSVersion (OS_ERR  *p_err),762
7127,*              they are ALL waiting for event(s) to occur.,781
7128,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,787
7129,*              2) OSIdleTaskHook() is called after the critical section to ensure that interrupts will be enabled for at,789
7130,"*                 least a few instructions.  On some processors (ex. Philips XA), enabling and then disabling interrupts",790
7131,void  OS_IdleTask (void  *p_arg),798
7132,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,829
7133,void  OS_IdleTaskInit (OS_ERR  *p_err),833
7134,*              exist because it is common to a number of OSxxxPend() services.,869
7135,* Arguments  : p_pend_data    is a pointer to an object used to link the task being blocked to the list of task(s),871
7136,*                                 OS_TASK_PEND_ON_TASK_Q     <- No object (pending for a message sent to the task),880
7137,*                                 OS_TASK_PEND_ON_TASK_SEM   <- No object (pending on a signal sent to the task),884
7138,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,890
7139,"void  OS_Pend (OS_PEND_DATA  *p_pend_data,",894
7140,* Description: This function is called by OSxxxPendAbort() functions to abort pending on an event.,932
7141,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,944
7142,"void  OS_PendAbort (OS_PEND_OBJ  *p_obj,",948
7143,"*              For example, if the task pends on six (6) objects, the address of those 6 objects are placed in the",1020
7144,"*              OS_TCB would be set to six (6) in this case.  As shown, when the pend call returns because a task pend",1022
7145,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1055
7146,"void  OS_PendAbort1 (OS_PEND_OBJ  *p_obj,",1059
7147,*              p_pend_data_tbl    is a pointer to a table (see below) of OS_PEND_DATA elements to initialize.,1094
7148,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.,1116
7149,"void  OS_PendDataInit (OS_TCB        *p_tcb,",1124
7150,* Note(s)    : 1) These functions are INTERNAL to uC/OS-III and your application must not call it.,1161
7151,"void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,",1167
7152,"void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,",1200
7153,*              The drawing below shows an example of a task (OS_TCB) that belongs to 3 separate pend lists.  Each,1231
7154,*              pend list can contain multiple tasks (the .PrevPtr and .NextPtr show a '?' to indicate this).  The OS_TCB,1232
7155,*              contains a pointer (.PendDataTblPtr) to the first entry in the list of pend lists.,1233
7156,*                                      Point to first entry in the OS_PEND_DATA table (i.e. [0])    +--------------------+,1240
7157,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1294
7158,void  OS_PendListChangePrio (OS_TCB   *p_tcb),1300
7159,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.,1337
7160,void  OS_PendListInit (OS_PEND_LIST  *p_pend_list),1341
7161,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1391
7162,"void  OS_PendListInsertHead (OS_PEND_LIST  *p_pend_list,",1395
7163,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1476
7164,"void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,",1483
7165,*                           REMOVE TASK FROM PEND LIST(s) KNOWING ONLY WHICH TCB TO REMOVE,1539
7166,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1582
7167,void  OS_PendListRemove (OS_TCB  *p_tcb),1586
7168,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1657
7169,"void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,",1661
7170,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,1711
7171,"void  OS_PendObjDel (OS_PEND_OBJ  *p_obj,",1715
7172,"*              For example, if the task pends on six (6) objects, the address of those 6 objects are placed in the",1783
7173,"*              set to six (6) in this case.  As shown, when the pend call returns because a task deleted 'Obj C' then,",1785
7174,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1818
7175,"void  OS_PendObjDel1 (OS_PEND_OBJ  *p_obj,",1822
7176,*              OSxxxPost() services.,1851
7177,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,1867
7178,"void  OS_Post (OS_PEND_OBJ  *p_obj,",1871
7179,"*              For example, if the task pends on six (6) objects, the address of those 6 objects are placed in the",1959
7180,"*              set to six (6) in this case.  As shown, when the pend call returns because a task or an ISR posted to",1961
7181,*              p_void       is the actual message (assuming posting to a message queue).  A NULL pointer otherwise.,1990
7182,*              msg_size     is the size of the message sent (if posted to a message queue),1992
7183,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1998
7184,"void  OS_Post1 (OS_PEND_OBJ  *p_obj,",2002
7185,* Description: This function is called by OSInit() to initialize the ready list.  The ready list contains a list of all,2035
7186,"*              three fields.  The number of OS_TCBs in the list (i.e. .NbrEntries), a pointer to the first OS_TCB in the",2037
7187,*              OS_RDY_LIST (i.e. .HeadPtr) and a pointer to the last OS_TCB in the OS_RDY_LIST (i.e. .TailPtr).,2038
7188,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,2068
7189,void  OS_RdyListInit (void),2072
7190,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,2102
7191,void  OS_RdyListInsert (OS_TCB  *p_tcb),2106
7192,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,2173
7193,void  OS_RdyListInsertHead (OS_TCB  *p_tcb),2177
7194,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,2254
7195,void  OS_RdyListInsertTail (OS_TCB  *p_tcb),2258
7196,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,2331
7197,void  OS_RdyListMoveHeadToTail (OS_RDY_LIST  *p_rdy_list),2335
7198,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,2418
7199,void  OS_RdyListRemove (OS_TCB  *p_tcb),2422
7200,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,2473
7201,void  OS_Sched0 (void),2478
7202,* Note(s)    : 1) The are internal functions to uC/OS-III and MUST not be called by your application code.,2507
7203,*              3) We are reading the CPU_TS_TmrRd() directly even if this is a 16-bit timer.  The reason is that we,2511
7204,void  OS_SchedLockTimeMeasStart (void),2519
7205,void  OS_SchedLockTimeMeasStop (void),2529
7206,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,2560
7207,void  OS_SchedRoundRobin (OS_RDY_LIST  *p_rdy_list),2565
7208,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,2634
7209,"void  OS_TaskBlock (OS_TCB   *p_tcb,",2638
7210,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7211,CPU_INT16U  const  OSDbg_FlagGrpSize           = sizeof(OS_FLAG_GRP);          /* Size in Bytes of OS_FLAG_GRP        */,65
7212,CPU_INT16U  const  OSDbg_FlagWidth             = sizeof(OS_FLAGS);             /* Width (in bytes) of OS_FLAGS        */,66
7213,CPU_INT16U  const  OSDbg_MemSize               = sizeof(OS_MEM);               /* Mem. Partition header size (bytes)  */,86
7214,CPU_INT16U  const  OSDbg_MsgSize               = sizeof(OS_MSG);               /* OS_MSG size                         */,94
7215,CPU_INT16U  const  OSDbg_MutexSize             = sizeof(OS_MUTEX);             /* Size in bytes of OS_MUTEX           */,110
7216,CPU_INT16U  const  OSDbg_PtrSize               = sizeof(void *);               /* Size in Bytes of a pointer          */,129
7217,CPU_INT16U  const  OSDbg_QSize                 = sizeof(OS_Q);                 /* Size in bytes of OS_Q structure     */,138
7218,CPU_INT16U  const  OSDbg_SemSize               = sizeof(OS_SEM);               /* Size in bytes of OS_SEM             */,156
7219,CPU_INT32U  const  OSDbg_RdyListSize           = sizeof(OSRdyList);            /* Number of bytes in the ready table  */,166
7220,CPU_INT16U  const  OSDbg_TCBSize               = sizeof(OS_TCB);               /* Size in Bytes of OS_TCB             */,183
7221,*                                     TOTAL DATA SPACE (i.e. RAM) USED BY uC/OS-III,213
7222,CPU_INT32U  const  OSDbg_DataSize = sizeof(OSIntNestingCtr),217
7223,"* Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out the 'const'",370
7224,*              (2) You may decide to 'compile out' the code (by using #if 0/#endif) INSIDE the function if your compiler,372
7225,void  OS_Dbg_Init (void),377
7226,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7227,*              flags          contains the initial value to store in the event flag group (typically 0).,56
7228,*                                                                   called OSSafetyCriticalStart().,63
7229,"void  OSFlagCreate (OS_FLAG_GRP  *p_grp,",72
7230,* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of the event flag,162
7231,*                 group MUST check the return code of OSFlagPost and OSFlagPend().,163
7232,"OS_OBJ_QTY  OSFlagDel (OS_FLAG_GRP  *p_grp,",168
7233,*              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to wait for.,285
7234,*              timeout       is an optional timeout (in clock ticks) that your task will wait for the,289
7235,*                                OS_OPT_PEND_FLAG_CLR_ALL   You will wait for ALL bits in 'flags' to be clear (0),296
7236,*                                OS_OPT_PEND_FLAG_CLR_ANY   You will wait for ANY bit  in 'flags' to be clear (0),297
7237,*                                OS_OPT_PEND_FLAG_SET_ALL   You will wait for ALL bits in 'flags' to be set   (1),298
7238,*                                OS_OPT_PEND_FLAG_SET_ANY   You will wait for ANY bit  in 'flags' to be set   (1),299
7239,"*                            posted, aborted or the event flag group deleted.  If you pass a NULL pointer (i.e. (CPU_TS *)0)",313
7240,*                                OS_ERR_TIMEOUT             The bit(s) have not been set in the specified 'timeout'.,328
7241,"OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *p_grp,",335
7242,*              group OSFlagPost().,695
7243,*                            OS_OPT_PEND_ABORT_1          ABORT wait for a single task (HPT) waiting on the event flag,701
7244,"OS_OBJ_QTY  OSFlagPendAbort (OS_FLAG_GRP  *p_grp,",723
7245,OS_FLAGS  OSFlagPendGetFlagsRdy (OS_ERR  *p_err),823
7246,*                                                POST EVENT FLAG BIT(S),854
7247,"*              flags         If 'opt' (see below) is OS_OPT_POST_FLAG_SET, each bit that is set in 'flags' will",861
7248,"*                                0x31     (note, bit 0 is least significant bit)",865
7249,"*                            If 'opt' (see below) is OS_OPT_POST_FLAG_CLR, each bit that is set in 'flags' will",867
7250,"*                                0x31     (note, bit 0 is least significant bit)",871
7251,* Note(s)    : 1) The execution time of this function depends on the number of tasks waiting on the event flag group.,889
7252,"OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *p_grp,",893
7253,*                         SUSPEND TASK UNTIL EVENT FLAG(s) RECEIVED OR TIMEOUT OCCURS,981
7254,*              event flag bit(s) are set.,984
7255,* Arguments  : p_pend_data    is a pointer to an object used to link the task being blocked to the list of task(s),986
7256,*              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to check.,992
7257,*                                OS_OPT_PEND_FLAG_CLR_ALL   You will check ALL bits in 'mask' to be clear (0),1001
7258,*                                OS_OPT_PEND_FLAG_CLR_ANY   You will check ANY bit  in 'mask' to be clear (0),1002
7259,*                                OS_OPT_PEND_FLAG_SET_ALL   You will check ALL bits in 'mask' to be set   (1),1003
7260,*                                OS_OPT_PEND_FLAG_SET_ANY   You will check ANY bit  in 'mask' to be set   (1),1004
7261,*                            bit(s) to be set.,1007
7262,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,1011
7263,"void  OS_FlagBlock (OS_PEND_DATA  *p_pend_data,",1015
7264,* Description: This function is called by OSFlagDel() to clear the contents of an event flag group,1036
7265,* Argument(s): p_grp     is a pointer to the event flag group to clear,1039
7266,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,1044
7267,void  OS_FlagClr (OS_FLAG_GRP  *p_grp),1048
7268,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,1078
7269,void  OS_FlagInit (OS_ERR  *p_err),1082
7270,* Note(s)    : These functions are INTERNAL to uC/OS-III and your application should not call it.,1111
7271,void  OS_FlagDbgListAdd (OS_FLAG_GRP  *p_grp),1116
7272,void  OS_FlagDbgListRemove (OS_FLAG_GRP  *p_grp),1131
7273,*                                                POST EVENT FLAG BIT(S),1163
7274,"*              flags         If 'opt' (see below) is OS_OPT_POST_FLAG_SET, each bit that is set in 'flags' will",1170
7275,"*                                0x31     (note, bit 0 is least significant bit)",1174
7276,"*                            If 'opt' (see below) is OS_OPT_POST_FLAG_CLR, each bit that is set in 'flags' will",1176
7277,"*                                0x31     (note, bit 0 is least significant bit)",1180
7278,* Note(s)    : 1) The execution time of this function depends on the number of tasks waiting on the event flag group.,1200
7279,"OS_FLAGS  OS_FlagPost (OS_FLAG_GRP  *p_grp,",1204
7280,"*                                        MAKE TASK READY-TO-RUN, EVENT(s) OCCURRED",1318
7281,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,1332
7282,"void   OS_FlagTaskRdy (OS_TCB    *p_tcb,",1336
7283,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7284,*                             OSFlagPost(),75
7285,*                             OSSemPost(),76
7286,*                             OSQPost(),77
7287,*                             OSTaskQPost(),78
7288,* Note(s)    : none,89
7289,"void  OS_IntQPost (OS_OBJ_TYPE   type,",93
7290,void  OS_IntQRePost (void),153
7291,void  OS_IntQTask (void  *p_arg),265
7292,* Description: This function is called by OSInit() to initialize the ISR queue.,309
7293,*                           OS_ERR_???               An error code returned by OSTaskCreate().,319
7294,* Note(s)    : none,323
7295,void  OS_IntQTaskInit (OS_ERR  *p_err),327
7296,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7297,*               blk_size is the size (in bytes) of each block in the memory partition.,59
7298,*                                                             called OSSafetyCriticalStart().,66
7299,*                            OS_ERR_MEM_INVALID_BLKS        user specified an invalid number of blocks (must be >= 2),67
7300,"void  OSMemCreate (OS_MEM       *p_mem,",78
7301,"void  *OSMemGet (OS_MEM  *p_mem,",203
7302,*                                                      partition (You freed more blocks than you allocated!),266
7303,"void  OSMemPut (OS_MEM  *p_mem,",272
7304,* Description : This function is called by OSMemCreate() to add the memory partition to the debug table.,331
7305,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,337
7306,void  OS_MemDbgListAdd (OS_MEM  *p_mem),342
7307,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,367
7308,void  OS_MemInit (OS_ERR  *p_err),371
7309,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7310,* Description: This function is called by OSInit() to initialize the free list of OS_MSGs.,50
7311,* Argument(s): p_err     is a pointer to a variable that will contain an error code returned by this function.,52
7312,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,60
7313,void  OS_MsgPoolInit (OS_ERR  *p_err),64
7314,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,129
7315,OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q),133
7316,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,171
7317,"void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,",175
7318,*              p_msg_size  is a pointer to where the size (in bytes) of the message will be placed,197
7319,* Returns    : The message (a pointer),206
7320,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,208
7321,"void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,",212
7322,*              msg_size    is the size of the message (in bytes),275
7323,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,292
7324,"void  OS_MsgQPut (OS_MSG_Q     *p_msg_q,",296
7325,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7326,*                                                                 OSSafetyCriticalStart().,61
7327,"void  OSMutexCreate (OS_MUTEX  *p_mutex,",70
7328,* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of the mutex MUST,163
7329,*                 check the return code of OSMutexPend().,164
7330,*                 mutex is used for mutual exclusion because the resource(s) will no longer be guarded by the mutex.,167
7331,"OS_OBJ_QTY  OSMutexDel (OS_MUTEX  *p_mutex,",172
7332,"*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will wait for the",311
7333,*                            resource up to the amount of time (in 'ticks') specified by this argument.  If you specify,312
7334,*                            pend aborted or the mutex deleted.  If you pass a NULL pointer (i.e. (CPU_TS *)0) then you,322
7335,"void  OSMutexPend (OS_MUTEX  *p_mutex,",348
7336,"*              to fault-abort the wait on the mutex, rather than to normally signal the mutex via OSMutexPost().",541
7337,*                            OS_OPT_PEND_ABORT_1          ABORT wait for a single task (HPT) waiting on the mutex,547
7338,"OS_OBJ_QTY  OSMutexPendAbort (OS_MUTEX  *p_mutex,",568
7339,"void  OSMutexPost (OS_MUTEX  *p_mutex,",697
7340,* Description: This function is called by OSMutexDel() to clear the contents of a mutex,836
7341,* Argument(s): p_mutex      is a pointer to the mutex to clear,839
7342,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,844
7343,void  OS_MutexClr (OS_MUTEX  *p_mutex),848
7344,* Note(s)    : These functions are INTERNAL to uC/OS-III and your application should not call it.,874
7345,void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex),880
7346,void  OS_MutexDbgListRemove (OS_MUTEX  *p_mutex),895
7347,* Description: This function is called by OSInit() to initialize the mutex management.,929
7348,* Argument(s): p_err        is a pointer to a variable that will contain an error code returned by this function.,932
7349,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,938
7350,void  OS_MutexInit (OS_ERR  *p_err),942
7351,* Argument(s): p_tcb        is a pointer to the tcb of the task to give the mutex to.,967
7352,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,974
7353,"void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)",978
7354,* Argument(s): p_tcb        is a pointer to the tcb of the task to remove the mutex from.,992
7355,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,999
7356,"void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)",1003
7357,* Argument(s): p_tcb        is a pointer to the tcb of the task to process.,1024
7358,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1029
7359,OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb),1033
7360,* Description: This function is called by the kernel to post (release) all the mutex from a group. Used when deleting,1063
7361,* Argument(s): p_tcb        is a pointer to the tcb of the task to process.,1067
7362,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1072
7363,void  OS_MutexGrpPostAll (OS_TCB  *p_tcb),1076
7364,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7365,*                                and initialize the .PendObjPtr (see below) with a pointer to the object (semaphore or,58
7366,*                                                                 you call OSPendMulti() you MUST fill this field for,70
7367,"*                                    OS_PEND_OBJ   *RdyObjPtr;    OSPendMulti() will return the object that was posted,",72
7368,*                                    void          *RdyMsgPtr;    OSPendMulti() will fill in this field if the object,74
7369,*                                    OS_MSG_SIZE    RdyMsgSize;   OSPendMulti() will fill in this field if the object,77
7370,*                                    CPU_TS         RdyTS;        OSPendMulti() will fill in this field if the object,80
7371,*                                                                 the this field will be set to (CPU_TS)0 because it's,84
7372,*              tbl_size      is the size (in number of elements) of the OS_PEND_DATA array passed to this function.  In,87
7373,"*                            other words, if the called needs to pend on 4 separate objects (semaphores and/or queues)",88
7374,"*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will wait any of",91
7375,"OS_OBJ_QTY  OSPendMulti (OS_PEND_DATA  *p_pend_data_tbl,",124
7376,* Description: This function is called by OSPendMulti() to obtain the list of object that are ready.,243
7377,"OS_OBJ_QTY  OS_PendMultiGetRdy (OS_PEND_DATA  *p_pend_data_tbl,",257
7378,* Description: This function is called by OSPendMulti() to verify that we are multi-pending on either semaphores or,323
7379,"CPU_BOOLEAN  OS_PendMultiValidate (OS_PEND_DATA  *p_pend_data_tbl,",338
7380,* Description: This function is called by OSPendMulti() to suspend a task because any one of multiple objects that have,384
7381,"void  OS_PendMultiWait (OS_PEND_DATA  *p_pend_data_tbl,",400
7382,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7383,void  OS_PrioInit (void),61
7384,* Returns    : The priority of the Highest Priority Task (HPT) waiting for the event,81
7385,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,83
7386,OS_PRIO  OS_PrioGetHighest (void),87
7387,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,113
7388,void  OS_PrioInsert (OS_PRIO  prio),117
7389,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,141
7390,void  OS_PrioRemove (OS_PRIO  prio),145
7391,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7392,*              max_qty     indicates the maximum size of the message queue (must be non-zero).  Note that it's also not,56
7393,*                                                               OSSafetyCriticalStart().,64
7394,"void  OSQCreate (OS_Q        *p_q,",74
7395,* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of the queue MUST,167
7396,*                 check the return code of OSQPend().,168
7397,*                 queue is used for mutual exclusion because the resource(s) will no longer be guarded by the queue.,171
7398,"OS_OBJ_QTY  OSQDel (OS_Q    *p_q,",176
7399,"* Note(s)     : 1) You should use this function with great care because, when to flush the queue, you LOOSE the",301
7400,"*                  likely, need to be de-allocated (i.e. freed).",304
7401,"OS_MSG_QTY  OSQFlush (OS_Q    *p_q,",309
7402,"*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will wait for a",362
7403,"*                            received, pend aborted or the message queue deleted,  If you pass a NULL pointer (i.e.",375
7404,"*                            (CPU_TS *)0) then you will not get the timestamp.  In other words, passing a NULL pointer",376
7405,* Returns    : != (void *)0  is a pointer to the message received,392
7406,"*              == (void *)0  if you received a NULL pointer message or,",393
7407,"void  *OSQPend (OS_Q         *p_q,",400
7408,"*              fault-abort the wait on the queue, rather than to normally signal the queue via OSQPost().",587
7409,*                            OS_OPT_PEND_ABORT_1          ABORT wait for a single task (HPT) waiting on the queue,593
7410,"OS_OBJ_QTY  OSQPendAbort (OS_Q    *p_q,",614
7411,*              is broadcast to all waiting tasks and/or whether you post the message to the front of the queue (LIFO),703
7412,*              or normally (FIFO) at the end of the queue.,704
7413,* Arguments  : p_q           is a pointer to a message queue that must have been created by OSQCreate().,706
7414,*              msg_size      specifies the size of the message (in bytes),710
7415,*                                OS_OPT_POST_FIFO         POST message to end of queue (FIFO) and wake up a single,716
7416,*                                OS_OPT_POST_LIFO         POST message to the front of the queue (LIFO) and wake up,718
7417,*                            Note(s): 1) OS_OPT_POST_NO_SCHED can be added (or OR'd) with one of the other options.,722
7418,*                                     2) OS_OPT_POST_ALL      can be added (or OR'd) with one of the other options.,723
7419,"void  OSQPost (OS_Q         *p_q,",747
7420,* Description: This function is called by OSQDel() to clear the contents of a message queue,836
7421,* Argument(s): p_q      is a pointer to the queue to clear,839
7422,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,844
7423,void  OS_QClr (OS_Q  *p_q),848
7424,* Note(s)    : These functions are INTERNAL to uC/OS-III and your application should not call it.,874
7425,void  OS_QDbgListAdd (OS_Q  *p_q),880
7426,void  OS_QDbgListRemove (OS_Q  *p_q),895
7427,* Description: This function is called by OSInit() to initialize the message queue management.,929
7428,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,938
7429,void  OS_QInit (OS_ERR  *p_err),942
7430,*              is broadcast to all waiting tasks and/or whether you post the message to the front of the queue (LIFO),965
7431,*              or normally (FIFO) at the end of the queue.,966
7432,* Arguments  : p_q           is a pointer to a message queue that must have been created by OSQCreate().,968
7433,*              msg_size      specifies the size of the message (in bytes),972
7434,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,995
7435,"void  OS_QPost (OS_Q         *p_q,",999
7436,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7437,*                            If used to signal the occurrence of event(s) then you should initialize to 0.,58
7438,*                                                                 called OSSafetyCriticalStart().,65
7439,"void  OSSemCreate (OS_SEM      *p_sem,",76
7440,* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of the semaphore,166
7441,*                 MUST check the return code of OSSemPend().,167
7442,*              2) OSSemAccept() callers will not know that the intended semaphore has been deleted.,168
7443,*                 the semaphore is used for mutual exclusion because the resource(s) will no longer be guarded by the,170
7444,"OS_OBJ_QTY  OSSemDel (OS_SEM  *p_sem,",176
7445,"*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will wait for the",292
7446,*                            resource up to the amount of time (in 'ticks') specified by this argument.  If you specify,293
7447,*                            becomes available (or the event occurs).,295
7448,*                            or pend aborted or the semaphore deleted.  If you pass a NULL pointer (i.e. (CPU_TS*)0),303
7449,"OS_SEM_CTR  OSSemPend (OS_SEM   *p_sem,",330
7450,"*              to fault-abort the wait on the semaphore, rather than to normally signal the semaphore via OSSemPost().",500
7451,*                            OS_OPT_PEND_ABORT_1          ABORT wait for a single task (HPT) waiting on the semaphore,506
7452,"OS_OBJ_QTY  OSSemPendAbort (OS_SEM  *p_sem,",527
7453,*                                                    (if tasks are waiting).,622
7454,*                           Note(s): 1) OS_OPT_POST_NO_SCHED can be added with one of the other options.,627
7455,"OS_SEM_CTR  OSSemPost (OS_SEM  *p_sem,",640
7456,"void  OSSemSet (OS_SEM      *p_sem,",748
7457,* Description: This function is called by OSSemDel() to clear the contents of a semaphore,806
7458,* Argument(s): p_sem      is a pointer to the semaphore to clear,809
7459,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,814
7460,void  OS_SemClr (OS_SEM  *p_sem),818
7461,* Note(s)    : These functions are INTERNAL to uC/OS-III and your application should not call it.,842
7462,void  OS_SemDbgListAdd (OS_SEM  *p_sem),848
7463,void  OS_SemDbgListRemove (OS_SEM  *p_sem),863
7464,* Description: This function is called by OSInit() to initialize the semaphore management.,897
7465,* Argument(s): p_err        is a pointer to a variable that will contain an error code returned by this function.,900
7466,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,906
7467,void  OS_SemInit (OS_ERR  *p_err),910
7468,*                           Note(s): 1) OS_OPT_POST_NO_SCHED can be added with one of the other options.,943
7469,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,956
7470,"OS_SEM_CTR  OS_SemPost (OS_SEM  *p_sem,",960
7471,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7472,* Argument(s): p_err      is a pointer to a variable that will contain an error code returned by this function.,52
7473,void  OSStatReset (OS_ERR  *p_err),60
7474,*                 CPU Usage (%) = 100 * (1 - ------------------),183
7475,* Argument(s): p_err      is a pointer to a variable that will contain an error code returned by this function.,186
7476,void  OSStatTaskCPUUsageInit (OS_ERR  *p_err),194
7477,"*              environment.  Specifically, OS_StatTask() computes the CPU usage.  CPU usage is determined by:",263
7478,*                 OSStatTaskCPUUsage = 100 * (1 - ------------------)     (units are in %),266
7479,* Note(s)    : 1) This task runs at a priority level higher than the idle task.,273
7480,void  OS_StatTask (void  *p_arg),284
7481,* Description: This function is called by OSInit() to initialize the statistic task.,459
7482,* Argument(s): p_err     is a pointer to a variable that will contain an error code returned by this function.,461
7483,*                                                     lower (i.e. higher number) than the idle task.,466
7484,*                            OS_ERR_xxx               An error code returned by OSTaskCreate(),467
7485,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,471
7486,void  OS_StatTaskInit (OS_ERR  *p_err),475
7487,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7488,*                                                         (i.e. >= (OS_CFG_PRIO_MAX-1)),59
7489,"void  OSTaskChangePrio (OS_TCB   *p_tcb,",67
7490,*                                 void Task (void *p_arg),158
7491,*                                     for (;;) {,160
7492,*              p_stk_base     is a pointer to the base address of the stack (i.e. low address).,168
7493,*              time_quanta    amount of time (in ticks) for time slice when round-robin between tasks.  Specify 0 to use,183
7494,*              opt            contains additional information (or options) about the behavior of the task.,191
7495,*                                 OS_OPT_TASK_NO_TLS          If the caller doesn't want or need TLS (Thread Local ,199
7496,*                                                                   OSSafetyCriticalStart().,208
7497,"*                                                                   allowed (i.e. >= OS_CFG_PRIO_MAX-1) or,",211
7498,"void  OSTaskCreate (OS_TCB        *p_tcb,",226
7499,* Note(s)    : 1) 'p_err' gets set to OS_ERR_NONE before OSSched() to allow the returned err or code to be monitored even,490
7500,"void  OSTaskDel (OS_TCB  *p_tcb,",497
7501,"* Note(s)     : 1) You should use this function with great care because, when to flush the queue, you LOOSE the",659
7502,"*                  likely, need to be de-allocated (i.e. freed).",662
7503,"OS_MSG_QTY  OSTaskQFlush (OS_TCB  *p_tcb,",667
7504,"* Arguments  : timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will wait for a",710
7505,*                            received.  If you pass a NULL pointer (i.e. (CPU_TS *)0) then you will not get the,722
7506,* Note(s)    : 1) It is possible to receive NULL pointers when there are no errors.,740
7507,"void  *OSTaskQPend (OS_TICK       timeout,",745
7508,"*              for a message, rather than to normally post the message to the task via OSTaskQPost().",898
7509,"CPU_BOOLEAN  OSTaskQPendAbort (OS_TCB  *p_tcb,",921
7510,*              msg_size   is the size of the message sent (in #bytes),999
7511,*                          Note(s): 1) OS_OPT_POST_NO_SCHED can be added with one of the other options.,1008
7512,"void  OSTaskQPost (OS_TCB       *p_tcb,",1023
7513,"*              specific and can be used to store task specific values such as 'error numbers' (i.e. errno), statistics,",1095
7514,"OS_REG  OSTaskRegGet (OS_TCB     *p_tcb,",1114
7515,OS_REG_ID  OSTaskRegGetID (OS_ERR  *p_err),1167
7516,"*              specific and can be used to store task specific values such as 'error numbers' (i.e. errno), statistics,",1202
7517,"void  OSTaskRegSet (OS_TCB     *p_tcb,",1223
7518,"void  OSTaskResume (OS_TCB  *p_tcb,",1279
7519,*                            or pend aborted.  If you pass a NULL pointer (i.e. (CPU_TS *)0) then you will not get the,1350
7520,"OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,",1369
7521,"*              for a signal, rather than to normally post the signal to the task via OSTaskSemPost().",1524
7522,"CPU_BOOLEAN  OSTaskSemPendAbort (OS_TCB  *p_tcb,",1548
7523,"OS_SEM_CTR  OSTaskSemPost (OS_TCB  *p_tcb,",1636
7524,"OS_SEM_CTR  OSTaskSemSet (OS_TCB      *p_tcb,",1719
7525,"void  OSTaskStkChk (OS_TCB        *p_tcb,",1779
7526,* Note(s)    : 1) You should use this function with great care.  If you suspend a task that is waiting for an event,1882
7527,"*                 (i.e. a message, a semaphore, a queue ...) you will prevent this task from running when the event",1883
7528,"void   OSTaskSuspend (OS_TCB  *p_tcb,",1889
7529,"void  OSTaskTimeQuantaSet (OS_TCB   *p_tcb,",1957
7530,* Note(s)    : These functions are INTERNAL to uC/OS-III and your application should not call it.,2008
7531,void  OS_TaskDbgListAdd (OS_TCB  *p_tcb),2013
7532,void  OS_TaskDbgListRemove (OS_TCB  *p_tcb),2027
7533,* Description: This function is called by OSInit() to initialize the task management.,2061
7534,* Argument(s): p_err        is a pointer to a variable that will contain an error code returned by this function.,2064
7535,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,2070
7536,void  OS_TaskInit (OS_ERR  *p_err),2074
7537,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,2104
7538,void  OS_TaskInitTCB (OS_TCB  *p_tcb),2108
7539,*              msg_size   is the size of the message sent (in #bytes),2263
7540,*                          Note(s): 1) OS_OPT_POST_NO_SCHED can be added with one of the other options.,2272
7541,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,2288
7542,"void  OS_TaskQPost (OS_TCB       *p_tcb,",2293
7543,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,2376
7544,"void  OS_TaskResume (OS_TCB  *p_tcb,",2381
7545,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,2454
7546,void  OS_TaskReturn (void),2458
7547,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,2504
7548,"OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,",2508
7549,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application should not call it.,2643
7550,"*                 (i.e. a message, a semaphore, a queue ...) you will prevent this task from running when the event",2646
7551,"void  OS_TaskSuspend (OS_TCB  *p_tcb,",2652
7552,* Argument(s): p_tcb        is a pointer to the tcb of the task to change the priority.,2727
7553,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,2734
7554,"void  OS_TaskChangePrio(OS_TCB  *p_tcb,",2738
7555,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7556,* Arguments  : p_arg     is an argument passed to the task when the task is created (unused).,58
7557,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,62
7558,void  OS_TickTask (void  *p_arg),66
7559,* Description: This function is called by OSInit() to create the tick task.,103
7560,*                                                      (There could be only one task at the Idle Task priority),110
7561,*                                                      (Maybe the priority you specified is higher than OS_CFG_PRIO_MAX-1,111
7562,*                          OS_ERR_??                 other error code returned by OSTaskCreate(),112
7563,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,116
7564,void  OS_TickTaskInit (OS_ERR  *p_err),120
7565,*              time        is the amount of time remaining (in ticks) for the task to become ready,187
7566,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,191
7567,"void  OS_TickListInsert (OS_TICK_LIST  *p_list,",195
7568,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,292
7569,"void  OS_TickListInsertDly (OS_TCB   *p_tcb,",298
7570,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,358
7571,void  OS_TickListRemove (OS_TCB  *p_tcb),364
7572,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,419
7573,void  OS_TickListResetPeak (void),423
7574,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,439
7575,static  CPU_TS  OS_TickListUpdateDly (void),443
7576,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,511
7577,static  CPU_TS  OS_TickListUpdateTimeout (void),515
7578,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7579,*                        of the tick counter (OSTickCtr).  Note that specifying 0 means the task is not to delay.,52
7580,"void  OSTimeDly (OS_TICK   dly,",82
7581,* Arguments  : hours     specifies the number of hours that the task will be delayed (max. is 999 if the tick rate is,153
7582,*              minutes   specifies the number of minutes (max. 59 if 'opt' is OS_OPT_TIME_HMSM_STRICT),156
7583,*              seconds   specifies the number of seconds (max. 59 if 'opt' is OS_OPT_TIME_HMSM_STRICT),158
7584,*              milli     specifies the number of milliseconds (max. 999 if 'opt' is OS_OPT_TIME_HMSM_STRICT),160
7585,*                        *** OS_OPT_TIME_HMSM_STRICT            strictly allow only hours        (0...99),171
7586,*                                                                                   minutes      (0...59),172
7587,*                                                                                   seconds      (0...59),173
7588,*                                                                                   milliseconds (0...999),174
7589,*                            OS_OPT_TIME_HMSM_NON_STRICT        allow any value of  hours        (0...999),175
7590,*                                                                                   minutes      (0...9999),176
7591,*                                                                                   seconds      (0...65535),177
7592,*                                                                                   milliseconds (0...4294967295),178
7593,"* Note(s)    : 1) The resolution on the milliseconds depends on the tick rate.  For example, you can't do a 10 mS delay",194
7594,"void  OSTimeDlyHMSM (CPU_INT16U   hours,",204
7595,* Description: This function is used resume a task that has been delayed through a call to either OSTimeDly() or,336
7596,*              OSTimeDlyHMSM().  Note that you cannot call this function to resume a task that is waiting for an event,337
7597,"*                           OS_ERR_TASK_SUSPENDED        Task cannot be resumed, it was suspended by OSTaskSuspend()",348
7598,* Note(s)    : none,350
7599,"void  OSTimeDlyResume (OS_TCB  *p_tcb,",355
7600,OS_TICK  OSTimeGet (OS_ERR  *p_err),463
7601,"void  OSTimeSet (OS_TICK   ticks,",500
7602,* Description: This function is used to signal to uC/OS-III the occurrence of a 'system tick' (also known as a,525
7603,void  OSTimeTick (void),534
7604,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7605,*              p_callback_arg  Is an argument (a pointer) that is passed to the callback function when it is called.,94
7606,*                                                                  OSSafetyCriticalStart().,100
7607,"* Note(s)    : 1) This function only creates the timer.  In other words, the timer is not started when created.  To",111
7608,"*                 start the timer, call OSTmrStart().",112
7609,"void  OSTmrCreate (OS_TMR               *p_tmr,",116
7610,"CPU_BOOLEAN  OSTmrDel (OS_TMR  *p_tmr,",226
7611,*              OS_TmrTask() is signaled every 1/10 of a second then the returned value represents the number of 1/10 of,321
7612,"OS_TICK  OSTmrRemainGet (OS_TMR  *p_tmr,",326
7613,"* Note(s)    : 1) When starting/restarting a timer, regardless if it is in PERIODIC or ONE-SHOT mode, the timer is",427
7614,*                 the OS_TmrTask().,430
7615,"CPU_BOOLEAN  OSTmrStart (OS_TMR  *p_tmr,",434
7616,* Returns    : The current state of the timer (see description).,542
7617,"OS_STATE  OSTmrStateGet (OS_TMR  *p_tmr,",546
7618,"* Returns    : DEF_TRUE       If we stopped the timer (if the timer is already stopped, we also return DEF_TRUE)",629
7619,"CPU_BOOLEAN  OSTmrStop (OS_TMR  *p_tmr,",634
7620,* Argument(s): p_tmr    Is a pointer to the timer to clear,734
7621,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,739
7622,void  OS_TmrClr (OS_TMR  *p_tmr),743
7623,* Note(s)    : These functions are INTERNAL to uC/OS-III and your application should not call it.,773
7624,void  OS_TmrDbgListAdd (OS_TMR  *p_tmr),779
7625,void  OS_TmrDbgListRemove (OS_TMR  *p_tmr),793
7626,* Description: This function is called by OSInit() to initialize the timer manager module.,827
7627,* Argument(s): p_err    is a pointer to a variable that will contain an error code returned by this function.,829
7628,*                           OS_ERR_xxx                   any error code returned by OSTaskCreate(),835
7629,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,839
7630,void  OS_TmrInit (OS_ERR  *p_err),843
7631,* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.,925
7632,void  OS_TmrResetPeak (void),929
7633,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,945
7634,void  OS_TmrUnlink (OS_TMR  *p_tmr),949
7635,* Description: This task is created by OS_TmrInit().,981
7636,* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.,987
7637,void  OS_TmrTask (void  *p_arg),991
7638,* Note(s)    : 1) These function is INTERNAL to uC/OS-III and your application MUST NOT call it.,1060
7639,static  void  OS_TmrLock (void),1064
7640,static  void  OS_TmrUnlock (void),1085
7641,"*                                  (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL",6
7642,Copyright (2019) Intel Corporation,3
7643,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7644,void int_assertion(uint32_t line),131
7645,void init_once(),141
7646,void test_init(uint8_t self_enable),163
7647,void test_exit(uint32_t status),190
7648,uint8_t test_is_enabled(),223
7649,void test_debug_init(),233
7650,void test_debug_simple_init(),300
7651,"void assertion(char * file, uint32_t line)",311
7652,void test_putc(char c),328
7653,void test_put_int(uint32_t v),362
7654,void test_puts(const char *s),370
7655,void test_puth(unsigned n),378
7656,void test_print_uint32(uint32_t data),391
7657,"void test_printf(const char *format, ...)",413
7658,uint32_t get_interactive(),519
7659,"uint32_t break_function(const char *file, uint32_t line)",549
7660,"void int_test_dump_hex(const void * address, uint32_t size, uint8_t printed)",563
7661,"void test_dump_hex(const void * address, uint32_t size)",588
7662,"void test_dump_aligned_hex(uint8_t * address, uint32_t size)",596
7663,"void test_dump_dat(uint32_t * address, uint32_t size)",614
7664,"void test_dump_compare_memory(uint32_t * address1, uint32_t * address2, uint32_t size)",628
7665,"void test_dump_file(const char * file, const void * address, uint32_t size, char mode)",647
7666,"void test_write_file(const char * file, const void * address, uint32_t size)",656
7667,"void test_write_timefile(const char * file, const void * address, uint32_t size)",661
7668,"void test_append_file(const char * file, const void * address, uint32_t size)",666
7669,void test_set_config_state(uint32_t state),676
7670,void test_set_config_source(uint32_t source),711
7671,void test_set_descriptor(const char * desc),761
7672,uint8_t test_is_usermode(),770
7673,void test_set_usermode(uint8_t usermode),775
7674,uint8_t test_is_first_main_header(),780
7675,void test_set_first_main_header(uint8_t first_main_header),785
7676,void test_system_time_start(),794
7677,uint32_t test_system_time_elapse(),803
7678,void test_time_start(),812
7679,void test_time_continue(),821
7680,uint32_t test_time_elapse(),827
7681,void test_reset_config_time(),836
7682,void test_update_config_time(uint32_t time),842
7683,uint32_t test_get_config_time(),848
7684,void test_reset_all_counter(),853
7685,void test_reset_counter(uint8_t counter),861
7686,"void test_add_counter(uint8_t counter, uint32_t value)",870
7687,uint32_t test_get_counter(uint8_t counter),879
7688,void test_sequence(uint8_t s),894
7689,"void test_sequence_word(uint8_t s, uint32_t v)",903
7690,void test_dump_sequence(),916
7691,void test_dump_sequence_word(),925
7692,void test_set_qspi_address(uint32_t addr),943
7693,void test_rsu_end(),953
7694,"void test_rand(uint32_t *data, uint32_t size)",968
7695,void test_rand_init(),982
7696,"void test_rand_copy(uint32_t *data, uint32_t size)",987
7697,uint32_t * test_rand_address(),999
7698,"uint32_t test_call(uint32_t reload, const char * module, const char * function, ...)",1010
7699,void test_critical_pin(uint32_t pin),1131
7700,void test_set_critical_pin(uint8_t set),1189
7701,"void test_start_critical_with_additional_pin(uint32_t second, uint32_t pin)",1209
7702,void test_start_critical(uint32_t second),1242
7703,void test_release_critical(),1247
7704,void test_dump_write_dma_registers(),1266
7705,void test_dump_read_dma_registers(),1323
7706,void test_dump_input_buffer_registers(),1382
7707,void test_dump_aes_registers(),1468
7708,void test_dump_sha_registers(),1495
7709,void test_dump_sha_hash_registers(),1503
7710,void test_dump_pkc_control_registers(),1523
7711,void test_dump_registers(),1540
7712,static bool persistent_ram_access_in_baremetal_thread(void),1562
7713,static void test_persistent_ram_abort_execution(uint32_t task_prio),1570
7714,static uint32_t test_persistent_ram_get_current_task_flag(),1586
7715,void test_persistent_ram_enroll_task(uint32_t flag),1611
7716,"void test_persistent_ram_assert_authorized_access(const char * file, uint32_t line, uint32_t authorized_flags)",1646
7717,Copyright (2018) Intel Corporation,3
7718,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7719,"sdm_return_t cmf_mpi_init(cmf_mpi_t         *p_mpi,",26
7720,sdm_return_t cmf_mpi_validate(const cmf_mpi_t *const p_mpi),53
7721,sdm_return_t cmf_mpi_uninit(cmf_mpi_t* p_mpi),76
7722,sdm_return_t cmf_mpi_zeroize(cmf_mpi_t* p_mpi),88
7723,bool cmf_mpi_is_zero(const cmf_mpi_t* const p_mpi),103
7724,"bool    cmf_mpi_equal(const cmf_mpi_t       *const p_mpi_1,",123
7725,"sdm_return_t cmf_mpi_compare(const cmf_mpi_t        *const p_mpi_1,",141
7726,"sdm_return_t cmf_mpi_fill(cmf_mpi_t       *const p_mpi,",212
7727,"sdm_return_t cmf_mpi_copy(cmf_mpi_t        *const p_mpi_1,",264
7728,Copyright (2017) Intel Corporation,3
7729,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7730,"STATIC uint32_t fw_add_crc(uint32_t crc,const void * const iBuffer,const uint32_t num)",69
7731,"uint32_t fw_generate_crc(const void * buffer, const uint32_t size_in_words)",83
7732,Copyright (2019) Intel Corporation,3
7733,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7734,"bool is_zero(const uint32_t *p_data, uint32_t n)",45
7735,"sdm_return_t base64url_encode(const uint8_t* bytes, uint32_t numbytes, uint8_t* output, uint32_t n)",73
7736,"sdm_return_t hex_encode(const uint8_t* bytes, uint32_t numbytes, uint8_t* output, uint32_t n, bool uppercase)",113
7737,"a. Input is 00000012345678, output will be 12345678 (we compact it and still maintain it as positive)",147
7738,"b. Input is FF000012345678, output will be 00FF000012345678 (expand it to be positive)",148
7739,"c. Input is 12345678900000, output will be 12345678900000 (unchanged)",149
7740,"d. Input is 00FF1234567890, output will be 00FF1234567890 (unchanged)",150
7741,"uint32_t siglen(uint8_t* buf, uint32_t buflen, uint32_t size)",154
7742,Copyright (2017) Intel Corporation,3
7743,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7744,"uint32_t rotate_right_32(uint32_t value, uint32_t shift_amount)",31
7745,"uint32_t rotate_left_32(uint32_t value, uint32_t shift_amount)",44
7746,"uint32_t get_byte_msb(uint8_t *p_data, uint32_t n)",60
7747,"@brief Function to get position count of most significant non-zero bit in the given array of words (32-bit),",90
7748,"uint32_t get_word_msb(uint32_t *p_data, uint32_t n)",98
7749,"int32_t sign_extend(int32_t data, uint8_t bits_width)",138
7750,uint32_t count_set_bits(uint32_t num),162
7751,Copyright (2019) Intel Corporation,3
7752,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7753,bool sdm_block_ptr_is_valid(const void *ptr_to_chk),43
7754,void sdm_block_alloc_init(void),57
7755,static void *sdm_block_alloc_internal(uint32_t index),68
7756,void *sdm_block_alloc_entry(uint32_t index),79
7757,void * sdm_block_alloc(void),93
7758,void sdm_block_free(void *p_free),115
7759,sdm_return_t sdm_block_ref_add(void *p_src),160
7760,int32_t sdm_block_ref_count(void *p_data_in),202
7761,Copyright (2021) Intel Corporation,3
7762,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7763,"sdm_return_t sdm_cbor_parse_datatype(uint8_t type, const uint8_t **pch, uint8_t *width)",33
7764,"sdm_return_t sdm_cbor_param_get(const uint8_t* p_cbor, uint32_t cbor_len, uint8_t key, const uint8_t** out, uint8_t* out_len)",92
7765,"sdm_return_t sdm_cbor_param_get_datatype(const uint8_t* p_cbor, uint32_t cbor_len, uint8_t key, bool listtype, uint32_t* val)",179
7766,"sdm_return_t sdm_cbor_memcmp(const uint8_t* p1, uint32_t s1, const uint8_t* p2, uint32_t s2)",235
7767,Copyright (2019) Intel Corporation,3
7768,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7769,@Fn     sdm_swizzle_data_block(),33
7770,"sdm_return_t sdm_swizzle_data_block(const uint32_t *const p_source,",40
7771,"bool sdm_ram_ptr_valid(const void * const ptr, const uint32_t size)",72
7772,"static void memset_internal(void *const p_dest, const int c, uint32_t count){",96
7773,"sdm_return_t sdm_memset(void *const p_dest,",103
7774,"static void memcpy_internal(void *const dest, const void *const src, uint32_t length){",118
7775,"sdm_return_t sdm_memcpy(void *const p_dest,",125
7776,"sdm_return_t sdm_memcmp(const uint32_t * const ptr1, uint32_t size_1,",165
7777,bool cmf_ram_ptr_valid(const void *const ptr),202
7778,"uint32_t cmf_get_byte_msb(uint8_t *p_data, uint32_t n)",219
7779,"uint32_t cmf_get_word_msb(uint32_t *p_data, uint32_t n)",247
7780,Copyright (2019) Intel Corporation,3
7781,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7782,"bool timer_timeout(timer_handle_t timer, uint32_t start, uint32_t timeout)",28
7783,"void timer_delay(timer_handle_t timer, uint32_t timeout)",54
7784,void sdm_delay(uint32_t timeout),98
7785,uint64_t sdm_timeout_init(uint32_t timeout),109
7786,bool sdm_timeout(const uint64_t timeout),118
7787,Copyright (2018) Intel Corporation,3
7788,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7789,void cmf_aes_init(void),44
7790,sdm_return_t cmf_aes_resource_subscribe(cmf_aes_resource_t* cmf_aes_resource),61
7791,"sdm_return_t cmf_aes_resource_subscribe_ex(cmf_aes_resource_t* cmf_aes_resource,",66
7792,sdm_return_t cmf_aes_resource_unsubscribe(cmf_aes_resource_t* cmf_aes_resource),117
7793,sdm_return_t cmf_aes_clear_aes_context(const cmf_aes_resource_t cmf_aes_resource),149
7794,"sdm_return_t cmf_aes_set_iv(cmf_aes_resource_t cmf_aes_resource,  cmf_aes_iv_data_t* cmf_aes_iv_data)",203
7795,"sdm_return_t  cmf_aes_set_key_mode(cmf_aes_resource_t cmf_aes_resource,  uint32_t key_update_mode)",236
7796,"sdm_return_t cmf_aes_set_key(const cmf_aes_resource_t cmf_aes_resource, cmf_key_t* key)",269
7797,"sdm_return_t cmf_aes_set_key_ex(const cmf_aes_resource_t cmf_aes_resource, cmf_key_t* key, uint32_t key_update_mode, uint32_t key_update_intvl)",274
7798,"sdm_return_t cmf_aes_crypt(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_opmode_t op_mode, cmf_aes_cipher_t cipher,",344
7799,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault_ex(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher,",507
7800,"sdm_return_t cmf_aes_encrypt_key_and_send_to_key_vault_ex(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher,",522
7801,"sdm_return_t cmf_aes_start_xfer_aes_to_nsp_ram(const crypto_context_t * const crypto_ctx, uint32_t * const p_data, uint32_t p_data_words_sz)",537
7802,"bool cmf_aes_is_xfer_aes_to_nsp_ram_done(const crypto_context_t * const crypto_ctx, uint32_t timeout_count)",562
7803,sdm_return_t cmf_aes_wait_for_aes_xfer_cmplt(uint32_t timeoutClockTicks),594
7804,"sdm_return_t cmf_aes_wait_for_aes_to_dma_xfer_cmplt(const crypto_context_t * const crypto_ctx, uint32_t * const dma_buf, uint32_t dma_buf_words_sz, uint32_t timeoutClockTicks)",612
7805,uint32_t cmf_aes_wait_for_aes_not_busy(void),663
7806,"sdm_return_t cmf_aes_check_key_param(cmf_key_t* key_ptr, alt_sdm_aes_key_size_t* alt_sdm_aes_key_size_ptr)",698
7807,"sdm_return_t cmf_aes_check_cipher_param(uint32_t cipher, alt_sdm_aes_cipher_mode_t* alt_sdm_aes_cipher_mode)",721
7808,"sdm_return_t cmf_aes_check_data_src_param(const cmf_aes_data_source_t  cmf_aes_data_source,",743
7809,"sdm_return_t cmf_aes_get_key_dest(cmf_aes_resource_t cmf_aes_resource, alt_sdm_aes_key_dest_sel_t* aes_key_dest)",786
7810,"sdm_return_t cmf_aes_get_key_ctx_sel(cmf_aes_resource_t cmf_aes_resource, alt_sdm_aes_key_ctx_sel_t* aes_key_ctx_sel)",802
7811,"sdm_return_t cmf_aes_setup_aes_context(const cmf_aes_resource_t cmf_aes_resource, cmf_key_t* root_key, cmf_aes_iv_data_t *iv_data_ptr)",818
7812,Copyright (2018-2019) Intel Corporation,3
7813,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7814,STATIC void hmac_cleanup(,73
7815,STATIC sdm_return_t hmac_send_data(,75
7816,@fn:            cmf_hmac_init(),88
7817,sdm_return_t cmf_hmac_init(const crypto_context_t * const ctx),92
7818,@fn:            cmf_hmac_start(),111
7819,@param input:   dma_src - DMA source (Default: DMA_SRC_SDM),124
7820,sdm_return_t cmf_hmac_start(,127
7821,@fn:            cmf_hmac_upate(),266
7822,@param input:   fifo - Destination FIFO (Default: IN_BUF_FIFO_0),277
7823,sdm_return_t cmf_hmac_update(,280
7824,@fn:            cmf_hmac_finish(),308
7825,@param input:   fifo - Destination FIFO (Default: IN_BUF_FIFO_0),325
7826,sdm_return_t cmf_hmac_finish(,328
7827,@fn:            cmf_hmac(),445
7828,@param input:   fifo - Destination FIFO (Default: IN_BUF_FIFO_0),466
7829,@param input:   dma_src - DMA source (Default: DMA_SRC_SDM),467
7830,sdm_return_t cmf_hmac(,470
7831,@fn:            hmac_cleanup(),500
7832,STATIC void hmac_cleanup(const crypto_context_t * const ctx),506
7833,@fn:            hmac_send_data(),526
7834,@param input:   fifo - Destination FIFO (Default: IN_BUF_FIFO_0),538
7835,STATIC sdm_return_t hmac_send_data(,546
7836,Copyright (2018) Intel Corporation,3
7837,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7838,"static sdm_return_t hmac_drbg_update(  const crypto_context_t * const ctx, ",87
7839,"sdm_return_t cmf_hmac_drbg_init( const crypto_context_t * const ctx, ",94
7840,"sdm_return_t cmf_hmac_drbg_generate(const crypto_context_t * const ctx,",267
7841,"sdm_return_t cmf_hmac_drbg_reseed(  const crypto_context_t * const ctx,",407
7842,sdm_return_t cmf_hmac_drbg_set_reseed_interval(const uint32_t reseed_interval),511
7843,sdm_return_t cmf_hmac_drbg_finish(void),521
7844,bool cmf_hmac_drbg_initialized(void),529
7845,"static sdm_return_t hmac_drbg_update( const crypto_context_t * const ctx,",541
7846,@fn:hmac_drbg_get_v(),655
7847,cmf_mpi_t* hmac_drbg_get_v(void),659
7848,Copyright (2018-2019) Intel Corporation,3
7849,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7850,5.1 KDF in Counter Mode (From NIST SP 800-108),38
7851,1. n := ceiling(L/h).,47
7852,3. result(0):= null.,49
7853,"a. K(i) := PRF (KI, [i] || Label || 0x00 || Context || [L])",51
7854,b. result(i) := result(i-1) || K(i).,52
7855,5. Return: KO := the leftmost L bits of result(n).,53
7856,"sdm_return_t    cmf_hmac_kdf(   const crypto_context_t * const ctx,",66
7857,Copyright (2018) Intel Corporation,3
7858,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7859,@Fn                     cmf_key_init(),41
7860,"sdm_return_t cmf_key_init(cmf_key_t  *p_key,",50
7861,@Fn                     cmf_key_cosnstruct(),88
7862,"sdm_return_t cmf_key_construct(cmf_key_t  *p_key,",98
7863,sdm_return_t cmf_key_validate(const cmf_key_t *const p_key),131
7864,"sdm_return_t cmf_key_free(cmf_key_t *p_key,",176
7865,Copyright (2018) Intel Corporation,3
7866,"SRC code (""Material"") are owned by Intel Corporation or its suppliers or",6
7867,static uint32_t cmf_km_convert_put_source(cmf_km_src_t  key_src),45
7868,static uint32_t cmf_km_convert_get_dest(cmf_km_dest_t key_dest),76
7869,"sdm_return_t cmf_km_save_key(cmf_km_src_t  key_src,",103
7870,"sdm_return_t cmf_km_load_key(cmf_km_dest_t key_dest, cmf_key_t  *p_key, bool clear_key, uint32_t top_half)",284
7871,Copyright (2018) Intel Corporation,3
7872,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7873,void cmf_km_init(),101
7874,"cmf_key_id_t cmf_km_alloc_key_slot(cmf_key_size_t key_size, cmf_km_dest_t key_dest)",111
7875,"sdm_return_t cmf_km_mask_key_slot(cmf_key_size_t key_size, cmf_key_id_t key_id)",172
7876,"sdm_return_t cmf_km_unmask_key_slot(cmf_key_size_t key_size, cmf_key_id_t key_id)",206
7877,sdm_return_t cmf_km_clean_key_slot(cmf_key_t * p_key),240
7878,sdm_return_t cmf_km_free_key_slot(cmf_key_t * p_key),260
7879,bool cmf_km_is_slot_used(uint32_t slot),295
7880,Copyright (2017) Intel Corporation,3
7881,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7882,STATIC uint32_t switch_word_endianess(const uint32_t num),29
7883,STATIC sdm_return_t cmf_sha_ram_helper(,48
7884,sdm_return_t cmf_sha_ram_hw_finalize(,283
7885,sdm_return_t cmf_sha_ram_sw_finalize(,305
7886,Copyright (2018-2019) Intel Corporation,3
7887,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7888,"sdm_return_t crypto_context_create(crypto_context_t * const ctx,",31
7889,void crypto_context_release(crypto_context_t * const ctx),50
7890,Copyright (2017) Intel Corporation,3
7891,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7892,void unset_key_override() {blt_key_override = false;},61
7893,void set_key_override(const uint32_t * const key),62
7894,void unset_intel_root_key_hash_override() {blt_intel_root_key_hash_override = false;},68
7895,"void set_intel_root_key_hash_override(const void * const root_key, uint32_t root_key_len)",70
7896,void unset_context_override() {blt_context_override = false;},77
7897,"void set_context_override(const void * const ctx, uint32_t ctx_len)",78
7898,"static sdm_return_t cmf_dimk_aes_kad_workaround_ram_to_inbuf(const crypto_context_t* const ctx, ",90
7899,"static sdm_return_t cmf_dimk_aes_kad_workaround_inbuf_to_ram(const crypto_context_t* const ctx,",93
7900,static sdm_return_t is_limited_signed_key(uint32_t bootdimk_id),101
7901,uint32_t get_boot_dimk_id(void),119
7902,uint32_t get_dimk_id(uint32_t security_version),136
7903,static sdm_return_t cmf_dimk_aes_kad_workaround_before(const crypto_context_t* const ctx),147
7904,static sdm_return_t cmf_dimk_aes_kad_workaround_after(const crypto_context_t* const ctx),180
7905,static void cmf_dimk_aes_kad_workaround_clean_aes(void),206
7906,"static sdm_return_t cmf_dimk_aes_kad_workaround_ram_to_inbuf(const crypto_context_t* const ctx,",227
7907,static sdm_return_t cmf_dimk_aes_kad_workaround_inbuf_to_ram(,334
7908,"static sdm_return_t cmf_dimk_generate_metal_equivalent_key(const crypto_context_t* const ctx,",419
7909,sdm_return_t cmf_dimk_derive_intel_aes_wrapping_key(,477
7910,sdm_return_t cmf_dimk_derive_metal_key_check(,576
7911,"sdm_return_t cmf_dimk_derive_device_identity(const crypto_context_t * const ctx,",672
7912,sdm_return_t cmf_dimk_generate_boot_dimk(const crypto_context_t* const ctx),793
7913,"sdm_return_t cmf_dimk_generate_dimk( const crypto_context_t * const ctx,",836
7914,"sdm_return_t cmf_dimk_get_metal_key_check_string(uint32_t * const key_check, uint32_t key_check_length)",933
7915,"sdm_return_t cmf_dimk_get_device_identity_string(uint32_t * const device_id, uint32_t device_id_length)",944
7916,Copyright (2019) Intel Corporation,2
7917,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
7918,"sdm_return_t cmf_ecdh_compute_shared( const crypto_context_t  *const p_crypto_context,",36
7919,"sdm_return_t cmf_ecdh_compute_shared_key( const crypto_context_t  *const p_crypto_context,",57
7920,Copyright (2020) Intel Corporation,2
7921,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
7922,"sdm_return_t ecdsa_keypair_init(ecp_keypair_t           *p_keypair,",88
7923,sdm_return_t ecdsa_keypair_validate(const ecp_keypair_t *const  p_keypair),128
7924,"sdm_return_t ecdsa_check_public_key(const ecp_group_id_t     group_id, ",153
7925,"sdm_return_t ecdsa_key_generation_init(const crypto_context_t  *const p_crypto_context,",164
7926,"sdm_return_t ecdsa_key_generation_init_ex(const crypto_context_t  *const p_crypto_context,",195
7927,"sdm_return_t ecdsa_gen_private_key(const crypto_context_t  *const p_crypto_context,",253
7928,"sdm_return_t ecdsa_get_public_key(const crypto_context_t  *const p_crypto_context,",326
7929,"sdm_return_t ecdsa_gen_keypair(const crypto_context_t  *const p_crypto_context,",394
7930,sdm_return_t ecdsa_key_generation_uninit( void ),427
7931,"sdm_return_t ecdsa_sign(const crypto_context_t  *const p_crypto_context,",447
7932,"@param input    p_r   - r component of the signature (r,s)",762
7933,"@param input    p_s   - s component of the signature (r,s)",763
7934,"sdm_return_t ecdsa_hash_sign(const crypto_context_t  *const p_crypto_context,",768
7935,"@param input    p_r   - r component of the signature (r,s)",806
7936,"@param input    p_s   - s component of the signature (r,s)",807
7937,"sdm_return_t ecdsa_verify(  const crypto_context_t  *const p_crypto_context,",812
7938,"@param input    p_r   - r component of the signature (r,s)",963
7939,"@param input    p_s   - s component of the signature (r,s)",964
7940,"sdm_return_t ecdsa_hash_verify(  const crypto_context_t  *const p_crypto_context,",969
7941,Copyright (2018) Intel Corporation,2
7942,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
7943,Copyright (2019) Intel Corporation,3
7944,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7945,@brief  This function will disable All the RO's for TRNG(all 32 of them),44
7946,static __inline__ void trng_disable_all_ro(void),48
7947,static __inline__ void trng_disable_fifo(void),59
7948,static __inline__ uint32_t get_trng_csr_value(void),70
7949,static __inline__ uint32_t get_trng_fifo_rand_value(void),81
7950,static __inline__ void pop_trng_fifo(void),93
7951,static sdm_return_t trng_init(void),105
7952,static sdm_return_t get_trng_rand_value(uint32_t *rand_value),167
7953,void set_internal_trng_self_test_usage_params(bool internal_usage_params),202
7954,@return internal_trng_usage to indicate if TRNG is using internal (true) or external (false),211
7955,bool get_internal_trng_self_test_usage_params(void),213
7956,"uint32_t get_trng_sample(uint32_t *sample, uint32_t sample_size)",225
7957,"uint32_t fill_bias_bsc_count(uint32_t* sample,uint32_t sample_size,uint32_t * col_bias_count,uint32_t * col_bsc_count)",257
7958,"static uint32_t fill_bias_bsc_count(uint32_t* sample,uint32_t sample_size,uint32_t * col_bias_count,uint32_t * col_bsc_count)",259
7959,@brief  scc = ((n-1)count11 - count1^2)/((n-1)count1 - count1^2),302
7960,"static __inline__ uint32_t scc_calculation(uint32_t n, uint32_t count1, uint32_t count11)",308
7961,"uint32_t trng_test(uint32_t *trng_sample,uint32_t trng_sample_size,trng_test_results_t* results)",341
7962,"static void alt_sdm_mbox_trng_self_test_common( ALT_SDM_MBOX_CMD cmd_code,",417
7963,"void alt_sdm_mbox_trng_self_test_hdlr(ALT_SDM_MBOX_SOURCE_t client,",501
7964,"void alt_sdm_mbox_trng_customer_test_hdlr(ALT_SDM_MBOX_SOURCE_t client,",527
7965,Copyright (2018) Intel Corporation,3
7966,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7967,bool cmf_aes_is_key_update_mode_enabled(cmf_aes_resource_t cmf_aes_resource),48
7968,"sdm_return_t cmf_aes_decrypt_key_from_fifo_and_send_to_key_vault (const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_aes_data_source_t fifo, cmf_key_t* key_dest)",54
7969,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",177
7970,"sdm_return_t cmf_aes_encrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_encrypt, cmf_key_t* key_dest,",193
7971,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault_and_ram(const crypto_context_t * const crypto_ctx,const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",208
7972,"sdm_return_t cmf_aes_encrypt_key_and_send_to_key_vault_and_ram(const crypto_context_t * const crypto_ctx, const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t* key_to_encrypt, cmf_key_t* key_dest,",224
7973,"sdm_return_t cmf_aes_crypt_key_and_send_to_key_vault(const crypto_context_t * const crypto_ctx, const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_crypt, cmf_key_t* key_dest, alt_sdm_aes_opmode_t cypher_mode,",241
7974,Copyright (2021) Intel Corporation,3
7975,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7976,(,90
7977,sdm_return_t comp_aes_close (comp_aes_handle_t  comp_aes_handle),115
7978,(,145
7979,"sdm_return_t comp_aes_free_hw_context(comp_aes_handle_t comp_aes_handle, aes_hw_ctx_id_t* aes_hw_ctx_id)",247
7980,static sdm_return_t comp_aes_wait_for_aes_ready(void),331
7981,static sdm_return_t comp_aes_dma_rd_inbuf_setup(comp_aes_src_t comp_aes_src),370
7982,"static sdm_return_t comp_aes_dma_rd_inbuf_go(uint32_t *src_addr, uint32_t src_len_bytes, comp_aes_src_t comp_aes_src)",432
7983,static sdm_return_t comp_aes_dma_wr_setup(comp_aes_dest_t comp_aes_dest),487
7984,"static sdm_return_t comp_aes_dma_wr_go(uint32_t* dest_addr, uint32_t data_size_bytes, comp_aes_dest_t comp_aes_dest)",523
7985,static sdm_return_t comp_aes_validate_input_key(cmf_key_t *p_key),563
7986,static sdm_return_t comp_aes_key_as_data_setup(),583
7987,(,658
7988,(,805
7989,sdm_return_t comp_aes_finish(comp_aes_handle_t comp_aes_handle),942
7990,(,980
7991,"sdm_return_t  comp_aes_derive_decryption_key(comp_aes_handle_t comp_aes_handle, aes_hw_ctx_id_t aes_hw_ctx_id, aes_cipher_mode_t aes_mode)",1036
7992,Copyright (2017) Intel Corporation,3
7993,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
7994,"sdm_return_t get_key_derivation_key_from_dimk(const crypto_context_t * const ctx,",58
7995,sdm_return_t cmf_dimk_metal_equivalent_key_flow_run_hw(,110
7996,sdm_return_t cmf_dimk_derive_user_aes_wrapping_key(,261
7997,sdm_return_t cmf_dimk_init(const crypto_context_t* const ctx),321
7998,uint32_t get_security_version(void),404
7999,uint32_t convert_security_version_to_cancelid(uint32_t svn),419
8000,Copyright (2020) Intel Corporation,2
8001,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
8002,"sdm_return_t ecdsa_group_id_params_get(const ecp_group_id_t group_id,",40
8003,"@param input    r_value - r value from the (r, s) signature",87
8004,"sdm_return_t ecdsa_verify_check_result(pkc_handle_t pkc,",90
8005,"sdm_return_t ecdsa_sha(const crypto_context_t* const ctx, const sha_csr_size_t sha_type,",173
8006,Copyright (2020) Intel Corporation,3
8007,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8008,"sdm_return_t ecp_multiply( const crypto_context_t  *const p_crypto_context,",65
8009,"sdm_return_t ecp_multiply_key( const crypto_context_t  *const p_crypto_context,",212
8010,"sdm_return_t ecp_check_private_key( const ecp_group_id_t group_id, ",346
8011,@brief This function random generate register By (with retry),403
8012,"sdm_return_t ecp_generate_By(const crypto_context_t  *const p_crypto_context,",413
8013,Copyright (2020) Intel Corporation,2
8014,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
8015,"sdm_return_t cmf_pkc_sign_key(pkc_handle_t pkc_handle,",50
8016,"sdm_return_t cmf_pkc_sign(pkc_handle_t pkc_handle,",203
8017,"sdm_return_t cmf_pkc_modular_reg(pkc_handle_t pkc_handle,",270
8018,"sdm_return_t cmf_pkc_pubkey_valid(pkc_handle_t pkc_handle,",361
8019,"sdm_return_t cmf_pkc_point_multiply_key(pkc_handle_t pkc_handle,",525
8020,"sdm_return_t cmf_pkc_point_multiply(pkc_handle_t pkc_handle,",647
8021,Copyright (2018) Intel Corporation,3
8022,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8023,@brief  This function will enable All the RO's for TRNG(all 32 of them),93
8024,static __inline__ void trng_enable_all_ro(void),97
8025,@brief  This function will disable All the RO's for TRNG(all 32 of them),104
8026,static __inline__ void trng_disable_all_ro(void),108
8027,static __inline__ void trng_disable_fifo(void),119
8028,static __inline__ void trng_enable_fifo(void),131
8029,"static sdm_return_t handle_return(sdm_return_t error_code, const crypto_context_t * const ctx, sr_struct_t *sr_values)",146
8030,static sdm_return_t setup_hmac_for_trng_data(sha_handle_t sha_handle),163
8031,static sdm_return_t setup_input_buf_for_trng_data(in_buf_handle_t in_buf_handle),226
8032,static void trng_status_set(cmf_trng_status_t new_val),289
8033,static sdm_return_t check_trng_status(void),307
8034,void set_internal_trng_usage_params(bool internal_usage_params),375
8035,@return internal_trng_usage to indicate if TRNG is using internal (true) or external (false),389
8036,bool get_internal_trng_usage_params(void),391
8037,cmf_trng_status_t trng_status_get(void),401
8038,bool trng_random_number_gen_is_valid(),422
8039,bool is_trng_enabled_for_aes(),455
8040,void trng_disable(),477
8041,"sdm_return_t trng_enable(uint32_t longdelay, uint32_t sampledelay, uint32_t shortdelay, trng_dest_sel_t dest)",496
8042,"sdm_return_t trng_enable_private(uint32_t longdelay, uint32_t sampledelay, uint32_t shortdelay, trng_dest_sel_t dest)",519
8043,"void save_critical_registers(const crypto_context_t * const ctx, sr_struct_t *sr_struct_ptr)",591
8044,"void restore_critical_registers(const crypto_context_t * const ctx, sr_struct_t *sr_struct_ptr)",603
8045,"sdm_return_t generate_random_number(const crypto_context_t * const ctx, uint32_t *truncated_key, uint32_t truncated_key_size_w)",619
8046,"static sdm_return_t generate_random_number_private(const crypto_context_t * const ctx, uint32_t *truncated_key, uint32_t truncated_key_size_words)",705
8047,"sdm_return_t generate_random_number_using_drbg( const crypto_context_t * const ctx, cmf_mpi_t *const final_random_num_hmac_generated,uint32_t requested_security_strength,bool re_initialize)",863
8048,Copyright (2018) Intel Corporation,3
8049,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8050,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",47
8051,"sdm_return_t cmf_aes_encrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_encrypt, cmf_key_t* key_dest,",63
8052,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault_and_ram(const crypto_context_t * const crypto_ctx, const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",78
8053,"sdm_return_t cmf_aes_encrypt_key_and_send_to_key_vault_and_ram(const crypto_context_t * const crypto_ctx, const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t* key_to_encrypt, cmf_key_t* key_dest,",94
8054,"sdm_return_t cmf_aes_crypt_key_and_send_to_key_vault(const crypto_context_t * const crypto_ctx,const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_crypt, cmf_key_t* key_dest, alt_sdm_aes_opmode_t cypher_mode,",111
8055,Copyright (2017) Intel Corporation,3
8056,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8057,sdm_return_t cmf_dimk_metal_equivalent_key_flow_run_hw(,60
8058,"sdm_return_t get_key_derivation_key_from_dimk(const crypto_context_t * const ctx,",232
8059,sdm_return_t cmf_dimk_derive_user_aes_wrapping_key(,300
8060,sdm_return_t cmf_dimk_init(const crypto_context_t* const ctx),359
8061,uint32_t get_security_version(void),418
8062,uint32_t convert_security_version_to_cancelid(uint32_t svn),440
8063,Copyright (2020) Intel Corporation,2
8064,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
8065,"sdm_return_t ecdsa_group_id_params_get(const ecp_group_id_t group_id,",43
8066,"@param input    r_value - r value from the (r, s) signature",76
8067,"sdm_return_t ecdsa_verify_check_result(pkc_handle_t pkc,",79
8068,"sdm_return_t ecdsa_sha(const crypto_context_t* const ctx, const sha_csr_size_t sha_type,",161
8069,Copyright (2018) Intel Corporation,3
8070,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8071,"sdm_return_t ecp_multiply( const crypto_context_t  *const p_crypto_context,",44
8072,"sdm_return_t ecp_check_private_key( const ecp_group_id_t group_id, ",159
8073,"sdm_return_t cmf_pkc_point_multiply(pkc_handle_t pkc_handle,",5
8074,"sdm_return_t alt_sdm_pkc_sign(pkc_handle_t pkc_handle,",36
8075,Copyright (2018) Intel Corporation,3
8076,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8077,@brief  This function will enable All the RO's for TRNG(all 32 of them),78
8078,static __inline__ void trng_enable_all_ro(void),82
8079,@brief  This function will disable All the RO's for TRNG(all 32 of them),89
8080,static __inline__ void trng_disable_all_ro(void),93
8081,static __inline__ void trng_disable_fifo(void),104
8082,static __inline__ void trng_enable_fifo(void),116
8083,"static sdm_return_t handle_return(sdm_return_t error_code, const crypto_context_t * const ctx, sr_struct_t *sr_values)",130
8084,static sdm_return_t setup_hmac_for_trng_data(sha_handle_t sha_handle),147
8085,static sdm_return_t setup_input_buf_for_trng_data(in_buf_handle_t in_buf_handle),212
8086,static void trng_status_set(cmf_trng_status_t new_val),272
8087,static sdm_return_t check_trng_status(void),290
8088,cmf_trng_status_t trng_status_get(void),348
8089,bool trng_random_number_gen_is_valid(),369
8090,bool is_trng_enabled_for_aes(),397
8091,void trng_disable(),419
8092,"sdm_return_t trng_enable(uint32_t longdelay, uint32_t sampledelay, uint32_t shortdelay, trng_dest_sel_t dest)",438
8093,"sdm_return_t trng_enable_private(uint32_t longdelay, uint32_t sampledelay, uint32_t shortdelay, trng_dest_sel_t dest)",461
8094,"void save_critical_registers(const crypto_context_t * const ctx, sr_struct_t *sr_struct_ptr)",531
8095,"void restore_critical_registers(const crypto_context_t * const ctx, sr_struct_t *sr_struct_ptr)",542
8096,"sdm_return_t generate_random_number(const crypto_context_t * const ctx, uint32_t *truncated_key, uint32_t truncated_key_size_w)",559
8097,"static sdm_return_t generate_random_number_private(const crypto_context_t * const ctx, uint32_t *truncated_key, uint32_t truncated_key_size_words)",600
8098,"sdm_return_t generate_random_number_using_drbg( const crypto_context_t * const ctx, cmf_mpi_t *const final_random_num_hmac_generated,uint32_t requested_security_strength,bool re_initialize)",735
8099,"return_t IidEntropyEncode(const uint8_t * const maskedPuf,",26
8100,"return_t IidErrorEncode(const uint8_t * const sEnl,",49
8101,"return_t IidEntropyExtractErrorDecode(const uint8_t * const maskedPuf,",78
8102,/* Encoding table (2 bits pairs):,26
8103,"void IidEntropyEncode32(const uint8_t * const code, uint8_t * const activationCode, uint16_t size)",36
8104,/* Extraction table (2 bit pairs):,79
8105,"void IidEntropyExtract32(const uint8_t * const activationCode, const uint8_t * const puf, uint8_t * const code, uint16_t size)",90
8106,/* log_alpha(i) == logtab256[i-1] (which is equal to logtab256[i] when 0x00 is added to the table) */,58
8107,/* get degree da of polynomial a(x) (la is length of array a[]) */,101
8108,"static PRE_INLINE void poly_deg(const uint8_t * const a,",102
8109,uint8_t gf256_inv(uint8_t a),109
8110,/* polynomial division (q[] and r[] should be arrays of length lengthPolynomA) */,116
8111,void Galois256PolynomialDivision(,117
8112,/* get degree da of polynomial a(x) (la is length of array a[]) */,179
8113,"static PRE_INLINE void poly_deg(const uint8_t * const a,",180
8114,uint8_t gf256_plog(uint8_t a),192
8115,void Galois256PolynomialAddition(,199
8116,void Galois256PolynomialMultiplication(,221
8117,"uint8_t Galois256PolynomialEvaluation(const uint8_t * const polynom, uint8_t lengthPolynom, uint8_t x)",256
8118,"uint8_t Galois256PolynomialDerivedEvaluation(const uint8_t * const polynom, uint8_t lengthPolynom, uint8_t x)",281
8119,* Sx[] is the syndrome polynomnial (S_1 + S_2.x) + S_3.x^2 + ...) of length 2*RS_t,38
8120,*  Omega(x) = S(x) * Lambda(x) (mod x^dr_thresh),40
8121,"/* real Chien search algo (also exhaustive, but less work/iteration, no explicit poly eval) */",45
8122,/* get degree da of polynomial a(x) (la is length of array a[]) */,56
8123,"static PRE_INLINE void poly_deg(const uint8_t * const a,",57
8124,"void IidReedSolomon48_32Encode(const uint8_t * const message, uint8_t * const codeword)",66
8125,"void IidReedSolomon48_32Decode(const uint8_t * const codeword, const uint8_t * const erasures, uint8_t * const message, uint8_t * errors_unerased)",106
8126,/* get degree da of polynomial a(x) (la is length of array a[]) */,236
8127,"static PRE_INLINE void poly_deg(const uint8_t * const a,",237
8128,"static void ReedSolomonSyndromes(const uint8_t * const symbols, uint8_t * const syndromes)",249
8129,"static int32_t Sugiyama(const uint8_t * const Sx, uint8_t dr_thresh, uint8_t * const om, uint8_t * const lam)",265
8130,"static uint8_t ChienSearch(const uint8_t * const gam, uint8_t * const roots)",353
8131,"static uint8_t Forney(const uint8_t * const om, const uint8_t * const lam, const uint8_t * const gam, const uint8_t * const erasures, const uint8_t * const roots, uint8_t rf, uint8_t * const e)",387
8132,"void IidSoftReedMuller1_7_Rep2Encode(const uint8_t * const messages, uint8_t * const codewords)",37
8133,"void IidSoftReedMuller1_7_Rep2Decode(const uint8_t * const codewords, uint8_t * const messages, uint8_t * const erasures, uint32_t * cumulative_hd)",90
8134,"static uint8_t decode(const uint8_t * const codeword, uint8_t * const message)",167
8135,return_t IidEnrollmentTest(const uint8_t * const activationCode),39
8136,static return_t IidActivationCodeHealthCheck(const uint8_t * const activationCode),60
8137,"return_t IidFEUPTest(const uint8_t * const activationCode, const uint8_t * const maskedPuf)",26
8138,return_t IidFCSTest(uint8_t unerased_errors),163
8139,return_t IidCDDTest(uint32_t cumulative_hd),185
8140,"return_t IidZNTest(const uint8_t * const activationCode, const uint8_t * const maskedPuf)",207
8141,"return_t IidDScore(uint32_t cumulative_hd, uint8_t unerased_errors, uint8_t *score)",259
8142,return_t IidProductionTest(const uint8_t * const puf),38
8143,static return_t IidSramHealthCheck(const uint8_t * const puf),59
8144,"void iid_memcpy32(void *dest, const void *source, uint32_t n)",17
8145,Copyright (2018) Intel Corporation,3
8146,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8147,sdm_return_t cmf_set_default_security_protection(bool unconditional_lock),72
8148,sdm_return_t cmf_as_compatibility_check(section_mode_flags_t section_mode_flags),151
8149,void cmf_init_stickybits(void),167
8150,Copyright (2019) Intel Corporation,3
8151,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8152,bool cnoc_handle_valid(const cnoc_handle_t handle),90
8153,"sdm_return_t cnoc_ctrl_avstdropbeat_set(const cnoc_handle_t handle, const uint32_t req_beats)",108
8154,void cnoc_warm_reset(void),140
8155,"static void cnoc_interrupt_clear_set(uintptr_t base, uint32_t reg, uint32_t value)",158
8156,static uint32_t cnoc_ret_abort_int_asserted(const cnoc_handle_t handle),172
8157,"static sdm_return_t cnoc_broadcast_cnt_tx_fifo_en(const cnoc_handle_t handle, uint8_t bus)",180
8158,"static sdm_return_t cnoc_multicast_tx_intr_reset(const cnoc_handle_t handle, uint8_t bus, bool assert)",200
8159,"static sdm_return_t cnoc_multicast_reset_warning(const cnoc_handle_t handle, uint8_t bus)",220
8160,"sdm_return_t cnoc_multicast_reset(const cnoc_handle_t handle,",249
8161,"sdm_return_t cnoc_isosync_set(const cnoc_handle_t handle, bool value)",296
8162,sdm_return_t cnt_cnoc_tx_fifo_en_reset(const cnoc_handle_t handle),312
8163,"sdm_return_t cnt_cnoc_tx_int_reset(const cnoc_handle_t handle, bool assert)",348
8164,sdm_return_t cnt_warm_reset_mcast(const cnoc_handle_t handle),383
8165,sdm_return_t check_and_clear_cnoc_ret_abort_int(const cnoc_handle_t handle),471
8166,"sdm_return_t cnoc_clk_en_set(const cnoc_handle_t handle, bool value)",527
8167,cnoc_handle_t cnoc_open(const bool do_cnoc_reset),544
8168,@param handle is the handle that was returned from the cnoc_open(true) call.,593
8169,sdm_return_t cnoc_close(const cnoc_handle_t handle),597
8170,static sdm_return_t cnoc_tx_wait_ready(const cnoc_handle_t handle),619
8171,"sdm_return_t cnoc_tx_send_cpu_msg(const cnoc_handle_t handle,",653
8172,"sdm_return_t cnoc_tx_sync_assert(const cnoc_handle_t handle, const uint32_t count)",860
8173,sdm_return_t cnoc_tx_sync_deassert(const cnoc_handle_t handle),900
8174,"sdm_return_t sdm_cnt_read_addr(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uintptr_t addr)",913
8175,"sdm_return_t sdm_cnt_addr_cjtag_enable(const cnoc_handle_t handle, const cnoc_node_t cnoc_node)",937
8176,"void cnoc_cnt_int_set(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",1008
8177,"sdm_return_t cnoc_tx_multi_cast_enable(const cnoc_handle_t handle,",1048
8178,"sdm_return_t cnoc_tx_multi_cast_broadcast(const cnoc_handle_t handle, const bool enable)",1080
8179,"sdm_return_t cnoc_tx_send_redundancy(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t * const command)",1132
8180,"sdm_return_t cnoc_tx_send_biasgen_bb_opt_fuse(const cnoc_handle_t handle,",1165
8181,"sdm_return_t cnoc_tx_select_delay_set(const cnoc_handle_t handle, const uint8_t bus, const uint32_t select)",1186
8182,"sdm_return_t cnoc_tx_send_aib_fuse(const cnoc_handle_t handle,",1214
8183,"sdm_return_t cnoc_tx_send_fusedata_to_dib(const cnoc_handle_t handle,",1245
8184,sdm_return_t cnoc_tx_send_fusedata_to_uib(,1279
8185,int32_t cnoc_map_aib_to_logical(const int32_t aib_idx_base0),1367
8186,"sdm_return_t cnoc_template_addr_set(const cnoc_handle_t handle,",1384
8187,bool any_cnoc_template_stopped(const cnoc_handle_t handle){,1417
8188,uint32_t cnoc_west_template_status(const cnoc_handle_t handle){,1433
8189,uint32_t cnoc_east_template_status(const cnoc_handle_t handle){,1449
8190,uint32_t cnoc_testwest_template_status(const cnoc_handle_t handle){,1465
8191,uint32_t cnoc_testeast_template_status(const cnoc_handle_t handle){,1481
8192,This is can be a result of a call to alt_sdm_cnoc_template_stop() or the,1493
8193,"uint32_t cnoc_template_stopped(const cnoc_handle_t handle, const cnoc_bus_idx_t bus_idx , const uint32_t index)",1501
8194,"uint32_t cnoc_template_config_get(const cnoc_handle_t handle, const cnoc_bus_idx_t bus_idx ,const uint32_t index)",1525
8195,cnoc_template_stop().,1541
8196,@param index is the zero based index(0 - 10) of the CNOC template to set.,1544
8197,"sdm_return_t cnoc_template_resume(const cnoc_handle_t handle, const cnoc_bus_idx_t bus_idx, const uint32_t index, const bool stop)",1550
8198,"sdm_return_t cnoc_template_reset(const cnoc_handle_t handle, const cnoc_bus_idx_t bus_idx, const uint32_t index)",1594
8199,"sdm_return_t cnoc_template_interval_set(const cnoc_handle_t handle, const cnoc_bus_idx_t bus_idx,",1638
8200,"uint32_t cnoc_ret_packet_read(const cnoc_handle_t handle, uint32_t * const data, const uint32_t size)",1675
8201,"uint32_t cnoc_cnt_status_get(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr,",1749
8202,"void cnoc_delay(const cnoc_handle_t handle, const uint32_t delay)",1781
8203,"sdm_return_t cnoc_s4_row_config(const cnoc_handle_t handle, const cnoc_bus_idx_t bus_idx, const uint32_t sector,",1787
8204,"sdm_return_t cnoc_tx_cnt_status(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",1862
8205,\b ALT_CNOC_IF_LNnCONFIG_ADDR() values that is a direct offset to the start,1902
8206,"sdm_return_t cnoc_template_bs_set(const cnoc_handle_t handle, const cnoc_bus_idx_t bus_idx, const uint32_t index,",1909
8207,"sdm_return_t cnoc_tx_cnt_int(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",2106
8208,"uint32_t cnoc_tx_int_get(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr,",2133
8209,"@return the given cnoc_nodes id in the topography list, (-1) if not in the topography list",2175
8210,"int32_t sdm_cnoc_get_node_idx(const cnoc_handle_t handle, const cnoc_node_t *nodes, const uint32_t size, const cnoc_addr_t * const cnoc_node)",2177
8211,"bool cnoc_timer_timeout(const cnoc_handle_t handle, const uint32_t start, const uint32_t timeout)",2200
8212,uint32_t cnoc_timer_value_get(const cnoc_handle_t handle),2209
8213,"sdm_return_t cnoc_int_clear_set(const cnoc_handle_t handle, uint32_t reg, uint32_t value)",2218
8214,"sdm_return_t cnoc_tnm_write_word(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t addr, const uint32_t data)",2237
8215,"void cnoc_ctrl_warmreset_set(const cnoc_handle_t handle, const uint32_t bus_mask)",2251
8216,"sdm_return_t sdm_cnoc_ipc_credit(const cnoc_handle_t handle, const uint8_t bus, const cnoc_addr_t cnoc_addr,",2287
8217,"sdm_return_t sdm_send_cvp_aib_int_status_mask(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t mask)",2308
8218,"sdm_return_t cnoc_tx_cvp_sync_adjust(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t sync_count)",2322
8219,"sdm_return_t sdm_send_cvp_aib_credits (const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t nCredits)",2347
8220,"sdm_return_t sdm_send_cvp_sync_adjust(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t nSyncCount)",2371
8221,"sdm_return_t sdm_send_cvp_done(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t status)",2395
8222,"sdm_return_t cnoc_single_cnt_reset(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const bool warm, const bool assert)",2420
8223,"sdm_return_t cnoc_master_save_restore(const cnoc_handle_t handle,",2461
8224,Copyright (2020) Intel Corporation,3
8225,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8226,"bool cnoc_template_stopped_get(uintptr_t base, uint32_t template_idx)",39
8227,"void cnoc_lnconfig_lntochlmapping_set(uintptr_t base, uint32_t template_idx, uint32_t value)",59
8228,"void cnoc_lnconfig_cpuresume(uintptr_t base, uint32_t template_idx)",80
8229,"void cnoc_lnconfig_cpustopreq(uintptr_t base, uint32_t template_idx)",101
8230,"void cnoc_lnconfig_resume_stop_set(uintptr_t base, uint32_t template_idx)",119
8231,"void cnoc_lnconfig_set(uintptr_t base, uint32_t template_idx, uint32_t value)",143
8232,"uint32_t cnoc_lnconfig_get(uintptr_t base, uint32_t template_idx)",162
8233,"void cnoc_lnpktcnt_clear_set(uintptr_t base, uint32_t template_idx, bool value)",183
8234,"void cnoc_lnpkrollover_set(uintptr_t base, uint32_t template_idx, uint32_t value)",204
8235,"void cnoc_nptmptrepeat_set(uintptr_t base, uint32_t template_idx, uint32_t value)",224
8236,"void cnoc_lnpktcmpfunc_set(uintptr_t base, uint32_t template_idx, cnoc_template_action_t action, bool nopsel)",246
8237,"void cnoc_lntmptwd_set(uintptr_t base, uint32_t template_idx, uint32_t data, uint32_t wd_idx, uint32_t thread)",269
8238,Copyright (2020) Intel Corporation,3
8239,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8240,static sdm_return_t cnt_ram_handle_valid(cnt_ram_handle_t handle),30
8241,cnt_ram_handle_t cnt_ram_open(void),41
8242,sdm_return_t cnt_ram_close(cnt_ram_handle_t handle),52
8243,"uintptr_t cnt_ram_ctrl_addr_get(cnt_ram_handle_t handle, cnoc_node_type_t node_type, uint32_t channel)",64
8244,"uintptr_t cnt_serial_ctrl_addr_get(cnt_ram_handle_t handle, cnoc_node_type_t node_type)",123
8245,Copyright (2019) Intel Corporation,3
8246,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8247,"static sdm_return_t comp_config_get_ram_block(comp_config_handle_t handle, uint32_t *p_data, uint32_t size_in_bytes, ",89
8248,static void comp_config_release(void),102
8249,static sdm_return_t comp_config_handle_valid(comp_config_handle_t handle),164
8250,static void comp_config_sha_isr(void* context),175
8251,static sdm_return_t comp_config_inbuf_is_ready(),237
8252,"static sdm_return_t query_readiness_and_interrupt(uint32_t timeout, sdm_return_t (* callback_ptr)())",259
8253,cnoc_handle_t comp_config_cnoc_handle_get(comp_config_handle_t handle),292
8254,sha_handle_t comp_config_sha_handle_get(comp_config_handle_t handle),303
8255,in_buf_handle_t comp_config_inbuf_handle_get(comp_config_handle_t handle),314
8256,out_buf_handle_t comp_config_outbuf_handle_get(comp_config_handle_t handle),325
8257,dma_handle_t comp_config_dma_handle_get(comp_config_handle_t handle),337
8258,decomp_handle_t comp_config_decomp0_handle_get(comp_config_handle_t handle),348
8259,decomp_handle_t comp_config_decomp1_handle_get(comp_config_handle_t handle),360
8260,hash_mgr_handle_t comp_config_hash_mgr_handle_get(comp_config_handle_t handle),373
8261,inbuf_drain_mgr_handle_t comp_config_drain_mgr_handle_get(comp_config_handle_t handle),384
8262,pkc_handle_t comp_config_pkc_handle_get(comp_config_handle_t handle),395
8263,sdm_return_t comp_config_close(comp_config_handle_t handle),406
8264,"sdm_return_t comp_config_sha_size_set(comp_config_handle_t handle, uint32_t size)",436
8265,comp_config_handle_t comp_config_open(bool do_cnoc_reset),497
8266,sdm_return_t comp_config_reset_sha(comp_config_handle_t handle),616
8267,"sdm_return_t comp_config_setup_libraries(comp_config_handle_t handle, decomp_id_t decomp_id, uint32_t ip_baseadd0, uint32_t ip_baseadd1, uint32_t ip_baseadd2, uint32_t rowpred_2d_params0, uint32_t rowpred_2d_params1)",643
8268,"sdm_return_t comp_config_update_inbuf(comp_config_handle_t handle, fifo_cfg_t *inbuf_fifo_cfg)",665
8269,"sdm_return_t comp_config_input_expect(comp_config_handle_t handle, uint32_t size)",701
8270,"sdm_return_t comp_config_get_cpu_block(comp_config_handle_t handle, uint32_t *p_data, uint32_t size_in_bytes, bool hash_check)",726
8271,"sdm_return_t comp_config_get_skip_block(comp_config_handle_t handle, uint32_t *p_data, uint32_t size_in_bytes, in_buf_select_t fifo)",731
8272,"sdm_return_t comp_config_get_keys_block(comp_config_handle_t handle, uint32_t *p_data, ",736
8273,"static sdm_return_t comp_config_get_ram_block(comp_config_handle_t handle, uint32_t *p_data, uint32_t size_in_bytes, ",744
8274,sdm_return_t comp_config_check_hash_count(void),871
8275,"sdm_return_t comp_config_get_dc0_block(comp_config_handle_t handle, bool encrypted, uint32_t aes_context, uint32_t size_in_bytes)",915
8276,"sdm_return_t comp_config_get_dc1_block(comp_config_handle_t handle, bool encrypted, uint32_t aes_context, uint32_t size_in_bytes)",981
8277,"another action (sector group, setup decomp, etc).",1051
8278,static sdm_return_t comp_config_process_hash_block_during_action(comp_config_handle_t config_handle),1061
8279,bool comp_config_check_dma_write_done(comp_config_handle_t handle),1210
8280,bool comp_config_check_dma_read_done(comp_config_handle_t handle),1244
8281,"sdm_return_t comp_config_skip_block_hash(comp_config_handle_t handle, bool skip_expect_hash)",1278
8282,"sdm_return_t comp_config_add_hashes(comp_config_handle_t handle, uint32_t * hashes, uint32_t length){",1297
8283,uint32_t comp_config_sha_size_get(comp_config_handle_t handle),1307
8284,in_buf_select_t comp_config_get_current_route(comp_config_handle_t handle),1312
8285,"sdm_return_t comp_config_add_routes(comp_config_handle_t handle, uint32_t const * routes, uint32_t length)",1318
8286,"sdm_return_t comp_config_setup_wipe_pass1_inbuf(comp_config_handle_t handle, uint32_t size_in_bytes, uint32_t src_addr)",1376
8287,"sdm_return_t comp_config_wipe_decomp(comp_config_handle_t handle, uint32_t size, uint32_t num_blocks, uint32_t *new_block)",1464
8288,"sdm_return_t comp_config_skip_data(comp_config_handle_t handle, uint32_t bitstream_size)",1590
8289,static sdm_return_t comp_config_skip_data_prebuf(uint32_t size),1607
8290,sdm_return_t comp_config_update_next(comp_config_handle_t handle),1793
8291,"sdm_return_t comp_config_read_word(comp_config_handle_t handle, uint32_t size_in_word, uint32_t * data)",1827
8292,Copyright (2020) Intel Corporation,3
8293,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8294,"sdm_return_t crypto_empty_cvp_fifo(cnoc_handle_t cnoc_handle, ",49
8295,"sdm_return_t derive_user_aes_wrapping_key(const crypto_context_t * const ctx,cmf_key_t *input_key,",64
8296,Copyright (2019) Intel Corporation,3
8297,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8298,static inline ALT_DMA_raw_t * const get_dma_context(const dma_handle_t handle),54
8299,static inline bool dma_handle_valid(const dma_handle_t handle),59
8300,"dma_handle_t dma_open(dma_source_t source, dma_dest_t dest)",64
8301,sdm_return_t dma_close(dma_handle_t handle),145
8302,"sdm_return_t dma_descriptor_enqueue(dma_handle_t handle, dma_mode_t mode, uint8_t id, uint32_t address, uint32_t length, ",156
8303,"uint32_t dma_get_descriptor_fifo_level(dma_handle_t handle, dma_mode_t mode)",227
8304,"bool dma_check_descriptor_busy(dma_handle_t handle, dma_mode_t mode)",244
8305,"bool dma_check_descriptor_stop(dma_handle_t handle, dma_mode_t mode)",261
8306,"sdm_return_t dma_write_change_destination(dma_handle_t handle, dma_dest_t dest)",278
8307,"sdm_return_t dma_read_change_source(dma_handle_t handle, dma_source_t src)",309
8308,"bool dma_get_irq(dma_handle_t handle, dma_mode_t mode)",340
8309,"sdm_return_t dma_clear_irq(dma_handle_t handle, dma_mode_t mode)",353
8310,"sdm_return_t dma_read_resume_transfer(dma_handle_t handle, uint32_t config)",373
8311,"sdm_return_t dma_irq_enable(dma_handle_t handle, dma_mode_t mode, uint32_t config)",398
8312,"sdm_return_t dma_write_resume_transfer(dma_handle_t handle, uint32_t config)",417
8313,bool dma_rd_active(void),444
8314,bool dma_wr_active(void),469
8315,"sdm_return_t dma_write_resume_desc(dma_handle_t handle, bool enable)",489
8316,"sdm_return_t dma_read_resume_desc(dma_handle_t handle, bool enable)",525
8317,uint32_t dma_cal_burst_size(uint32_t range_size_in_bytes),563
8318,bool dma_rd_fifo_full(void),580
8319,bool dma_wr_fifo_full(void),593
8320,"sdm_return_t dma_state_save_restore(const dma_handle_t handle, ",606
8321,Copyright (2019) Intel Corporation,3
8322,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8323,void set_ecc_error(uint32_t ram_id),52
8324,uint32_t ecc_get_error(void),58
8325,void ecc_clear_error(void),69
8326,static void ecc_isr(void* context),81
8327,"sdm_return_t ecc_enable(uint32_t ram_id, uint8_t enable)",123
8328,static sdm_return_t ecc_enable_ecc(void),187
8329,sdm_return_t ecc_init(),205
8330,sdm_return_t ecc_cleanup(void),230
8331,Copyright (2019) Intel Corporation,3
8332,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8333,"sdm_return_t gpio_configure_pin(uint32_t pin, gpio_pins_polarity_t polarity, gpio_inttype_t int_type)",33
8334,"sdm_return_t gpio_polarity_set(uint32_t pin,  gpio_pins_polarity_t polarity)",52
8335,uint32_t gpio_polarity_read(uint32_t pin),68
8336,sdm_return_t gpio_interrupt_enable(uint32_t pin ),83
8337,sdm_return_t gpio_interrupt_disable(uint32_t pin ),93
8338,sdm_return_t gpio_interrupt_clr(uint32_t pin),103
8339,"sdm_return_t gpio_interrupt_type(uint32_t pin, gpio_inttype_t int_type)",111
8340,uint32_t gpio_interrupt_status(),127
8341,bool gpio_is_pin_deasserted(uint32_t pin),135
8342,uint32_t gpio_get_pin_status(void),145
8343,void gpio_pin_set(uint32_t pin),151
8344,void gpio_pin_clr(uint32_t pin),158
8345,void gpio_pin_dir_out(uint32_t pin),164
8346,sdm_return_t gpio_pin_dir_in(uint32_t pin),170
8347,Copyright (2019) Intel Corporation,4
8348,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
8349,"void gpr_debug_register_write(debug_reg_t debug_reg, uint32_t data)",30
8350,uint32_t gpr_debug_register_read(debug_reg_t debug_reg),36
8351,"void gpr_register_write(gpr_reg_t reg, uint32_t data)",42
8352,uint32_t gpr_register_read(gpr_reg_t reg),48
8353,Copyright (2019) Intel Corporation,3
8354,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8355,@brief This function reads out the first 20 words (32bit) from OCRAM base address,74
8356,STATIC void test_read_ocram(void),77
8357,void cmf_hps_enable_direct_access_to_sdmmc(void),113
8358,void cmf_hps_disable_direct_access_to_sdmmc(void),123
8359,void cmf_hps_enable_sdmmc_hps_secure_mode(void),133
8360,void cmf_hps_disable_sdmmc_hps_secure_mode(void),143
8361,void hps_disable_ocram_mem_mapping(void),151
8362,void hps_setup_psi_ll_sdram(uint32_t offset),160
8363,void hps_disable_cache_coherency_from_fpga(void),169
8364,void hps_inform_hps_fpga_in_usermode(void),177
8365,void hps_inform_hps_fpga_not_in_usermode(void),187
8366,hps_reset_reason_t hps_get_reset_reason(void),196
8367,sdm_return_t hps_ecc_ocram_init(void),232
8368,void activate_hps_test(uint32_t setting),259
8369,void config_hps_jtag_pinmux(uint32_t mode),288
8370,void hps_mpu_release(void),325
8371,void hps_debug_disable(void),342
8372,void hps_debug_enable(void),388
8373,void hps_set_cold_assert(bool cold_reset),428
8374,void hps_set_por_assert(bool por_reset),445
8375,void hps_set_warm_assert(bool warm_reset),464
8376,"bool hps_ocram_ptr_valid(const void * const ptr, const uint32_t size)",481
8377,"bool hps_sdram_ptr_valid(const void * const ptr, const uint32_t size)",516
8378,void hps_load_ocram_loop(void),541
8379,void sdm_enable_hps_wb(uint32_t setting),556
8380,Copyright (2019) Intel Corporation,3
8381,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8382,"i2c_handle_t i2c_open(i2c_instance_t instance, i2c_mode_t mode, i2c_addr_format_t format, i2c_bus_speed_t speed, uint16_t device_address, uint32_t i2c_freq_mhz)",127
8383,sdm_return_t i2c_close(i2c_handle_t handle),323
8384,static bool i2c_handle_valid(i2c_handle_t handle),355
8385,"sdm_return_t i2c_master_transfer(i2c_handle_t handle, i2c_transfer_t* trans, uint32_t num_trans)",369
8386,void i2c_slave_isr(void* context),592
8387,sdm_return_t i2c_assert_alert(i2c_handle_t handle),706
8388,Copyright (2019) Intel Corporation,3
8389,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8390,sdm_return_t handle_start(ALT_I2C_raw_t * context),39
8391,sdm_return_t handle_restart(ALT_I2C_raw_t * context),60
8392,sdm_return_t handle_rx_full(ALT_I2C_raw_t * context),85
8393,sdm_return_t handle_rd_req(ALT_I2C_raw_t * context),134
8394,sdm_return_t handle_stop(ALT_I2C_raw_t * context),165
8395,sdm_return_t handle_scl_stuck_low(ALT_I2C_raw_t * context),195
8396,sdm_return_t handle_general_call(ALT_I2C_raw_t * context),202
8397,sdm_return_t validate_and_process_command(void),207
8398,Copyright (2018) Intel Corporation,3
8399,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8400,"STATIC sdm_return_t iid_puf_generate_PUF_root_key(const crypto_context_t* const ctx, cmf_key_t* const input_key, cmf_key_t* const output_key, iid_puf_type_t iid_puf_type)",59
8401,"STATIC sdm_return_t iid_puf_generate_masked_puf(const crypto_context_t* const ctx,",176
8402,"STATIC sdm_return_t iid_puf_read_ram_xor_hmac(const crypto_context_t* const ctx, ",204
8403,"STATIC sdm_return_t iid_puf_generate_MAC(const crypto_context_t* const ctx,",295
8404,"sdm_return_t iid_puf_activate(crypto_context_t* const ctx, const uint32_t* const activation_code, const uint32_t * const mac_data, uint32_t* const err_bit_rate, iid_puf_type_t iid_puf_type)",477
8405,"STATIC bool iid_puf_validate(const uint32_t* const mac_data_passed_in, uint32_t *mac_data_generated)",629
8406,"sdm_return_t iid_puf_enroll(crypto_context_t *const ctx, uint32_t* const activation_code, uint32_t* const mac_data, iid_puf_type_t iid_puf_type)",644
8407,Copyright (2019) Intel Corporation,3
8408,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8409,/* Not compiling on nios so we need functions for these.(Unit Tests) */,63
8410,void irq_default_ISR(void * context),69
8411,static void irq_register_default(void),74
8412,void irq_init(uintptr_t base),92
8413,"void irq_mask_set(uintptr_t base, uint32_t irq_mask)",129
8414,uint32_t irq_mask_get(uintptr_t base),136
8415,"void irq_mask_clr(uintptr_t base, uint32_t irq_mask)",142
8416,void irq_open(void),151
8417,void irq_close(void),160
8418,int_status_t irq_disable_cpu(void),167
8419,void irq_restore_cpu(int_status_t status),177
8420,"void irq_config(sdm_int_id_t irq_id, uint32_t config)",187
8421,"void irq_level(sdm_int_id_t irq_id, uint32_t level)",214
8422,bool irq_enabled(sdm_int_id_t irq_id),241
8423,void irq_enable(sdm_int_id_t irq_id),272
8424,void irq_disable(sdm_int_id_t irq_id),299
8425,"void irq_register(sdm_int_id_t irq_id, irq_function_t isr, void *isr_context)",326
8426,Copyright (2019) Intel Corporation,3
8427,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8428,static bool in_buf_handle_valid(in_buf_handle_t handle),45
8429,STATIC void _in_buf_reset(uintptr_t base),58
8430,in_buf_handle_t in_buf_open(void),84
8431,sdm_return_t in_buf_close(in_buf_handle_t handle),98
8432,sdm_return_t in_buf_reset(in_buf_handle_t handle),111
8433,sdm_return_t in_buf_init(in_buf_handle_t handle),122
8434,"sdm_return_t in_buf_fifo_cfg(in_buf_handle_t handle, fifo_cfg_t const * const cfg, uint32_t num_of_fifo_entries)",171
8435,"sdm_return_t in_buf_start(in_buf_handle_t handle, in_buf_select_t fifo, uint32_t size, in_buf_src_sel_t data_source)",199
8436,"sdm_return_t in_buf_pb_start(in_buf_handle_t handle, uint32_t size)",242
8437,"sdm_return_t in_buf_fifo_wrsel(in_buf_handle_t handle, in_buf_select_t fifo)",276
8438,"sdm_return_t in_buf_fifo_rdsel(in_buf_handle_t handle, in_buf_select_t fifo)",296
8439,"sdm_return_t in_buf_sink_set(in_buf_handle_t handle, bool enable)",316
8440,uint32_t in_buf_interrupt_status_get(in_buf_handle_t handle),335
8441,"sdm_return_t in_buf_interrupt_mask_set(in_buf_handle_t handle, uint32_t mask)",347
8442,"sdm_return_t in_buf_interrupt_mask_clear(in_buf_handle_t handle, uint32_t mask)",361
8443,"sdm_return_t in_buf_interrupt_enable(in_buf_handle_t handle, bool enable)",374
8444,"sdm_return_t in_buf_interrupt_clear(in_buf_handle_t handle, uint32_t mask)",394
8445,"sdm_return_t in_buf_crypto_enable_set(in_buf_handle_t handle, uint32_t enables)",407
8446,"sdm_return_t in_buf_crypto_enable_clr(in_buf_handle_t handle, uint32_t enables)",427
8447,"uint32_t in_buf_fifo_data_level(in_buf_handle_t handle, in_buf_select_t fifo)",447
8448,uint32_t in_buf_fifo_pb_data_level(in_buf_handle_t handle),457
8449,sdm_return_t in_buf_memmode_enable(in_buf_handle_t handle),468
8450,sdm_return_t in_buf_memmode_disable(in_buf_handle_t handle),486
8451,uint32_t in_buf_memmode_read(in_buf_handle_t handle),503
8452,"sdm_return_t in_buf_memmode_read_data(in_buf_handle_t handle, uint32_t offset_in_word, uint32_t size_in_word, uint32_t * data)",513
8453,"sdm_return_t in_buf_memmode_clear_data(in_buf_handle_t handle, uint32_t offset_in_word, uint32_t size_in_word)",534
8454,bool in_buf_busy(in_buf_handle_t handle),555
8455,bool in_buf_pb_busy(in_buf_handle_t handle),570
8456,bool in_buf_is_busy(in_buf_handle_t handle),585
8457,"sdm_return_t in_buf_set_status_overload(in_buf_handle_t handle, uint32_t fifo_idx, uint32_t value)",605
8458,"sdm_return_t in_buf_set_readptr_overload(in_buf_handle_t handle, uint32_t fifo_idx, uint32_t value)",618
8459,"sdm_return_t in_buf_state_save_restore(const in_buf_handle_t handle, ",631
8460,Copyright (2019) Intel Corporation,3
8461,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8462,static jtag_context_t* get_jtag_context(jtag_handle_t handle),97
8463,STATIC bool jtag_get_cmdwordinfo_valid(void),116
8464,STATIC uint32_t jtag_get_cmdwordinfo_act(void),121
8465,STATIC bool jtag_is_rsp_fifo_full(void),126
8466,STATIC void jtag_write_rspwordnormal(uint32_t word),131
8467,STATIC void jtag_write_rspwordsync(uint32_t word),136
8468,STATIC uint32_t jtag_get_cmdwordpayload(void),141
8469,jtag_handle_t jtag_open(void),157
8470,uint32_t jtag_get_command(jtag_handle_t handle),230
8471,uint32_t jtag_get_words_received(jtag_handle_t handle),247
8472,uint32_t jtag_get_words_sent(jtag_handle_t handle),261
8473,bool jtag_has_new_cmd_data(void),275
8474,"sdm_return_t jtag_get_cmd_buf_words(mbox_hwam_ifc_hdl_t handle,",280
8475,"sdm_return_t jtag_send_response(mbox_hwam_ifc_hdl_t handle,",365
8476,sdm_return_t jtag_close(jtag_handle_t handle),423
8477,"sdm_return_t jtag_register_isr_cb(jtag_handle_t handle, void(*isr_cb)(bool, bool))",440
8478,"sdm_return_t jtag_bootstatus_set(jtag_handle_t handle, uint32_t value)",455
8479,sdm_return_t jtag_mask_watermark_irq(mbox_hwam_ifc_hdl_t handle),472
8480,sdm_return_t jtag_unmask_watermark_irq(mbox_hwam_ifc_hdl_t handle),493
8481,sdm_return_t jtag_mask_rspfifoempty_irq(jtag_handle_t handle),521
8482,sdm_return_t jtag_unmask_rspfifoempty_irq(jtag_handle_t handle),540
8483,sdm_return_t jtag_pgm_fifo_clear(jtag_handle_t handle),565
8484,static uint32_t jtag_pgm_fifo_clear_prg_get(),583
8485,STATIC void jtag_isr(void* isr_context),592
8486,sdm_return_t jtag_fifo_flush(jtag_handle_t handle),637
8487,uint32_t get_jtag_id(jtag_id_type_t jtag_id_type),676
8488,sdm_return_t jtag_wipe_mbox (void),702
8489,void alt_sdm_jtag_usercode_set(uint32_t code),709
8490,void jtag_disable_main_int(bool disable),718
8491,sdm_return_t jtag_fifo_flush_direct(void),733
8492,Copyright (2020) Intel Corporation,3
8493,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8494,static bool is_hwam_hdl_valid(const mbox_hwam_hdl_t *h),85
8495,"static void update_cin_generic(mbox_hwam_hdl_t *h, bool *changed)",104
8496,static sdm_return_t update_cout_generic(const mbox_hwam_hdl_t *h),138
8497,static sdm_return_t update_rin_generic(const mbox_hwam_hdl_t *h),170
8498,"static sdm_return_t update_rout_generic(mbox_hwam_hdl_t *h, bool *changed)",189
8499,void mbox_hwam_init(void),219
8500,bool cmd_buf_has_new_data(const mbox_hwam_hdl_t *h),239
8501,sdm_return_t mbox_hwam_common_wipe_mbox(mbox_hwam_hdl_t *h),263
8502,"sdm_return_t mbox_hwam_common_process_doorbell(mbox_hwam_hdl_t *h, mbox_hw_mgr_doorbell_event_t* dbe)",294
8503,"sdm_return_t mbox_hwam_common_urgent_get(const mbox_hwam_hdl_t *h, uint32_t* urg_cmd)",358
8504,sdm_return_t mbox_hwam_common_urgent_ack(mbox_hwam_hdl_t *h),382
8505,"sdm_return_t mbox_hwam_common_normal_get(mbox_hwam_hdl_t *h,",407
8506,"sdm_return_t  mbox_hwam_common_normal_resp(mbox_hwam_hdl_t *h,",531
8507,Copyright (2020) Intel Corporation,3
8508,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8509,"static sdm_return_t normal_get_fpga(mbox_hwam_ifc_hdl_t h,",63
8510,"static sdm_return_t normal_resp_fpga(mbox_hwam_ifc_hdl_t h,",69
8511,static void fpga_wipe_hw(const mbox_hwam_hdl_t *h),138
8512,static void fpga_update_cout(uint32_t val),191
8513,static void fpga_update_rin(uint32_t val),200
8514,static void fpga_ack_urg(void),209
8515,static sdm_return_t wipe_mbox_fpga(void),228
8516,static sdm_return_t process_doorbell_fpga(mbox_hw_mgr_doorbell_event_t* dbe),240
8517,static bool has_new_normal_data_fpga(void),249
8518,"sdm_return_t normal_get_fpga(mbox_hwam_ifc_hdl_t h,",258
8519,"sdm_return_t normal_resp_fpga(mbox_hwam_ifc_hdl_t h,",274
8520,static sdm_return_t urgent_get_fpga(uint32_t *urg_val),289
8521,static sdm_return_t urgent_ack_fpga(void),298
8522,static void update_status_bits_fpga(mbox_hwam_update_status_bits_input_t inp),307
8523,static void mbox_hwam_fpga_isr(void *not_used),396
8524,void mbox_hwam_fpga_register_isr(fpga_isr_cb_t cb),408
8525,sdm_return_t mbox_hwam_fpga_isr_enable(mbox_hwam_ifc_hdl_t h),418
8526,sdm_return_t mbox_hwam_fpga_isr_disable(mbox_hwam_ifc_hdl_t h),425
8527,Copyright (2020) Intel Corporation,3
8528,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8529,"static sdm_return_t normal_get_hps(mbox_hwam_ifc_hdl_t h,",62
8530,"static sdm_return_t normal_resp_hps(mbox_hwam_ifc_hdl_t h,",68
8531,static void hps_wipe_hw(const mbox_hwam_hdl_t *h),141
8532,static void hps_update_cout(uint32_t val),187
8533,static void hps_update_rin(uint32_t val),206
8534,static void hps_ack_urg(void),224
8535,static sdm_return_t wipe_mbox_hps(void),245
8536,static sdm_return_t process_doorbell_hps(mbox_hw_mgr_doorbell_event_t* dbe),260
8537,static bool has_new_normal_data_hps(void),269
8538,"sdm_return_t normal_get_hps(mbox_hwam_ifc_hdl_t h,",278
8539,"sdm_return_t normal_resp_hps(mbox_hwam_ifc_hdl_t h,",294
8540,static sdm_return_t urgent_get_hps(uint32_t *urg_val),309
8541,static sdm_return_t urgent_ack_hps(void),318
8542,static void update_status_bits_hps(mbox_hwam_update_status_bits_input_t inp),327
8543,static void mbox_hwam_hps_isr(void *not_used),365
8544,void mbox_hwam_hps_register_isr(hps_isr_cb_t cb),377
8545,sdm_return_t mbox_hwam_hps_isr_enable(mbox_hwam_ifc_hdl_t h),387
8546,sdm_return_t mbox_hwam_hps_isr_disable(mbox_hwam_ifc_hdl_t h),394
8547,Copyright (2019) Intel Corporation,3
8548,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8549,static sdm_return_t event_hdlr_wipe_mbox(mbox_hw_mgr_hdl_t* h),197
8550,static sdm_return_t event_hdlr_wipe_phase1_mbox(mbox_hw_mgr_hdl_t* h),218
8551,static sdm_return_t event_hdlr_anti_dos_timer_done(mbox_hw_mgr_hdl_t* h),288
8552,static sdm_return_t event_hdlr_anti_dos_state_change(mbox_hw_mgr_hdl_t* h),333
8553,static sdm_return_t event_hdlr_doorbell(mbox_hw_mgr_hdl_t* h),343
8554,static sdm_return_t event_hdlr_new_urgent(mbox_hw_mgr_hdl_t *h),416
8555,static sdm_return_t event_hdlr_cmd_ready(mbox_hw_mgr_hdl_t* h),458
8556,static sdm_return_t event_hdlr_stream_resp_ready(mbox_hw_mgr_hdl_t* h),527
8557,static sdm_return_t event_hdlr_skip_normal_resp(mbox_hw_mgr_hdl_t* h),591
8558,static sdm_return_t event_hdlr_resp_ready(mbox_hw_mgr_hdl_t* h),614
8559,static sdm_return_t resume_response(mbox_hw_mgr_hdl_t *h),668
8560,static sdm_return_t event_hdlr_new_normal(mbox_hw_mgr_hdl_t* h),801
8561,static sdm_return_t event_hdlr_resp_complete(mbox_hw_mgr_hdl_t* h),852
8562,static sdm_return_t event_hdlr_resp_retry(mbox_hw_mgr_hdl_t* h),862
8563,static sdm_return_t event_hdlr_clear_prog_hardware(mbox_hw_mgr_hdl_t* h),877
8564,static sdm_return_t validate_hdl(mbox_hw_mgr_hdl_t *h),894
8565,"static sdm_return_t process_highest_priority_event(mbox_hw_mgr_hdl_t* h, OS_FLAGS events)",912
8566,static sdm_return_t decr_num_outstanding_msgs(mbox_hw_mgr_hdl_t* h),1017
8567,static sdm_return_t incr_num_outstanding_msgs(mbox_hw_mgr_hdl_t* h),1061
8568,static sdm_return_t mbox_wipe_flow_throttle_state_update(mbox_hw_mgr_hdl_t *h),1085
8569,static sdm_return_t mbox_wipe_flow_clear_anti_dos_sw_state(mbox_hw_mgr_hdl_t *h),1115
8570,static sdm_return_t disable_throttle_state(mbox_hw_mgr_hdl_t *h),1155
8571,static sdm_return_t cancelled_resp_flow(mbox_hw_mgr_hdl_t *h),1183
8572,static sdm_return_t purge_hw_mgr_task_queue(mbox_hw_mgr_hdl_t* h),1213
8573,"static sdm_return_t resp_complete_flow(mbox_hw_mgr_hdl_t* h, bool decr_num_outstanding)",1266
8574,static sdm_return_t mbox_wipe_flow(mbox_hw_mgr_hdl_t *h),1324
8575,@note This logic was ported from hps_mbox_isr_handle_hps_wipe_done(). It should not,1445
8576,static sdm_return_t process_hps_wipe_done_urg_cmd(void),1449
8577,"static sdm_return_t process_urgent_cmd(mbox_hw_mgr_hdl_t *h, uint32_t urg_cmd)",1473
8578,static sdm_return_t free_active_normal_resp(mbox_hw_mgr_hdl_t* h),1530
8579,"static void resp_retry_oneshot_cb(void *p_tmr, void *p_arg)",1559
8580,"static sdm_return_t normal_cmd_setup(mbox_hw_mgr_hdl_t* h, bool *dropped_cmd)",1591
8581,static sdm_return_t read_normal_cmd_data(mbox_hw_mgr_hdl_t *h),1737
8582,static sdm_return_t post_msg_to_hw_mgr_q(mbox_hw_mgr_hdl_t* h),1862
8583,static sdm_return_t drop_partial_flow(mbox_hw_mgr_hdl_t* h),1919
8584,"@param client the client source of the mbox_hw_mgr instance (HPS, JTAG, FPGA)",1948
8585,(currently only used by HPS).,1954
8586,"sdm_return_t mbox_hw_mgr_init_hdl(mbox_hw_mgr_hdl_t *h, ALT_SDM_MBOX_SOURCE_t client,",1958
8587,sdm_return_t mbox_hw_mgr_task_loop(mbox_hw_mgr_hdl_t *h),2095
8588,"static sdm_return_t mbox_hw_mgr_anti_dos_update_state(mbox_hw_mgr_hdl_t *h, bool incr_ndecr)",2159
8589,static sdm_return_t anti_dos_handle_state_change(mbox_hw_mgr_hdl_t* h),2265
8590,static sdm_return_t tmr_stop(OS_TMR* tmr),2399
8591,"static void anti_dos_suspected_oneshot_cb(void *p_tmr, void *p_arg)",2430
8592,"sdm_return_t mbox_hw_mgr_anti_dos_enable_disable(mbox_hw_mgr_hdl_t *h, bool enable_ndisable)",2461
8593,sdm_return_t mbox_hw_mgr_anti_dos_incr(mbox_hw_mgr_hdl_t *h),2534
8594,sdm_return_t mbox_hw_mgr_anti_dos_decr(mbox_hw_mgr_hdl_t *h),2544
8595,void mbox_hw_mgr_fatal_err_loop(void),2553
8596,Copyright (2019) Intel Corporation,3
8597,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8598,STATIC void mbox_hw_mgr_fpga_isr_cb(void),86
8599,static void mbox_hw_mgr_fpga_entry(void *unused),105
8600,sdm_return_t mbox_hw_mgr_fpga_anti_dos_enable_disable(bool enable_ndisable),151
8601,sdm_return_t mbox_hw_mgr_fpga_anti_dos_decr(void),160
8602,"sdm_return_t mbox_hw_mgr_fpga_post_event(OS_FLAGS events, bool sched )",170
8603,"sdm_return_t mbox_hw_mgr_fpga_blocking_pend_on_event_clr(OS_FLAGS events, OS_TICK timeout)",209
8604,sdm_return_t mbox_hw_mgr_fpga_task_create(void),245
8605,Copyright (2019) Intel Corporation,3
8606,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8607,STATIC void mbox_hw_mgr_hps_isr_cb(void),89
8608,static void mbox_hw_mgr_hps_entry(void *unused),109
8609,sdm_return_t mbox_hw_mgr_hps_anti_dos_enable_disable(bool enable_ndisable),155
8610,sdm_return_t mbox_hw_mgr_hps_anti_dos_decr(void),164
8611,sdm_return_t mbox_hw_mgr_hps_stream_resp_ready(uint32_t one_word_resp),175
8612,"sdm_return_t mbox_hw_mgr_hps_post_event(OS_FLAGS events, bool sched )",206
8613,sdm_return_t mbox_hw_mgr_hps_task_create(void),241
8614,Copyright (2019) Intel Corporation,3
8615,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8616,"static void jtag_mbox_isr_cb(bool cmdwmark, bool rspempty)",97
8617,static void jtag_mbox_hw_mgr_entry(void *unused),122
8618,"sdm_return_t mbox_hw_mgr_jtag_post_event(OS_FLAGS events, bool sched )",184
8619,"sdm_return_t mbox_hw_mgr_jtag_blocking_pend_on_event_clr(OS_FLAGS events, OS_TICK timeout)",224
8620,sdm_return_t mbox_hw_mgr_jtag_task_create(void),260
8621,Copyright (2021) Intel Corporation,3
8622,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8623,void ncfg_nStatus_pinmux_config (void),206
8624,void ncfg_nAS_Reset_pinmux_config (void),221
8625,bool ncfg_lock_unlock_scrreg (ncfg_scr_lock_status_e type),244
8626,void ncfg_assert_jtag_ack_event (void),289
8627,void ncfg_enable_jtag_config_wdt (void),310
8628,void ncfg_wdt_init (ncfg_wdt_status_e config),332
8629,void ncfg_enable_wdt (void),385
8630,void ncfg_disable_wdt (void),398
8631,void ncfg_pet_wdt (void),412
8632,void ncfg_debouncer_init (ncfg_pinmux_status_e config),436
8633,static void ncfg_noc_buserror_isr (void * context),463
8634,void ncfg_setup_noc_buserr_irq (void),497
8635,static void ncfg_hwfsm_state_isr (void * context),518
8636,void ncfg_setup_hwfsm_irq (void),599
8637,void ncfg_iopin_config (void),625
8638,void ncfg_interrupt_enable (void),661
8639,void ncfg_noc_bus_error_interrupt_enable (void),684
8640,void ncfg_fsm_interrupt_enable (void),719
8641,uint32_t ncfg_get_hwfsm_state (uint32_t rd_count),751
8642,void ncfg_assert_fsm_fw_event (ncfg_fsm_event_e fw_event),776
8643,void ncfg_jtag_wdt_handler (ncfg_jtag_wdt_action_e action_type),808
8644,void ncfg_update_dev_cfg_status (ncfg_dev_cfg_status_e status),844
8645,ncfg_dev_cfg_status_e ncfg_get_dev_cfg_status (void),860
8646,void ncfg_wdt_fw_resp_timer_init (ncfg_wdt_fw_resp_timer_status_e config),883
8647,static void ncfg_wdt_fw_resp_timer_isr (void * context),910
8648,void ncfg_setup_wdt_fw_resp_timer_irq (void),949
8649,void ncfg_wdt_fw_resp_timer_interrupt_enable (void),971
8650,void ncfg_stop_wdt_fw_resp_timer (void),998
8651,void ncfg_enable_wdt (void),1016
8652,void ncfg_disable_wdt (void),1029
8653,void ncfg_pet_wdt (void),1043
8654,void ncfg_iopin_config (void),1060
8655,void ncfg_interrupt_enable (void),1075
8656,void ncfg_assert_fsm_fw_event (ncfg_fsm_event_e fw_event),1089
8657,void ncfg_jtag_wdt_handler (ncfg_jtag_wdt_action_e action_type),1102
8658,void ncfg_update_dev_cfg_status (ncfg_dev_cfg_status_e status),1116
8659,ncfg_dev_cfg_status_e ncfg_get_dev_cfg_status (void),1129
8660,Copyright (2019) Intel Corporation,3
8661,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8662,static inline bool out_buf_handle_valid(out_buf_handle_t handle),42
8663,static void out_buf_init( out_buf_handle_t handle ),52
8664,out_buf_handle_t out_buf_open(void),68
8665,sdm_return_t out_buf_close(out_buf_handle_t handle),83
8666,bool is_out_buf_enabled( out_buf_handle_t handle ),100
8667,void out_buf_enable( out_buf_handle_t handle ),117
8668,uint32_t out_buf_get_fifo_level( out_buf_handle_t handle ),128
8669,bool out_buf_is_almost_empty( out_buf_handle_t handle ),140
8670,"sdm_return_t out_buf_read_threshold_set(out_buf_handle_t handle, uint32_t offset )",158
8671,"sdm_return_t out_buf_write_threshold_set(out_buf_handle_t handle, uint32_t offset )",174
8672,static inline void out_buf_sidebandctl_pop( out_buf_handle_t handle ),189
8673,static inline void out_buf_memmode_enable( out_buf_handle_t handle ),196
8674,static inline void out_buf_memmode_disable( out_buf_handle_t handle ),203
8675,"int32_t out_buf_read(out_buf_handle_t handle, uint32_t *pDest, uint32_t size)",212
8676,sdm_return_t out_buf_drain( out_buf_handle_t handle ),247
8677,Copyright (2019) Intel Corporation,3
8678,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8679,static bool pinmux_handle_valid(pinmux_handle_t handle),43
8680,pinmux_handle_t pinmux_open(void),53
8681,sdm_return_t pinmux_close(pinmux_handle_t handle),64
8682,"sdm_return_t pinmux_configure_pin(pinmux_handle_t handle, uint32_t pin_idx, uint32_t pinsel_data, uint32_t ioctrl_data)",75
8683,"sdm_return_t pinmux_configure_pinsel(pinmux_handle_t handle, uint32_t pin_idx, uint32_t pinsel_data)",92
8684,"sdm_return_t pinmux_configure_ioctl(pinmux_handle_t handle, uint32_t pin_idx, uint32_t ioctrl_data)",107
8685,bool pinmux_is_qspi_set(pinmux_handle_t handle),122
8686,Copyright (2019) Intel Corporation,3
8687,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8688,"pmbus_handle_t pmbus_open(i2c_mode_t mode, i2c_addr_format_t format, i2c_bus_speed_t speed, uint16_t device_address, uint32_t i2c_freq_mhz)",36
8689,"pmbus_return_t pmbus_master_transfer(pmbus_handle_t handle, pmbus_op_t op, uint16_t address, pmbus_command_t command, uint8_t extended_command, uint8_t *payload, uint8_t length, bool pec) ",49
8690,pmbus_return_t pmbus_assert_alert(pmbus_handle_t handle) ,93
8691,pmbus_return_t pmbus_close(pmbus_handle_t handle),103
8692,Copyright (2019) Intel Corporation,3
8693,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8694,sdm_return_t psi_disable_idle(void),73
8695,sdm_return_t psi_mount(void),124
8696,sdm_return_t psi_unmount(void),243
8697,void psi_request_idle(void),277
8698,sdm_return_t psi_poll_idle(void),288
8699,sdm_return_t psi_disable_hps_idle(void),345
8700,bool psi_is_lli_mounted(void),370
8701,bool psi_scramble_is_enabled(void),384
8702,sdm_return_t psi_set_perph_rst_assert(bool perph_reset),394
8703,Copyright (2019) Intel Corporation,3
8704,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8705,@param reset acction to be performed (QSPI_RST_ASSERT or QSPI_RST_DEASSERT),45
8706,@param reset acction to be performed (QSPI_RST_ASSERT or QSPI_RST_DEASSERT),58
8707,"static bool validate_cmd_data( uint32_t num_opt_bytes,",72
8708,"static bool validate_cmd_data_read( uint32_t num_read_bytes,",88
8709,"static bool address_words_operation_is_valid( uint32_t flash_addr,",106
8710,static qspi_reset_acc_t qspi_controller_in_reset(void),131
8711,static void local_qspi_controller_reset(qspi_reset_acc_t reset_action),147
8712,static qspi_reset_acc_t qspi_sram_buff_in_reset(void),164
8713,static void local_qspi_sram_buff_reset(qspi_reset_acc_t reset_action),179
8714,"static bool validate_cmd_data( uint32_t num_opt_bytes,",193
8715,"static bool validate_cmd_data_read( uint32_t num_read_bytes,",233
8716,static bool qspi_wait_for_idle( void ),265
8717,"static bool address_words_operation_is_valid( uint32_t flash_addr,",286
8718,sdm_return_t qspi_ctrlr_reset( qspi_reset_acc_t reset_action ),328
8719,qspi_reset_acc_t qspi_ctrlr_reset_get( void ),344
8720,sdm_return_t qspi_ctrlr_reset_seq_start( void ),361
8721,void qspi_stop_inprogress_ind_operation( void ),405
8722,sdm_return_t qspi_disable_interrupts( void ),422
8723,sdm_return_t qspi_enable_interrupt_mask( uint32_t irq_bitmask),437
8724,sdm_return_t qspi_disable_interrupt_mask( uint32_t irq_bitmask ),453
8725,void qspi_clr_int_mask( uint32_t cler_en_mask),469
8726,sdm_return_t qspi_set_baud_divisor(qspi_baud_div baud),481
8727,sdm_return_t qspi_set_read_sram_partition( uint32_t read_part_size ),496
8728,sdm_return_t qspi_set_ind_write_watermark( uint32_t watermark ),514
8729,"void qspi_clk_setup( qspi_clk_phase_t clk_phase, qspi_clk_pol_t clk_pol)",528
8730,"sdm_return_t qspi_read_settings_set(  uint32_t rd_opcode,",543
8731,"sdm_return_t qspi_write_settings_set( uint32_t wr_opcode,",594
8732,"sdm_return_t qspi_ctrlr_write_width_set( qspi_width_t wr_addr_wd,",629
8733,"sdm_return_t qspi_ctrlr_read_width_set( qspi_width_t rd_inst_wd,",651
8734,"sdm_return_t qspi_cs_delay_set( uint32_t qspi_clk,  uint32_t as_clk )",675
8735,sdm_return_t qspi_read_datacap_delay_set( uint32_t delay ),790
8736,sdm_return_t qspi_bypass_adapt_loopback_clk( bool bypass_en),819
8737,"sdm_return_t qspi_ind_access_enable( uint32_t sram_add,",844
8738,sdm_return_t qspi_ind_indaddrtrig_update( uint32_t sram_add ),874
8739,sdm_return_t qspi_ctrlr_cs_set( uint32_t cs),886
8740,"sdm_return_t qspi_flash_size_set( qspi_pow2_sz_t bytes_per_subsector,",920
8741,void qspi_ctrlr_hps_access_set( bool enable ),948
8742,"sdm_return_t qspi_indac_read( uint32_t flash_addr,",971
8743,void qspi_indac_read_tear_down( void ),996
8744,void qspi_indac_read_init( void ),1002
8745,void qspi_indac_write_tear_down( void ),1020
8746,void qspi_indac_write_init( void ),1026
8747,"sdm_return_t qspi_indac_write( uint32_t flash_addr,",1044
8748,"sdm_return_t qspi_stig_cmd_read( uint32_t opcode,",1087
8749,"sdm_return_t qspi_stig_cmd_write( uint32_t opcode,",1183
8750,"sdm_return_t qspi_stig_cmd_address( uint32_t opcode,",1239
8751,"sdm_return_t qspi_stig_simple_cmd( uint32_t opcode,",1286
8752,void qspi_ctrlr_enable( bool enable),1318
8753,"sdm_return_t qspi_baud_rate( qspi_baud_div *baud_ptr ,",1333
8754,uint32_t fifo_read_level_get( void ),1392
8755,uint32_t fifo_write_level_get( void ),1398
8756,void qspi_ctrlr_stop_operations( void ),1404
8757,bool qspi_ctrlr_write_done( void ),1417
8758,void set_hps_qspi_ctrlr_direct_access_enable(bool enable),1428
8759,void set_fpga_qspi_ctrlr_direct_access_enable(bool enable),1441
8760,void set_qspi_ctrlr_noc_slave_secure_mode_enable(bool enable),1454
8761,static uint32_t qspi_dummy_clks_to_dummy_bytes (uint32_t dummy_clks),1467
8762,static bool qspi_stig_operation_completed( void ),1478
8763,Copyright (2019) Intel Corporation,3
8764,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8765,"static bool qspi_ind_valid_address_data_get(uint32_t flash_byte_add, ",99
8766,"static sdm_return_t qspi_init( qspi_handle_t handle, ",128
8767,"static qspi_data_proc_t data_format_ind_op_get( uint32_t flash_byte_add,",134
8768,"static sdm_return_t indiac_read_operation_start( uint32_t flash_byte_add,",142
8769,"static sdm_return_t qspi_stig_cmd_read_32_wa( uint32_t opcode,",151
8770,"static sdm_return_t qspi_stig_cmd_write_wa( uint32_t opcode,",158
8771,"static sdm_return_t qspi_flash_cpu_write_exec(qspi_handle_t handle,",167
8772,static void qspi_data_cleanup( void ),179
8773,"static bool qspi_ind_valid_address_data_get(uint32_t flash_byte_addr, ",204
8774,static uintptr_t qspi_alloc(void),225
8775,static sdm_return_t qspi_free( void ),244
8776,@param handle - Pass in the handler called from  qspi_open(),260
8777,static bool qspi_handle_valid(qspi_handle_t handle),264
8778,"static sdm_return_t qspi_stig_cmd_read_32_wa( uint32_t opcode,",274
8779,"static sdm_return_t qspi_stig_cmd_write_wa( uint32_t opcode,",296
8780,static sdm_return_t qspi_sfdp_calib_get(uint32_t *data),328
8781,static void qspi_dvr_find_width( void ),344
8782,static bool  qspi_flash_busy_get( void ),394
8783,static bool calib_read_successful(void),463
8784,static sdm_return_t qspi_calibration(qspi_handle_t handle),487
8785,static void qspi_reset_flash( uint32_t reset_mask ),576
8786,static sdm_return_t qspi_4_4_4_enable( qspi_handle_t handle ),615
8787,static sdm_return_t qspi_4_byte_add_enter( void ),812
8788,static sdm_return_t qspi_byte_add_cfg( qspi_handle_t handle ),891
8789,static qspi_pow2_sz_t qspi_get_subsector_sz( void ),946
8790,static uint32_t qspi_get_sec_size( void ),974
8791,"static sdm_return_t qspi_init( qspi_handle_t handle, ",993
8792,"static qspi_data_proc_t data_format_ind_op_get( uint32_t flash_byte_add,",1173
8793,static sdm_return_t enqueue_qspi_read_indiac( void ),1208
8794,static void qspi_isr ( void * isr_context ),1257
8795,qspi_handle_t qspi_open( void ),1312
8796,"sdm_return_t qspi_ctrlr_and_mem_init( qspi_handle_t handle, ",1329
8797,sdm_return_t qspi_close(qspi_handle_t handle),1364
8798,"sdm_return_t qspi_cs_set( qspi_handle_t handle, uint32_t cs )",1395
8799,"sdm_return_t qspi_cmd_send( qspi_handle_t handle, qspi_command_t* cmd )",1447
8800,sdm_return_t qspi_recover_state( qspi_handle_t handle ),1515
8801,"sdm_return_t qspi_hps_access_set( qspi_handle_t handle, bool enable )",1582
8802,sdm_return_t qspi_flash_reset(qspi_handle_t handle),1603
8803,"sdm_return_t qspi_parse_sfdp(qspi_handle_t handle, qspi_sfdp_data_t *sfdp_spi_table_data_parsed)",1627
8804,@brief Function that triggers multiple indirect read operations of the maximum erasable size (to avoid die crossing boundary problems). ,1721
8805,"sdm_return_t qspi_flash_cpu_read( qspi_handle_t handle,",1730
8806,sdm_return_t qspi_ctrlr_safe_state(qspi_handle_t handle),1795
8807,"sdm_return_t qspi_post_clock_change( qspi_handle_t handle, ",1816
8808,"static sdm_return_t indiac_read_operation_start( uint32_t flash_byte_add,",1854
8809,"sdm_return_t qpsi_config_start( qspi_handle_t handle,",1945
8810,bool config_read_op_inprogress(qspi_handle_t handle),1970
8811,"static sdm_return_t qspi_ecc_data_read_wait( uint32_t words_thold, uint32_t p_time_out )",1992
8812,"sdm_return_t  dma_read_init_thold_wait(qspi_handle_t handle, ",2026
8813,@brief This function must wait for data (specified as a parameter) to be stored into QSPI ECC. ,2046
8814,"sdm_return_t qspi_enough_rd_data_wait( qspi_handle_t handle, ",2054
8815,sdm_return_t qspi_controller_reset( qspi_handle_t handle ),2072
8816,static uint32_t erasable_sz_conv( uint32_t idx ),2089
8817,"static sdm_return_t send_erase_command( uint32_t idx , uint32_t address)",2094
8818,"sdm_return_t qspi_flash_erase( qspi_handle_t handle,",2147
8819,"qspi_wr_data_info_t qspi_write_info_get( qspi_handle_t handle,",2359
8820,static sdm_return_t qspi_int_busy_write_wait( uint32_t timeout_val ),2379
8821,sdm_return_t qspi_busy_write_wait(qspi_handle_t handle),2400
8822,"sdm_return_t qspi_indiac_write_start(qspi_handle_t handle, ",2411
8823,"static sdm_return_t qspi_flash_cpu_write_exec(qspi_handle_t handle,",2429
8824,"sdm_return_t qspi_flash_cpu_write( qspi_handle_t handle,",2564
8825,uint32_t qspi_flash_words_size_get( qspi_handle_t handle ),2595
8826,sdm_return_t qspi_indiac_write_en( qspi_handle_t handle),2608
8827,sdm_return_t qspi_cancel_operations(qspi_handle_t handle),2627
8828,"sdm_return_t qspi_test_op_range_valid_get(qspi_handle_t handle, ",2639
8829,bool qspi_is_flash_enabled(qspi_handle_t handle),2662
8830,"sdm_return_t set_hps_qspi_direct_access_enable(qspi_handle_t handle, bool enable)",2675
8831,"sdm_return_t set_fpga_qspi_direct_access_enable(qspi_handle_t handle, bool enable)",2686
8832,"sdm_return_t set_qspi_direct_access_secure_mode_enable(qspi_handle_t handle, bool enable)",2697
8833,qspi_sfdp_data_t get_sfdp_data(void),2711
8834,Copyright (2019) Intel Corporation,3
8835,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8836,static uint32_t sfdp_param_get_table_len(const uint32_t *sfdp_param_hdr0_data),37
8837,static uint32_t sfdp_param_get_header_id_lsb(const uint32_t *sfdp_param_hdr0_data),54
8838,static uint32_t sfdp_param_get_header_id_msb(const uint32_t *sfdp_param_hdr0_data),66
8839,static uint32_t sfdp_param_get_param_table_ptr(const uint32_t *sfdp_param_hdr0_data),78
8840,static uint32_t sfdp_param_table_get_we_vol_reg(const uint32_t *sfdp_param_table_ptr),84
8841,static uint32_t sfdp_param_table_get_flash_size(const uint32_t *sfdp_param_table_ptr),144
8842,static uint32_t sfdp_param_table_get_addr_bytes(const uint32_t *sfdp_param_table_ptr),176
8843,static uint32_t sfdp_param_table_get_4_4_4_supported(const uint32_t *sfdp_param_table_ptr),182
8844,static uint32_t sfdp_param_table_get_4_4_4_fast_read_dummy_clock(const uint32_t *sfdp_param_table_ptr),188
8845,static uint32_t sfdp_param_table_get_4_4_4_fast_read_mode_clock(const uint32_t *sfdp_param_table_ptr),194
8846,static uint32_t sfdp_param_table_get_4_4_4_fast_read_opcode(const uint32_t *sfdp_param_table_ptr),200
8847,static uint32_t sfdp_param_table_get_sfdp_page_size(const uint32_t *sfdp_param_table_ptr),206
8848,static uint32_t sfdp_param_table_get_status_busy_register_polling(const uint32_t *sfdp_param_table_ptr),221
8849,static uint32_t sfdp_param_table_get_4_4_4_enable_sequence(const uint32_t *sfdp_param_table_ptr),236
8850,static uint32_t sfdp_param_table_get_4_byte_addr_mode(const uint32_t *sfdp_param_table_ptr),251
8851,static uint32_t sfdp_param_table_get_soft_and_recue_support(const uint32_t *sfdp_param_table_ptr),266
8852,"static uint32_t erase_type_time_conversion_to_ms (uint32_t count, uint32_t units)",281
8853,"static void sfpd_param_table_get_erase_size(const uint32_t *sfdp_param_table_ptr, qspi_sfdp_etype_t *erase_type )",303
8854,"void sfdp_param_header_get(const uint32_t *sfdp_param_hdr_data, qspi_sfdp_header_t* sfdp_param_header)",387
8855,"void sfdp_spi_basic_table_get(const uint32_t *sfdp_data, qspi_sfdp_data_t* sfdp_table_entries)",398
8856,void sfdp_multi_die_table_get(const uint32_t *sfdp_param_table_ptr),419
8857,Copyright (2019) Intel Corporation,3
8858,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8859,void sdm_fpga_gpo_set_inactive_state(void),38
8860,void sdm_fpga_gpo_set_single_port(uint32_t port_idx),59
8861,void sdm_fpga_gpo_clr_single_port(uint32_t port_idx),85
8862,void sdm_fpga_gpo_write_mbox_mmio(uint32_t val),112
8863,uint32_t sdm_fpga_get_gpi_val(void),137
8864,"static uint32_t iid_puf_ram_bias_check(uint32_t const iid_puf_bias_lb,",43
8865,static uint32_t iid_puf_ram_address_line_check(),148
8866,static uint32_t count_bits(uint32_t word),199
8867,"static uint32_t iid_puf_ram_stability_check(uint32_t const num_iterations,uint32_t const iid_puf_stability_mismatch_max)",219
8868,"uint32_t iid_puf_ram_test(uint32_t const iid_puf_bias_lb, uint32_t const iid_puf_bias_ub,",292
8869,Copyright (2020) Intel Corporation,3
8870,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8871,bool is_in_rma_state_user(uint32_t rma_counter_bit),53
8872,@brief  It converts the 24-bit RMA counter fuse value (stored in,140
8873,uint32_t get_rma_counter_value(uint32_t rma_counter_bit),153
8874,bool is_in_rma_state_manufacturing(uint32_t rma_counter_bit),227
8875,Copyright (2019) Intel Corporation,3
8876,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8877,"smbus_handle_t smbus_open(i2c_mode_t mode, i2c_addr_format_t format, i2c_bus_speed_t speed, uint16_t device_address, uint32_t i2c_freq_mhz)",38
8878,"sdm_return_t smbus_master_transfer(smbus_handle_t handle, smbus_op_t op, uint16_t address, uint8_t command, uint8_t *payload, uint8_t length, bool pec) ",51
8879,sdm_return_t smbus_assert_alert(smbus_handle_t handle),139
8880,sdm_return_t smbus_close(smbus_handle_t handle),145
8881,Copyright (2019) Intel Corporation,3
8882,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8883,static bool power_good_ok(uintptr_t base),38
8884,void system_control_key_vault_init(),54
8885,void system_control_vr_aux_init(uint32_t fuse_val),61
8886,void system_control_vr_aux_set_high_trim(uint32_t value),68
8887,void system_control_vr_aux_set_low_trim(uint32_t value),74
8888,void system_control_vr_aux_set_fuse_diode(uint32_t diode_val),80
8889,void system_control_i2c1_rst_deassert(void),88
8890,void system_control_i2c1_rst_assert(void),95
8891,bool system_control_check_vccl_powergood(void),102
8892,void system_control_wait_for_power_good(){,114
8893,void system_control_perif_init(),118
8894,void  system_control_mem_init(),140
8895,void system_control_disable_non_usr_mode_isolation(),172
8896,void system_control_set_rst_fpga_hps_fw_ownership(),203
8897,sdm_return_t system_control_main_ips_init(),215
8898,void system_control_set_cnoc_enable_iossm(),236
8899,void system_control_set_cnoc_select_iossm(),248
8900,void system_control_set_cnoc_return_select_lsm(),260
8901,sdm_return_t system_control_fpga2sdm_brdg_shutdown_graceful(),272
8902,sdm_return_t system_control_fpga2sdm_brdg_shutdown(),328
8903,sdm_return_t system_control_sdm2fpga_brdg_shutdown(),382
8904,void system_control_interface_ctrl_disable_fpga_core(),408
8905,void system_control_interface_ctrl_enable_fpga_core(),416
8906,sdm_return_t system_control_sdm2fpga_brdg_init(),424
8907,sdm_return_t system_control_fpga2sdm_brdg_init(),451
8908,void system_control_io48_avst16_32_enable(),487
8909,void system_control_io48_avst16_32_disable(),494
8910,void  system_control_eccdiag_reset_deassert(uint32_t mem_mask),501
8911,void  system_control_eccdiag_reset_assert(uint32_t mem_mask),509
8912,void  system_control_sdm_reset_assert(uint32_t reset_mask),518
8913,void  system_control_sdm_reset_deassert(uint32_t reset_mask),526
8914,uint32_t system_control_get_sha_hash(hal_system_control_sha_hash_t offset),533
8915,uint32_t system_control_get_debug_reg(hal_system_control_debug_t offset),539
8916,"void system_control_set_bootrom_debug(hal_system_control_bootrom_debug_t offset, uint32_t value)",545
8917,void system_control_set_vr_aux_ctrl_sig(uint32_t dft_bit_mask),552
8918,void system_control_set_fpga_gpio(uint32_t gpio_mask),562
8919,void system_control_clr_fpga_gpio(uint32_t gpio_mask),570
8920,uint32_t system_control_get_fpga_gpio(void),578
8921,"void system_control_set_nsp_dbg(hal_system_control_nsp_dbg_en_t nsp_en, hal_system_control_cfg_dbg_en_t cfg_en)",585
8922,uint32_t system_control_get_nsp_dbg(void),593
8923,uint32_t system_control_get_cfg_dbg(void),599
8924,bool system_control_is_nsp_dbg_disabled(void),605
8925,void system_control_nsp_dbg_disable(void),620
8926,void system_control_nsp_dbg_disable_lock(void),626
8927,bool  system_control_is_nsp_dbg_locked(void),634
8928,void system_control_cfg_dbg_disable(void),646
8929,bool system_control_is_cfg_dbg_disabled(void),652
8930,void system_control_cfg_dbg_disable_lock(void),668
8931,bool  system_control_is_cfg_dbg_locked(void),676
8932,"void system_control_set_cnt_bypass(hal_system_control_cnt_bypass_data_t data_en, hal_system_control_cnt_bypass_clk_t clk_en)",688
8933,bool  system_control_is_cnt_bypass_disabled(void),696
8934,void system_control_cnt_bypass_disable_lock(void),712
8935,bool  system_control_is_cnt_bypass_locked(void),720
8936,void system_control_set_sdm_bypass(hal_system_control_sdm_bypass_en_t sdm_byp_en),732
8937,bool system_control_is_sdm_bypass_disabled(void),738
8938,void system_control_sdm_bypass_disable_lock(void),754
8939,bool system_control_is_sdm_bypass_locked(void),762
8940,void system_control_hps_debug_enable(void),774
8941,void system_control_hps_debug_disable(void),787
8942,bool system_control_is_hps_debug_disabled(void),800
8943,void system_control_hps_debug_disable_lock(void),823
8944,bool system_control_is_hps_debug_locked(void),837
8945,void system_control_set_sdm_cfg_bypass(hal_system_control_sdm_cfg_bypass_t cfg_byp_en),855
8946,bool  system_control_is_sdm_cfg_bypass_disabled(void),860
8947,void system_control_sdm_cfg_bypass_disable_lock(),865
8948,bool system_control_is_sdm_cfg_bypass_locked(),871
8949,void system_control_stickybit_set(uint32_t bit),876
8950,uint32_t system_control_stickybit_get_word(uint32_t word),895
8951,bool system_control_stickybit_get(uint32_t bit),917
8952,uint32_t system_control_get_knwn_metal_key_disable(void),939
8953,bool system_control_is_knwn_metal_key_locked(void),946
8954,uint32_t system_control_get_unknwn_metal_key_disable(void),952
8955,bool system_control_is_unknwn_metal_key_locked(void),959
8956,void system_control_set_cnt_bypass_disable(void),964
8957,void system_control_set_sdm_bypass_disable(void),968
8958,system_control_set_sdm_bypass(HAL_SYSTEM_CONTROL_SDM_BYPASS_DISABLE);      ,970
8959,void system_control_set_sdm_cfg_bypass_disable(void),973
8960,Copyright (2020) Intel Corporation,3
8961,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8962,STATIC sdm_return_t system_reset_open_driver_handles(void),81
8963,STATIC void system_reset_close_driver_handles(void),144
8964,sdm_return_t system_reset_big_hammer(void),199
8965,STATIC sdm_return_t system_reset_crypto(void),244
8966,static sdm_return_t system_reset_cnoc(void),493
8967,sdm_return_t system_reset_dma_drain(void),577
8968,Copyright (2019) Intel Corporation,3
8969,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8970,static bool timer_handle_valid(timer_handle_t handle),67
8971,static timer_handle_t timer_alloc(timer_type_t timer_type),86
8972,static sdm_return_t timer_free(timer_handle_t timer),119
8973,"static inline void timer_config_set(timer_handle_t timer, uint32_t config)",161
8974,"static inline void timer_period_set(timer_handle_t timer, uint32_t period)",178
8975,bool timer_running(timer_handle_t timer),195
8976,timer_handle_t timer_open(timer_type_t timer_type),211
8977,sdm_int_id_t timer_int_id_get(timer_handle_t timer),225
8978,"sdm_return_t timer_start(timer_handle_t timer, uint32_t config, uint32_t period)",248
8979,sdm_return_t timer_close(timer_handle_t timer),262
8980,uint32_t timer_value_get(timer_handle_t timer),283
8981,sdm_return_t timer_stop(timer_handle_t timer),299
8982,"sdm_return_t timer_stop_period_set(timer_handle_t timer, uint32_t period)",313
8983,uint32_t timer_status_get(timer_handle_t timer),339
8984,uint32_t timer_ctrl_get(timer_handle_t timer),350
8985,"sdm_return_t timer_status_clr(timer_handle_t timer, __attribute__ ((unused))uint32_t value)",360
8986,static void timer_isr(void* base),375
8987,Copyright (2019) Intel Corporation,3
8988,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8989,static void timestamp_start(uintptr_t base),38
8990,static uint32_t timestamp_lower_get(uintptr_t base),45
8991,static uint32_t timestamp_upper_get(uintptr_t base),52
8992,timestamp_handle_t timestamp_open(void),59
8993,uint64_t timestamp_get(void),71
8994,void disable_watchdog(),9
8995,Copyright (2017) Intel Corporation,3
8996,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
8997,/*! This is the unlock access code 0b'101001 (lsb-msb) */,58
8998,STATIC sdm_return_t bbram_read_wait(ALT_KEY_VAULT_BBRAM_raw_t * const ctx),98
8999,STATIC bool bbram_handle_valid(const bbram_handle_t handle),110
9000,STATIC void gen_one_bbram_clock(ALT_KEY_VAULT_BBRAM_raw_t * const ctx),120
9001,STATIC void bbram_unlock_code(ALT_KEY_VAULT_BBRAM_raw_t * const ctx),134
9002,static void __inline__ bbram_clken(),155
9003,static void __inline__ bbram_clkgate(),166
9004,static void __inline__ bbram_source_select(),180
9005,static void __inline__ bbram_init(),192
9006,STATIC void bbram_regs_clean(ALT_KEY_VAULT_BBRAM_raw_t * const ctx),208
9007,static __inline__ ALT_KEY_VAULT_BBRAM_raw_t * const bbram_get_context(bbram_handle_t handle) {,230
9008,bbram_handle_t bbram_open(void),234
9009,sdm_return_t bbram_close(const bbram_handle_t handle),244
9010,"sdm_return_t bbram_write_aes_gp_regs(const bbram_handle_t handle,",261
9011,sdm_return_t bbram_read_gp_register(,268
9012,sdm_return_t bbram_key_clean(const bbram_handle_t handle),312
9013,sdm_return_t bbram_read_testpor_reg(,390
9014,sdm_return_t bbram_write_testpor_reg(,416
9015,"sdm_return_t bbram_read_key(const bbram_handle_t handle,",458
9016,clkmgr_handle_t clkmgr_open(),193
9017,void clkmgr_close(clkmgr_handle_t handle),206
9018,bool clkmgr_handle_valid(clkmgr_handle_t handle),216
9019,"sdm_return_t clkmgr_register_pre_callback(clkmgr_handle_t handle, clkmgr_pre_callback fn, clkmgr_cb_type_t type)",227
9020,static sdm_return_t call_clkmgr_pre_callbacks(clkmgr_context_t* const clkmgr_context_ptr),246
9021,"sdm_return_t clkmgr_register_post_callback(clkmgr_handle_t handle, clkmgr_post_callback fn, clkmgr_cb_type_t type)",264
9022,static sdm_return_t call_clkmgr_post_callbacks(clkmgr_context_t* const clkmgr_context_ptr),283
9023,"sdm_return_t clkmgr_set_mode(clkmgr_handle_t handle, clkmgr_mode_t mode)",335
9024,clkmgr_mode_t clkmgr_get_mode(),348
9025,"sdm_return_t clkmgr_clock_speed_stage(clkmgr_handle_t handle, clkmgr_oscclk_speed_t speed, clkmgr_asclk_speed_t asclk)",364
9026,sdm_return_t clkmgr_clock_update(clkmgr_handle_t handle),540
9027,"STATIC sdm_return_t clkmgr_pll_update(clkmgr_context_t* const clkmgr_context_ptr, clkmgr_pll_t pll_ident)",641
9028,"static sdm_return_t calculate_clock_divisor_integer(uint32_t* divisor, uint32_t input_frequency, uint32_t output_frequency)",710
9029,sdm_return_t clkmgr_setup_divider(clkmgr_handle_t handle),731
9030,"sdm_return_t clkmgr_get_current_pll_settings(clkmgr_handle_t handle, clkmgr_pll_settings_t* current_settings_ptr)",827
9031,"sdm_return_t clkmgr_get_staged_pll_settings(clkmgr_handle_t handle, clkmgr_pll_settings_t* staged_settings_ptr)",863
9032,static sdm_return_t clkmgr_validate_staged_clock(clkmgr_context_t* const clkmgr_context_ptr),899
9033,"static void clkmgr_stash_initial_clock_settings(clkmgr_context_t* const clkmgr_context_ptr, clkmgr_pll_settings_t default_clock)",1022
9034,sdm_return_t clkmgr_set_clk_slices_to_default(clkmgr_handle_t handle),1040
9035,"sdm_return_t clkmgr_set_safe_ref_clk_div(clkmgr_handle_t handle, clkmgr_intosc_div_t value)",1082
9036,sdm_return_t clkmgr_clk_bypass_all(clkmgr_handle_t handle),1111
9037,"static void clkmgr_clk_bypassr_clear(clkmgr_context_t* const clkmgr_context_ptr, uint32_t bypassr_val)",1134
9038,sdm_return_t clkmgr_clk_unbypass_all(clkmgr_handle_t handle),1140
9039,sdm_return_t clkmgr_clk_unbypass_except_ctrl(clkmgr_handle_t handle),1162
9040,static uint32_t __inline pll1_calc_divr(uint32_t refclk_mhz),1186
9041,"STATIC uint32_t pll1_calc_divf(uint32_t refclk_mhz, uint32_t vco_mhz)",1191
9042,static uint32_t pll1_calc_divq(),1214
9043,STATIC uint32_t pll1_calc_post_div_refclk(uint32_t refclk_mhz),1219
9044,static uint32_t pll_get_range(uint32_t clk_post_div_mhz),1242
9045,STATIC uint32_t pll1_get_range(uint32_t refclk_mhz),1283
9046,static uint32_t pll2_calc_divr(uint32_t entry),1288
9047,STATIC uint32_t pll2_calc_divf(uint32_t entry),1304
9048,static uint32_t pll2_calc_divq(),1332
9049,STATIC uint32_t pll2_get_range(uint32_t entry),1337
9050,STATIC sdm_return_t clkmgr_stage_vcocalib_params(clkmgr_context_t* const clkmgr_context_ptr),1354
9051,sdm_return_t clkmgr_set_cnoc_half_speed(clkmgr_handle_t handle),1405
9052,sdm_return_t clkmgr_set_cnoc_full_speed(clkmgr_handle_t handle),1424
9053,sdm_return_t clkmgr_enable_exact_user_clk(clkmgr_handle_t handle),1444
9054,sdm_return_t clkmgr_disable_exact_user_clk(clkmgr_handle_t handle),1473
9055,static sdm_return_t clkmgr_reset_clock_settings(clkmgr_context_t* const clkmgr_context_ptr),1490
9056,static sdm_return_t clkmgr_stage_clock_max_usrclk_speed(clkmgr_context_t* const clkmgr_context_ptr),1536
9057,"static sdm_return_t clkmgr_update_data_plane_speed_stage(clkmgr_context_t* const clkmgr_context_ptr, clkmgr_data_plane_speed_t data_plane_speed)",1583
9058,"static sdm_return_t clkmgr_wait_for_pll_lock(clkmgr_context_t* const clkmgr_context_ptr, clkmgr_pll_t pll_ident)",1619
9059,sdm_return_t clkmgr_pll_is_locked(clkmgr_handle_t handle),1686
9060,"sdm_return_t clkmgr_setup_gpio_debounce_logic(clkmgr_handle_t handle, uint32_t counter)",1709
9061,"sdm_return_t clkmgr_qspi_clock_gate_control(clkmgr_handle_t handle, bool control)",1727
9062,sdm_return_t clkmgr_set_qspi_clock_intosc_mode(clkmgr_handle_t handle),1749
9063,"/*sdm_return_t clkmgr_pll0_pll1_div(clkmgr_handle_t handle, uint32_t pll0_div, uint32_t pll1_div)",1766
9064,sdm_return_t clkmgr_clk_internal(clkmgr_handle_t handle),1786
9065,"static void clkmgr_data_clk_scr_select(clkmgr_context_t* const clkmgr_context_ptr, uint32_t sel)",1799
9066,"static void clkmgr_data_clk_set_cnt(clkmgr_context_t* const clkmgr_context_ptr, uint32_t cnt)",1805
9067,"sdm_return_t clkmgr_data_clk_mux_freq_change_cnt(clkmgr_handle_t handle, uint32_t sel, uint32_t cnt, uint32_t bypass)",1811
9068,static uint32_t refclk_div_get(uint32_t refclk_mhz),1829
9069,uint32_t clkmgr_get_clk_en(void),1851
9070,uint32_t clkmgr_get_clk_en_data(clkmgr_handle_t handle),1858
9071,sdm_return_t clkmgr_set_clk_en_data(clkmgr_handle_t handle),1867
9072,sdm_return_t clkmgr_clear_clk_en_data(clkmgr_handle_t handle),1882
9073,"sdm_return_t get_frequency_of_intosc(clkmgr_handle_t handle, uint32_t *retval)",1896
9074,sdm_return_t clkmgr_set_sense_clk_divider(clkmgr_handle_t handle),1971
9075,bool clkmgr_switch_sdm_sdata_crypto_clk(bool enable),1999
9076,Copyright (2019) Intel Corporation,3
9077,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9078,"sdm_return_t cnoc_scramble_enable(const cnoc_handle_t handle,",68
9079,sdm_return_t cnoc_scramble_disable(const cnoc_handle_t handle),90
9080,bool cnoc_scramble_is_enabled(const cnoc_handle_t handle),111
9081,"static sdm_return_t sdm_cnt_addr_assign(const cnoc_handle_t handle, const cnoc_node_t cnoc_node)",138
9082,sdm_return_t sdm_cnt_addr_floorplan_assign(const cnoc_handle_t handle),210
9083,"static sdm_return_t sdm_cnt_addr_fabric_jtag_enable(const cnoc_handle_t handle, const cnoc_node_t cnoc_node)",287
9084,sdm_return_t sdm_cnt_fabric_jtag_enable(const cnoc_handle_t handle),329
9085,"void cnoc_rx_select_dest(const cnoc_handle_t handle, const cnoc_rx_input_sel_t dest)",359
9086,uint32_t cnoc_ret_int_asserted(void),381
9087,uint32_t cnoc_ret_user_int_asserted(void),398
9088,"void cnoc_master_select(const cnoc_handle_t handle, const cnoc_master_select_t master)",412
9089,void cnoc_ctrl_avstif_disable(const cnoc_handle_t handle),477
9090,"sdm_return_t cnoc_esram_tnm_reset(const cnoc_handle_t handle, const bool assert)",488
9091,"sdm_return_t cnoc_ipc_jtagid(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t jtagid)",495
9092,"sdm_return_t sdm_cnt_set_node_security_tx1packet(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",515
9093,"static sdm_return_t cnoc_ret_int_wait_for_clear(const cnoc_handle_t handle, const uint32_t timeout_cycles)",552
9094,"sdm_return_t alt_sdm_cnoc_ipc_eram_fuse(const cnoc_handle_t handle,",580
9095,sdm_return_t cnoc_return_reset_fifo(const cnoc_handle_t handle),636
9096,sdm_return_t cnoc_return_select_rdmsg(const cnoc_handle_t handle),649
9097,sdm_return_t cnoc_return_select_crypto_trim_header(const cnoc_handle_t handle),664
9098,uint32_t cnoc_avst_fifo_threshold_get(const cnoc_handle_t handle),676
9099,"sdm_return_t cnoc_avst_fifo_threshold_set(const cnoc_handle_t handle, const uint32_t threshold)",686
9100,static bool sdm_cnt_get_node_security(const cnoc_addr_t cnoc_addr),702
9101,"static sdm_return_t sdm_cnt_set_node_security(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const bool is_secure)",721
9102,"@param viaROM_index: is the start Index for viaROM. (Valid only for viaROM data, rest its 0)",778
9103,"@param viaROM_address: is the starting address of viaROM. (Valid only for viaROM data, rest its 0)",779
9104,"@param viaROM_size: gives the size of data to be read from viaROM in bytes. (Valid only for viaROM data, rest its 0)",780
9105,"int32_t sdm_cnoc_ipc_verify_hash(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr,",783
9106,Copyright (2017) Intel Corporation,3
9107,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9108,__inline__ static sdm_return_t decomp_validate_handle(decomp_handle_t decomp_handle),64
9109,This function must be called after hal_decomp_init() since a toggle is,84
9110,static void decomp_restart_hw(ALT_DC_raw_t * decomp_base),90
9111,static void decomp_system_default(ALT_DC_raw_t * decomp_base),116
9112,static void decomp_system_init(ALT_DC_raw_t * decomp_base),157
9113,static decomp_handle_t decomp_alloc(decomp_id_t decomp_id),184
9114,static sdm_return_t decomp_free(uintptr_t decomp_base),214
9115,decomp_handle_t decomp_open(decomp_id_t decomp_id),239
9116,sdm_return_t decomp_close(decomp_handle_t decomp_handle),257
9117,sdm_return_t decomp_system_bypass(decomp_handle_t decomp_handle),277
9118,sdm_return_t decomp_disable(decomp_handle_t decomp_handle),307
9119,sdm_return_t decomp_enable(decomp_handle_t decomp_handle),343
9120,"sdm_return_t decomp_int_enable(decomp_handle_t decomp_handle, uint32_t mask)",380
9121,"sdm_return_t decomp_int_disable(decomp_handle_t decomp_handle, uint32_t mask)",418
9122,"sdm_return_t decomp_int_clear(decomp_handle_t decomp_handle, uint32_t mask)",456
9123,"sdm_return_t decomp_int_status_get(decomp_handle_t decomp_handle, uint32_t *int_status)",484
9124,"sdm_return_t decomp_status_get(decomp_handle_t decomp_handle, uint32_t *status)",510
9125,bool decomp_check_status_for_error(decomp_handle_t decomp_handle),535
9126,"sdm_return_t decomp_memory_mode_set(decomp_handle_t decomp_handle, decomp_memory_mode_t mode)",583
9127,"sdm_return_t decomp_mode_set(decomp_handle_t decomp_handle, uint32_t mode)",612
9128,"sdm_return_t decomp_method(decomp_handle_t decomp_handle, uint32_t method)",639
9129,This function must be called after alt_sdm_decomp_init() since a toggle is,659
9130,sdm_return_t decomp_restart(decomp_handle_t decomp_handle),665
9131,sdm_return_t decomp_flush(decomp_handle_t decomp_handle),693
9132,sdm_return_t decomp_set_s4(decomp_handle_t decomp_handle),728
9133,sdm_return_t decomp_set_nsp_mode_normal(decomp_handle_t decomp_handle),755
9134,"sdm_return_t decomp_setup_ip_addr(decomp_handle_t decomp_handle,",780
9135,"sdm_return_t decomp_setup_rowpred(decomp_handle_t decomp_handle,",813
9136,"sdm_return_t decomp_setup_2d_threads(decomp_handle_t decomp_handle,",844
9137,"sdm_return_t decomp_setup_2d_info_rows(decomp_handle_t decomp_handle, uint32_t number_of_rows)",875
9138,"sdm_return_t decomp_setup_2d_framesize(decomp_handle_t decomp_handle,",899
9139,"sdm_return_t decomp_setup_2d_params(decomp_handle_t decomp_handle,",959
9140,"sdm_return_t decomp_setup_2d_offsets(decomp_handle_t decomp_handle,",1008
9141,"sdm_return_t decomp_setup_2d_eram(decomp_handle_t decomp_handle,",1074
9142,"sdm_return_t decomp_setup_2d_pr(decomp_handle_t decomp_handle,",1139
9143,"sdm_return_t decomp_setup_2d_dft_s3_framesize(decomp_handle_t decomp_handle, uint32_t framesize)",1197
9144,Copyright (2019) Intel Corporation,3
9145,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9146,/*! DDR4 Operating modes (3'bxxx) */,120
9147,STATIC sdram_type_t hps_get_sdram_type(void),166
9148,void hps_fsbl_set_reset_reason(uint8_t reset_reason),179
9149,void hps_fsbl_set_ddr_hash_result(bool hash_match),191
9150,"void hps_fsbl_set_boot_scratch(bool is_ddr_retain, bool is_hw_soln, bool is_sdram_dbe, bool is_sdram_init_fail)",215
9151,void hps_cold_reset_tune(bool is_ddr_retain),240
9152,STATIC void hps_disable_f2s_bridge(void),259
9153,STATIC void hps_mpfe_noc_idle_req(void),311
9154,STATIC void hps_mpfe_noc_idle_req_disable(void),335
9155,STATIC void hps_sdram_poll_data_q_empty(sdram_type_t ddr),347
9156,STATIC void hps_sdram_poll_cmd_pipeline_empty(void),399
9157,void hps_fence_drain_sdram(void),421
9158,sdm_return_t hps_poll_cpa_lock(uint32_t ddr_width),433
9159,void hps_iocsr_clock_gate(uint32_t ddr_width),439
9160,void hps_ccu_init(void),445
9161,sdm_return_t hps_poll_pll_lock(uint32_t ddr_width),518
9162,sdm_return_t hps_ddr_cal_request(void),524
9163,sdm_return_t  hps_ddr_cal_clear(void),530
9164,sdm_return_t  hps_reset_hmc_request(void),536
9165,sdm_return_t hps_reset_hmc_clear(void),542
9166,Steps below for DFI Frequency Change operation (Step-B above),563
9167,void hps_sdram_lp3_entry(void),569
9168,is fixed in hardware or not (DM specific),729
9169,@return \e true if the HW fix is available (for future DM devices),730
9170,"TODO: (4/28/21): Once we have hardware with a fix, we should call down ",738
9171,(5/18/21): It is confirmed that the hw fix will be available in upcoming variants of DM (DM3/DM6).,743
9172,bool has_sdm2hps_psi_reset(void),745
9173,This function checks the DBE (Double Bit Error/ECC uncorrected error) status of DDR4/LPDD4 memory,755
9174,bool hps_is_sdram_dbe(void),760
9175,This error (SDRAM init failure) is conveyed by HPS FSBL through bit[30] of boot_scratch_por8 register.,790
9176,bool hps_is_sdram_init_fail(void),792
9177,Copyright (2017) Intel Corporation,3
9178,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9179,"efuse_handle_t efuse_open(br_efuse_t *p_efuse, br_efuse_t *p_efuse_reload_cache)",65
9180,sdm_return_t efuse_close(efuse_handle_t handle),88
9181,"static void alt_sdm_read_efuse_field(uint8_t startbank, uint8_t startrow, uint8_t startoffset, uint8_t fieldsize, uint32_t fieldidx,",106
9182,"static uint32_t bitreverse_data(uint32_t data, uint8_t bitlen)",139
9183,"void cmf_efuse_field_init(cmf_efuse_field_t *p_efuse_field, const uint32_t *p_start)",157
9184,"uint32_t cmf_efuse_get_field(cmf_efuse_field_t *p_efuse_field, uint32_t size)",174
9185,void cmf_efuse_get_chipid(uint32_t p_data[2]),206
9186,void cmf_efuse_get_ult(uint32_t p_data[4]),217
9187,sdm_return_t cmf_efuse_compare_ulthash(const uint32_t *p_data),234
9188,uint32_t cmf_efuse_get_int_osc_trim(void),268
9189,uint32_t cmf_efuse_get_hps_int_osc_trim(void),278
9190,uint32_t cmf_efuse_get_uhdsp_1rw(void),291
9191,uint32_t cmf_efuse_get_hs2p_1r1w(void),303
9192,uint32_t cmf_efuse_get_uhd2p_1r1w(void),320
9193,uint32_t cmf_efuse_get_hps_ram_config_1r1w(void),331
9194,uint32_t cmf_efuse_get_hps_ram_config_1rw(void),342
9195,uint32_t cmf_efuse_get_hps_mpu_config_1r1w(void),353
9196,uint32_t cmf_efuse_get_hps_mpu_config_1rw(void),364
9197,"sdm_return_t cmf_efuse_get_hps_mem_repair(uint32_t *p_data, uint32_t num_rows)",373
9198,"sdm_return_t cmf_efuse_get_lsm_mem_repair(uint32_t *p_data, uint32_t num_rows)",398
9199,"sdm_return_t cmf_efuse_get_crete_dd(uint32_t *p_data, uint32_t num_rows)",410
9200,uint32_t cmf_efuse_get_bg_trim(void),438
9201,uint32_t cmf_efuse_get_jtag_id(void),452
9202,uint32_t cmf_efuse_get_subdev_id(void),473
9203,void cmf_efuse_get_vid(uint32_t *p_data),484
9204,uint32_t cmf_efuse_get_vr_aux_trim(void),498
9205,uint32_t cmf_efuse_get_io_aux_trim(void),508
9206,uint32_t cmf_efuse_get_rma_counter_bit(void),518
9207,uint32_t cmf_efuse_get_crc1en(void),526
9208,uint32_t cmf_efuse_get_vr_leaf_ctrl_bf(uint32_t sector),537
9209,"sdm_return_t cmf_efuse_get_crete_location_info(uint8_t *p_data, uint32_t num_cretes)",547
9210,"sdm_return_t cmf_efuse_get_uib_location_info(uint8_t *p_data, uint32_t num_uib)",599
9211,@brief This functions gets the aib redundancy info from fuse bank given AIB index (from 0..5),626
9212,@param aib_pos is a the position of AIB as an index from (0...5),627
9213,"sdm_return_t cmf_efuse_get_aib_redundancy(uint8_t aib_pos, uint32_t *p_data)",631
9214,"void alt_sdm_read_eram_repair_efuse(int fieldidx, uint32_t *eram_fusefield)",683
9215,"void alt_sdm_read_esram_repair_efuse(int fieldidx, uint32_t *esram_fusefield)",694
9216,void alt_sdm_read_esram_config_efuse(uint32_t *esram_fusefield),703
9217,void alt_sdm_read_dts_overtemp_efuse(uint32_t *dts_overtemp) {,712
9218,"void alt_sdm_read_dts_trim_efuse(uint32_t index, uint32_t *dts_trim, uint32_t *remote_dts_trim)",722
9219,"sdm_return_t cmf_efuse_get_vadc_trim(uint32_t * vadc_rvsvcmtrim, uint32_t * vadc_rvsreftrim, uint32_t * vadc_rvsibiasstg1, uint32_t * vadc_rvsibiasstg23,uint32_t * vadc_rvsibiasvrefbuf,uint32_t * vadc_rvscompdlyctrl)",731
9220,sdm_return_t cmf_efuse_get_vadc_adjust(vadc_adjust_fuse_t * const vadc_adjust_fuse),742
9221,"sdm_return_t cmf_efuse_get_bad_sector_rows(efuse_bad_row_s *p_rows, uint32_t total_rows)",758
9222,bool is_production_fuse_blown(void),770
9223,bool is_untested_fuse_blown(void),797
9224,bool is_no_sgx_fuse_blown(void),824
9225,bool is_nl_part_fuse_blown(void),846
9226,bool is_hps_disable_fuse_blown(void),867
9227,bool is_engineering_fuse_blown(void),887
9228,bool is_user_root_pubkey_blown(void),909
9229,bool is_jtag_disable_fuse_blown(void),934
9230,bool is_key_prog_start_fuse_blown(void),956
9231,bool is_key_prog_end_fuse_blown(void),977
9232,bool is_service_root_key_prog_start_fuse_blown(void),999
9233,bool is_service_root_key_prog_end_fuse_blown(void),1020
9234,uint32_t cmf_efuse_get_security_version(void),1042
9235,bool is_hps_jtag_disable_fuse_blown(void),1058
9236,sdm_return_t cmf_efuse_get_force_pki_slct(cmf_efuse_force_pki_slct_t *p_data),1084
9237,bool is_force_pki_slct_blown(void),1136
9238,bool is_joint_cmf_pka_blown(void),1163
9239,bool is_puf_license_reg_fuse_blown(void),1187
9240,bool is_user_iid_puf_enroll_disable_fuse_blown(void),1218
9241,"uint32_t cmf_efuse_get_user_public_key(uint32_t *p_data, uint32_t n)",1240
9242,"uint32_t cmf_efuse_get_user_public_key_cancel(uint32_t *p_data, uint32_t n)",1275
9243,uint32_t cmf_efuse_get_user_public_key_disable(void),1308
9244,"uint32_t cmf_efuse_get_counter(uint32_t *p_data, cmf_efuse_counter_type_t type)",1317
9245,"sdm_return_t cmf_efuse_get_public_key(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct, uint32_t msw_only)",1370
9246,"uint32_t cmf_efuse_get_key_cancellation(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct)",1430
9247,"sdm_return_t cmf_efuse_get_owned_constant_fuses(uint32_t *p_data, uint32_t num_rows, iid_puf_type_t iid_puf_type)",1470
9248,uint32_t cmf_efuse_get_oldest_working_psg_key_id(void),1523
9249,uint32_t cmf_efuse_get_most_significant_cancelled_key_id(uint32_t *p_data),1587
9250,"void cmf_efuse_generate_key_cancel_bitmask(uint32_t *p_data, uint32_t key_id)",1651
9251,bool is_intel_signing_key_cancelled(uint32_t keyid),1665
9252,bool is_intel_puf_enroll_fuse_blown(void),1701
9253,uint32_t cmf_efuse_get_key_disable_value(cmf_efuse_aes_root_key_disable_slct_t key),1730
9254,"sdm_return_t cmf_efuse_get_silicon_unique_data_hash(const crypto_context_t * const ctx,",1780
9255,sdm_return_t altera_sdm_efuse_aes_key_prog_start_write(uint32_t is_virtual_write),1905
9256,sdm_return_t altera_sdm_efuse_aes_key_prog_end_write(uint32_t is_virtual_write),1929
9257,"sdm_return_t altera_sdm_efuse_aes_security_version_write(uint32_t key_id, uint32_t is_virtual_write)",1953
9258,"sdm_return_t altera_sdm_efuse_puf_key_write(uint32_t *p_data, uint32_t data_len, uint32_t idx)",1978
9259,sdm_return_t cmf_efuse_get_cbssm_redundancy(uint32_t *p_data),2010
9260,uint32_t cmf_efuse_get_env_mon_voltage_k3_fuse(void),2033
9261,uint32_t cmf_efuse_get_env_mon_voltage_n0_fuse(void),2042
9262,uint32_t cmf_efuse_get_env_mon_a_calib_fuse(void),2051
9263,uint32_t cmf_efuse_get_env_mon_b_calib_fuse(void),2060
9264,uint32_t cmf_efuse_get_hps_ddr_config_1r1w(void),2071
9265,uint32_t cmf_efuse_get_hps_ddr_config_1rw(void),2081
9266,sdm_return_t altera_sdm_efuse_eng_fuse_write(uint32_t is_virtual_write),2092
9267,"sdm_return_t cmf_efuse_get_fuses_to_generate_puf_attestation_cert(uint32_t* p_data, uint32_t num_rows)",2112
9268,sdm_return_t cmf_efuse_get_sigma_public_values(uint32_t* p_data),2139
9269,"sdm_return_t cmf_efuse_get_bootrom_patch_values(uint32_t* p_data, uint32_t size)",2169
9270,bool is_secondary_owner_pubkey_hash_fuse_blown(void),2191
9271,Copyright (2020) Intel Corporation,3
9272,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9273,uint32_t get_bist_flag_quad_redundant_status(void) {return efuse_bist_result.efuse_policy_quad_redundant_fuse_check_status;},131
9274,uint32_t get_bist_flag_oct_redundant_status(void) {return efuse_bist_result.efuse_policy_oct_redundant_fuse_check_status;},132
9275,uint32_t get_bist_flag_user_crc_status(void) {return efuse_bist_result.efuse_policy_user_crc_valid_status;},133
9276,uint32_t get_bist_flag_crc0_crc1_status(void) {return efuse_bist_result.efuse_policy_crc0_crc1_valid_status;},134
9277,uint32_t get_bist_flag_ROM_csum_status(void) {return efuse_bist_result.efuse_policy_ROM_eFuse_csum_valid_status;},135
9278,"sdm_return_t efuse_policy_row_readable(uint32_t bank, uint32_t row)",186
9279,"sdm_return_t efuse_policy_row_writable(uint32_t bank, uint32_t row)",218
9280,@param total_num_rows is the number of rows of efuse to write (length of valid data),246
9281,"sdm_return_t efuse_policy_writable_range_check(uint32_t start_row, uint32_t total_num_rows, uint32_t bank)",250
9282,"bool efuse_policy_is_write_production(uint32_t start_row, uint32_t *data, uint32_t total_num_rows) ",271
9283,@param total_num_rows is the number of rows of efuse to write (length of valid data),301
9284,"sdm_return_t efuse_policy_production_fuses_protected_region_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",305
9285,@param total_num_rows is the number of rows of efuse to write (length of valid data),339
9286,"sdm_return_t efuse_policy_crc0en_fuses_protected_region_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",343
9287,@param fuses efuse cache pointer to bank being written (to check existing fuse settings),516
9288,"sdm_return_t efuse_policy_user_security_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t is_virtual_write)",520
9289,@param total_num_rows is the number of rows of efuse to write (length of valid data),606
9290,"sdm_return_t efuse_policy_user_crc_en_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",610
9291,@param total_num_rows is the number of rows of efuse to write (length of valid data),635
9292,"sdm_return_t efuse_policy_user_crc_check(uint32_t start_row, const uint32_t * data, uint32_t total_num_rows)",639
9293,@param total_num_rows is the number of rows of efuse to write (length of valid data),672
9294,"sdm_return_t efuse_policy_engdev_fuse_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t is_virtual_write)",677
9295,@param total_num_rows is the number of rows of efuse to write (length of valid data),727
9296,"sdm_return_t efuse_policy_public_key_check(uint32_t bank, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, bool bank_specific)",731
9297,@param total_num_rows is the number of rows of efuse to write (length of valid data),820
9298,"sdm_return_t efuse_policy_aes_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",825
9299,@ param total_num_rows is the number of rows of efuse to write (length of valid data),864
9300,"sdm_return_t efuse_policy_crc1en_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t bank)",869
9301,@ param total_num_rows is the number of rows of efuse to write (length of valid data),931
9302,"sdm_return_t efuse_policy_gap_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t gapRow, uint32_t gapMask)",936
9303,@param total_num_rows is the number of rows in the data to check (length of valid data),964
9304,"sdm_return_t efuse_policy_quad_redundant_fuse_check(uint32_t bank, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",967
9305,@param total_num_rows is the number of rows of efuse to write (length of valid data),1028
9306,"sdm_return_t efuse_policy_oct_redundant_fuse_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",1031
9307,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1108
9308,"sdm_return_t efuse_policy_write(const uint32_t fuses[], uint32_t bank, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",1112
9309,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1241
9310,"sdm_return_t efuse_policy_bank0_write(const uint32_t fuses[], uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",1245
9311,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1301
9312,"sdm_return_t efuse_policy_bank5_write(const uint32_t fuses[], uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",1305
9313,sdm_return_t efuse_policy_crc0_crc1_valid(const br_efuse_t *fuses),1358
9314,sdm_return_t efuse_policy_user_crc_valid(const br_efuse_t *fuses),1408
9315,sdm_return_t efuse_policy_ROM_eFuse_csum_valid(const br_efuse_t *fuses),1436
9316,sdm_return_t efuse_policy_user_pubkey_write(const br_efuse_t *fuses),1467
9317,Local defines for the altera_sdm_efuse_eng_cert_zero_check_policy() function.,1492
9318,sdm_return_t cmf_efuse_policy_eng_zero_check(void),1512
9319,"sdm_return_t efuse_policy_key_cancellation_fuse_check(bool is_efuse_write, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",1539
9320,static sdm_return_t key_cancellation_bitmask_valid(const uint32_t * p_data),1675
9321,sdm_return_t efuse_policy_user_cancellation_fuse_table_valid(void),1722
9322,void efuse_policy_user_cancellation_fuse_table_init(const uint32_t permitted_usr_cancellation_fuses[]),1737
9323,"sdm_return_t efuse_policy_parameter_range_check(uint32_t bank, uint32_t start_row, uint32_t total_num_rows)",1754
9324,sdm_return_t efuse_policy_bist(void),1795
9325,"sdm_return_t efuse_policy_copy_crc1_protected_region_to_array(const br_efuse_t *pFuses, uint32_t * p_data, uint32_t num_rows)",1931
9326,"static uint32_t extract_efuse_field(const uint32_t * input_data, uint32_t input_start_row, uint32_t input_num_rows, uint32_t * field_data, uint32_t field_start_row, uint32_t field_num_rows)",1962
9327,"static bool user_security_fuses_set(const uint32_t fuses[], uint32_t start_row, uint32_t num_rows, uint32_t skip_user_cancel_fuses)",2035
9328,Copyright (2020) Intel Corporation,3
9329,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9330,@brief Primary eFuse write capability for external (mbox-originated) requests. Internal (CMF-originated) ,42
9331,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",50
9332,"sdm_return_t altera_sdm_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t is_virtual_write, uint32_t *p_error_info, uint32_t *p_error_info_length, bool row_repair_enable)",57
9333,"sdm_return_t altera_sdm_user_def_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t is_virtual_write, uint32_t *p_error_info, uint32_t *p_error_info_length, bool row_repair_enable)",96
9334,void altera_sdm_efuse_write_disable(void),118
9335,"void altera_sdm_efuse_status(uint32_t *p_data, uint32_t *p_datasize) ",143
9336,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",246
9337,"sdm_return_t altera_sdm_efuse_user_pubkey_write(uint32_t *p_data, uint32_t user_key_type, uint32_t user_key_count, uint32_t is_virtual_write, uint32_t skip_cancel_keys)",249
9338,@brief  Programs the counter (VAB specific),405
9339,"sdm_return_t altera_sdm_efuse_counter_write(uint32_t *p_data , cmf_efuse_counter_type_t counter_type, uint32_t is_virtual_write)",410
9340,@brief  Programs the user pubkey cancel (VAB specific),463
9341,"sdm_return_t altera_sdm_efuse_user_pubkey_cancel_write(uint32_t *p_data , uint32_t user_root_hash_id, uint32_t cancel_id, uint32_t is_virtual_write)",469
9342,@brief  Programs the user pubkey disable (VAB specific),513
9343,"sdm_return_t altera_sdm_efuse_user_pubkey_disable_write(uint32_t mask, uint32_t is_virtual_write)",518
9344,"sdm_return_t altera_sdm_efuse_intel_pubkey_cancel_write(uint32_t key_id , uint32_t is_virtual_write, uint32_t *resp_buf)",548
9345,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",590
9346,sdm_return_t altera_sdm_efuse_user_crc_write(uint32_t is_virtual_write),593
9347,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",634
9348,static sdm_return_t altera_sdm_efuse_pgm_crc0(uint32_t is_virtual_write),637
9349,"static uint32_t altera_sdm_efuse_cancel_psg_public_key(uint32_t key_id, uint32_t is_virtual_write)",698
9350,"static sdm_return_t altera_sdm_efuse_cancel_rolled_keys(uint32_t oldest_valid_key_id, uint32_t is_virtual_write)",742
9351,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",811
9352,static sdm_return_t altera_sdm_efuse_pgm_user_crc(uint32_t is_virtual_write),814
9353,Copyright (2019) Intel Corporation,3
9354,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9355,"sdm_return_t hps_ram_repair(const uint32_t channel_id,",51
9356,sdm_return_t hps_ram_good_init(const uint32_t efuse_ram_cfg),210
9357,sdm_return_t hps_ram_init(void),245
9358,void hps_config_ram(void),314
9359,Copyright (2020) Intel Corporation,3
9360,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9361,/* Not compiling on nios so we need functions for these.(Unit Tests) */,30
9362,STATIC void mpu_enable(),50
9363,STATIC void mpu_disable(),64
9364,void mpu_init(),81
9365,sdm_return_t mpu_read_proc_tables(mpu_proc_data_t* pmpu_proc_data),173
9366,Copyright (2018) Intel Corporation,3
9367,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9368,void alt_sdm_ram_puf_poweroff_lock(void),47
9369,void iid_puf_power_on(),54
9370,void iid_puf_power_off_and_discharge(),62
9371,void iid_puf_ram_setup(),68
9372,uint32_t iid_puf_read_word(uint32_t const addr),76
9373,void iid_puf_read_ram(uint32_t * const buf),84
9374,"void iid_puf_read_ram_xor(uint32_t * const xor_input,uint32_t size,uint32_t * const output_data)",91
9375,Copyright (2019) Intel Corporation,3
9376,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9377,efuse_bad_row_s* sdm_redundancy_bad_row_get(uint32_t device_row),65
9378,sdm_return_t sdm_redundancy_bad_row_load(void),82
9379,for the current IP row for 2x (2 bad row) case.,89
9380,@param bad_row is the eFuse bad row value (1..43) of the current sector row.,91
9381,@param bad_row_lower is the lower eFuse bad row value (1..22) of the current sector row. Assumed to be equal to bad_row for the lower half of the sector.,92
9382,@param current_row is the current row (1..43) of the sector row.,93
9383,"uint8_t compute_ar_reg_encoding_2x(const uint32_t bad_row,",98
9384,"Compute the row redundancy for 2x (2 bad row) SHFRW, NBAD, NBAD_ROWIP1 and ADJBAD settings for the AR registers of a",187
9385,(i.e. sectors with the same CNOC Y-address value).,189
9386,@param current_row_efuse is the current sector row eFuse bad row value (1..37).,190
9387,"void compute_sector_row_redundacy_2x(const efuse_bad_row_s *current_row_efuse,",200
9388,"sdm_return_t sdm_send_redundancy_sector_row_info(cnoc_handle_t cnoc_handle, uint8_t bus,",267
9389,"sdm_return_t sdm_redundancy_cnoc_y_to_sector_row(uint8_t cnoc_y_addr, uint8_t *sector_row)",326
9390,Copyright (2019) Intel Corporation,3
9391,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9392,(,35
9393,"sdm_return_t sdm_s4_row_config(cnoc_bus_idx_t bus, uint32_t sector,",84
9394,sdm_return_t sdm_s4_bypass(cnoc_bus_idx_t bus),97
9395,"sdm_return_t sdm_s4_sector_init(uint32_t num_sector_rows,",119
9396,"void sdm_s4_write_core_ip(const uint32_t * length, const uint32_t * start)",129
9397,void sdm_s4_write_ip0_even(const uint32_t * masks),138
9398,void sdm_s4_write_ip0_odd(const uint32_t * masks),147
9399,"sdm_return_t sdm_s4_write_iptypes(cnoc_bus_idx_t bus, uint8_t thread, uint32_t const * iptypes )",160
9400,Copyright (2020) Intel Corporation,3
9401,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9402,STATIC dts_sensor_reading_cache_t g_page_zero;        //Special page. Only SDM sensor (channel 0) is used.,60
9403,uint64_t get_sensor_timer(void),91
9404,void set_sense_clk_divider(void),97
9405,STATIC void sdm_env_sdif_busy_wait_ts(void),116
9406,STATIC void sdm_env_sdif_busy_wait_vm(void),137
9407,STATIC sdm_return_t sdm_env_sdif_done_wait_ts(void),159
9408,STATIC sdm_return_t sdm_env_sdif_done_wait_vm(void),190
9409,void sdm_env_vm_isr(void* unused),220
9410,void sdm_env_ts_isr(void* unused),250
9411,bool sdm_env_vm_alarma(void),281
9412,bool sdm_env_vm_alarmb(void),331
9413,bool sdm_env_vm_fault(void),381
9414,bool sdm_env_vm_done(void),406
9415,bool sdm_env_ts_alarma(void),432
9416,bool sdm_env_ts_alarmb(void),461
9417,bool sdm_env_ts_fault(void),490
9418,bool sdm_env_ts_done(void),519
9419,void sdm_env_isr(void* unused),550
9420,"uint32_t sensor_main_read_temperature_cache(uint32_t page, uint32_t channel, bool only_integer)",649
9421,void sdm_env_calib_conv_vm(),665
9422,"uint32_t sensor_voltage_convert(uint32_t channel, uint32_t code_0, uint32_t n)",687
9423,"uint32_t sensor_vadc_read(uint32_t chan_bitmask, uint32_t * chan_voltages, uint32_t raw)",710
9424,int32_t sdm_env_calc_temp(uint32_t nbs),802
9425,uint32_t sensor_env_mon_temp_get(void),821
9426,int32_t sensor_thermal_read(void),831
9427,int32_t sensor_thermal_integer_read(void),873
9428,void sdm_env_int_clear(uint32_t mask),883
9429,void sdm_env_config_irq_msk_ts(uint32_t mask_en),899
9430,void sdm_env_config_irq_msk_vm(uint32_t mask_en),918
9431,void sdm_env_int_enable(uint32_t mask),936
9432,void sdm_env_int_disable(uint32_t mask),947
9433,void sdm_environ_mon_init(uint32_t chan_mask),958
9434,sdm_return_t sdm_env_pvt_alive(void),976
9435,void sdm_env_config_irq_ts(void),1010
9436,void sdm_env_config_irq_vm(uint32_t chan_msk),1028
9437,void sdm_env_config_irq(uint32_t vm_chan_msk),1048
9438,void sdm_env_config_thresh_ts(void),1062
9439,void sdm_env_config_thresh_vm(void),1080
9440,void __inline sdm_env_config_thresh(void),1218
9441,void __inline sdm_env_hilo_reset_ts(void),1233
9442,void sdm_env_hilo_reset_vm(uint32_t chan_msk),1245
9443,void sdm_env_config_pvt(uint32_t chan_msk),1346
9444,uint32_t __inline sdm_env_get_hilo_ts_min(void),1359
9445,uint32_t __inline sdm_env_get_hilo_ts_max(void),1370
9446,uint32_t sdm_env_get_hilo_vm_min(uint32_t chan_num),1381
9447,uint32_t sdm_env_get_hilo_vm_max(uint32_t chan_num),1447
9448,void sdm_env_shut_down_ts(void),1512
9449,void sdm_env_shut_down_vm(void),1539
9450,void __inline sdm_env_shut_down_pvt(void),1566
9451,void __inline sdm_env_config_clk_synth(void),1577
9452,void __inline sdm_env_config_clk_synth_ts_enable(void),1593
9453,void __inline sdm_env_config_clk_synth_ts_disable(void),1611
9454,void __inline sdm_env_config_clk_synth_vm_enable(void),1622
9455,void __inline sdm_env_config_clk_synth_vm_disable(void),1640
9456,sdm_return_t sdm_env_config_sda_ts(uint32_t run_cont),1653
9457,"sdm_return_t sdm_env_config_sda_vm(uint32_t chmask, uint32_t run_cont)",1733
9458,sdm_return_t sdm_env_config_sda(uint32_t vm_chan_msk),1835
9459,void sdm_env_calib_check_vm(),1859
9460,void sensor_init(void),1895
9461,void cmf_sdm_update_temperature_cache(),1961
9462,"uint32_t sensor_read_temperature_cache(uint32_t page, uint32_t channel)",1990
9463,"void sdm_mbox_test_force_temp_hdlr(ALT_SDM_MBOX_CLIENT_t client, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",2021
9464,Copyright (2019) Intel Corporation,3
9465,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9466,void system_control_fpga_core_rst_assert(),32
9467,void system_control_fpga_core_rst_deassert(),37
9468,void system_control_dm_release_assert(uint32_t pin),42
9469,void system_control_dm_release_reset(uint32_t pin),60
9470,Copyright (C) 2021 Intel Corporation. All rights reserved.,3
9471,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9472,"const uint32_t * ramboot_sha_reg[16] = {(uint32_t *)ALT_SCR_RAM_BOOT_SHA0_ADDR,",34
9473,static void wdt_timeout_set(uint32_t wdt_timeout),57
9474,void wdt_petting_enable(bool enable),76
9475,void pet_wdt(uint32_t wdt_timeout),86
9476,static inline sdm_return_t wdt_update_scr(),107
9477,void wdt_enable(uint32_t wdt_timeout),145
9478,bool is_wdt_reboot(void),173
9479,Copyright (2019) Intel Corporation,3
9480,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9481,"sdm_return_t aes_init(alt_sdm_aes_opmode_t mode, alt_sdm_aes_data_src_t source, alt_sdm_aes_data_dest_t destination)",64
9482,static void __inline alt_sdm_inbuf_fifo_rdsel(uint8_t fifo),95
9483,void alt_sdm_aes_init(void),102
9484,void alt_sdm_aes_disable_enable_hsd1509192195(void),136
9485,- ALT_SDM_AES_OPMODE_ENCODE encode the input to the AES module. (NOT SUPPORTED YET),166
9486,- ALT_SDM_AES_OPMODE_DECODE decode the input to the AES module. (NOT SUPPORTED YET),167
9487,- ALT_SDM_AES_MODE_CBC ?? (NOT SUPPORTED YET),170
9488,- ALT_SDM_AES_MODE_CTR ?? (NOT SUPPORTED YET),171
9489,- ALT_SDM_AES_MODE_EBC ?? (NOT SUPPORTED YET),172
9490,alt_sdm_aes_config(ALT_SDM_AES_OPMODE_BYPASS |,196
9491,"void alt_sdm_aes_config(uint32_t mode, uint32_t size, uint32_t outsize_diff)",203
9492,void alt_sdm_aes_start(void),242
9493,bool alt_sdm_aes_done_status(void),271
9494,if(status == ALT_SDM_AES_INT_TX_DONE),291
9495,uint32_t alt_sdm_aes_int_status(void),299
9496,"void alt_sdm_aes_get_data(uint8_t rdsel_fifo, uint32_t aes_mode, uint32_t size, uint32_t outcount)",310
9497,void alt_sdm_aes_int_clear(uint32_t mask),342
9498,void alt_sdm_aes_int_enable(uint32_t mask),363
9499,void alt_sdm_aes_int_disable(uint32_t mask),384
9500,uint32_t alt_sdm_aes_enable(uint32_t size),389
9501,uint32_t alt_sdm_aes_ready(void),409
9502,void alt_sdm_aes_dest_set(uint32_t dest),435
9503,"void alt_sdm_aes_key_load(alt_sdm_aes_key_dest_sel_t key_dest, alt_sdm_aes_key_size_t key_size, alt_sdm_aes_key_swap_mode_t key_mode)",469
9504,uint32_t alt_sdm_aes_cmdfifo_full(void),502
9505,uint32_t alt_sdm_aes_cmdfifo_empty(void),513
9506,uint32_t alt_sdm_aes_cmdfifo_done(void),524
9507,static void alt_sdm_aes_clear_keys(void),531
9508,"void alt_sdm_aes_setup_bypass(alt_sdm_aes_cib_rd_fifo_t input_fifo, uint32_t xfer_length_words_64bits, alt_sdm_aes_data_dest_t output_destination)",537
9509,bool alt_sdm_aes_is_busy(void),562
9510,"@param interval_length update interval length (0=no update, 1/3/7/15/31/63/127/255 = update key every N*32 bytes)",575
9511,"sdm_return_t alt_sdm_aes_get_update_interval(uint32_t interval_length,",581
9512,sdm_return_t alt_sdm_aes_key_swap_mode_set(alt_sdm_aes_key_swap_mode_config_t* aes_key_swap),643
9513,"sdm_return_t alt_sdm_aes_iv_set(alt_sdm_aes_iv_dest_sel_t aes_iv_dest, alt_sdm_aes_iv_data_t*  iv_data)",668
9514,sdm_return_t alt_sdm_aes_key_info_set(alt_sdm_aes_key_info_t* aes_key_info),718
9515,"void alt_sdm_aes_setup_data_xfer(alt_sdm_aes_key_ctx_sel_t aes_key_ctx_sel,",761
9516,void alt_sdm_aes_key_as_data_last_operation_set(bool val),802
9517,bool alt_sdm_aes_key_as_data_last_operation_get(void),808
9518,void alt_sdm_aes_key_context_select_clear_to_zero(void),815
9519,static sdm_return_t in_buf_memmode_set(),830
9520,static sdm_return_t in_buf_memmode_clr(),843
9521,Copyright (2019) Intel Corporation,3
9522,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9523,static inline bool aes_handle_valid(const aes_handle_t handle),75
9524,"aes_handle_t aes_open(aes_opmode_t mode, aes_data_src_t source, aes_data_dest_t destination)",89
9525,sdm_return_t aes_close(aes_handle_t handle),145
9526,"sdm_return_t aes_config_csr(aes_handle_t handle, uint32_t context_id, aes_opmode_t mode, aes_cipher_mode_t cipher_mode, ",171
9527,"sdm_return_t aes_start(aes_handle_t handle, uint32_t size, uint32_t outsize_diff)",236
9528,if(status == ALT_SDM_AES_INT_TX_DONE),273
9529,uint32_t aes_int_status(),281
9530,"sdm_return_t aes_int_clear(aes_handle_t handle, uint32_t mask)",304
9531,"sdm_return_t aes_int_enable(aes_handle_t handle, uint32_t mask)",334
9532,"sdm_return_t aes_int_disable(aes_handle_t handle, uint32_t mask)",365
9533,uint32_t aes_ready(void),384
9534,"@param [caller-validated] interval_length update interval length (0=no update, 1/3/7/15/31/63/127/255 = update key every N*32 bytes)",408
9535,"sdm_return_t aes_get_update_interval(uint32_t interval_length,",414
9536,"@param [caller-validated] aes_key_swap data structure including update interval length (0=no update, 1/3/7/15/31/63/127/255 = update key every N*32 bytes) and  key swap mode type.",480
9537,"sdm_return_t aes_key_swap_mode_set(aes_handle_t handle, aes_key_swap_mode_config_t* aes_key_swap)",484
9538,"sdm_return_t aes_iv_set(uint32_t context_id, aes_iv_data_t*  iv_data)",526
9539,"sdm_return_t aes_key_info_set(aes_handle_t handle, aes_key_info_t* aes_key_info)",591
9540,sdm_return_t aes_key_context_select_clear_to_zero(aes_handle_t handle),637
9541,Copyright (2017) Intel Corporation,3
9542,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9543,Functions in this module primarily enable transfer of keys from the User Key Vault (UKV) to Crypto hardware,49
9544,source. There is no support for firmware to read keys out of UKV into NSP RAM (hardware limitation).,51
9545,void ukv_init(void),58
9546,"uint32_t ukv_put_key(uint32_t key_src, uint32_t key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits)",77
9547,"uint32_t ukv_put_key_xor_helper(uint32_t key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits, uint32_t key_slot2)",483
9548,"uint32_t ukv_put_key_xor(uint32_t key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits)",639
9549,"uint32_t ukv_get_key(uint32_t key_dest, uint32_t key_slot, uint32_t key_size_bits, uint32_t top_half)",651
9550,uint32_t ukv_clear_key(uint32_t key_slot),843
9551,uint32_t ukv_clear_all_keys(void),855
9552,sdm_return_t ukv_clean_key_reg(void),880
9553,static bool metal_key_disabled_and_locked(void),915
9554,sdm_return_t metal_key_disable_and_lock(void),947
9555,"uint32_t ukv_clear_all_keys_except_key_slots(uint32_t * const key_slots, const uint32_t * const excepted_slots, uint32_t excepted_slots_len)",977
9556,"uint32_t ukv_clear_all_keys_except_key_slots(const uint32_t * const excepted_slots, uint32_t excepted_slots_len)",979
9557,Copyright (2019) Intel Corporation,3
9558,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9559,"int32_t cnoc_ipc_aib_read_crete_temp(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",31
9560,"@param int_type bitwise or indicating which interrupt to read: 0x1 = secure, 0x2 = user (non-secure)",51
9561,"uint32_t cnoc_ret_int_stk_asserted(const cnoc_handle_t handle, const uint8_t int_type)",55
9562,Copyright (2019) Intel Corporation,3
9563,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9564,sdm_return_t comp_config_key_update_workaround(const cmf_aes_resource_t aes_context_id),65
9565,"sdm_return_t comp_config_get_ram_block_key_update(comp_config_handle_t handle, uint32_t *p_data, uint32_t size_in_bytes, ",103
9566,"sdm_return_t comp_config_get_key_challenge_block(comp_config_handle_t handle, uint32_t *p_data, ",221
9567,Copyright (2020) Intel Corporation,3
9568,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9569,"sdm_return_t crypto_empty_prebuf(in_buf_handle_t inbuf_handle, sha_handle_t sha_handle)",31
9570,Copyright (2019) Intel Corporation,3
9571,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9572,void hps_mpfe_reset_release(void),54
9573,void hps_mpfe_early_release(uint32_t ddr_width),60
9574,void hps_warm_reset_tune(void),71
9575,void hps_osc_trim(void),85
9576,void hps_warm_reset_by_sdm(void),99
9577,void hps_prepare_mpu_release(bool has_ddr),111
9578,void hps_cold_release_setup(void),117
9579,void hps_ccu_enable(void),123
9580,Copyright (2019) Intel Corporation,3
9581,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9582,"void psi_scramble_enable(uint32_t seed0, uint32_t seed1, bool onlySeed0)",43
9583,void psi_scramble_disable(void),80
9584,void psi_clr_warm_rst_exit(void),107
9585,void psi_clr_warm_rst_entry(void),126
9586,void  psi_clr_int(void),143
9587,bool psi_is_warm_rst_exit(uint32_t status),168
9588,bool alt_sdm_psi_is_warm_rst_entry(uint32_t status),179
9589,uint32_t alt_sdm_psi_read_intr_sts(void),185
9590,void alt_sdm_psi_unmask_warm_rst_intr(void),204
9591,void alt_sdm_psi_int_disable(void),224
9592,void alt_sdm_psi_int_enable(void),242
9593,Copyright (2020) Intel Corporation,3
9594,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9595,bool is_test_fw(void),70
9596,pkc_handle_t pkc_open(),76
9597,sdm_return_t pkc_close(pkc_handle_t pkc){,95
9598,"static void pkc_fifo_push(uint32_t* addr, const uint32_t* data, uint8_t words_to_push){",118
9599,static void pkc_clear_key(),134
9600,"static void pkc_fifo_pull(uint32_t* data, uint32_t* addr, uint8_t words_to_pull){",167
9601,"sdm_return_t pkc_verify_start(pkc_handle_t pkc, uint32_t* Qx, uint32_t* Qy, uint32_t* hash, uint32_t* R, uint32_t* S, pkc_curve_t curve){",177
9602,"sdm_return_t pkc_sign_config(pkc_handle_t pkc,",219
9603,"sdm_return_t pkc_modular_config(pkc_handle_t pkc,",266
9604,"sdm_return_t pkc_point_multiply_config(pkc_handle_t pkc,",315
9605,sdm_return_t pkc_is_busy(pkc_handle_t pkc){,364
9606,"sdm_return_t pkc_get_result(pkc_handle_t pkc, uint32_t* point_x_or_R, uint32_t* point_y_or_S_or_verify){",373
9607,sdm_return_t pkc_start(pkc_handle_t pkc),391
9608,void pkc_reset(){,407
9609,"sdm_return_t pkc_get_curve_parameters(pkc_curve_t curve, const altr_br40_pkc_domain_parameters_t** params)",455
9610,"- ALT_SDM_PKC_OP_ECDSASIGN ECDSA Sign to generate a new (r,s) signature.",501
9611,- ALT_SDM_PKC_OP_ECMULT EC Point Multiply. (NOT SUPPORTED YET),503
9612,"sdm_return_t alt_sdm_pkc_config(uint32_t operation, uint32_t length)",515
9613,uint32_t alt_sdm_pkc_ready(void),554
9614,uint32_t alt_sdm_pkc_select_curve(pkc_curve_t curve){,583
9615,static uint32_t alt_sdm_pkc_get_curve_length(pkc_curve_t curve){,598
9616,static sdm_return_t alt_sdm_pkc_fm_get_key(void* dest_addr),620
9617,uint32_t alt_sdm_pkc_fm_ecdsa_sign_fetch_256b_key(){,662
9618,uint32_t alt_sdm_pkc_fm_ec_pt_mult_fetch_256b_key(){,667
9619,uint32_t alt_sdm_pkc_fm_modular_fetch_256b_key(){,671
9620,"sdm_return_t alt_sdm_pkc_fm_ec_point_add_put(pkc_curve_t curve, sdm_pkc_add_operand_t* a, sdm_pkc_add_operand_t* b){",684
9621,sdm_return_t alt_sdm_pkc_fm_ec_point_add_get(sdm_pkc_add_result_t* result){,706
9622,"sdm_return_t alt_sdm_pkc_fm_ec_point_double_put(pkc_curve_t curve, sdm_pkc_pt_multiplicand_t* input){",718
9623,sdm_return_t alt_sdm_pkc_fm_ec_point_double_get(sdm_pkc_pt_mult_result_t* result){,728
9624,"sdm_return_t alt_sdm_pkc_fm_ec_mod_operation_put(uint32_t opcode, pkc_curve_t curve, sdm_pkc_mod_operand_t* input){",739
9625,sdm_return_t alt_sdm_pkc_fm_ec_mod_operation_get(sdm_pkc_mod_result_t* result){,748
9626,Copyright (2019) Intel Corporation,3
9627,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9628,const uint32_t HAL_SHA_CONFIG_MASK = (ALT_SHA_CSR_CSR_HASHSRC_CLR_MSK &,45
9629,"static sdm_return_t sha_read_digest(uintptr_t base,",65
9630,static bool sha_handle_valid(sha_handle_t handle),70
9631,sha_handle_t sha_open(void),80
9632,sdm_return_t sha_close(const sha_handle_t handle),98
9633,"sdm_return_t sha_configure(const sha_handle_t handle, sha_csr_size_t sha_size,",113
9634,"sdm_return_t sha_configure_ex(const sha_handle_t handle, sha_csr_size_t sha_size,",124
9635,bool sha_busy(const sha_handle_t handle),174
9636,"sdm_return_t sha_start(const sha_handle_t handle, bool final)",193
9637,sdm_return_t sha_finalize(const sha_handle_t handle),219
9638,sdm_return_t sha_stop(const sha_handle_t handle),232
9639,sdm_return_t sha_disable(const sha_handle_t handle),244
9640,uint32_t sha_interrupt_status(const sha_handle_t handle),260
9641,uint32_t sha_interrupt_status_unmasked(const sha_handle_t handle),272
9642,sdm_return_t sha_reset(const sha_handle_t handle),284
9643,"sdm_return_t sha_read_hash(const sha_handle_t handle, uint32_t *hash, uint32_t size)",344
9644,void sha_interrupt_clr(const sha_handle_t handle),349
9645,void sha_interrupt_clear_disable(const sha_handle_t handle),357
9646,"sdm_return_t sha_irq_handler(sha_handle_t handle, uint32_t *hash, uint32_t size)",382
9647,"static sdm_return_t sha_read_digest(uintptr_t base,",389
9648,static void hal_sha_interrupt_clr(uintptr_t base) ,452
9649,static void sha_state_cleanup(const sha_handle_t sha_handle) ,471
9650,"sdm_return_t sha_state_save_restore(const sha_handle_t handle,",483
9651,Copyright (C) 2021 Intel Corporation. All rights reserved.,3
9652,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9653,void bootstatus_set_cmf(uint8_t cmf_info_value),33
9654,void bootstatus_set_cmf_reset_reason(uint8_t reset_reason_value),47
9655,uint8_t bootstatus_get_cmf(),63
9656,uint8_t bootstatus_get_cmf_reset_reason(),77
9657,clkmgr_handle_t clkmgr_open(),137
9658,void clkmgr_close(clkmgr_handle_t handle),150
9659,bool clkmgr_handle_valid(clkmgr_handle_t handle),160
9660,"sdm_return_t clkmgr_register_pre_callback(clkmgr_handle_t handle, clkmgr_pre_callback fn, clkmgr_cb_type_t type)",171
9661,static sdm_return_t call_clkmgr_pre_callbacks(clkmgr_context_t* const clkmgr_context_ptr),190
9662,"sdm_return_t clkmgr_register_post_callback(clkmgr_handle_t handle, clkmgr_post_callback fn, clkmgr_cb_type_t type)",208
9663,static sdm_return_t call_clkmgr_post_callbacks(clkmgr_context_t* const clkmgr_context_ptr),227
9664,"sdm_return_t clkmgr_set_mode(clkmgr_handle_t handle, clkmgr_mode_t mode)",278
9665,clkmgr_mode_t clkmgr_get_mode(),291
9666,"sdm_return_t clkmgr_clock_speed_stage(clkmgr_handle_t handle, clkmgr_oscclk_speed_t speed, clkmgr_asclk_speed_t asclk)",308
9667,sdm_return_t clkmgr_clock_update(clkmgr_handle_t handle),473
9668,static uint32_t moddiv_calc (clkmgr_context_t* const clkmgr_context_ptr) //600 >= (VCO/moddiv) >= 3 * eff_refclk,561
9669,static sdm_return_t clkmgr_pll_update(clkmgr_context_t* const clkmgr_context_ptr),572
9670,"static sdm_return_t calculate_clock_divisor_integer(uint32_t* divisor, uint32_t input_frequency, uint32_t output_frequency)",641
9671,sdm_return_t clkmgr_setup_divider(clkmgr_handle_t handle),662
9672,"sdm_return_t clkmgr_get_current_pll_settings(clkmgr_handle_t handle, clkmgr_pll_settings_t* current_settings_ptr)",758
9673,"sdm_return_t clkmgr_get_staged_pll_settings(clkmgr_handle_t handle, clkmgr_pll_settings_t* staged_settings_ptr)",788
9674,STATIC sdm_return_t clkmgr_validate_staged_clock(clkmgr_context_t* const clkmgr_context_ptr),818
9675,"static void clkmgr_stash_initial_clock_settings(clkmgr_context_t* const clkmgr_context_ptr, clkmgr_pll_settings_t default_clock)",903
9676,sdm_return_t clkmgr_set_clk_slices_to_default(clkmgr_handle_t handle),916
9677,"sdm_return_t clkmgr_set_safe_ref_clk_div(clkmgr_handle_t handle, clkmgr_intosc_div_t value)",959
9678,sdm_return_t clkmgr_clk_bypass_all(clkmgr_handle_t handle),988
9679,"static void clkmgr_clk_bypassr_clear(clkmgr_context_t* const clkmgr_context_ptr, uint32_t bypassr_val)",1011
9680,sdm_return_t clkmgr_clk_unbypass_all(clkmgr_handle_t handle),1017
9681,sdm_return_t clkmgr_clk_unbypass_except_ctrl(clkmgr_handle_t handle),1040
9682,static sdm_return_t clkmgr_stage_vcocalib_params(clkmgr_context_t* const clkmgr_context_ptr),1063
9683,sdm_return_t clkmgr_set_cnoc_half_speed(clkmgr_handle_t handle),1082
9684,sdm_return_t clkmgr_set_cnoc_full_speed(clkmgr_handle_t handle),1101
9685,sdm_return_t clkmgr_enable_exact_user_clk(clkmgr_handle_t handle),1121
9686,sdm_return_t clkmgr_disable_exact_user_clk(clkmgr_handle_t handle),1150
9687,static sdm_return_t clkmgr_reset_clock_settings(clkmgr_context_t* const clkmgr_context_ptr),1169
9688,static sdm_return_t clkmgr_stage_clock_max_usrclk_speed(clkmgr_context_t* const clkmgr_context_ptr),1213
9689,"static sdm_return_t clkmgr_update_data_plane_speed_stage(clkmgr_context_t* const clkmgr_context_ptr, clkmgr_data_plane_speed_t data_plane_speed)",1257
9690,static sdm_return_t clkmgr_wait_for_pll_lock(clkmgr_context_t* const clkmgr_context_ptr),1293
9691,sdm_return_t clkmgr_pll_is_locked(clkmgr_handle_t handle),1346
9692,"sdm_return_t clkmgr_setup_gpio_debounce_logic(clkmgr_handle_t handle, uint32_t counter)",1367
9693,"sdm_return_t clkmgr_qspi_clock_gate_control(clkmgr_handle_t handle, bool control)",1385
9694,sdm_return_t clkmgr_set_qspi_clock_intosc_mode(clkmgr_handle_t handle),1407
9695,"sdm_return_t clkmgr_pll0_pll1_div(clkmgr_handle_t handle, uint32_t pll0_div, uint32_t pll1_div)",1424
9696,sdm_return_t clkmgr_clk_internal(clkmgr_handle_t handle),1443
9697,uint32_t clkmgr_get_safe_ref_clk_div(clkmgr_context_t* const clkmgr_context_ptr),1456
9698,"static void clkmgr_data_clk_scr_select(clkmgr_context_t* const clkmgr_context_ptr, uint32_t sel)",1462
9699,"static void clkmgr_data_clk_set_cnt(clkmgr_context_t* const clkmgr_context_ptr, uint32_t cnt)",1468
9700,"sdm_return_t clkmgr_data_clk_mux_freq_change_cnt(clkmgr_handle_t handle, uint32_t sel, uint32_t cnt, uint32_t bypass)",1474
9701,static uint32_t refclk_div_get(uint32_t refclk_mhz),1493
9702,uint32_t clkmgr_get_clk_en(void),1515
9703,uint32_t clkmgr_get_clk_en_data(clkmgr_handle_t handle),1522
9704,sdm_return_t clkmgr_set_clk_en_data(clkmgr_handle_t handle),1531
9705,sdm_return_t clkmgr_clear_clk_en_data(clkmgr_handle_t handle),1546
9706,"sdm_return_t get_frequency_of_intosc(clkmgr_handle_t handle, uint32_t *retval)",1560
9707,sdm_return_t clkmgr_set_sense_clk_divider(clkmgr_handle_t handle),1635
9708,bool clkmgr_switch_sdm_sdata_crypto_clk(bool enable),1663
9709,Copyright (2019) Intel Corporation,3
9710,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9711,"sdm_return_t cnoc_scramble_enable(const cnoc_handle_t handle,",75
9712,sdm_return_t cnoc_scramble_disable(const cnoc_handle_t handle),99
9713,bool cnoc_scramble_is_enabled(const cnoc_handle_t handle),120
9714,"static sdm_return_t sdm_cnt_addr_assign(const cnoc_handle_t handle, const cnoc_node_t cnoc_node)",147
9715,sdm_return_t sdm_cnt_addr_floorplan_assign(const cnoc_handle_t handle),219
9716,sdm_return_t sdm_cnt_addr_universal_floorplan_assign(const cnoc_handle_t handle),306
9717,"void cnoc_rx_select_dest(cnoc_handle_t handle, cnoc_rx_input_sel_t dest)",390
9718,uint32_t cnoc_ret_int_asserted(void),412
9719,uint32_t cnoc_ret_user_int_asserted(void),429
9720,"void cnoc_master_select(const cnoc_handle_t handle, const cnoc_master_select_t master)",443
9721,void cnoc_ctrl_avstif_disable(const cnoc_handle_t handle),528
9722,"sdm_return_t cnoc_esram_tnm_reset(const cnoc_handle_t handle, const bool assert)",539
9723,"sdm_return_t cnoc_ipc_jtagid(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t jtagid)",559
9724,"sdm_return_t sdm_cnt_set_node_security_tx1packet(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",579
9725,"static sdm_return_t cnoc_ret_int_wait_for_clear(const cnoc_handle_t handle, const uint32_t timeout_cycles)",616
9726,"sdm_return_t alt_sdm_cnoc_ipc_eram_fuse(const cnoc_handle_t handle,",644
9727,sdm_return_t cnoc_return_reset_fifo(const cnoc_handle_t handle),700
9728,sdm_return_t cnoc_return_select_rdmsg(const cnoc_handle_t handle),712
9729,uint32_t cnoc_avst_fifo_threshold_get(const cnoc_handle_t handle),723
9730,"sdm_return_t cnoc_avst_fifo_threshold_set(const cnoc_handle_t handle, const uint32_t threshold)",733
9731,static bool sdm_cnt_get_node_security(const cnoc_addr_t cnoc_addr),749
9732,"static sdm_return_t sdm_cnt_set_node_security(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const bool is_secure)",768
9733,sdm_return_t cnoc_return_select_crypto_trim_header(const cnoc_handle_t handle),826
9734,"int32_t sdm_cnoc_ipc_verify_hash(const cnoc_handle_t cnoc_handle,",831
9735,sdm_return_t sdm_cnt_fabric_jtag_enable(const cnoc_handle_t handle),838
9736,"sdm_return_t cnoc_tx_send_csm_ica_repair_fuse(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t *efuse)",855
9737,Copyright (2019) Intel Corporation,3
9738,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9739,static bool drng_handle_valid(drng_handle_t handle),90
9740,"sdm_return_t drng_context_create(drng_context_t * const ctx,",99
9741,void drng_context_release(drng_context_t * const ctx),111
9742,drng_handle_t drng_open(void),116
9743,sdm_return_t drng_close(const drng_handle_t handle),130
9744,sdm_return_t drng_reset(const drng_handle_t handle),145
9745,"static sdm_return_t generate_rand_num(uint32_t * final_random_num, uint32_t head, const drng_handle_t handle)",170
9746,"@brief: This function performs BIST, calls generate_rand_num() which will read from getdata iteratively to get 256 bits.",188
9747,"sdm_return_t generate_random_number_using_drng( const drng_context_t * const ctx,uint32_t * final_random_num,uint32_t requested_security_strength)",192
9748,Copyright (2017) Intel Corporation,3
9749,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9750,"efuse_handle_t efuse_open(br_efuse_t *p_efuse, br_efuse_t *p_efuse_reload_cache)",69
9751,sdm_return_t efuse_close(efuse_handle_t handle),121
9752,"static void alt_sdm_read_efuse_field(uint8_t startbank, uint8_t startrow, uint8_t startoffset, uint8_t fieldsize, uint32_t fieldidx,",139
9753,"static uint32_t bitreverse_data(uint32_t data, uint8_t bitlen)",172
9754,"void cmf_efuse_field_init(cmf_efuse_field_t *p_efuse_field, const uint32_t *p_start)",189
9755,"uint32_t cmf_efuse_get_field(cmf_efuse_field_t *p_efuse_field, uint32_t size)",206
9756,void cmf_efuse_get_chipid(uint32_t p_data[2]),238
9757,void cmf_efuse_get_ult(uint32_t p_data[3]),249
9758,sdm_return_t cmf_efuse_compare_ulthash(const uint32_t *p_data),264
9759,uint32_t cmf_efuse_get_int_osc_trim(void),285
9760,uint32_t cmf_efuse_get_hps_int_osc_trim(void),295
9761,uint32_t cmf_efuse_get_uhdsp_1rw(void),308
9762,uint32_t cmf_efuse_get_hs2p_1r1w(void),320
9763,uint32_t cmf_efuse_get_uhd2p_1r1w(void),331
9764,uint32_t cmf_efuse_get_hps_ram_config_1r1w(void),342
9765,uint32_t cmf_efuse_get_hps_ram_config_1rw(void),353
9766,uint32_t cmf_efuse_get_hps_mpu_config_1r1w(void),364
9767,uint32_t cmf_efuse_get_hps_mpu_config_1rw(void),375
9768,"sdm_return_t cmf_efuse_get_hps_mem_repair(uint32_t *p_data, uint32_t num_rows)",384
9769,"sdm_return_t cmf_efuse_get_lsm_mem_repair(uint32_t *p_data, uint32_t num_rows)",409
9770,"sdm_return_t cmf_efuse_get_crete_dd(uint32_t *p_data, uint32_t num_rows)",435
9771,uint32_t cmf_efuse_get_bg_trim(void),457
9772,uint32_t cmf_efuse_get_jtag_id(void),471
9773,void cmf_efuse_get_vid(uint32_t *p_data),516
9774,uint32_t cmf_efuse_get_vr_aux_trim(void),527
9775,uint32_t cmf_efuse_get_io_aux_trim(void),537
9776,uint32_t cmf_efuse_get_rma_counter_bit(void),547
9777,uint32_t cmf_efuse_get_crc1en(void),555
9778,uint32_t cmf_efuse_get_vr_leaf_ctrl_bf(uint32_t sector),566
9779,"sdm_return_t cmf_efuse_get_crete_location_info(uint8_t *p_data, uint32_t num_cretes)",582
9780,"sdm_return_t cmf_efuse_get_uib_location_info(uint8_t *p_data, uint32_t num_uib)",629
9781,@brief This functions gets the aib redundancy info from fuse bank given AIB index (from 0..5),651
9782,@param aib_pos is a the position of AIB as an index from (0...5),652
9783,"sdm_return_t cmf_efuse_get_aib_redundancy(uint8_t aib_pos, uint32_t *p_data)",656
9784,"void alt_sdm_read_eram_repair_efuse(int fieldidx, uint32_t *eram_fusefield)",703
9785,"void alt_sdm_read_esram_repair_efuse(int fieldidx, uint32_t *esram_fusefield)",719
9786,void alt_sdm_read_esram_config_efuse(uint32_t *esram_fusefield),735
9787,void alt_sdm_read_dts_overtemp_efuse(uint32_t *dts_overtemp) {,745
9788,"void alt_sdm_read_dts_trim_efuse(uint32_t index, uint32_t *dts_trim, uint32_t *remote_dts_trim)",755
9789,"sdm_return_t cmf_efuse_get_vadc_trim(uint32_t * vadc_rvsvcmtrim, uint32_t * vadc_rvsreftrim, uint32_t * vadc_rvsibiasstg1, uint32_t * vadc_rvsibiasstg23,uint32_t * vadc_rvsibiasvrefbuf,uint32_t * vadc_rvscompdlyctrl)",770
9790,sdm_return_t cmf_efuse_get_vadc_adjust(vadc_adjust_fuse_t * const vadc_adjust_fuse),801
9791,"sdm_return_t cmf_efuse_get_bad_sector_rows(efuse_bad_row_s *p_rows, uint32_t total_rows)",859
9792,bool is_production_fuse_blown(void),899
9793,bool is_untested_fuse_blown(void),926
9794,bool is_no_sgx_fuse_blown(void),953
9795,bool is_nl_part_fuse_blown(void),975
9796,bool is_hps_disable_fuse_blown(void),996
9797,bool is_engineering_fuse_blown(void),1016
9798,bool is_user_root_pubkey_blown(void),1038
9799,bool is_jtag_disable_fuse_blown(void),1063
9800,bool is_key_prog_start_fuse_blown(void),1085
9801,bool is_key_prog_end_fuse_blown(void),1106
9802,bool is_service_root_key_prog_start_fuse_blown(void),1128
9803,bool is_service_root_key_prog_end_fuse_blown(void),1149
9804,bool is_secondary_owner_pubkey_hash_fuse_blown(void),1171
9805,sdm_return_t altera_sdm_efuse_secondary_owner_pubkey_hash_write(uint32_t is_virtual_write),1193
9806,uint32_t cmf_efuse_get_security_version(void),1222
9807,bool is_hps_jtag_disable_fuse_blown(void),1238
9808,sdm_return_t cmf_efuse_get_force_pki_slct(cmf_efuse_force_pki_slct_t *p_data),1264
9809,bool is_force_pki_slct_blown(void),1316
9810,bool is_joint_cmf_pka_blown(void),1343
9811,bool is_puf_license_reg_fuse_blown(void),1367
9812,bool is_user_iid_puf_enroll_disable_fuse_blown(void),1398
9813,bool is_user_iid_puf_act_disable_fuse_blown(void),1421
9814,"uint32_t cmf_efuse_get_user_public_key(uint32_t *p_data, uint32_t n)",1439
9815,"uint32_t cmf_efuse_get_user_public_key_cancel(uint32_t *p_data, uint32_t n)",1474
9816,uint32_t cmf_efuse_get_user_public_key_disable(void),1508
9817,"uint32_t cmf_efuse_get_counter(uint32_t *p_data, cmf_efuse_counter_type_t type)",1519
9818,"sdm_return_t cmf_efuse_get_public_key(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct, uint32_t msw_only)",1573
9819,"uint32_t cmf_efuse_get_key_cancellation(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct)",1633
9820,"sdm_return_t cmf_efuse_get_owned_constant_fuses(uint32_t *p_data, uint32_t num_rows, iid_puf_type_t iid_puf_type)",1674
9821,uint32_t cmf_efuse_get_oldest_working_psg_key_id(void),1743
9822,uint32_t cmf_efuse_get_most_significant_cancelled_key_id(uint32_t *p_data),1807
9823,"void cmf_efuse_generate_key_cancel_bitmask(uint32_t *p_data, uint32_t key_id)",1871
9824,bool is_intel_signing_key_cancelled(uint32_t keyid),1885
9825,bool is_uds_iid_puf_enroll_disable_fuse_blown(void),1921
9826,bool is_uds_iid_puf_act_disable_fuse_blown(void),1947
9827,uint32_t cmf_efuse_get_key_disable_value(cmf_efuse_aes_root_key_disable_slct_t key),1974
9828,sdm_return_t altera_sdm_efuse_aes_key_prog_start_write(uint32_t is_virtual_write),2028
9829,sdm_return_t altera_sdm_efuse_aes_key_prog_end_write(uint32_t is_virtual_write),2052
9830,sdm_return_t altera_sdm_efuse_aes_root_key_write(uint32_t *p_data),2076
9831,"sdm_return_t altera_sdm_efuse_aes_security_version_write(uint32_t key_id, uint32_t is_virtual_write)",2121
9832,"sdm_return_t cmf_efuse_get_silicon_unique_data_hash(const crypto_context_t * const ctx,",2148
9833,"sdm_return_t altera_sdm_efuse_puf_key_write(uint32_t *p_data, uint32_t data_len, uint32_t idx)",2289
9834,sdm_return_t altera_sdm_efuse_uds_iid_puf_enrol_dis_write(uint32_t is_virtual_write),2321
9835,sdm_return_t altera_sdm_efuse_eng_fuse_write(uint32_t is_virtual_write),2347
9836,"sdm_return_t cmf_efuse_get_fuses_to_generate_puf_attestation_cert(uint32_t* p_data, uint32_t num_rows)",2367
9837,uint32_t cmf_efuse_get_wrapped_service_key(uint32_t *p_data),2385
9838,bool is_nlp_fuse_blown(void),2401
9839,sdm_return_t cmf_efuse_get_sigma_public_values(uint32_t* p_data),2415
9840,bool is_permit_self_kill_fuse_blown(),2440
9841,sdm_return_t altera_sdm_efuse_device_kill_program(uint32_t is_virtual_write),2457
9842,sdm_return_t altera_sdm_efuse_cancel_all_public_key(uint32_t is_virtual_write),2476
9843,"sdm_return_t altera_sdm_read_protected_fuses(uint32_t bank, uint32_t start_row, uint32_t end_row, const uint32_t favor)",2507
9844,"sdm_return_t cmf_efuse_get_bootrom_patch_values(uint32_t* p_data, uint32_t size)",2572
9845,uint32_t cmf_efuse_get_ica_aesdis_cfg(void),2594
9846,uint32_t cmf_efuse_get_ica_sm4dis_cfg(void),2615
9847,"@brief This functions gets the aib redundancy info from fuse bank given CryptoSSM index (0 : NORTH, 1 : SOUTH)",2633
9848,@param csm_pos is a the position of CryptoSSM as an index from (0...1),2634
9849,"sdm_return_t cmf_efuse_get_csm_ica_repair_fuse(uint8_t csm_pos, uint32_t *p_data)",2638
9850,Copyright (2020) Intel Corporation,3
9851,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9852,uint32_t get_bist_flag_quad_redundant_status(void) {return efuse_bist_result.efuse_policy_quad_redundant_fuse_check_status;},67
9853,uint32_t get_bist_flag_oct_redundant_status(void) {return efuse_bist_result.efuse_policy_oct_redundant_fuse_check_status;},68
9854,uint32_t get_bist_flag_user_crc_status(void) {return efuse_bist_result.efuse_policy_user_crc_valid_status;},69
9855,uint32_t get_bist_flag_crc0_crc1_status(void) {return efuse_bist_result.efuse_policy_crc0_crc1_valid_status;},70
9856,uint32_t get_bist_flag_ROM_csum_status(void) {return efuse_bist_result.efuse_policy_ROM_eFuse_csum_valid_status;},71
9857,"sdm_return_t efuse_policy_row_readable(uint32_t bank, uint32_t row)",216
9858,"sdm_return_t efuse_policy_row_writable(uint32_t bank, uint32_t row)",249
9859,@param total_num_rows is the number of rows of efuse to write (length of valid data),274
9860,"sdm_return_t efuse_policy_writable_range_check(uint32_t start_row, uint32_t total_num_rows, uint32_t bank)",278
9861,@ param total_num_rows is the number of rows of efuse to write (length of valid data),295
9862,"sdm_return_t efuse_write_policy_crc0_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t bank)",300
9863,@ param total_num_rows is the number of rows of efuse to write (length of valid data),348
9864,"sdm_return_t efuse_write_policy_crc1_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t bank)",353
9865,@param total_num_rows is the number of rows of efuse to write (length of valid data),408
9866,"sdm_return_t efuse_policy_production_fuses_protected_region_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",412
9867,@param total_num_rows is the number of rows of efuse to write (length of valid data),446
9868,"sdm_return_t efuse_policy_crc0en_fuses_protected_region_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",450
9869,@param fuses efuse cache pointer to bank being written (to check existing fuse settings),623
9870,"sdm_return_t efuse_policy_user_security_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t is_virtual_write)",627
9871,@param total_num_rows is the number of rows of efuse to write (length of valid data),704
9872,"sdm_return_t efuse_policy_user_crc_en_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",708
9873,@param total_num_rows is the number of rows of efuse to write (length of valid data),733
9874,"sdm_return_t efuse_policy_user_crc_check(uint32_t start_row, const uint32_t * data, uint32_t total_num_rows)",737
9875,@param total_num_rows is the number of rows of efuse to write (length of valid data),770
9876,"sdm_return_t efuse_policy_engdev_fuse_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t is_virtual_write)",775
9877,@param total_num_rows is the number of rows of efuse to write (length of valid data),825
9878,"sdm_return_t efuse_policy_public_key_check(uint32_t bank, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, bool bank_specific)",829
9879,@param total_num_rows is the number of rows of efuse to write (length of valid data),909
9880,"sdm_return_t efuse_policy_aes_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",914
9881,@ param total_num_rows is the number of rows of efuse to write (length of valid data),953
9882,"sdm_return_t efuse_policy_crc1en_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t bank)",958
9883,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1020
9884,"sdm_return_t efuse_policy_gap_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t gapRow, uint32_t gapMask)",1025
9885,@param total_num_rows is the number of rows in the data to check (length of valid data),1053
9886,"sdm_return_t efuse_policy_quad_redundant_fuse_check(uint32_t bank, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",1056
9887,@param total_num_rows is the number of rows of efuse to write (length of valid data),1117
9888,"sdm_return_t efuse_policy_oct_redundant_fuse_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",1120
9889,@param total_num_rows is the number of rows of efuse to write (length of valid data),1198
9890,"sdm_return_t efuse_policy_crc0_before_production_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",1202
9891,@param total_num_rows is the number of rows of efuse to write (length of valid data),1249
9892,"sdm_return_t efuse_policy_untested_while_rom_patch_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",1253
9893,@param total_num_rows is the number of rows of efuse to write (length of valid data),1301
9894,"sdm_return_t efuse_policy_production_fuses_nosgx_cancel_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",1305
9895,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1359
9896,"sdm_return_t efuse_policy_write(const uint32_t fuses[], uint32_t bank, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",1363
9897,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1509
9898,"sdm_return_t efuse_policy_bank0_write(const uint32_t fuses[], uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",1513
9899,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1592
9900,"sdm_return_t efuse_policy_bank5_write(const uint32_t fuses[], uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",1596
9901,sdm_return_t efuse_policy_crc0_crc1_valid(const br_efuse_t *fuses),1649
9902,sdm_return_t efuse_policy_user_crc_valid(const br_efuse_t *fuses),1697
9903,sdm_return_t efuse_policy_ROM_eFuse_csum_valid(const br_efuse_t *fuses),1723
9904,sdm_return_t efuse_policy_user_pubkey_write(const br_efuse_t *fuses),1753
9905,Local defines for the altera_sdm_efuse_eng_cert_zero_check_policy() function.,1778
9906,sdm_return_t cmf_efuse_policy_eng_zero_check(void),1798
9907,"sdm_return_t efuse_policy_key_cancellation_fuse_check(bool is_efuse_write, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",1825
9908,static sdm_return_t key_cancellation_bitmask_valid(const uint32_t * p_data),1960
9909,sdm_return_t efuse_policy_user_cancellation_fuse_table_valid(void),2007
9910,void efuse_policy_user_cancellation_fuse_table_init(const uint32_t permitted_usr_cancellation_fuses[]),2022
9911,"sdm_return_t efuse_policy_parameter_range_check(uint32_t bank, uint32_t start_row, uint32_t total_num_rows)",2039
9912,sdm_return_t efuse_policy_bist(void),2080
9913,"sdm_return_t efuse_policy_copy_crc1_protected_region_to_array(const br_efuse_t *pFuses, uint32_t * p_data, uint32_t num_rows)",2245
9914,"static uint32_t extract_efuse_field(const uint32_t * input_data, uint32_t input_start_row, uint32_t input_num_rows, uint32_t * field_data, uint32_t field_start_row, uint32_t field_num_rows)",2276
9915,"static bool user_security_fuses_set(const uint32_t fuses[], uint32_t start_row, uint32_t num_rows, uint32_t skip_user_cancel_fuses)",2349
9916,Copyright (2020) Intel Corporation,3
9917,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9918,@brief Primary eFuse write capability for external (mbox-originated) requests. Internal (CMF-originated) ,42
9919,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",50
9920,"sdm_return_t altera_sdm_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t is_virtual_write, uint32_t *p_error_info, uint32_t *p_error_info_length, bool row_repair_enable)",57
9921,@brief Primary eFuse read capability for external (mbox-originated) requests,105
9922,"sdm_return_t altera_sdm_efuse_read(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",112
9923,"sdm_return_t altera_sdm_user_def_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, ",137
9924,void altera_sdm_efuse_write_disable(void),168
9925,"void altera_sdm_efuse_status(uint32_t *p_data, uint32_t *p_datasize) {",205
9926,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",362
9927,"sdm_return_t altera_sdm_efuse_user_pubkey_write(uint32_t *p_data, uint32_t user_key_type, uint32_t user_key_count, uint32_t is_virtual_write, uint32_t skip_cancel_keys)",365
9928,@brief  Programs the counter (VAB specific),525
9929,"sdm_return_t altera_sdm_efuse_counter_write(uint32_t *p_data , cmf_efuse_counter_type_t counter_type, uint32_t is_virtual_write)",530
9930,@brief  Programs the user pubkey cancel (VAB specific),583
9931,"sdm_return_t altera_sdm_efuse_user_pubkey_cancel_write(uint32_t *p_data , uint32_t user_root_hash_id, uint32_t cancel_id, uint32_t is_virtual_write)",589
9932,@brief  Programs the user pubkey disable (VAB specific),633
9933,"sdm_return_t altera_sdm_efuse_user_pubkey_disable_write(uint32_t mask, uint32_t is_virtual_write)",638
9934,"sdm_return_t altera_sdm_efuse_intel_pubkey_cancel_write(uint32_t key_id , uint32_t is_virtual_write, uint32_t *resp_buf)",668
9935,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",711
9936,"sdm_return_t altera_sdm_efuse_pr_pubkey_write(uint32_t *p_data, uint32_t user_key_type, uint32_t is_virtual_write, uint32_t bank, uint32_t start_row)",716
9937,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",753
9938,sdm_return_t altera_sdm_efuse_user_crc_write(uint32_t is_virtual_write),756
9939,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",797
9940,static sdm_return_t altera_sdm_efuse_pgm_crc0(uint32_t is_virtual_write),800
9941,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",855
9942,static sdm_return_t altera_sdm_efuse_pgm_crc1(uint32_t is_virtual_write),858
9943,"static uint32_t altera_sdm_efuse_cancel_psg_public_key(uint32_t key_id, uint32_t is_virtual_write)",924
9944,"static sdm_return_t altera_sdm_efuse_cancel_rolled_keys(uint32_t oldest_valid_key_id, uint32_t is_virtual_write)",968
9945,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",1037
9946,static sdm_return_t altera_sdm_efuse_pgm_user_crc(uint32_t is_virtual_write),1040
9947,Copyright (2019) Intel Corporation,3
9948,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9949,sdm_return_t hps_poll_cpa_lock(uint32_t ddr_width),68
9950,void hps_iocsr_clock_gate(uint32_t ddr_width),102
9951,void hps_ccu_init(void),123
9952,sdm_return_t hps_poll_pll_lock(uint32_t ddr_width),198
9953,sdm_return_t hps_ddr_cal_request(void),230
9954,sdm_return_t  hps_ddr_cal_clear(void),257
9955,Copyright (2019) Intel Corporation,3
9956,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9957,"sdm_return_t hps_ram_repair(const uint32_t channel_id,",51
9958,sdm_return_t hps_ram_good_init(const uint32_t efuse_ram_cfg),186
9959,sdm_return_t hps_ram_init(void),221
9960,void hps_config_ram(void),289
9961,Copyright (2018) Intel Corporation,3
9962,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9963,static void alt_sdm_ram_puf_poweroff(void),49
9964,void alt_sdm_ram_puf_poweroff_lock(void),75
9965,static void ram_puf_set_read_write_mode(uint32_t write_or_read),96
9966,void iid_puf_power_on(),126
9967,void iid_puf_power_off_and_discharge(),147
9968,void iid_puf_ram_setup(),162
9969,uint32_t iid_puf_read_word(uint32_t const addr),187
9970,static void puf_iid_fpga_read_disable(void),206
9971,void iid_puf_read_ram(uint32_t * const buf),217
9972,"void iid_puf_read_ram_xor(uint32_t * const xor_input,uint32_t size,uint32_t * const output_data)",234
9973,Copyright (2019) Intel Corporation,3
9974,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9975,efuse_bad_row_s* sdm_redundancy_bad_row_get(uint32_t device_row),66
9976,sdm_return_t sdm_redundancy_bad_row_load(void),86
9977,for the current IP row for 2x (2 bad row) case.,115
9978,@param bad_row is the eFuse bad row value (1..43) of the current sector row.,117
9979,@param bad_row_lower is the lower eFuse bad row value (1..22) of the current sector row. Assumed to be equal to bad_row for the lower half of the sector.,118
9980,@param current_row is the current row (1..43) of the sector row.,119
9981,"uint8_t compute_ar_reg_encoding_2x(const uint32_t bad_row,",124
9982,"Compute the row redundancy for 2x (2 bad row) SHFRW, NBAD, NBAD_ROWIP1 and ADJBAD settings for the AR registers of a",213
9983,(i.e. sectors with the same CNOC Y-address value).,215
9984,@param current_row_efuse is the current sector row eFuse bad row value (1..37).,216
9985,"void compute_sector_row_redundacy_2x(const efuse_bad_row_s *current_row_efuse,",226
9986,"sdm_return_t sdm_send_redundancy_sector_row_info(cnoc_handle_t cnoc_handle, uint8_t bus,",293
9987,"sdm_return_t sdm_redundancy_cnoc_y_to_sector_row(uint8_t cnoc_y_addr, uint8_t *sector_row)",352
9988,Copyright (2019) Intel Corporation,3
9989,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
9990,(,57
9991,"static void sdm_s4_sector_config(uint32_t sector_row,",101
9992,"sdm_return_t sdm_s4_row_config(cnoc_bus_idx_t bus, uint32_t sector,",184
9993,sdm_return_t sdm_s4_bypass(cnoc_bus_idx_t bus),265
9994,"sdm_return_t sdm_s4_sector_init(uint32_t num_sector_rows,",293
9995,"void sdm_s4_write_core_ip(const uint32_t * length, const uint32_t * start)",329
9996,void sdm_s4_write_ip0_even(const uint32_t * masks),334
9997,void sdm_s4_write_ip0_odd(const uint32_t * masks),339
9998,"sdm_return_t sdm_s4_write_iptypes(cnoc_bus_idx_t bus, uint8_t thread, uint32_t const * iptypes )",353
9999,Copyright (2019) Intel Corporation,3
10000,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10001,static dts_sensor_reading_cache_t page_zero;        //Special page. Only SDM sensor (channel 0) is used.,83
10002,uint32_t sensor_vadc_get_nominal_voltage(uint32_t channel),113
10003,void set_sense_clk_divider(void),146
10004,void sensor_initialization(void),159
10005,void sensor_vadc_efuse(void),221
10006,void sensor_adc_channel(void),274
10007,void sensor_deassert_calstart(void),289
10008,"void sensor_thermal_init(uint32_t iadclkdiv, uint32_t itsptabiasenb, uint32_t itsclkdiv, uint32_t ibiascurrentsel, uint32_t icalconfig)",299
10009,void sensor_temp_isr(void* unused),379
10010,void sensor_environ_mon_init(uint32_t chan_mask),398
10011,"static int32_t sensor_get_vin(uint32_t channel, uint32_t code_0, uint32_t raw_voltage)",425
10012,"uint32_t sensor_voltage_convert(uint32_t channel, uint32_t code_0, uint32_t raw_voltage)",480
10013,"void sensor_thermal_write_bounds(uint32_t upper_bound, uint32_t lower_bound)",529
10014,"uint32_t sensor_readout_packets(uint32_t *return_temp_packet, uint32_t *resp_buff, uint32_t temp_val)",543
10015,static uint32_t get_max_temperature(dts_sensor_reading_cache_t *page_ptr),560
10016,void sensor_update_temperature_cache(),592
10017,"uint32_t sensor_read_temperature_cache(uint32_t page, uint32_t channel)",764
10018,void sensor_adc_sampling_clock_setting(void),786
10019,Copyright (2017) Intel Corporation,3
10020,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10021,/*! This is the unlock access code 0b'101001 (lsb-msb) */,65
10022,STATIC sdm_return_t bbram_read_wait(ALT_KEY_VAULT_BBRAM_raw_t * const ctx),105
10023,STATIC bool bbram_handle_valid(const bbram_handle_t handle),117
10024,STATIC void gen_one_bbram_clock(ALT_KEY_VAULT_BBRAM_raw_t * const ctx),127
10025,STATIC void bbram_unlock_code(ALT_KEY_VAULT_BBRAM_raw_t * const ctx),141
10026,static void __inline__ bbram_clken(),162
10027,static void __inline__ bbram_clkgate(),173
10028,static void __inline__ bbram_source_select(),187
10029,static void __inline__ bbram_init(),199
10030,STATIC void bbram_regs_clean(ALT_KEY_VAULT_BBRAM_raw_t * const ctx),215
10031,static __inline__ ALT_KEY_VAULT_BBRAM_raw_t * const bbram_get_context(bbram_handle_t handle) {,237
10032,bbram_handle_t bbram_open(void),241
10033,sdm_return_t bbram_close(const bbram_handle_t handle),252
10034,"sdm_return_t bbram_write_aes_gp_regs(const bbram_handle_t handle,",274
10035,sdm_return_t bbram_write_gp_register(,348
10036,sdm_return_t bbram_read_gp_register(,389
10037,sdm_return_t bbram_key_clean(const bbram_handle_t handle),431
10038,sdm_return_t bbram_read_testpor_reg(,509
10039,sdm_return_t bbram_write_testpor_reg(,535
10040,"sdm_return_t bbram_read_key(const bbram_handle_t handle,",577
10041,Copyright (2017) Intel Corporation,3
10042,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10043,void freq_det_isr(void* context),46
10044,"sdm_return_t clkmgr_clk_freq_det_enable(clkmgr_handle_t handle, bool enable)",56
10045,sdm_return_t clkmgr_clk_write_freq_det_cfg_default(clkmgr_handle_t handle),79
10046,"sdm_return_t clkmgr_clk_freq_det_int_enable(clkmgr_handle_t handle, bool enable)",96
10047,"STATIC void clk_freq_det_int_enable(clkmgr_context_t* const clkmgr_context_ptr, bool enable)",124
10048,STATIC void clkmgr_clk_write_freq_det_cfg(clkmgr_context_t* const clkmgr_context_ptr),145
10049,"STATIC sdm_return_t clkmgr_anti_tamper_get_freq_det_cfg(clkmgr_context_t* const clkmgr_context_ptr, uint32_t ext_refclk_mhz, uint32_t tolerance)",155
10050,"sdm_return_t clkmgr_clk_update_freq_det_cfg(clkmgr_handle_t handle, uint32_t tolerance)",196
10051,Copyright (2017) Intel Corporation,3
10052,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10053,__inline__ static sdm_return_t decomp_validate_handle(decomp_handle_t decomp_handle),70
10054,This function must be called after hal_decomp_init() since a toggle is,91
10055,static void decomp_restart_hw(ALT_DC_raw_t * decomp_base),97
10056,static void decomp_system_default(ALT_DC_raw_t * decomp_base),123
10057,static void decomp_system_init(ALT_DC_raw_t * decomp_base),164
10058,static decomp_handle_t decomp_alloc(decomp_id_t decomp_id),191
10059,static sdm_return_t decomp_free(uintptr_t decomp_base),229
10060,decomp_handle_t decomp_open(decomp_id_t decomp_id),262
10061,sdm_return_t decomp_close(decomp_handle_t decomp_handle),280
10062,sdm_return_t decomp_system_bypass(decomp_handle_t decomp_handle),300
10063,sdm_return_t decomp_disable(decomp_handle_t decomp_handle),330
10064,sdm_return_t decomp_enable(decomp_handle_t decomp_handle),366
10065,"sdm_return_t decomp_int_enable(decomp_handle_t decomp_handle, uint32_t mask)",403
10066,"sdm_return_t decomp_int_disable(decomp_handle_t decomp_handle, uint32_t mask)",441
10067,"sdm_return_t decomp_int_clear(decomp_handle_t decomp_handle, uint32_t mask)",479
10068,"sdm_return_t decomp_int_status_get(decomp_handle_t decomp_handle, uint32_t *int_status)",507
10069,"sdm_return_t decomp_status_get(decomp_handle_t decomp_handle, uint32_t *status)",533
10070,bool decomp_check_status_for_error(decomp_handle_t decomp_handle),558
10071,"sdm_return_t decomp_memory_mode_set(decomp_handle_t decomp_handle, decomp_memory_mode_t mode)",606
10072,"sdm_return_t decomp_mode_set(decomp_handle_t decomp_handle, uint32_t mode)",635
10073,"sdm_return_t decomp_method(decomp_handle_t decomp_handle, uint32_t method)",662
10074,This function must be called after alt_sdm_decomp_init() since a toggle is,682
10075,sdm_return_t decomp_restart(decomp_handle_t decomp_handle),688
10076,sdm_return_t decomp_flush(decomp_handle_t decomp_handle),716
10077,sdm_return_t decomp_set_s4(decomp_handle_t decomp_handle),751
10078,sdm_return_t decomp_set_nsp_mode_normal(decomp_handle_t decomp_handle),778
10079,"sdm_return_t decomp_setup_ip_addr(decomp_handle_t decomp_handle,",803
10080,"sdm_return_t decomp_setup_rowpred(decomp_handle_t decomp_handle,",836
10081,"sdm_return_t decomp_setup_2d_threads(decomp_handle_t decomp_handle,",867
10082,"sdm_return_t decomp_setup_2d_info_rows(decomp_handle_t decomp_handle, uint32_t number_of_rows)",898
10083,"sdm_return_t decomp_setup_2d_framesize(decomp_handle_t decomp_handle,",922
10084,"sdm_return_t decomp_setup_2d_params(decomp_handle_t decomp_handle,",982
10085,"sdm_return_t decomp_setup_2d_offsets(decomp_handle_t decomp_handle,",1031
10086,"sdm_return_t decomp_setup_2d_eram(decomp_handle_t decomp_handle,",1097
10087,"sdm_return_t decomp_setup_2d_pr(decomp_handle_t decomp_handle,",1162
10088,"sdm_return_t decomp_setup_2d_dft_s3_framesize(decomp_handle_t decomp_handle, uint32_t framesize)",1220
10089,Copyright (2019) Intel Corporation,3
10090,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10091,sdm_return_t  hps_reset_hmc_request(void),49
10092,sdm_return_t hps_reset_hmc_clear(void),80
10093,void hps_fsbl_set_reset_reason(uint8_t reset_reason),112
10094,"void hps_fsbl_set_boot_scratch(bool is_ddr_retain, bool is_hw_soln, bool is_sdram_dbe, bool is_sdram_init_fail)",116
10095,void hps_cold_reset_tune(bool is_ddr_retain),120
10096,void hps_fence_drain_sdram(void),124
10097,void hps_sdram_lp3_entry(void),128
10098,void hps_fsbl_set_ddr_hash_result(bool hash_match),132
10099,bool has_sdm2hps_psi_reset(void),142
10100,bool hps_is_sdram_dbe(void),151
10101,bool hps_is_sdram_init_fail(void),160
10102,Copyright (2019) Intel Corporation,3
10103,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10104,void sensor_init(void),74
10105,void sensor_env_int_clear(uint32_t mask),111
10106,void sensor_env_int_enable(uint32_t mask),123
10107,STATIC void sensor_env_int_disable(uint32_t mask),135
10108,uint32_t sensor_env_mon_temp_get(void),143
10109,int32_t sensor_thermal_read(void),155
10110,int32_t sensor_thermal_integer_read(void),179
10111,STATIC void sensor_vadc_write_bounds(void),188
10112,STATIC void sensor_vadc_init(void),246
10113,void dft_sensor_vadc_init(void),323
10114,STATIC sdm_return_t sensor_vadc_calibration(void),328
10115,"uint32_t sensor_vadc_read(uint32_t chan_bitmask, uint32_t * chan_voltages, uint32_t raw)",367
10116,"uint32_t sensor_vadc_read_average(uint32_t chan_bitmask, uint32_t * chan_voltages, uint32_t average_count, uint32_t raw)",486
10117,uint32_t sensor_vadc_read_one_channel(voltage_channel_t channel),640
10118,uint32_t sensor_env_viostat_status(void),654
10119,"int32_t get_temp_data_from_cnt(cnoc_handle_t cnoc_handle,",661
10120,"int32_t sensor_crete_thermal_read(cnoc_handle_t cnoc_handle, int32_t crete_die, uint32_t *resp_buff)",760
10121,uint64_t get_sensor_timer(void),813
10122,void cmf_sdm_update_temperature_cache(),823
10123,"uint32_t sensor_main_read_temperature_cache(uint32_t page, uint32_t channel, bool only_integer)",828
10124,void sensor_anti_tamper_temp_det_init(void),839
10125,void sensor_anti_tamper_temp_det_enable(bool enable),850
10126,"STATIC sdm_return_t sensor_vadc_read_ch_bounds(uint32_t channel, vadc_ch_cfg_t* p_vadc_ch_cfg)",885
10127,"sdm_return_t sensor_vadc_write_ch_bounds(uint32_t channel, vadc_ch_cfg_t vadc_ch_cfg)",912
10128,"STATIC sdm_return_t sensor_anti_tamper_vadc_cfg_init(uint32_t tolerance, uint32_t num_ch, uint32_t vadc_ch_mask)",953
10129,@return converted adc voltage (effective in lower 12 bit). value higher than max (0x0FFF) will be suppressed to 0xFFF. ,999
10130,STATIC uint32_t convert_mv_to_adc(uint32_t voltage_mv),1001
10131,"STATIC sdm_return_t get_vadc_ch_cfg(uint32_t voltage_nom_mv, uint32_t tolerance, vadc_ch_cfg_t* vadc_ch_cfg)",1022
10132,"sdm_return_t sensor_anti_tamper_volt_det_init(uint32_t tolerance, uint32_t num_ch, uint32_t vadc_ch_mask)",1050
10133,"sdm_return_t sensor_anti_tamper_volt_det_enable(bool enable, uint32_t mask)",1064
10134,STATIC void vadc_isr(void* p_unused),1086
10135,STATIC void temp_isr(void* p_unused),1109
10136,Copyright (2019) Intel Corporation,3
10137,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10138,void system_control_fpga_core_rst_assert(),30
10139,void system_control_fpga_core_rst_deassert(),37
10140,void system_control_dm_release_reset(uint32_t pin),44
10141,void system_control_dm_release_assert(uint32_t pin),50
10142,Copyright (2019) Intel Corporation,3
10143,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10144,"sdm_return_t aes_init(alt_sdm_aes_opmode_t mode, alt_sdm_aes_data_src_t source, alt_sdm_aes_data_dest_t destination)",65
10145,static void __inline alt_sdm_inbuf_fifo_rdsel(uint8_t fifo),94
10146,void alt_sdm_aes_init(void),100
10147,"void alt_sdm_aes_config(uint32_t mode, uint32_t size, uint32_t outsize_diff)",132
10148,void alt_sdm_aes_start(void),167
10149,bool alt_sdm_aes_done_status(void),190
10150,uint32_t alt_sdm_aes_int_status(void),202
10151,"void alt_sdm_aes_get_data(uint8_t fifo, uint32_t aes_mode, uint32_t size, uint32_t outcount)",207
10152,void alt_sdm_aes_int_clear(uint32_t mask),218
10153,void alt_sdm_aes_int_enable(uint32_t mask),224
10154,void alt_sdm_aes_int_disable(uint32_t mask),230
10155,uint32_t alt_sdm_aes_enable(uint32_t size),235
10156,uint32_t alt_sdm_aes_ready(void),249
10157,void alt_sdm_aes_dest_set(uint32_t dest),268
10158,"void alt_sdm_aes_key_load(alt_sdm_aes_key_dest_sel_t key_dest, alt_sdm_aes_key_size_t key_size, alt_sdm_aes_key_swap_mode_t key_mode)",273
10159,void alt_sdm_aes_clear_keys(void),300
10160,"void alt_sdm_aes_setup_bypass(alt_sdm_aes_cib_rd_fifo_t input_fifo, uint32_t xfer_length_words_64bits, alt_sdm_aes_data_dest_t output_destination)",306
10161,bool alt_sdm_aes_is_busy(void),330
10162,"sdm_return_t alt_sdm_aes_get_update_interval(uint32_t interval_length,",339
10163,sdm_return_t alt_sdm_aes_key_swap_mode_set(alt_sdm_aes_key_swap_mode_config_t* aes_key_swap),401
10164,"sdm_return_t alt_sdm_aes_iv_set(alt_sdm_aes_iv_dest_sel_t aes_iv_dest, alt_sdm_aes_iv_data_t*  iv_data)",426
10165,sdm_return_t alt_sdm_aes_key_info_set(alt_sdm_aes_key_info_t* aes_key_info),476
10166,"void alt_sdm_aes_setup_data_xfer(alt_sdm_aes_key_ctx_sel_t aes_key_ctx_sel,",528
10167,void alt_sdm_aes_key_as_data_last_operation_set(void),562
10168,void alt_sdm_aes_key_context_select_clear_to_zero(void),570
10169,static sdm_return_t in_buf_memmode_set(),583
10170,static sdm_return_t in_buf_memmode_clr(),596
10171,clkmgr_handle_t clkmgr_open(),128
10172,void clkmgr_close(clkmgr_handle_t handle),141
10173,bool clkmgr_handle_valid(clkmgr_handle_t handle),158
10174,"sdm_return_t clkmgr_register_pre_callback(clkmgr_handle_t handle, clkmgr_pre_callback fn, clkmgr_cb_type_t type)",169
10175,STATIC sdm_return_t call_clkmgr_pre_callbacks(clkmgr_context_t* const clkmgr_context_ptr),188
10176,"sdm_return_t clkmgr_register_post_callback(clkmgr_handle_t handle, clkmgr_post_callback fn, clkmgr_cb_type_t type)",206
10177,STATIC sdm_return_t call_clkmgr_post_callbacks(clkmgr_context_t* const clkmgr_context_ptr),226
10178,"sdm_return_t clkmgr_set_mode(clkmgr_handle_t handle, clkmgr_mode_t mode)",269
10179,clkmgr_mode_t clkmgr_get_mode(),282
10180,"sdm_return_t clkmgr_clock_speed_stage(clkmgr_handle_t handle, clkmgr_oscclk_speed_t speed, clkmgr_asclk_speed_t asclk)",299
10181,sdm_return_t clkmgr_clock_update(clkmgr_handle_t handle),454
10182,STATIC sdm_return_t clkmgr_pll_update(clkmgr_context_t* const clkmgr_context_ptr),546
10183,"STATIC sdm_return_t calculate_clock_divisor_integer(uint32_t* divisor, uint32_t input_frequency, uint32_t output_frequency)",605
10184,sdm_return_t clkmgr_setup_divider(clkmgr_handle_t handle),626
10185,"sdm_return_t clkmgr_get_current_pll_settings(clkmgr_handle_t handle, clkmgr_pll_settings_t* current_settings_ptr)",710
10186,"sdm_return_t clkmgr_get_staged_pll_settings(clkmgr_handle_t handle, clkmgr_pll_settings_t* staged_settings_ptr)",740
10187,STATIC sdm_return_t clkmgr_validate_staged_clock(clkmgr_context_t* const clkmgr_context_ptr),770
10188,"STATIC void clkmgr_stash_initial_clock_settings(clkmgr_context_t* const clkmgr_context_ptr, clkmgr_pll_settings_t default_clock)",853
10189,sdm_return_t clkmgr_set_clk_slices_to_default(clkmgr_handle_t handle),867
10190,"sdm_return_t clkmgr_set_safe_ref_clk_div(clkmgr_handle_t handle, clkmgr_intosc_div_t value)",910
10191,sdm_return_t clkmgr_clk_bypass_all(clkmgr_handle_t handle),939
10192,"STATIC void clkmgr_clk_bypassr_clear(clkmgr_context_t* const clkmgr_context_ptr, uint32_t bypassr_val)",962
10193,sdm_return_t clkmgr_clk_unbypass_all(clkmgr_handle_t handle),968
10194,sdm_return_t clkmgr_clk_unbypass_except_ctrl(clkmgr_handle_t handle),991
10195,STATIC sdm_return_t clkmgr_stage_vcocalib_params(clkmgr_context_t* const clkmgr_context_ptr),1014
10196,sdm_return_t clkmgr_set_cnoc_half_speed(clkmgr_handle_t handle),1038
10197,sdm_return_t clkmgr_set_cnoc_full_speed(clkmgr_handle_t handle),1057
10198,sdm_return_t clkmgr_enable_exact_user_clk(clkmgr_handle_t handle),1077
10199,sdm_return_t clkmgr_disable_exact_user_clk(clkmgr_handle_t handle),1106
10200,STATIC sdm_return_t clkmgr_reset_clock_settings(clkmgr_context_t* const clkmgr_context_ptr),1125
10201,STATIC sdm_return_t clkmgr_stage_clock_max_usrclk_speed(clkmgr_context_t* const clkmgr_context_ptr),1168
10202,"STATIC sdm_return_t clkmgr_update_data_plane_speed_stage(clkmgr_context_t* const clkmgr_context_ptr, clkmgr_data_plane_speed_t data_plane_speed)",1214
10203,STATIC sdm_return_t clkmgr_wait_for_pll_lock(clkmgr_context_t* const clkmgr_context_ptr),1250
10204,sdm_return_t clkmgr_pll_is_locked(clkmgr_handle_t handle),1304
10205,"sdm_return_t clkmgr_setup_gpio_debounce_logic(clkmgr_handle_t handle, uint32_t counter)",1325
10206,"sdm_return_t clkmgr_qspi_clock_gate_control(clkmgr_handle_t handle, bool control)",1343
10207,sdm_return_t clkmgr_set_qspi_clock_intosc_mode(clkmgr_handle_t handle),1365
10208,"sdm_return_t clkmgr_pll0_pll1_div(clkmgr_handle_t handle, uint32_t pll0_div, uint32_t pll1_div)",1382
10209,sdm_return_t clkmgr_clk_internal(clkmgr_handle_t handle),1401
10210,uint32_t clkmgr_get_safe_ref_clk_div(clkmgr_context_t* const clkmgr_context_ptr),1414
10211,"STATIC void clkmgr_data_clk_scr_select(clkmgr_context_t* const clkmgr_context_ptr, uint32_t sel)",1421
10212,"STATIC void clkmgr_data_clk_set_cnt(clkmgr_context_t* const clkmgr_context_ptr, uint32_t cnt)",1427
10213,"sdm_return_t clkmgr_data_clk_mux_freq_change_cnt(clkmgr_handle_t handle, uint32_t sel, uint32_t cnt, uint32_t bypass)",1433
10214,STATIC uint32_t refclk_div_get(uint32_t refclk_mhz),1452
10215,uint32_t clkmgr_get_clk_en(void),1470
10216,uint32_t clkmgr_get_clk_en_data(clkmgr_handle_t handle),1477
10217,sdm_return_t clkmgr_set_clk_en_data(clkmgr_handle_t handle),1486
10218,sdm_return_t clkmgr_clear_clk_en_data(clkmgr_handle_t handle),1501
10219,sdm_return_t clkmgr_clear_clk_en_ctrl(clkmgr_handle_t handle),1521
10220,"sdm_return_t get_frequency_of_intosc(clkmgr_handle_t handle, uint32_t *retval)",1537
10221,bool clkmgr_switch_sdm_sdata_crypto_clk(bool enable),1619
10222,Copyright (2017) Intel Corporation,3
10223,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10224,Functions in this module primarily enable transfer of keys from the User Key Vault (UKV) to Crypto hardware,51
10225,source. There is no support for firmware to read keys out of UKV into NSP RAM (hardware limitation).,53
10226,void ukv_init(void),59
10227,"uint32_t ukv_put_key(uint32_t key_src, uint32_t key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits)",71
10228,"uint32_t ukv_put_key_xor(uint32_t key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits)",474
10229,"uint32_t ukv_get_key(uint32_t key_dest, uint32_t key_slot, uint32_t key_size_bits, uint32_t top_half)",593
10230,uint32_t ukv_clear_key(uint32_t key_slot),761
10231,uint32_t ukv_clear_all_keys(void),773
10232,sdm_return_t ukv_clean_key_reg(void),799
10233,static bool metal_key_disabled_and_locked(void),832
10234,sdm_return_t metal_key_disable_and_lock(void),861
10235,"uint32_t ukv_clear_all_keys_except_key_slots(uint32_t * const key_slots, const uint32_t * const excepted_slots, uint32_t excepted_slots_len)",889
10236,"uint32_t ukv_clear_all_keys_except_key_slots(const uint32_t * const excepted_slots, uint32_t excepted_slots_len)",891
10237,Copyright (2019) Intel Corporation,3
10238,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10239,"sdm_return_t cnoc_scramble_enable(const cnoc_handle_t handle,",55
10240,sdm_return_t cnoc_scramble_disable(const cnoc_handle_t handle),81
10241,bool cnoc_scramble_is_enabled(const cnoc_handle_t handle),103
10242,"static sdm_return_t sdm_cnt_addr_assign(const cnoc_handle_t handle, const cnoc_node_t cnoc_node)",131
10243,sdm_return_t sdm_cnt_addr_floorplan_assign(const cnoc_handle_t handle),187
10244,"void cnoc_rx_select_dest(const cnoc_handle_t handle, const cnoc_rx_input_sel_t dest)",242
10245,uint32_t cnoc_ret_int_asserted(void),265
10246,uint32_t cnoc_ret_user_int_asserted(void),282
10247,"@param int_type bitwise or indicating which interrupt to read: 0x1 = secure, 0x2 = user (non-secure)",299
10248,"uint32_t cnoc_ret_int_stk_asserted(const cnoc_handle_t handle, const uint8_t int_type)",303
10249,"void cnoc_master_select(const cnoc_handle_t handle, const cnoc_master_select_t master)",323
10250,void cnoc_ctrl_avstif_disable(const cnoc_handle_t handle),423
10251,"sdm_return_t cnoc_esram_tnm_reset(const cnoc_handle_t handle, const bool assert)",435
10252,"sdm_return_t cnoc_ipc_jtagid(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t jtagid)",440
10253,"sdm_return_t sdm_cnt_set_node_security_tx1packet(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",451
10254,"int32_t cnoc_ipc_send_core_temp(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr, const uint32_t temp_packet)",456
10255,"int32_t cnoc_ipc_uib_read_hbm_temp(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",472
10256,sdm_return_t cnoc_return_reset_fifo(const cnoc_handle_t handle),487
10257,sdm_return_t cnoc_return_select_crypto_trim_header(const cnoc_handle_t handle),492
10258,"int32_t sdm_cnoc_ipc_verify_hash( cnoc_handle_t cnoc_handle, const cnoc_addr_t cnoc_addr, const uint32_t* cnoc_header, const uint32_t  viaROM_index, const uint32_t viaROM_address, const uint32_t  viaROM_size)",497
10259,sdm_return_t cnoc_return_select_rdmsg(const cnoc_handle_t handle),502
10260,"int32_t cnoc_ipc_aib_read_crete_temp(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",507
10261,"sdm_return_t cnoc_ipc_sector_zero_check(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",523
10262,"sdm_return_t cnoc_ipc_user_register_clear(const cnoc_handle_t handle, const cnoc_addr_t cnoc_addr)",539
10263,sdm_return_t sdm_cnt_fabric_jtag_enable(const cnoc_handle_t handle),555
10264,Copyright (2019) Intel Corporation,3
10265,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10266,"sdm_return_t comp_config_get_ram_block_key_update(comp_config_handle_t handle, uint32_t *p_data, uint32_t size_in_bytes, ",62
10267,"sdm_return_t comp_config_get_key_challenge_block(comp_config_handle_t handle, uint32_t *p_data, ",173
10268,Copyright (2020) Intel Corporation,3
10269,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10270,"sdm_return_t crypto_empty_prebuf(in_buf_handle_t inbuf_handle, sha_handle_t sha_handle)",32
10271,Copyright (2017) Intel Corporation,3
10272,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10273,efuse_handle_t efuse_open(br_efuse_t *p_efuse),63
10274,sdm_return_t efuse_close(efuse_handle_t handle),86
10275,"void cmf_efuse_field_init(cmf_efuse_field_t *p_efuse_field, const uint32_t *p_start)",106
10276,"uint32_t cmf_efuse_get_field(cmf_efuse_field_t *p_efuse_field, uint32_t size)",123
10277,void cmf_efuse_get_chipid(uint32_t p_data[2]),155
10278,void cmf_efuse_get_ult(uint32_t p_data[2]),166
10279,sdm_return_t cmf_efuse_compare_ulthash(const uint32_t *p_data),177
10280,void cmf_efuse_get_ulthash(uint32_t *p_data),195
10281,uint32_t cmf_efuse_get_int_osc_trim(void),205
10282,uint32_t cmf_efuse_get_hps_int_osc_trim(void),215
10283,uint32_t cmf_efuse_get_intel_rf_1r1w(void),238
10284,uint32_t cmf_efuse_get_synopsys_sram_1rw(void),250
10285,uint32_t cmf_efuse_get_synopsys_rf_1rw(void),267
10286,uint32_t cmf_efuse_get_synopsys_hd_1r1w(void),277
10287,"sdm_return_t cmf_efuse_get_hps_mem_repair(uint32_t *p_data, uint32_t num_rows)",287
10288,"sdm_return_t cmf_efuse_get_lsm_mem_repair(uint32_t *p_data, uint32_t num_rows)",321
10289,"sdm_return_t cmf_efuse_get_crete_dd(uint32_t *p_data, uint32_t num_rows)",355
10290,uint32_t cmf_efuse_get_bg_trim(void),377
10291,uint32_t cmf_efuse_get_jtag_id(void),391
10292,sdm_return_t cmf_efuse_get_vid(uint32_t *p_data),436
10293,uint32_t cmf_efuse_get_vr_aux_trim(void),449
10294,uint32_t cmf_efuse_get_io_aux_trim(void),459
10295,uint32_t cmf_efuse_get_rma_counter_bit(void),469
10296,uint32_t cmf_efuse_get_vr_leaf_sector_trim(uint32_t sector),482
10297,uint32_t cmf_efuse_get_vr_leaf_ctrl_bf(void),509
10298,"sdm_return_t cmf_efuse_get_crete_location_info(uint8_t *p_data, uint32_t num_cretes)",522
10299,"sdm_return_t cmf_efuse_get_uib_location_info(uint8_t *p_data, uint32_t num_uib)",569
10300,@brief This functions gets the aib redundancy info from fuse bank given AIB index (from 0..5),591
10301,@param aib_pos is a the position of AIB as an index from (0...5),592
10302,"sdm_return_t cmf_efuse_get_aib_redundancy(uint8_t aib_pos, uint32_t *p_data)",596
10303,"sdm_return_t cmf_efuse_get_dts_trim(uint32_t * dts_caldataoffset,uint32_t * dts_caldataslope)",643
10304,"sdm_return_t cmf_efuse_get_vadc_trim(uint32_t * vadc_rvsvcmtrim, uint32_t * vadc_rvsreftrim, uint32_t * vadc_rvsibiasstg1, uint32_t * vadc_rvsibiasstg23,uint32_t * vadc_rvsibiasvrefbuf,uint32_t * vadc_rvscompdlyctrl)",667
10305,"sdm_return_t cmf_efuse_get_bad_sector_rows(uint8_t *p_rows, uint32_t total_rows)",704
10306,bool is_production_fuse_blown(void),741
10307,bool is_untested_fuse_blown(void),768
10308,bool is_no_sgx_fuse_blown(void),795
10309,bool is_engineering_fuse_blown(void),817
10310,bool is_user_root_pubkey_blown(void),839
10311,bool is_jtag_disable_fuse_blown(void),863
10312,bool is_key_prog_start_fuse_blown(void),885
10313,bool is_key_prog_end_fuse_blown(void),907
10314,uint32_t cmf_efuse_get_security_version(void),929
10315,bool is_hps_jtag_disable_fuse_blown(void),945
10316,sdm_return_t cmf_efuse_get_force_pki_slct(cmf_efuse_force_pki_slct_t *p_data),970
10317,bool is_force_pki_slct_blown(void),1029
10318,bool is_joint_cmf_pka_blown(void),1056
10319,"sdm_return_t cmf_efuse_get_public_key(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct, uint32_t msw_only)",1083
10320,"uint32_t cmf_efuse_get_key_cancellation(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct)",1148
10321,"sdm_return_t cmf_efuse_get_owned_constant_fuses(uint32_t *p_data, uint32_t num_rows, bool use_pubkey_hash)",1193
10322,Local defines for the altera_sdm_efuse_eng_cert_zero_check_policy() function.,1238
10323,sdm_return_t cmf_efuse_policy_eng_zero_check(void),1260
10324,uint32_t cmf_efuse_get_oldest_working_psg_key_id(void),1290
10325,uint32_t cmf_efuse_get_most_significant_cancelled_key_id(uint32_t *p_data),1367
10326,"void cmf_efuse_generate_key_cancel_bitmask(uint32_t *p_data, uint32_t key_id)",1430
10327,bool is_intel_signing_key_cancelled(uint32_t keyid),1446
10328,bool is_intel_puf_enroll_fuse_blown(void),1481
10329,uint32_t cmf_efuse_get_key_disable_value(cmf_efuse_aes_root_key_disable_slct_t key),1510
10330,"*     eSRAM repair fuses                    Read from BANK0, WORD34, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1582
10331,"*     eSRAM repair fuses                    Read from BANK0, WORD35, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1584
10332,"*     eSRAM repair fuses                    Read from BANK0, WORD36, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1586
10333,"*     eSRAM repair fuses                    Read from BANK0, WORD37, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1588
10334,"* eSRAM repair fuses                    Read from BANK0, WORD38, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1590
10335,"*     eSRAM repair fuses                    Read from BANK0, WORD39, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1592
10336,"*     eSRAM repair fuses                    Read from BANK0, WORD40, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1594
10337,"*     eSRAM repair fuses                    Read from BANK0, WORD41, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1596
10338,"*     eSRAM repair fuses                    Read from BANK0, WORD42, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1598
10339,"*     eSRAM repair fuses                    Read from BANK0, WORD43, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1600
10340,"*     eSRAM repair fuses                    Read from BANK0, WORD44, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1602
10341,"*     eSRAM repair fuses                    Read from BANK0, WORD45, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1604
10342,"*     eSRAM repair fuses                    Read from BANK0, WORD46, #Bits31     RSH0          -> MASK 0xFFFFFFFF (0,31)",1606
10343,"*     [21:0]  :  eSRAM repair fuses        Read from BANK0, WORD47, #Bits22    RSH0          -> MASK 0x003FFFFF (0,21)",1608
10344,"*     [31:22] :  HBMC RF Config            Read from BANK0, WORD0,  #Bits10    RSH22          -> MASK 0xFFC00000 (31,22)",1609
10345,"*     [31:0]  :  HBMC RF repair fuses        Read from BANK0, WORD62, #Bits31    RSH0          -> MASK 0xFFFFFFFF (0,31)",1611
10346,"*     [17:0]  :  HBMC RF repair fuses        Read from BANK0, WORD63, #Bits18    RSH0          -> MASK 0x0007FFFF (0,17)",1613
10347,"*     [23:18] :  Adj row redundancy        Read from BANK2, WORD63, #Bits06    RSH17          -> MASK 0x00FC0000 (18,23)",1614
10348,*     [31:24] :  padding of zero            Read from BANKFF    (PAD Zero),1615
10349,"*     [18:0]  :  eSRAM SRAM type config    Read from BANK2, WORD58, #Bits19    RSH0          -> MASK 0x00FC0000 (18,23)",1617
10350,@param uib_index UIB index to return fuse data for. Can be 0 (UIB Bottom) or 1 (UIB Top),1651
10351,"sdm_return_t cmf_efuse_get_uib_redundancy(uint32_t uib_index, uint32_t *p_data)",1655
10352,"sdm_return_t cmf_efuse_get_dib_redundancy(uint32_t dib_index, uint32_t *p_data)",1791
10353,sdm_return_t altera_sdm_efuse_aes_key_prog_start_write(uint32_t is_virtual_write),1830
10354,sdm_return_t altera_sdm_efuse_aes_key_prog_end_write(uint32_t is_virtual_write),1854
10355,sdm_return_t altera_sdm_efuse_aes_root_key_write(uint32_t *p_data),1878
10356,"sdm_return_t altera_sdm_efuse_aes_security_version_write(uint32_t key_id, uint32_t is_virtual_write)",1912
10357,"sdm_return_t cmf_efuse_get_silicon_unique_data_hash(const crypto_context_t * const ctx,",1939
10358,bool is_user_iid_puf_enroll_disable_fuse_blown(void),2087
10359,"sdm_return_t cmf_efuse_get_fuses_to_generate_puf_attestation_cert(uint32_t* p_data, uint32_t num_rows)",2108
10360,uint32_t cmf_efuse_get_crc1en(void),2129
10361,sdm_return_t cmf_efuse_get_sigma_public_values(uint32_t* p_data),2142
10362,bool is_permit_self_kill_fuse_blown(),2165
10363,sdm_return_t altera_sdm_efuse_device_kill_program(uint32_t is_virtual_write),2187
10364,sdm_return_t altera_sdm_efuse_cancel_all_public_key(uint32_t is_virtual_write),2212
10365,Copyright (2020) Intel Corporation,3
10366,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10367,uint32_t get_bist_flag_quad_redundant_status(void) {return efuse_bist_result.efuse_policy_quad_redundant_fuse_check_status;},64
10368,uint32_t get_bist_flag_oct_redundant_status(void) {return efuse_bist_result.efuse_policy_oct_redundant_fuse_check_status;},65
10369,uint32_t get_bist_flag_user_crc_status(void) {return efuse_bist_result.efuse_policy_user_crc_valid_status;},66
10370,uint32_t get_bist_flag_crc0_crc1_status(void) {return efuse_bist_result.efuse_policy_crc0_crc1_valid_status;},67
10371,uint32_t get_bist_flag_ROM_csum_status(void) {return efuse_bist_result.efuse_policy_ROM_eFuse_csum_valid_status;},68
10372,"sdm_return_t efuse_policy_row_readable(uint32_t bank, uint32_t row)",177
10373,"sdm_return_t efuse_policy_row_writable(uint32_t bank, uint32_t row)",205
10374,@param total_num_rows is the number of rows of efuse to write (length of valid data),228
10375,"sdm_return_t efuse_policy_writable_range_check(uint32_t start_row, uint32_t total_num_rows, uint32_t bank)",232
10376,@param total_num_rows is the number of rows of efuse to write (length of valid data),250
10377,"sdm_return_t efuse_policy_production_fuses_protected_region_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",254
10378,@param total_num_rows is the number of rows of efuse to write (length of valid data),288
10379,"sdm_return_t efuse_policy_crc0en_fuses_protected_region_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",292
10380,@param fuses efuse cache pointer to bank being written (to check existing fuse settings),465
10381,"sdm_return_t efuse_policy_user_security_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t is_virtual_write)",469
10382,@param total_num_rows is the number of rows of efuse to write (length of valid data),555
10383,"sdm_return_t efuse_policy_user_crc_en_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",559
10384,@param total_num_rows is the number of rows of efuse to write (length of valid data),584
10385,"sdm_return_t efuse_policy_user_crc_check(uint32_t start_row, const uint32_t * data, uint32_t total_num_rows)",588
10386,@param total_num_rows is the number of rows of efuse to write (length of valid data),621
10387,"sdm_return_t efuse_policy_engdev_fuse_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t is_virtual_write)",626
10388,@param total_num_rows is the number of rows of efuse to write (length of valid data),676
10389,"sdm_return_t efuse_policy_public_key_check(uint32_t start_row, const uint32_t * data, uint32_t total_num_rows)",680
10390,@param total_num_rows is the number of rows of efuse to write (length of valid data),726
10391,"sdm_return_t efuse_policy_aes_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[])",731
10392,@ param total_num_rows is the number of rows of efuse to write (length of valid data),770
10393,"sdm_return_t efuse_policy_crc1en_fuses_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, const uint32_t fuses[], uint32_t bank)",775
10394,@ param total_num_rows is the number of rows of efuse to write (length of valid data),837
10395,"sdm_return_t efuse_policy_gap_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t gapRow, uint32_t gapMask)",842
10396,@param total_num_rows is the number of rows in the data to check (length of valid data),870
10397,"sdm_return_t efuse_policy_quad_redundant_fuse_check(uint32_t bank, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",873
10398,@param total_num_rows is the number of rows of efuse to write (length of valid data),934
10399,"sdm_return_t efuse_policy_oct_redundant_fuse_check(uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",937
10400,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1013
10401,"sdm_return_t efuse_policy_write(const uint32_t fuses[], uint32_t bank, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",1017
10402,@ param total_num_rows is the number of rows of efuse to write (length of valid data),1099
10403,"sdm_return_t efuse_policy_bank0_write(const uint32_t fuses[], uint32_t start_row, const uint32_t *data, uint32_t total_num_rows, uint32_t is_virtual_write)",1103
10404,sdm_return_t efuse_policy_crc0_crc1_valid(const br_efuse_t *fuses),1190
10405,sdm_return_t efuse_policy_user_crc_valid(const br_efuse_t *fuses),1239
10406,sdm_return_t efuse_policy_ROM_eFuse_csum_valid(const br_efuse_t *fuses),1266
10407,sdm_return_t efuse_policy_user_pubkey_write(const br_efuse_t *fuses),1297
10408,"sdm_return_t efuse_policy_zero_check_range(uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows)",1328
10409,"sdm_return_t altera_sdm_efuse_zero_check_policy(uint32_t fuses[],const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows)",1422
10410,"sdm_return_t efuse_policy_key_cancellation_fuse_check(bool is_efuse_write, uint32_t start_row, const uint32_t *data, uint32_t total_num_rows)",1451
10411,static sdm_return_t key_cancellation_bitmask_valid(const uint32_t * p_data),1611
10412,sdm_return_t efuse_policy_user_cancellation_fuse_table_valid(void),1658
10413,void efuse_policy_user_cancellation_fuse_table_init(const uint32_t permitted_usr_cancellation_fuses[]),1673
10414,"sdm_return_t efuse_policy_parameter_range_check(uint32_t bank, uint32_t start_row, uint32_t total_num_rows)",1690
10415,sdm_return_t efuse_policy_bist(void),1730
10416,"sdm_return_t efuse_policy_copy_crc1_protected_region_to_array(const br_efuse_t *pFuses, uint32_t * p_data, uint32_t num_rows)",1871
10417,"static uint32_t extract_efuse_field(const uint32_t * input_data, uint32_t input_start_row, uint32_t input_num_rows, uint32_t * field_data, uint32_t field_start_row, uint32_t field_num_rows)",1902
10418,"static bool user_security_fuses_set(const uint32_t fuses[], uint32_t start_row, uint32_t num_rows, uint32_t skip_user_cancel_fuses)",1975
10419,Copyright (2020) Intel Corporation,3
10420,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10421,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",65
10422,static sdm_return_t altera_sdm_efuse_pgm_crc0(uint32_t is_virtual_write),68
10423,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",120
10424,static sdm_return_t altera_sdm_efuse_pgm_crc1(uint32_t is_virtual_write),123
10425,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",183
10426,static sdm_return_t altera_sdm_efuse_pgm_user_crc(uint32_t is_virtual_write),186
10427,"static uint32_t altera_sdm_efuse_cancel_psg_public_key(uint32_t key_id, uint32_t is_virtual_write)",245
10428,"static sdm_return_t altera_sdm_efuse_cancel_rolled_keys(uint32_t oldest_valid_key_id, uint32_t is_virtual_write)",291
10429,@brief Primary eFuse write capability for external (mbox-originated) requests. Internal (CMF-originated),355
10430,"@param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",363
10431,"sdm_return_t altera_sdm_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, ",370
10432,"sdm_return_t altera_sdm_user_def_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, ",408
10433,void altera_sdm_efuse_write_disable(void),430
10434,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",443
10435,"sdm_return_t altera_sdm_efuse_user_pubkey_write(uint32_t *p_data, uint32_t user_key_type, uint32_t user_key_count, uint32_t is_virtual_write, uint32_t skip_cancel_keys)",446
10436,"@ param is_virtual_write 0 = burn real eFuses, 1 = write to virtual eFuses (aka eFuse cache)",572
10437,sdm_return_t altera_sdm_efuse_user_crc_write(uint32_t is_virtual_write),575
10438,"void altera_sdm_efuse_status(uint32_t *p_data, uint32_t *p_datasize)",643
10439,"sdm_return_t altera_sdm_efuse_intel_pubkey_cancel_write(uint32_t key_id , uint32_t is_virtual_write, uint32_t *resp_buf)",761
10440,@brief  Programs the user pubkey cancel (VAB specific),801
10441,"sdm_return_t altera_sdm_efuse_user_pubkey_cancel_write(uint32_t *p_data , uint32_t user_root_hash_id, uint32_t cancel_id, uint32_t is_virtual_write)",807
10442,Copyright (2019) Intel Corporation,3
10443,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10444,"sdm_return_t hps_ram_repair(const uint32_t channel_id,",53
10445,sdm_return_t hps_ram_good_init(const uint32_t efuse_ram_cfg),180
10446,sdm_return_t hps_ram_init(void),215
10447,void hps_config_ram(void),303
10448,Copyright (2019) Intel Corporation,3
10449,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10450,sdm_return_t hps_poll_cpa_lock(uint32_t ddr_width),50
10451,void hps_iocsr_clock_gate(uint32_t ddr_width),90
10452,void hps_mpfe_reset_release(void),114
10453,void hps_mpfe_early_release(uint32_t ddr_width),122
10454,void hps_warm_reset_tune(void),145
10455,void hps_osc_trim(void),160
10456,void hps_prepare_mpu_release(bool has_ddr),171
10457,void hps_cold_release_setup(void),187
10458,void hps_ccu_init(void),197
10459,void hps_ccu_enable(void),205
10460,void hps_warm_reset_by_sdm(void),223
10461,sdm_return_t hps_poll_pll_lock(uint32_t ddr_width),242
10462,sdm_return_t hps_ddr_cal_request(void),275
10463,sdm_return_t  hps_ddr_cal_clear(void),302
10464,Copyright (2019) Intel Corporation,3
10465,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10466,"void psi_scramble_enable(uint32_t seed0, uint32_t seed1, bool onlySeed0)",44
10467,void psi_scramble_disable(void),81
10468,void psi_clr_warm_rst_exit(void),108
10469,void psi_clr_warm_rst_entry(void),127
10470,void psi_clr_int(void),145
10471,bool psi_is_warm_rst_exit(uint32_t status),169
10472,bool alt_sdm_psi_is_warm_rst_entry(uint32_t status),179
10473,uint32_t alt_sdm_psi_read_intr_sts(void),184
10474,void alt_sdm_psi_unmask_warm_rst_intr(void),202
10475,void alt_sdm_psi_int_disable(void),222
10476,void alt_sdm_psi_int_enable(void),239
10477,pkc_handle_t pkc_open(){,36
10478,sdm_return_t pkc_close(pkc_handle_t pkc){,44
10479,"sdm_return_t pkc_verify_start(pkc_handle_t pkc, uint32_t* Qx, uint32_t* Qy, uint32_t* hash, uint32_t* R, uint32_t* S, pkc_curve_t curve){",60
10480,"sdm_return_t pkc_sign_start(pkc_handle_t pkc, uint32_t* hash, uint32_t* key, uint32_t* random_number, pkc_curve_t curve){",91
10481,"sdm_return_t pkc_point_multiply_start(pkc_handle_t pkc, uint32_t* Qx, uint32_t* Qy, uint32_t* multiply_by, pkc_curve_t curve){",116
10482,sdm_return_t pkc_is_busy(pkc_handle_t pkc){,141
10483,"sdm_return_t pkc_get_result(pkc_handle_t pkc, uint32_t* point_x_or_R, uint32_t* point_y_or_S_or_verify){",150
10484,Copyright (2018) Intel Corporation,3
10485,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10486,static void alt_sdm_ram_puf_poweroff(void),50
10487,void alt_sdm_ram_puf_poweroff_lock(void),76
10488,static void ram_puf_set_read_write_mode(uint32_t write_or_read),99
10489,void iid_puf_power_on(),129
10490,void iid_puf_power_off_and_discharge(),146
10491,void iid_puf_ram_setup(),161
10492,uint32_t iid_puf_read_word(uint32_t const addr),179
10493,void iid_puf_read_ram(uint32_t * const buf),190
10494,"void iid_puf_read_ram_xor(uint32_t* const xor_input,uint32_t size,uint32_t * const output_data)",206
10495,Copyright (2019) Intel Corporation,3
10496,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10497,uint8_t sdm_redundancy_bad_row_get(uint32_t device_row),58
10498,sdm_return_t sdm_redundancy_bad_row_load(void),81
10499,@param bad_row is the eFuse bad row value (1..37) of the current sector row.,113
10500,@param current_row is the current row (1..37) of the sector row.,114
10501,"static uint8_t sdm_redundancy_compute_ar_reg_encoding(const uint32_t bad_row,",119
10502,(i.e. sectors with the same CNOC Y-address value).,163
10503,@param current_row_efuse is the current sector row eFuse bad row value (1..37).,164
10504,"void sdm_redundancy_compute_sector_row_red(const uint32_t current_row_efuse,",174
10505,"sdm_return_t sdm_redundancy_cnoc_y_to_sector_row(uint8_t cnoc_y_addr, uint8_t *sector_row)",211
10506,Copyright (2019) Intel Corporation,3
10507,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10508,"static void sdm_s4_sector_config(sdm_s4_reg_info_t *regs, uint32_t sector_row,",67
10509,"sdm_return_t sdm_s4_row_config(cnoc_bus_idx_t bus, uint32_t sector,",254
10510,sdm_return_t sdm_s4_bypass(cnoc_bus_idx_t bus),375
10511,"sdm_return_t sdm_s4_sector_init(uint32_t num_sector_rows,",421
10512,void sdm_s4_write_masks(const uint32_t * masks),454
10513,void sdm_s4_write_iplengths(const uint32_t * masks),466
10514,"sdm_return_t sdm_s4_write_iptypes(cnoc_bus_idx_t bus, uint8_t thread, uint32_t const * iptypes )",480
10515,uint32_t sensor_vadc_get_nominal_voltage(uint32_t channel),52
10516,"uint32_t sensor_voltage_convert(uint32_t channel, uint32_t code_0, uint32_t raw_voltage)",107
10517,"void sensor_thermal_init(uint32_t iadclkdiv, uint32_t itsptabiasenb, uint32_t itsclkdiv, uint32_t ibiascurrentsel, uint32_t icalconfig)",130
10518,void sensor_environ_mon_init(uint32_t chan_mask),185
10519,"void sensor_thermal_write_bounds(uint32_t upper_bound, uint32_t lower_bound)",205
10520,"static uint32_t sensor_uib_thermal_read(cnoc_handle_t cnoc_handle, uint32_t uib_die)",219
10521,"static int32_t send_temp_data_to_cnt(cnoc_handle_t cnoc_handle, const cnoc_addr_t cnoc_addr, const uint32_t temp_val, int32_t err_code)",273
10522,"static void sensor_main_die_temp_send(cnoc_handle_t cnoc_handle, uint32_t uib_die, uint32_t temp_val)",323
10523,static void sensor_temp_sensor_read(cnoc_handle_t cnoc_handle),355
10524,void sensor_update_temperature_cache(),417
10525,void sensor_adc_channel(void),478
10526,"uint32_t sensor_readout_packets(uint32_t *return_temp_packet, uint32_t *resp_buff, uint32_t temp_val)",485
10527,"uint32_t sensor_read_temperature_cache(uint32_t page, uint32_t channel)",490
10528,Copyright (2019) Intel Corporation,3
10529,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10530,const uint32_t HAL_SHA_CONFIG_MASK = (ALT_SHA_CSR_CSR_HASHSRC_CLR_MSK &,43
10531,static bool sha_handle_valid(sha_handle_t handle),61
10532,sha_handle_t sha_open(void),71
10533,sdm_return_t sha_close(const sha_handle_t handle),85
10534,"sdm_return_t sha_configure(const sha_handle_t handle, sha_csr_size_t sha_size,",96
10535,"sdm_return_t sha_configure_ex(const sha_handle_t handle, sha_csr_size_t sha_size,",103
10536,"sdm_return_t sha_start(const sha_handle_t handle, bool final)",140
10537,sdm_return_t sha_finalize(const sha_handle_t handle),165
10538,sdm_return_t sha_stop(const sha_handle_t handle),178
10539,sdm_return_t sha_disable(const sha_handle_t handle),190
10540,uint32_t sha_interrupt_status(const sha_handle_t handle),195
10541,uint32_t sha_interrupt_status_unmasked(const sha_handle_t handle),202
10542,void sha_interrupt_clr(const sha_handle_t handle),209
10543,void sha_interrupt_clear_disable(const sha_handle_t handle),222
10544,sdm_return_t sha_reset(const sha_handle_t handle),237
10545,"sdm_return_t sha_read_hash(const sha_handle_t handle, uint32_t *hash, uint32_t size)",269
10546,static void sha_state_cleanup(const sha_handle_t handle) ,295
10547,"sdm_return_t sha_state_save_restore(const sha_handle_t handle,",306
10548,"sdm_return_t sha_irq_handler(sha_handle_t handle, uint32_t *hash, uint32_t size)",333
10549,Copyright (2019) Intel Corporation,3
10550,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10551,bool hal_has_hps(void),85
10552,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),90
10553,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),104
10554,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),133
10555,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),146
10556,bool hal_sdm_bootrom_check_version_valid(uint32_t version),161
10557,bool check_interrupt_response(uint32_t status_response),249
10558,uint32_t hal_dma_rd_desc_fixed(bool fixed),8
10559,uint32_t hal_dma_wr_desc_fixed(bool fixed),13
10560,Copyright (2017) Intel Corporation,3
10561,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10562,"static sdm_return_t hal_efuse_verify(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, const uint32_t readback_efuse_values[], bool skip_cache_update, bool is_last_block,",229
10563,const br_efuse_t * get_efuse_cache_ptr(void),266
10564,"sdm_return_t hal_efuse_init(br_efuse_t *p_efuse, br_efuse_t *p_efuse_reload_cache)",289
10565,"static bool __inline is_noecc_row(const uint32_t bank, const uint32_t row)",446
10566,@brief Primary eFuse read capability for both external (mbox-originated) and internal(CMF-originated) requestors.,452
10567,"sdm_return_t hal_efuse_read(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",462
10568,@param error_info is a buffer to place information about failed row writes. This buffer must be at least 20 words in size (up to 4 errors * 5 words per error),514
10569,"sdm_return_t hal_efuse_program_rows(uint32_t bank, uint32_t start_row, uint32_t * p_data, const uint32_t total_num_rows, uint32_t is_virtual_write, bool skip_cache_update, uint32_t * p_error_buf, uint32_t * p_error_buf_length, bool row_repair_enable)",519
10570,void hal_efuse_hw_disable_and_lock(void),603
10571,sdm_return_t hal_efuse_aes_key_disable_and_lock(void),625
10572,sdm_return_t hal_efuse_clr_security_fuse_cache(void),651
10573,bool hal_efuse_umk_disabled(void),659
10574,bool hal_efuse_hw_disabled(void) ,685
10575,bool hal_efuse_get_physical_write_disabled(void),701
10576,void hal_efuse_set_physical_write_disable(void),713
10577,sdm_return_t hal_efuse_reload_cache(void),723
10578,sdm_return_t hal_efuse_aes_reg_clean(void),736
10579,"static uint32_t hal_efuse_bank_to_addr (const uint32_t bank, const uint32_t row)",783
10580,static sdm_return_t hal_efuse_power_on_reset(void),794
10581,static uint16_t hal_efuse_calculate_ecc(uint32_t data),844
10582,static bool is_key_address( const uint32_t addr),875
10583,static bool is_counter_address (const uint32_t addr),890
10584,@brief This function senses/reads one row from the actual physical efuse (not cache). ,904
10585,"sdm_return_t hal_efuse_read_physical(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t favor)",914
10586,"sdm_return_t hal_efuse_dft_burn(uint32_t bank, uint32_t row, uint32_t burn_data)",982
10587,This function performs efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',1018
10588,"static sdm_return_t hal_efuse_read_bank(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row)",1026
10589,This function performs the steps to read the rows in efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',1059
10590,"static sdm_return_t hal_efuse_read_rows(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row)",1068
10591,This is only for use in this file (static) with parameter checking already done by calling routine,1097
10592,static sdm_return_t hal_efuse_read_aes_rows(const uint32_t key_index),1105
10593,static sdm_return_t hal_efuse_pre_read_bank(void),1143
10594,"static sdm_return_t hal_efuse_read_row(const uint32_t bank, const uint32_t row, uint32_t * row_read_data)",1175
10595,static void hal_efuse_post_read_bank(void),1267
10596,"sdm_return_t hal_efuse_write_bank(const uint32_t bank, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1287
10597,"static sdm_return_t hal_efuse_write_cached_efuse_bank(br_efuse_bank_t *bank_p, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows, const uint32_t bank_num)",1485
10598,"static sdm_return_t hal_fuse_program_read(uint32_t addr, uint8_t bit) {",1538
10599,"static sdm_return_t hal_efuse_pre_write_bank(const uint32_t addr, const uint8_t bit)",1573
10600,"static sdm_return_t hal_efuse_pgm_efuse(const uint32_t addr, const uint8_t bit)",1622
10601,static void hal_efuse_post_write_bank(void),1665
10602,"static sdm_return_t hal_efuse_set_fuse_byte (uint32_t addr, uint8_t data) {",1681
10603,static uint32_t hal_efuse_decode4oo8(uint8_t encoded_value) {,1710
10604,static uint32_t hal_efuse_encode4oo8(uint8_t bit_number) {,1719
10605,"static sdm_return_t hal_efuse_verify(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, const uint32_t readback_efuse_values[], bool skip_cache_update, bool is_last_block,",1743
10606,"static uint32_t hal_efuse_update_efuse_block(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, bool skip_cache_update, uint32_t error_info[], uint32_t * error_info_length, bool row_repair_enable)",1863
10607,"Called from hal_efuse_init() to determine whether or not it's necessary to read bank1-4,6 physical fuses",2048
10608,static sdm_return_t hal_efuse_init_need_physical_read(bool* phy_rd_needed),2056
10609,@param bank_ptr is a pointer to the bank array (either primary or reload cache),2103
10610,"static bool hal_efuse_bank_valid(const br_efuse_bank_t* bank_ptr, uint32_t bank_num)",2107
10611,static bool hal_efuse_reload_cache_bank_valid(uint32_t bank_num),2129
10612,bool hal_efuse_cache_bank_valid(uint32_t bank_num),2147
10613,static void hal_efuse_prep_key_read(void),2166
10614,"static sdm_return_t hal_efuse_read_key_fuses(const uint32_t favor, const uint32_t key_index)",2185
10615,sdm_return_t hal_efuse_read_aes_fuses(const uint32_t favor),2218
10616,sdm_return_t hal_efuse_read_csk_fuses(const uint32_t favor),2229
10617,"static sdm_return_t hal_efuse_program_keys(uint32_t bank, uint32_t start_row, uint32_t * p_data)",2244
10618,sdm_return_t altera_sdm_efuse_aes_root_key_write(uint32_t *p_data),2289
10619,"@param num_words number of words (ie rows) to read, should be set to match p_data buffer length",2307
10620,"sdm_return_t altera_sdm_efuse_puf_key_read(uint32_t *p_data, uint32_t num_words, uint32_t idx)",2311
10621,Copyright (2019) Intel Corporation,3
10622,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10623,"void hal_decomp_method(uintptr_t base, uint32_t method)",38
10624,"void hal_decomp_setup_2d_threads(uintptr_t base,",56
10625,Copyright (2019) Intel Corporation,3
10626,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10627,"void hal_s4_bypass_mode(uintptr_t base, bool value)",31
10628,Copyright (2019) Intel Corporation,3
10629,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10630,bool hal_sdm_has_hps(void),35
10631,bool hal_sdm_ecc_enable(void),40
10632,bool hal_sdm_cfgsta_ver_enable(void),45
10633,Copyright (2019) Intel Corporation,3
10634,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10635,"const uintptr_t * hal_sdm_aibssm_ram_ctl[3] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",30
10636,Copyright (2019) Intel Corporation,3
10637,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10638,void hal_cnoc_clk_en_set(bool value),29
10639,uintptr_t hal_cnoc_base(cnoc_bus_idx_t bus_idx),43
10640,uint32_t hal_cnoc_template_status(cnoc_bus_idx_t bus_idx),69
10641,bool hal_any_cnoc_template_stopped(),91
10642,uint32_t hal_cnoc_ctl_cpumsgctrl_mask(),98
10643,"void hal_cnoc_ctrl_warmreset_set(cnoc_handle_t handle, uint32_t bus_mask)",106
10644,Copyright (2019) Intel Corporation,3
10645,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10646,"const uintptr_t * hal_sdm_iossm_ram_ctl[2] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",30
10647,Copyright (2019) Intel Corporation,3
10648,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10649,void hal_cnt_tx_fifo_en_set(uint32_t *msg_data),32
10650,void hal_cnt_cnoc_tx_interrupt_get(uint32_t *message),48
10651,"void hal_cnt_interrupt_set(uint32_t *msg_data, bool assert)",58
10652,"void hal_cnt_multicast_enable(uint32_t *message, bool enable)",75
10653,uint32_t hal_ctl_get_reg_ram_addr(void),81
10654,uint32_t hal_ctl_set_ecc_error(uint32_t err_mode),86
10655,Copyright (2019) Intel Corporation,3
10656,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10657,"const uintptr_t * hal_sdm_uibssm_ram_ctl[2] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",29
10658,Copyright (2019) Intel Corporation,3
10659,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10660,"This function maps a cnoc node (y,x) to the node type",42
10661,cnoc_node_type_t alt_sdm_cnoc_tnm_get_node_type(const cnoc_addr_t cnoc_addr),48
10662,"int32_t alt_sdm_cnoc_tnm_read_word(const cnoc_handle_t cnoc_handle, const cnoc_addr_t cnoc_addr, const uint32_t addr, uint32_t * const data)",76
10663,"int32_t alt_sdm_cnoc_tnm_write_word(const cnoc_handle_t cnoc_handle, const cnoc_addr_t cnoc_addr, const uint32_t addr, const uint32_t data)",150
10664,uint32_t hal_dma_rd_desc_fixed(bool fixed),8
10665,uint32_t hal_dma_wr_desc_fixed(bool fixed),13
10666,Copyright (2017) Intel Corporation,3
10667,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10668,"static sdm_return_t hal_efuse_verify(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, const uint32_t readback_efuse_values[], bool skip_cache_update, bool is_last_block,",105
10669,const br_efuse_t * get_efuse_cache_ptr(void),137
10670,"static __inline__ void check_bank_validity_and_read(br_efuse_t *p_efuse,uint8_t bank)",157
10671,"sdm_return_t hal_efuse_init(br_efuse_t *p_efuse, br_efuse_t *p_efuse_reload_cache)",179
10672,static void zeroize_secret_fuse_fields(void),346
10673,@brief Primary eFuse read capability for both external (mbox-originated) and internal(CMF-originated) requestors.,399
10674,"sdm_return_t hal_efuse_read(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",409
10675,@param error_info is a buffer to place information about failed row writes. This buffer must be at least 20 words in size (up to 4 errors * 5 words per error),461
10676,"static sdm_return_t hal_efuse_program_rows_helper(uint32_t bank, uint32_t start_row, uint32_t * p_data, const uint32_t total_num_rows, uint32_t is_virtual_write, bool skip_cache_update, uint32_t * p_error_buf, uint32_t * p_error_buf_length, bool row_repair_enable)",466
10677,"sdm_return_t hal_efuse_program_rows(uint32_t bank, uint32_t start_row, uint32_t * p_data, const uint32_t total_num_rows, uint32_t is_virtual_write, bool skip_cache_update, uint32_t * p_error_buf, uint32_t * p_error_buf_length, bool row_repair_enable)",528
10678,"void hal_efuse_redundant_enable_get(const uint32_t bank, uint32_t redundant_rows_enable[2][2], uint32_t rows_left[2], uint32_t redundant_bits_enable[2][8], uint32_t bits_left[2], uint32_t bit_available[2])",565
10679,void hal_efuse_hw_disable_and_lock(void),635
10680,sdm_return_t hal_efuse_aes_key_disable_and_lock(void),654
10681,sdm_return_t hal_efuse_clr_security_fuse_cache(void),677
10682,bool hal_efuse_umk_disabled(void),716
10683,bool hal_efuse_hw_disabled(void),738
10684,bool hal_efuse_get_physical_write_disabled(void),751
10685,void hal_efuse_set_physical_write_disable(void),763
10686,sdm_return_t hal_efuse_reload_cache(void),773
10687,sdm_return_t hal_efuse_aes_reg_clean(void),786
10688,@brief This function senses/reads one row from the actual physical efuse (not cache). ,823
10689,"sdm_return_t hal_efuse_read_physical(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t favor)",833
10690,This function performs efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',895
10691,"static sdm_return_t hal_efuse_read_bank(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor)",904
10692,This function performs the steps to read the rows in efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',946
10693,"static sdm_return_t hal_efuse_read_rows(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor, const bool is_last_block)",955
10694,This is only for use in this file (static) with parameter checking already done by calling routine,984
10695,"static sdm_return_t hal_efuse_read_aes_rows(const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor)",992
10696,"static sdm_return_t hal_efuse_pre_read_bank(const uint32_t bank, const bool is_aes_key)",1045
10697,"static sdm_return_t hal_efuse_read_row(const uint32_t row, const bool is_last_row, const uint32_t favor, uint32_t * row_read_data)",1105
10698,"static sdm_return_t hal_efuse_read_aes_row(const uint32_t start_row, const uint32_t row, const bool is_last_row, const uint32_t favor)",1217
10699,static void hal_efuse_post_read_bank(void),1321
10700,"sdm_return_t hal_efuse_write_bank(const uint32_t bank, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1348
10701,"static sdm_return_t hal_efuse_write_cached_efuse_bank(br_efuse_bank_t *bank_p, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows, const uint32_t bank_num)",1450
10702,/* Here is the write operation in one efuse block ENGRQ-31325 (02 Dec 2015),1518
10703,6.    Program SCR efuse_pgm_favor to all 1s (b111111) FB285783 (MAS 3.0 Device Key Vault),1524
10704,12.    Program SCR efuse_pgm_pgmen to blow the fuse (pulse high for 20us in new Intel spec),1532
10705,13.    Repeat steps 11-12 for desired columns to be programmed. (MAS 3.0 Device Key Vault),1533
10706,14.    Repeat steps 10-13 for desired rows to be programmed. (MAS 3.0 Device Key Vault),1534
10707,static sdm_return_t hal_efuse_pre_write_bank(const uint32_t bank),1578
10708,"static sdm_return_t hal_efuse_pgm_efuse(const uint32_t bank,const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1684
10709,static void hal_efuse_post_write_bank(void),1807
10710,"static sdm_return_t hal_efuse_verify(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, const uint32_t readback_efuse_values[], bool skip_cache_update, bool is_last_block,",1877
10711,"static uint32_t hal_efuse_update_efuse_block(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, uint32_t data[], const uint32_t total_num_rows, bool skip_cache_update, uint32_t error_info[], uint32_t * error_info_length, bool row_repair_enable)",1997
10712,"static sdm_return_t hal_efuse_read_control_row(const uint32_t bank, const bool control_rows_only, const uint32_t favor)",2241
10713,"sdm_return_t hal_efuse_repairs_allowed(const uint32_t bank, const uint32_t rows[2][2], const uint32_t rows_data[2][2], const uint32_t rows_length[2],",2292
10714,"sdm_return_t hal_efuse_write_ctrl_redundancy(const uint32_t bank, const uint32_t rows[2][2], const uint32_t rows_data[2][2], const uint32_t rows_length[2], ",2515
10715,"sdm_return_t hal_efuse_write_row_redundancy_check(uint32_t fuses[], const uint32_t bank, const uint32_t rows[2][2], const uint32_t rows_data[2][2], const uint32_t rows_length[2], const uint32_t favor[], const bool skip_cache_update)",2636
10716,"sdm_return_t hal_efuse_write_bit_redundancy_check(uint32_t fuses[], const uint32_t bank, const uint32_t bits_row[2][8], const uint32_t bits_col[2][8], const uint32_t bits_length[2], const uint32_t bits_value[2][8], const uint32_t favor[], const bool skip_cache_update)",2738
10717,static void hal_efuse_sense_delay(),2836
10718,static void hal_efuse_program_to_sense_same_block_wait(void),2846
10719,static void hal_efuse_sense_to_sense_diff_block_wait(void),2854
10720,Called from hal_efuse_init() to determine whether or not it's necessary to physically sense,2860
10721,static sdm_return_t hal_efuse_init_need_physical_read(bool* phy_rd_needed),2870
10722,@param bank_ptr is a pointer to the bank array (either primary or reload cache),2925
10723,"static bool hal_efuse_bank_valid(const br_efuse_bank_t* bank_ptr, uint32_t bank_num)",2929
10724,static bool hal_efuse_reload_cache_bank_valid(uint32_t bank_num),2951
10725,bool hal_efuse_cache_bank_valid(uint32_t bank_num),2968
10726,"void hal_efuse_remap_bank_row(const uint32_t bank, const uint32_t row, uint32_t *mapped_bank, uint32_t *mapped_row)",2980
10727,sdm_return_t hal_efuse_read_aes_fuses(const uint32_t favor),3037
10728,"@param num_words number of words (ie rows) to read, should be set to match p_data buffer length",3078
10729,"sdm_return_t altera_sdm_efuse_puf_key_read(uint32_t *p_data, uint32_t num_words, uint32_t idx)",3082
10730,void sdm_efuse_sdm_sense_vr_trim_setting(uint32_t vr_trim),3190
10731,"sdm_return_t altera_sdm_pre_read_bank(const uint32_t bank, const bool is_aes_key)",3209
10732,This is only for use in this file (static) with parameter checking already done by calling routine,3262
10733,"sdm_return_t altera_sdm_read_aes_rows(const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor, const bool is_last_block)",3270
10734,"static sdm_return_t alt_read_aes_row(const uint32_t start_row, const uint32_t row, const bool is_last_row, const uint32_t favor)",3305
10735,void altera_sdm_post_read_bank(void),3409
10736,static void __inline__ aes_key_select_efuse(void),3426
10737,"sdm_return_t altera_sdm_efuse_calculate_crc1(uint32_t favor, uint32_t *const crc1value)",3438
10738,bool testfw_hook_access_allowed(void),3485
10739,"sdm_return_t testfw_hook_hal_efuse_pre_read_bank(const uint32_t bank, const bool is_aes_key)",3495
10740,void testfw_hook_hal_efuse_post_read_bank(void),3502
10741,sdm_return_t testfw_hook_hal_efuse_pre_write_bank(const uint32_t bank),3509
10742,void testfw_hook_hal_efuse_post_write_bank(void),3516
10743,@brief This function senses/reads checks rows from the actual physical efuse (not cache),3524
10744,"sdm_return_t testfw_support_hal_efuse_zero_check(uint32_t bank, uint32_t start_row, uint32_t num_rows, uint32_t favor, uint32_t * iszero)",3535
10745,Copyright (2019) Intel Corporation,3
10746,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10747,bool hal_has_hps(void),489
10748,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),494
10749,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),508
10750,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",536
10751,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),546
10752,int32_t hal_map_aib_to_physical(uint32_t logical_idx),556
10753,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),570
10754,bool hal_sdm_bootrom_check_version_valid(uint32_t version),585
10755,bool check_interrupt_response(uint32_t status_response),719
10756,Copyright (2020) Intel Corporation,3
10757,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10758,bool hal_has_hps(void),516
10759,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),521
10760,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),535
10761,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",563
10762,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),577
10763,int32_t hal_map_aib_to_physical(uint32_t logical_idx),587
10764,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),601
10765,bool hal_sdm_bootrom_check_version_valid(uint32_t version),616
10766,bool check_interrupt_response(uint32_t status_response),733
10767,Copyright (2020) Intel Corporation,3
10768,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10769,bool hal_has_hps(void),720
10770,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),725
10771,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),739
10772,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",767
10773,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),778
10774,int32_t hal_map_aib_to_physical(uint32_t logical_idx),788
10775,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),802
10776,bool hal_sdm_bootrom_check_version_valid(uint32_t version),817
10777,bool check_interrupt_response(uint32_t status_response),943
10778,Copyright (2019) Intel Corporation,3
10779,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10780,"void hal_decomp_method(uintptr_t base, uint32_t method)",39
10781,"void hal_decomp_setup_2d_threads(uintptr_t base,",57
10782,Copyright (2019) Intel Corporation,3
10783,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10784,"void hal_s4_iptypes(uintptr_t base, uint32_t bus, uint32_t thread, const uint32_t *config)",33
10785,"void hal_s4_core_ip(uintptr_t base, const uint32_t *length, const uint32_t *start)",44
10786,"void hal_s4_ip0_even(uintptr_t base, const uint32_t * ip0_even)",53
10787,"void hal_s4_ip0_odd(uintptr_t base, const uint32_t * ip_odd)",61
10788,void hal_s4_newvalue_set(uintptr_t base),86
10789,uint32_t hal_s4_newvalue_get(uintptr_t base),92
10790,"void hal_s4_num_of_frames_set(uintptr_t base, uint8_t num_of_rows)",99
10791,"void hal_s4_bypass_mode(uintptr_t base, bool value)",105
10792,"void hal_s4_sector_set(uintptr_t base, sector_index_t idx, ",113
10793,Copyright (2019) Intel Corporation,3
10794,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10795,bool hal_sdm_has_hps(void),35
10796,bool hal_sdm_ecc_enable(void),40
10797,bool hal_sdm_cfgsta_ver_enable(void),45
10798,Copyright (2019) Intel Corporation,3
10799,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10800,"const uintptr_t * hal_sdm_aibssm_ram_ctl[3] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",30
10801,Copyright (2019) Intel Corporation,3
10802,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10803,"const uintptr_t * hal_sdm_dibssm_ram_ctl[2] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",29
10804,Copyright (2019) Intel Corporation,3
10805,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10806,int32_t operation_esram_tnm_reset_assert(cnoc_handle_t cnoc_handle),90
10807,int32_t operation_esram_tnm_reset_release(cnoc_handle_t cnoc_handle),115
10808,BitsReversal(,140
10809,uint32_t mask_create(uint8_t numbits),164
10810,"static int32_t bitfield32_set(uint32_t *array, int array_wordsize, int bit_offset, uint32_t set_mask, uint32_t set_data)",176
10811,"static int32_t alt_sdm_esram_data_reversal(uint16_t bitsize, const uint32_t *orig_configdata, uint32_t *reversed_configdata)",211
10812,"static int32_t alt_sdm_esram_modify_configdata(int16_t bitsize, const uint32_t *orig_configdata, uint32_t *modified_configdata)",244
10813,"int32_t alt_sdm_esram_build_repairdata(int32_t esramid, uint32_t *esram_repairdata)",296
10814,"static int32_t alt_sdm_esram_repair(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, const uint32_t *esram_repairdata)",354
10815,int32_t alt_sdm_esram_repair_all(cnoc_handle_t cnoc_handle),461
10816,"int32_t alt_sdm_esram_config_verify(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint16_t bitsize, const uint32_t *data)",503
10817,"int32_t alt_sdm_esram_config_write(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint16_t bitsize, const uint32_t *data)",624
10818,"int32_t alt_sdm_esram_config_read(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint16_t bitsize, uint32_t *data, bool shift_only)",748
10819,Copyright (2019) Intel Corporation,3
10820,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10821,"const uintptr_t * hal_sdm_iossm_ram_ctl[2] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",30
10822,Copyright (2019) Intel Corporation,3
10823,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10824,void hal_ctl_build_clear_rscen_fiso_ram_repair(uint32_t *word),38
10825,void hal_ctl_build_set_rscen_fiso_ram_repair(uint32_t *word),45
10826,void hal_ctl_build_rscen_set_fiso_ram_repair(uint32_t *word),55
10827,void hal_ctl_build_clear_ecc_csr_err_reg_ram_repair(uint32_t *word),62
10828,"void hal_serial_ctl_build_shift_repair_data(uint32_t channel, uint32_t *word1, uint32_t* word2, uint32_t* word3)",68
10829,void hal_cnt_tx_fifo_en_set(uint32_t *msg_data),81
10830,void hal_cnt_cnoc_tx_interrupt_get(uint32_t *message),97
10831,"void hal_cnt_interrupt_set(uint32_t *msg_data, bool assert)",107
10832,"void hal_cnt_multicast_enable(uint32_t *message, bool enable)",124
10833,uint32_t hal_ctl_get_reg_ram_addr(void),130
10834,uint32_t hal_ctl_set_ecc_error(uint32_t err_mode),135
10835,Copyright (2019) Intel Corporation,3
10836,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10837,"const uintptr_t * hal_sdm_uibssm_ram_ctl[2] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",29
10838,Copyright (2019) Intel Corporation,3
10839,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10840,"sdm_return_t sdm_send_cornertempsens(cnoc_handle_t cnoc_handle, uint32_t i_rd_connect, uint32_t i_tsreadsel, ",54
10841,Copyright (2019) Intel Corporation,3
10842,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10843,"This function maps a cnoc node (y,x) to the node type",43
10844,cnoc_node_type_t alt_sdm_cnoc_tnm_get_node_type(const cnoc_addr_t cnoc_addr),49
10845,"int32_t alt_sdm_cnoc_tnm_read_word(const cnoc_handle_t cnoc_handle, const cnoc_addr_t cnoc_addr, const uint32_t addr, uint32_t * const data)",77
10846,"int32_t alt_sdm_cnoc_tnm_write_word(const cnoc_handle_t cnoc_handle, const cnoc_addr_t cnoc_addr, const uint32_t addr, const uint32_t data)",160
10847,Copyright (2019) Intel Corporation,3
10848,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10849,"int32_t alt_sdm_tstnm_init(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint32_t overtemp, uint32_t dts_trim, uint32_t remote_dts_trim, uint32_t i_rd_connect, uint32_t i_tsreadsel,",67
10850,"int32_t alt_sdm_tstnm_gettemp_raw(cnoc_handle_t cnoc_handle, uint32_t param, cnoc_addr_t cnoc_addr, uint32_t *rawdata)",213
10851,"int32_t alt_sdm_tstnm_gettemp_remote_diodes(cnoc_handle_t cnoc_handle, cnoc_addr_t cnoc_addr, uint32_t *rawdata, uint32_t *sensor_cnt)",263
10852,Copyright (2019) Intel Corporation,3
10853,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10854,void hal_cnoc_clk_en_set(bool value),29
10855,uintptr_t hal_cnoc_base(cnoc_bus_idx_t bus_idx),45
10856,uint32_t hal_cnoc_template_status(cnoc_bus_idx_t bus_idx),81
10857,bool hal_any_cnoc_template_stopped(),109
10858,uint32_t hal_cnoc_ctl_cpumsgctrl_mask(),118
10859,"void hal_cnoc_ctrl_warmreset_set(cnoc_handle_t handle, uint32_t bus_mask)",126
10860,uint32_t hal_dma_rd_desc_fixed(bool fixed),6
10861,uint32_t hal_dma_wr_desc_fixed(bool fixed),12
10862,Copyright (2017) Intel Corporation,3
10863,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10864,"static sdm_return_t efuse_zero_check_operation(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows, const uint32_t repair, uint32_t * result); ",103
10865,const br_efuse_t * get_efuse_cache_ptr(void),126
10866,"sdm_return_t altera_sdm_pre_read_bank(const uint32_t bank, const bool is_aes_key)",148
10867,"static sdm_return_t alt_read_row(const uint32_t row, const bool is_last_row, const uint32_t favor, uint32_t * row_read_data)",208
10868,"static sdm_return_t alt_read_aes_row(const uint32_t row, const bool is_last_row, const uint32_t favor)",303
10869,void altera_sdm_post_read_bank(void),387
10870,void altera_program_to_sense_same_block_wait(void),408
10871,static void altera_sense_to_sense_diff_block_wait(void),417
10872,@param bank_ptr is a pointer to the bank array (either primary or reload cache),424
10873,"bool altera_sdm_efuse_is_bank_valid(const br_efuse_bank_t* bank_ptr, uint32_t bank_num)",428
10874,bool altera_sdm_efuse_reload_cache_bank_valid(uint32_t bank_num),450
10875,bool hal_efuse_cache_bank_valid(uint32_t bank_num),467
10876,Called from altera_sdm_efuse_init() to determine whether or not it's necessary to read bank1-3 physical fuses,481
10877,static sdm_return_t altera_sdm_efuse_init_need_physical_read(bool* phy_rd_needed),489
10878,"sdm_return_t hal_efuse_init(br_efuse_t *p_efuse, br_efuse_t *p_efuse_reload_cache)",536
10879,This function performs efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',699
10880,"static sdm_return_t altera_sdm_read_bank(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor)",708
10881,This function performs the steps to read the rows in efuse sensing (not AES rows) for consecutive rows from 'start' to 'last',750
10882,"static sdm_return_t altera_sdm_read_rows(uint32_t data[], const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor, const bool is_last_block)",759
10883,static sdm_return_t altera_sdm_pre_write_bank(const uint32_t bank),790
10884,static void altera_sdm_post_write_bank(void),865
10885,"static sdm_return_t altera_sdm_pgm_efuse(const uint32_t start_row, const uint32_t data[], ",917
10886,"sdm_return_t hal_efuse_write_bank(const uint32_t bank, const uint32_t start_row, const uint32_t data[], const uint32_t total_num_rows)",1022
10887,"STATIC sdm_return_t altera_sdm_write_cached_efuse_bank(br_efuse_bank_t *bank_p, const uint32_t start_row, ",1125
10888,static int32_t altera_sdm_efuse_get_temperature(void),1174
10889,@brief Primary eFuse read capability for both external (mbox-originated) and internal(CMF-originated) requestors.,1191
10890,"sdm_return_t hal_efuse_read(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",1200
10891,@param error_info is a buffer to place information about failed row writes. This buffer must be at least 20 words in size (up to 4 errors * 5 words per error),1250
10892,"sdm_return_t hal_efuse_program_rows(uint32_t bank, uint32_t start_row, uint32_t * p_data, ",1255
10893,sdm_return_t hal_efuse_reload_cache(void),1311
10894,"static sdm_return_t efuse_zero_check_operation(const uint32_t bank, const uint32_t start_row, const uint32_t total_num_rows, const uint32_t repair, uint32_t * result)",1330
10895,@param repair_enable when set this enables repair of efuse rows (if repair rows are availiable) which read non-zero,1472
10896,"sdm_return_t altera_sdm_efuse_dft_zero_check(uint32_t bank, uint32_t start_row, uint32_t num_rows, uint32_t repair_enable, uint32_t * p_data)",1476
10897,void hal_efuse_hw_disable_and_lock(void),1513
10898,sdm_return_t hal_efuse_aes_key_disable_and_lock(void),1533
10899,sdm_return_t hal_efuse_clr_security_fuse_cache(void),1553
10900,bool hal_efuse_hw_disabled(void),1592
10901,static void __inline__ aes_key_select_efuse(void),1607
10902,sdm_return_t hal_efuse_aes_reg_clean(void),1616
10903,@brief This function senses/reads one row from the actual physical efuse (not cache).,1652
10904,"sdm_return_t hal_efuse_read_physical(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t favor)",1662
10905,"sdm_return_t hal_efuse_dft_burn(uint32_t bank, uint32_t row, uint32_t burn_data)",1730
10906,bool hal_efuse_umk_disabled(void),1767
10907,bool hal_efuse_get_physical_write_disabled(void),1786
10908,void hal_efuse_set_physical_write_disable(void),1798
10909,"@param num_words number of words (ie rows) to read, should be set to match p_data buffer length",1806
10910,"sdm_return_t altera_sdm_efuse_puf_key_read(uint32_t *p_data, uint32_t num_words, uint32_t idx)",1810
10911,"sdm_return_t altera_sdm_efuse_puf_key_write(uint32_t *p_data, uint32_t data_len, uint32_t idx)",1921
10912,sdm_return_t hal_efuse_read_aes_fuses(const uint32_t favor),1969
10913,"sdm_return_t altera_sdm_read_aes_rows(const uint32_t bank, const uint32_t start_row, const uint32_t end_row, const uint32_t favor, const bool is_last_block)",2017
10914,"void hal_efuse_remap_bank_row(const uint32_t bank, const uint32_t row, uint32_t *mapped_bank, uint32_t *mapped_row)",2046
10915,"static uint32_t hal_efuse_update_efuse_block(uint32_t fuses[], const uint32_t bank, const uint32_t start_row, ",2065
10916,"static sdm_return_t altera_sdm_efuse_read_control_row(const uint32_t bank, const bool control_rows_only, const uint32_t favor)",2249
10917,"static sdm_return_t hal_efuse_repairs_allowed(const uint32_t bank, const uint32_t rows[], const uint32_t data_length, uint32_t * new_efuse_control_row_data)",2291
10918,"static sdm_return_t hal_efuse_write_ctrl_redundancy(uint32_t fuses[], const uint32_t bank, const uint32_t rows[], const uint32_t data[], const uint32_t data_length, const uint32_t favor, uint32_t new_efuse_control_row, bool skip_cache_update)",2407
10919,"uint32_t hal_efuse_redundant_enable_get(const uint32_t bank, uint32_t redundant_rows_enable[4])",2575
10920,Copyright (2019) Intel Corporation,3
10921,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10922,Copyright (2019) Intel Corporation,3
10923,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10924,bool hal_has_hps(void),147
10925,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),153
10926,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),168
10927,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",216
10928,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),229
10929,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),242
10930,bool hal_sdm_bootrom_check_version_valid(uint32_t version),258
10931,bool check_interrupt_response(uint32_t status_response),377
10932,check_device_t hal_check_device(void),393
10933,uint32_t hal_max_channels(void),398
10934,Copyright (2019) Intel Corporation,3
10935,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10936,bool hal_has_hps(void),172
10937,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),177
10938,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),192
10939,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",240
10940,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),253
10941,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),266
10942,bool hal_sdm_bootrom_check_version_valid(uint32_t version),282
10943,bool check_interrupt_response(uint32_t status_response),401
10944,check_device_t hal_check_device(void),417
10945,uint32_t hal_max_channels(void),422
10946,Copyright (2019) Intel Corporation,3
10947,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10948,bool hal_has_hps(void),255
10949,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),260
10950,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),275
10951,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",332
10952,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),345
10953,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),358
10954,bool hal_sdm_bootrom_check_version_valid(uint32_t version),373
10955,bool check_interrupt_response(uint32_t status_response),497
10956,check_device_t hal_check_device(void),513
10957,uint32_t hal_max_channels(void),518
10958,Copyright (2019) Intel Corporation,3
10959,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10960,bool hal_has_hps(void),299
10961,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),304
10962,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),319
10963,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",367
10964,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),379
10965,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),392
10966,bool hal_sdm_bootrom_check_version_valid(uint32_t version),407
10967,bool check_interrupt_response(uint32_t status_response),530
10968,check_device_t hal_check_device(void),546
10969,uint32_t hal_max_channels(void),551
10970,Copyright (2019) Intel Corporation,3
10971,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10972,bool hal_has_hps(void),374
10973,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),379
10974,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),394
10975,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",456
10976,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),470
10977,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),483
10978,bool hal_sdm_bootrom_check_version_valid(uint32_t version),498
10979,bool check_interrupt_response(uint32_t status_response),625
10980,check_device_t hal_check_device(void),641
10981,uint32_t hal_max_channels(void),646
10982,Copyright (2019) Intel Corporation,3
10983,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10984,bool hal_has_hps(void),403
10985,uint8_t  hal_map_cnoc_addr_to_bus(const cnoc_addr_t cnoc_addr),408
10986,uint8_t hal_cnoc_y_to_sector_row(uint8_t cnoc_y_addr),423
10987,"void hal_get_sector_row_info(uint32_t *num_sector_rows, uint32_t *num_rows_per_sector)",484
10988,int32_t hal_map_aib_to_logical(int32_t aib_idx_base0),497
10989,uint32_t hal_map_uib_to_logical(int32_t uib_idx_base0),510
10990,bool hal_sdm_bootrom_check_version_valid(uint32_t version),525
10991,bool check_interrupt_response(uint32_t status_response),645
10992,check_device_t hal_check_device(void),661
10993,uint32_t hal_max_channels(void),666
10994,Copyright (2019) Intel Corporation,3
10995,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
10996,"void hal_decomp_method(uintptr_t base, uint32_t method)",39
10997,"void hal_decomp_setup_2d_threads(uintptr_t base,",56
10998,Copyright (2019) Intel Corporation,3
10999,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
11000,"void hal_s4_iptypes(uintptr_t base, uint32_t bus, uint32_t thread, const uint32_t *config)",33
11001,"void hal_s4_masks(uintptr_t base, const uint32_t * masks)",43
11002,"void hal_s4_iplengths(uintptr_t base, const uint32_t * iplengths)",51
11003,void hal_s4_newvalue_set(uintptr_t base),59
11004,uint32_t hal_s4_newvalue_get(uintptr_t base),65
11005,"void hal_s4_num_of_frames_set(uintptr_t base, uint8_t num_of_rows)",72
11006,"void hal_s4_bypass_mode(uintptr_t base, bool value)",78
11007,"void hal_s4_sector_set(uintptr_t base, sector_index_t idx, uint32_t start_row, const uint32_t * shift_row, const uint32_t * fuse_row)",84
11008,Copyright (2019) Intel Corporation,3
11009,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
11010,bool hal_sdm_has_hps(void),40
11011,bool hal_sdm_ecc_enable(void),45
11012,bool hal_sdm_cfgsta_ver_enable(void),50
11013,Copyright (2019) Intel Corporation,3
11014,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
11015,"const uintptr_t * hal_sdm_aibssm_ram_ctl[3] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",30
11016,Copyright (2019) Intel Corporation,3
11017,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
11018,"const uintptr_t * hal_sdm_dibssm_ram_ctl[2] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",29
11019,Copyright (2019) Intel Corporation,3
11020,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
11021,"const uintptr_t * hal_sdm_iossm_ram_ctl[2] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",30
11022,Copyright (2019) Intel Corporation,3
11023,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
11024,void hal_ctl_build_clear_rscen_fiso_ram_repair(uint32_t *word),38
11025,void hal_ctl_build_set_rscen_fiso_ram_repair(uint32_t *word),45
11026,void hal_ctl_build_rscen_set_fiso_ram_repair(uint32_t *word),55
11027,void hal_ctl_build_clear_ecc_csr_err_reg_ram_repair(uint32_t *word),62
11028,"void hal_serial_ctl_build_shift_repair_data(uint32_t channel, uint32_t *word1, uint32_t* word2, uint32_t* word3)",68
11029,void hal_cnt_tx_fifo_en_set(uint32_t *msg_data),81
11030,void hal_cnt_cnoc_tx_interrupt_get(uint32_t *message),97
11031,"void hal_cnt_interrupt_set(uint32_t *msg_data, bool assert)",106
11032,"void hal_cnt_multicast_enable(uint32_t *message, bool enable)",124
11033,uint32_t hal_ctl_get_reg_ram_addr(void),130
11034,uint32_t hal_ctl_set_ecc_error(uint32_t err_mode),135
11035,Copyright (2019) Intel Corporation,3
11036,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
11037,"const uintptr_t * hal_sdm_uibssm_ram_ctl[2] = {(uintptr_t *) ALT_CTL_REG_RAM_0_ADDR,",29
11038,Copyright (2019) Intel Corporation,3
11039,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
11040,"int32_t alt_sdm_cnoc_tnm_write_word(const cnoc_handle_t cnoc_handle, const cnoc_addr_t cnoc_addr, const uint32_t addr, const uint32_t data)",42
11041,"bool hal_multiword_compare(const uint32_t* const a, const uint32_t* const b, uint32_t count_words){",16
11042,"void multiword_copy(uint32_t* dest, const uint32_t* const src, uint32_t count_words){",13
11043,void alt_irq_init ( const void* base ),80
11044,void alt_sys_init( void ),91
11045,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11046,"* copy of this software and associated documentation files (the ""Software""),  *",9
11047,static void alt_avalon_timer_sc_irq (void* base),54
11048,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
11049,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
11050,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11051,"* copy of this software and associated documentation files (the ""Software""),  *",9
11052,int alt_timestamp_start(void),64
11053,alt_timestamp_type alt_timestamp(void),100
11054,alt_u32 alt_timestamp_freq(void),138
11055,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11056,"* copy of this software and associated documentation files (the ""Software""),  *",9
11057,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11058,"* copy of this software and associated documentation files (the ""Software""),  *",9
11059,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
11060,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
11061,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
11062,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11063,"* copy of this software and associated documentation files (the ""Software""),  *",9
11064,void alt_vic_irq_init (alt_vic_dev* pdev),45
11065,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11066,"* copy of this software and associated documentation files (the ""Software""),  *",9
11067,"int alt_ic_isr_register(alt_u32 ic_id,",59
11068,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11069,"* copy of this software and associated documentation files (the ""Software""),  *",9
11070,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
11071,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11072,"* copy of this software and associated documentation files (the ""Software""),  *",9
11073,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
11074,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
11075,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
11076,void altera_nios2_gen2_irq_init(void) ,34
11077,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11078,"* copy of this software and associated documentation files (the ""Software""),  *",9
11079,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
11080,unsigned int alt_busy_sleep (unsigned int us),52
11081,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11082,"* copy of this software and associated documentation files (the ""Software""),  *",9
11083,int ALT_CLOSE (int fildes),42
11084,int ALT_CLOSE (int fildes),64
11085,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11086,"* copy of this software and associated documentation files (the ""Software""),  *",9
11087,"void alt_dcache_flush (void* start, alt_u32 len)",46
11088,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11089,"* copy of this software and associated documentation files (the ""Software""),  *",9
11090,void alt_dcache_flush_all (void),41
11091,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
11092,"* copy of this software and associated documentation files (the ""Software""),  *",9
11093,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
11094,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11095,"* copy of this software and associated documentation files (the ""Software""),  *",9
11096,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
11097,ALT_SEM(alt_fd_list_lock),109
11098,int alt_dev_reg (alt_dev* dev),151
11099,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11100,"* copy of this software and associated documentation files (the ""Software""),  *",9
11101,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
11102,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11103,"* copy of this software and associated documentation files (the ""Software""),  *",9
11104,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
11105,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11106,"* copy of this software and associated documentation files (the ""Software""),  *",9
11107,alt_dma_txchan alt_dma_txchan_open (const char* name),51
11108,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11109,"* copy of this software and associated documentation files (the ""Software""),  *",9
11110,void _do_ctors(void),58
11111,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11112,"* copy of this software and associated documentation files (the ""Software""),  *",9
11113,void _do_dtors(void),58
11114,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
11115,"* copy of this software and associated documentation files (the ""Software""),  *",9
11116,alt_ecc_fatal_exception_register(alt_u32 handler),66
11117,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11118,"* copy of this software and associated documentation files (the ""Software""),  *",9
11119,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11120,"* copy of this software and associated documentation files (the ""Software""),  *",9
11121,void __env_lock ( struct _reent *_r ),43
11122,void __env_unlock ( struct _reent *_r ),51
11123,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11124,"* copy of this software and associated documentation files (the ""Software""),  *",9
11125,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11126,"* copy of this software and associated documentation files (the ""Software""),  *",9
11127,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
11128,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11129,"* copy of this software and associated documentation files (the ""Software""),  *",9
11130,void ALT_EXIT (int exit_code),52
11131,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11132,"* copy of this software and associated documentation files (the ""Software""),  *",9
11133,"int ALT_FCNTL (int file, int cmd, ...)",66
11134,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11135,"* copy of this software and associated documentation files (the ""Software""),  *",9
11136,int alt_fd_lock (alt_fd* fd),54
11137,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11138,"* copy of this software and associated documentation files (the ""Software""),  *",9
11139,int alt_fd_unlock (alt_fd* fd),52
11140,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11141,"* copy of this software and associated documentation files (the ""Software""),  *",9
11142,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
11143,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11144,"* copy of this software and associated documentation files (the ""Software""),  *",9
11145,alt_dev* alt_find_file (const char* name),54
11146,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11147,"* copy of this software and associated documentation files (the ""Software""),  *",9
11148,alt_flash_fd* alt_flash_open_dev(const char* name),49
11149,void alt_flash_close_dev(alt_flash_fd* fd),61
11150,int alt_flash_device_register( alt_flash_fd* fd),70
11151,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11152,"* copy of this software and associated documentation files (the ""Software""),  *",9
11153,int ALT_FORK (void),45
11154,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11155,"* copy of this software and associated documentation files (the ""Software""),  *",9
11156,"int ALT_FSTAT (int file, struct stat *st)",63
11157,"int ALT_FSTAT (int file, struct stat *st)",93
11158,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11159,"* copy of this software and associated documentation files (the ""Software""),  *",9
11160,int alt_fs_reg (alt_dev* dev),57
11161,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11162,"* copy of this software and associated documentation files (the ""Software""),  *",9
11163,alt_getchar(void),51
11164,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11165,"* copy of this software and associated documentation files (the ""Software""),  *",9
11166,int ALT_GETPID (void),43
11167,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11168,"* copy of this software and associated documentation files (the ""Software""),  *",9
11169,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
11170,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
11171,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11172,"* copy of this software and associated documentation files (the ""Software""),  *",9
11173,int alt_get_fd (alt_dev* dev),54
11174,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11175,"* copy of this software and associated documentation files (the ""Software""),  *",9
11176,/* The compiler inserts calls to mcount() at the start of,48
11177,static __inline__ void * mcount_allocate(unsigned int size),133
11178,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
11179,static int nios2_pcsample_init(void),218
11180,static alt_u32 nios2_pcsample(void* context),250
11181,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11182,"* copy of this software and associated documentation files (the ""Software""),  *",9
11183,"void alt_icache_flush (void* start, alt_u32 len)",42
11184,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11185,"* copy of this software and associated documentation files (the ""Software""),  *",9
11186,void alt_icache_flush_all (void),41
11187,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11188,"* copy of this software and associated documentation files (the ""Software""),  *",9
11189,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
11190,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
11191,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
11192,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
11193,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11194,"* copy of this software and associated documentation files (the ""Software""),  *",9
11195,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
11196,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
11197,"* copy of this software and associated documentation files (the ""Software""),  *",9
11198,alt_exception_result (*alt_instruction_exception_handler),49
11199,int alt_instruction_exception_entry (alt_u32 exception_pc),53
11200,alt_instruction_exception_entry (alt_u32 exception_pc),68
11201,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
11202,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
11203,"* copy of this software and associated documentation files (the ""Software""),  *",9
11204,void alt_instruction_exception_register (,73
11205,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11206,"* copy of this software and associated documentation files (the ""Software""),  *",9
11207,"int ALT_IOCTL (int file, int req, void* arg)",68
11208,"int ALT_IOCTL (int file, int req, void* arg)",106
11209,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11210,"* copy of this software and associated documentation files (the ""Software""),  *",9
11211,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
11212,"void alt_io_redirect(const char* stdout_dev, ",85
11213,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11214,"* copy of this software and associated documentation files (the ""Software""),  *",9
11215,void alt_irq_handler (void),80
11216,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11217,"* copy of this software and associated documentation files (the ""Software""),  *",9
11218,"int alt_irq_register (alt_u32 id, ",75
11219,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11220,"* copy of this software and associated documentation files (the ""Software""),  *",9
11221,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11222,"* copy of this software and associated documentation files (the ""Software""),  *",9
11223,int ALT_ISATTY (int file),50
11224,int ALT_ISATTY (int file),84
11225,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11226,"* copy of this software and associated documentation files (the ""Software""),  *",9
11227,"int ALT_KILL (int pid, int sig)",49
11228,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11229,"* copy of this software and associated documentation files (the ""Software""),  *",9
11230,"int ALT_LINK ( char *existing, char *new)",45
11231,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
11232,"* copy of this software and associated documentation files (the ""Software""),  *",9
11233,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
11234,void alt_load (void),67
11235,"void alt_log_txchar(int c,char *base)",95
11236,"void alt_log_repchar(char c,int r,int base)",106
11237,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
11238,"int alt_log_printf_proc(const char *fmt, ... )",344
11239,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
11240,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
11241,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
11242,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
11243,"void alt_log_write(const void *ptr, size_t len)",440
11244,void alt_log_system_clock(),474
11245,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
11246,"* copy of this software and associated documentation files (the ""Software""),  *",9
11247,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
11248,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
11249,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
11250,"* copy of this software and associated documentation files (the ""Software""),  *",9
11251,void alt_main (void),82
11252,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11253,"* copy of this software and associated documentation files (the ""Software""),  *",9
11254,void __malloc_lock ( struct _reent *_r ),42
11255,void __malloc_unlock ( struct _reent *_r ),50
11256,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11257,"* copy of this software and associated documentation files (the ""Software""),  *",9
11258,"int ALT_OPEN (const char* file, int flags, int mode)",41
11259,static int alt_file_locked (alt_fd* fd),64
11260,"int ALT_OPEN (const char* file, int flags, int mode)",105
11261,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11262,"* copy of this software and associated documentation files (the ""Software""),  *",9
11263,"alt_printf(const char* fmt, ... )",51
11264,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11265,"* copy of this software and associated documentation files (the ""Software""),  *",9
11266,alt_putchar(int c),50
11267,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11268,"* copy of this software and associated documentation files (the ""Software""),  *",9
11269,alt_putcharbuf(int c),58
11270,alt_putbufflush(),73
11271,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11272,"* copy of this software and associated documentation files (the ""Software""),  *",9
11273,alt_putstr(const char* str),52
11274,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11275,"* copy of this software and associated documentation files (the ""Software""),  *",9
11276,"int ALT_READ (int file, void *ptr, size_t len)",58
11277,"int ALT_READ (int file, void *ptr, size_t len)",82
11278,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11279,"* copy of this software and associated documentation files (the ""Software""),  *",9
11280,void alt_release_fd (int fd),44
11281,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
11282,"* copy of this software and associated documentation files (the ""Software""),  *",9
11283,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
11284,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
11285,"* copy of this software and associated documentation files (the ""Software""),  *",9
11286,"alt_remap_uncached(void* ptr, alt_u32 len)",49
11287,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11288,"* copy of this software and associated documentation files (the ""Software""),  *",9
11289,"int ALT_RENAME (char *existing, char *new)",45
11290,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11291,"* copy of this software and associated documentation files (the ""Software""),  *",9
11292,caddr_t ALT_SBRK (int incr),68
11293,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11294,"* copy of this software and associated documentation files (the ""Software""),  *",9
11295,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
11296,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11297,"* copy of this software and associated documentation files (the ""Software""),  *",9
11298,"int ALT_STAT (const char *file, struct stat *st)",49
11299,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11300,"* copy of this software and associated documentation files (the ""Software""),  *",9
11301,void alt_alarm_stop (alt_alarm* alarm),66
11302,void alt_tick (void),87
11303,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11304,"* copy of this software and associated documentation files (the ""Software""),  *",9
11305,clock_t ALT_TIMES (struct tms *buf),51
11306,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
11307,"* copy of this software and associated documentation files (the ""Software""),  *",9
11308,alt_uncached_free(volatile void* ptr),40
11309,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
11310,"* copy of this software and associated documentation files (the ""Software""),  *",9
11311,alt_uncached_malloc(size_t size),42
11312,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11313,"* copy of this software and associated documentation files (the ""Software""),  *",9
11314,int ALT_UNLINK (char *name),45
11315,int ALT_USLEEP (useconds_t us),46
11316,unsigned int ALT_USLEEP (unsigned int us),48
11317,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11318,"* copy of this software and associated documentation files (the ""Software""),  *",9
11319,int ALT_WAIT (int *status),44
11320,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11321,"* copy of this software and associated documentation files (the ""Software""),  *",9
11322,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
11323,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
11324,void alt_irq_init ( const void* base ),80
11325,void alt_sys_init( void ),91
11326,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11327,"* copy of this software and associated documentation files (the ""Software""),  *",9
11328,static void alt_avalon_timer_sc_irq (void* base),54
11329,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
11330,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
11331,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11332,"* copy of this software and associated documentation files (the ""Software""),  *",9
11333,int alt_timestamp_start(void),64
11334,alt_timestamp_type alt_timestamp(void),100
11335,alt_u32 alt_timestamp_freq(void),138
11336,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11337,"* copy of this software and associated documentation files (the ""Software""),  *",9
11338,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11339,"* copy of this software and associated documentation files (the ""Software""),  *",9
11340,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
11341,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
11342,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
11343,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11344,"* copy of this software and associated documentation files (the ""Software""),  *",9
11345,void alt_vic_irq_init (alt_vic_dev* pdev),45
11346,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11347,"* copy of this software and associated documentation files (the ""Software""),  *",9
11348,"int alt_ic_isr_register(alt_u32 ic_id,",59
11349,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11350,"* copy of this software and associated documentation files (the ""Software""),  *",9
11351,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
11352,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11353,"* copy of this software and associated documentation files (the ""Software""),  *",9
11354,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
11355,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
11356,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
11357,void altera_nios2_gen2_irq_init(void) ,34
11358,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11359,"* copy of this software and associated documentation files (the ""Software""),  *",9
11360,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
11361,unsigned int alt_busy_sleep (unsigned int us),52
11362,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11363,"* copy of this software and associated documentation files (the ""Software""),  *",9
11364,int ALT_CLOSE (int fildes),42
11365,int ALT_CLOSE (int fildes),64
11366,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11367,"* copy of this software and associated documentation files (the ""Software""),  *",9
11368,"void alt_dcache_flush (void* start, alt_u32 len)",46
11369,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11370,"* copy of this software and associated documentation files (the ""Software""),  *",9
11371,void alt_dcache_flush_all (void),41
11372,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
11373,"* copy of this software and associated documentation files (the ""Software""),  *",9
11374,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
11375,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11376,"* copy of this software and associated documentation files (the ""Software""),  *",9
11377,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
11378,ALT_SEM(alt_fd_list_lock),109
11379,int alt_dev_reg (alt_dev* dev),151
11380,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11381,"* copy of this software and associated documentation files (the ""Software""),  *",9
11382,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
11383,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11384,"* copy of this software and associated documentation files (the ""Software""),  *",9
11385,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
11386,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11387,"* copy of this software and associated documentation files (the ""Software""),  *",9
11388,alt_dma_txchan alt_dma_txchan_open (const char* name),51
11389,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11390,"* copy of this software and associated documentation files (the ""Software""),  *",9
11391,void _do_ctors(void),58
11392,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11393,"* copy of this software and associated documentation files (the ""Software""),  *",9
11394,void _do_dtors(void),58
11395,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
11396,"* copy of this software and associated documentation files (the ""Software""),  *",9
11397,alt_ecc_fatal_exception_register(alt_u32 handler),66
11398,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11399,"* copy of this software and associated documentation files (the ""Software""),  *",9
11400,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11401,"* copy of this software and associated documentation files (the ""Software""),  *",9
11402,void __env_lock ( struct _reent *_r ),43
11403,void __env_unlock ( struct _reent *_r ),51
11404,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11405,"* copy of this software and associated documentation files (the ""Software""),  *",9
11406,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11407,"* copy of this software and associated documentation files (the ""Software""),  *",9
11408,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
11409,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11410,"* copy of this software and associated documentation files (the ""Software""),  *",9
11411,void ALT_EXIT (int exit_code),52
11412,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11413,"* copy of this software and associated documentation files (the ""Software""),  *",9
11414,"int ALT_FCNTL (int file, int cmd, ...)",66
11415,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11416,"* copy of this software and associated documentation files (the ""Software""),  *",9
11417,int alt_fd_lock (alt_fd* fd),54
11418,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11419,"* copy of this software and associated documentation files (the ""Software""),  *",9
11420,int alt_fd_unlock (alt_fd* fd),52
11421,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11422,"* copy of this software and associated documentation files (the ""Software""),  *",9
11423,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
11424,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11425,"* copy of this software and associated documentation files (the ""Software""),  *",9
11426,alt_dev* alt_find_file (const char* name),54
11427,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11428,"* copy of this software and associated documentation files (the ""Software""),  *",9
11429,alt_flash_fd* alt_flash_open_dev(const char* name),49
11430,void alt_flash_close_dev(alt_flash_fd* fd),61
11431,int alt_flash_device_register( alt_flash_fd* fd),70
11432,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11433,"* copy of this software and associated documentation files (the ""Software""),  *",9
11434,int ALT_FORK (void),45
11435,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11436,"* copy of this software and associated documentation files (the ""Software""),  *",9
11437,"int ALT_FSTAT (int file, struct stat *st)",63
11438,"int ALT_FSTAT (int file, struct stat *st)",93
11439,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11440,"* copy of this software and associated documentation files (the ""Software""),  *",9
11441,int alt_fs_reg (alt_dev* dev),57
11442,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11443,"* copy of this software and associated documentation files (the ""Software""),  *",9
11444,alt_getchar(void),51
11445,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11446,"* copy of this software and associated documentation files (the ""Software""),  *",9
11447,int ALT_GETPID (void),43
11448,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11449,"* copy of this software and associated documentation files (the ""Software""),  *",9
11450,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
11451,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
11452,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11453,"* copy of this software and associated documentation files (the ""Software""),  *",9
11454,int alt_get_fd (alt_dev* dev),54
11455,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11456,"* copy of this software and associated documentation files (the ""Software""),  *",9
11457,/* The compiler inserts calls to mcount() at the start of,48
11458,static __inline__ void * mcount_allocate(unsigned int size),133
11459,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
11460,static int nios2_pcsample_init(void),218
11461,static alt_u32 nios2_pcsample(void* context),250
11462,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11463,"* copy of this software and associated documentation files (the ""Software""),  *",9
11464,"void alt_icache_flush (void* start, alt_u32 len)",42
11465,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11466,"* copy of this software and associated documentation files (the ""Software""),  *",9
11467,void alt_icache_flush_all (void),41
11468,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11469,"* copy of this software and associated documentation files (the ""Software""),  *",9
11470,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
11471,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
11472,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
11473,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
11474,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11475,"* copy of this software and associated documentation files (the ""Software""),  *",9
11476,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
11477,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
11478,"* copy of this software and associated documentation files (the ""Software""),  *",9
11479,alt_exception_result (*alt_instruction_exception_handler),49
11480,int alt_instruction_exception_entry (alt_u32 exception_pc),53
11481,alt_instruction_exception_entry (alt_u32 exception_pc),68
11482,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
11483,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
11484,"* copy of this software and associated documentation files (the ""Software""),  *",9
11485,void alt_instruction_exception_register (,73
11486,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11487,"* copy of this software and associated documentation files (the ""Software""),  *",9
11488,"int ALT_IOCTL (int file, int req, void* arg)",68
11489,"int ALT_IOCTL (int file, int req, void* arg)",106
11490,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11491,"* copy of this software and associated documentation files (the ""Software""),  *",9
11492,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
11493,"void alt_io_redirect(const char* stdout_dev, ",85
11494,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11495,"* copy of this software and associated documentation files (the ""Software""),  *",9
11496,void alt_irq_handler (void),80
11497,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11498,"* copy of this software and associated documentation files (the ""Software""),  *",9
11499,"int alt_irq_register (alt_u32 id, ",75
11500,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11501,"* copy of this software and associated documentation files (the ""Software""),  *",9
11502,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11503,"* copy of this software and associated documentation files (the ""Software""),  *",9
11504,int ALT_ISATTY (int file),50
11505,int ALT_ISATTY (int file),84
11506,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11507,"* copy of this software and associated documentation files (the ""Software""),  *",9
11508,"int ALT_KILL (int pid, int sig)",49
11509,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11510,"* copy of this software and associated documentation files (the ""Software""),  *",9
11511,"int ALT_LINK ( char *existing, char *new)",45
11512,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
11513,"* copy of this software and associated documentation files (the ""Software""),  *",9
11514,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
11515,void alt_load (void),67
11516,"void alt_log_txchar(int c,char *base)",95
11517,"void alt_log_repchar(char c,int r,int base)",106
11518,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
11519,"int alt_log_printf_proc(const char *fmt, ... )",344
11520,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
11521,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
11522,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
11523,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
11524,"void alt_log_write(const void *ptr, size_t len)",440
11525,void alt_log_system_clock(),474
11526,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
11527,"* copy of this software and associated documentation files (the ""Software""),  *",9
11528,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
11529,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
11530,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
11531,"* copy of this software and associated documentation files (the ""Software""),  *",9
11532,void alt_main (void),82
11533,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11534,"* copy of this software and associated documentation files (the ""Software""),  *",9
11535,void __malloc_lock ( struct _reent *_r ),42
11536,void __malloc_unlock ( struct _reent *_r ),50
11537,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11538,"* copy of this software and associated documentation files (the ""Software""),  *",9
11539,"int ALT_OPEN (const char* file, int flags, int mode)",41
11540,static int alt_file_locked (alt_fd* fd),64
11541,"int ALT_OPEN (const char* file, int flags, int mode)",105
11542,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11543,"* copy of this software and associated documentation files (the ""Software""),  *",9
11544,"alt_printf(const char* fmt, ... )",51
11545,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11546,"* copy of this software and associated documentation files (the ""Software""),  *",9
11547,alt_putchar(int c),50
11548,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11549,"* copy of this software and associated documentation files (the ""Software""),  *",9
11550,alt_putcharbuf(int c),58
11551,alt_putbufflush(),73
11552,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11553,"* copy of this software and associated documentation files (the ""Software""),  *",9
11554,alt_putstr(const char* str),52
11555,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11556,"* copy of this software and associated documentation files (the ""Software""),  *",9
11557,"int ALT_READ (int file, void *ptr, size_t len)",58
11558,"int ALT_READ (int file, void *ptr, size_t len)",82
11559,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11560,"* copy of this software and associated documentation files (the ""Software""),  *",9
11561,void alt_release_fd (int fd),44
11562,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
11563,"* copy of this software and associated documentation files (the ""Software""),  *",9
11564,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
11565,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
11566,"* copy of this software and associated documentation files (the ""Software""),  *",9
11567,"alt_remap_uncached(void* ptr, alt_u32 len)",49
11568,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11569,"* copy of this software and associated documentation files (the ""Software""),  *",9
11570,"int ALT_RENAME (char *existing, char *new)",45
11571,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11572,"* copy of this software and associated documentation files (the ""Software""),  *",9
11573,caddr_t ALT_SBRK (int incr),68
11574,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11575,"* copy of this software and associated documentation files (the ""Software""),  *",9
11576,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
11577,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11578,"* copy of this software and associated documentation files (the ""Software""),  *",9
11579,"int ALT_STAT (const char *file, struct stat *st)",49
11580,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11581,"* copy of this software and associated documentation files (the ""Software""),  *",9
11582,void alt_alarm_stop (alt_alarm* alarm),66
11583,void alt_tick (void),87
11584,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11585,"* copy of this software and associated documentation files (the ""Software""),  *",9
11586,clock_t ALT_TIMES (struct tms *buf),51
11587,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
11588,"* copy of this software and associated documentation files (the ""Software""),  *",9
11589,alt_uncached_free(volatile void* ptr),40
11590,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
11591,"* copy of this software and associated documentation files (the ""Software""),  *",9
11592,alt_uncached_malloc(size_t size),42
11593,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11594,"* copy of this software and associated documentation files (the ""Software""),  *",9
11595,int ALT_UNLINK (char *name),45
11596,int ALT_USLEEP (useconds_t us),46
11597,unsigned int ALT_USLEEP (unsigned int us),48
11598,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11599,"* copy of this software and associated documentation files (the ""Software""),  *",9
11600,int ALT_WAIT (int *status),44
11601,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11602,"* copy of this software and associated documentation files (the ""Software""),  *",9
11603,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
11604,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
11605,"STATIC void cnoc_rx_crete_isr(uint32_t addr_reg, uintptr_t cur_pkt_start_addr,",113
11606,"STATIC void cnoc_rx_main_isr(uint32_t addr_reg,  uintptr_t cur_pkt_start_addr,",115
11607,STATIC aib_return_t cnoc_msi_main_cmd_req_handler_init(,117
11608,STATIC aib_return_t cnoc_msi_crete_cmd_req_handler_init(,119
11609,"STATIC void put_msg_2_ring_buf_generic(cnoc_rx_dev_t* p_cnoc_rx_dev,",123
11610,aib_return_t cnoc_rx_crete_init(,137
11611,aib_return_t cnoc_rx_main_init(,232
11612,void iocsr_areg6_init(void),322
11613,STATIC aib_return_t cnoc_msi_crete_cmd_req_handler_init(,344
11614,STATIC aib_return_t cnoc_msi_main_cmd_req_handler_init(,373
11615,STATIC void cnoc_rx_isr(void *context),396
11616,"STATIC void cnoc_rx_crete_isr(uint32_t addr_reg,  uintptr_t cur_pkt_start_addr,",544
11617,"STATIC void cnoc_rx_main_isr(uint32_t addr_reg, uintptr_t cur_pkt_start_addr,",667
11618,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",827
11619,bool is_main_ring_buf_empty(),850
11620,void put_msg_2_crete_ring_buf(,869
11621,bool is_crete_ring_buf_empty(),894
11622,void put_msg_2_ring_buf_crete_dwnld(,912
11623,"void put_msg_2_ring_buf_generic(cnoc_rx_dev_t* p_cnoc_rx_dev, uint32_t addr_reg,",934
11624,uint32_t cnoc_rx_main_sync_count_get(void),988
11625,void cnoc_rx_main_sync_count_clear(void),998
11626,aib_return_t cnoc_rx_crete_register_read_callback(,1010
11627,void supervisory_control_loop(void),1035
11628,void cnoc_tx_crete_init(void),80
11629,void cnoc_tx_main_init(void),122
11630,void cnoc_tx_main_irq_assert(void),175
11631,uint8_t cnoc_tx_main_irq_status(void),190
11632,void cnoc_tx_main_irq_deassert(void),200
11633,"aib_return_t cnoc_tx_crete_transmit(uint32_t *pkt_buffer,",225
11634,"aib_return_t cnoc_tx_main_transmit(uint32_t *pkt_buffer, uint32_t payload_words)",294
11635,aib_return_t send_msg_2_crete(,351
11636,"aib_return_t cnoc_tx_crete_download( const uint32_t *src_buf_addr,",385
11637,bool cnoc_tx_crete_busy(void),483
11638,STATIC void cnoc_tx_main_isr(void *context),497
11639,"STATIC void process_cjtag_command(uint32_t cjtag_opcode, ",107
11640,STATIC uint32_t prepare_bridge_data_unload(,109
11641,STATIC void prepare_bridge_data_load(,112
11642,"STATIC void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev,",125
11643,void process_crete_dfx_function(),131
11644,"STATIC void process_cjtag_command(uint32_t cjtag_opcode,",159
11645,STATIC void clear_cjtag_command_and_databit(void),340
11646,STATIC uint32_t prepare_bridge_data_unload(,363
11647,STATIC void prepare_bridge_data_load(,409
11648,STATIC void iocsr_freeze(uint32_t ssm),443
11649,STATIC void iocsr_unfreeze(uint32_t ssm),461
11650,"STATIC void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev,",481
11651,"STATIC void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev,",502
11652,STATIC void aibssm_cnoc_return(uint32_t num_of_words),567
11653,STATIC void crete_via_aibssm_cnoc_return(uint32_t num_of_words),576
11654,STATIC void crete_cnoc_return_packet_wait(bool is_wait),585
11655,STATIC void ubump_redundancy_mux_handler_dfx(),598
11656,STATIC void IOCSR_Write(),604
11657,void aib_error_inquiry_init(void) {,47
11658,status_code_t sdm_maib_error_inquiry(,66
11659,"status_code_t append_error_inquiry_data(uint32_t* buffer, uint32_t max_words)",114
11660,status_code_t crete_maib_error_inquiry(,153
11661,aib_return_t aib_iocsr_bridge_write(void),82
11662,"aib_return_t aib_iocsr_redundancy_write(uint32_t ch_num, uint32_t ubump_num)",120
11663,iocsr_verify_result_t verify_iocsr_packet_data(uint32_t *iocsr_packet),153
11664,aib_return_t aib_iocsr_bridge_master_data_unload (IOCSR_Master_Unload_t* context),214
11665,STATIC inline void aib_update_cnoc_interrupt (void),76
11666,uint32_t aib_status_get(void),97
11667,uint32_t aib_irq_mask_get(void),107
11668,void aib_irq_mask_set(const uint32_t new_mask),117
11669,void aib_status_clear(uint32_t mask),127
11670,void aib_assert_activity(aib_activity_t activity),169
11671,void aib_deassert_activity(aib_activity_t activity),183
11672,uint32_t aib_check_activity(aib_activity_t activity),199
11673,void aib_status_update(const uint32_t new_status),216
11674,/*void aib_assert_busy (aib_busy_t busy_enable),304
11675,/*void aib_raise_status_request (uint32_t status),366
11676,"aib_return_t aib_cpu_ram_range_valid(void* addr, uint32_t size)",409
11677,"aib_return_t aib_cvp_ram_range_valid(void* addr, uint32_t size)",430
11678,"aib_return_t aib_ram_range_valid(void* addr, uint32_t size)",463
11679,aib_return_t aib_temperature_init(void),55
11680,aib_return_t aib_temperature_update(,77
11681,uint32_t aib_temperature_query(const uint32_t channel),115
11682,aib_return_t aib_temperature_query_all(,130
11683,aib_return_t aib_temperature_monitor_mode_set(,155
11684,aib_tmon_mode_t aib_temperature_monitor_mode_get(void),195
11685,aib_return_t aib_temperature_monitor_run(void),204
11686,STATIC status_code_t pio_release_maib_handler(,121
11687,STATIC status_code_t pio_assert_maib_handler(,123
11688,STATIC status_code_t pio_unfreeze_routing_handler(,125
11689,STATIC status_code_t pio_freeze_routing_handler(,127
11690,STATIC status_code_t pio_cnoc_stop_request_handler(,129
11691,STATIC status_code_t pio_enter_user_mode_handler(,131
11692,STATIC status_code_t pio_exit_user_mode_handler(,133
11693,STATIC status_code_t forward_2_crete_handler(,137
11694,STATIC status_code_t ubump_redundancy_mux_handler(,139
11695,STATIC status_code_t register_get_handler(,141
11696,STATIC status_code_t register_set_handler(,143
11697,STATIC status_code_t crete_register_get_handler(,145
11698,STATIC status_code_t crete_register_set_handler(,147
11699,STATIC status_code_t sdm_maib_wait_for_cre_boot(,149
11700,STATIC status_code_t sdm_maib_wait_for_cre_hip_conf_done(,151
11701,STATIC status_code_t sdm_maib_wait_for_cre_cal_done(,153
11702,STATIC status_code_t sdm_maib_wait_for_cre_not_busy(,155
11703,STATIC status_code_t sdm_maib_cnoc_filter_wipe(,157
11704,STATIC status_code_t sdm_maib_crete_cmd_filter(,159
11705,STATIC status_code_t sdm_read_cre_temp_sensor(,161
11706,STATIC status_code_t pio_cre_iocsr_rdy_dly_set_handler(,165
11707,STATIC status_code_t pio_cnoc_stop_done_handler(,167
11708,STATIC status_code_t notify_sdm_crete_init_handler(,169
11709,STATIC status_code_t notify_crete_hip_conf_complete_handler(,171
11710,STATIC status_code_t notify_crete_iocsr_complete_handler(,173
11711,STATIC status_code_t notify_crete_calibration_complete_handler(,175
11712,STATIC status_code_t notify_crete_not_busy_handler(,177
11713,STATIC status_code_t crete_fw_fatal_error_handler(,179
11714,STATIC status_code_t notify_aib_crete_temp_reading_handler(,181
11715,STATIC status_code_t sdm_maib_inform_crete_attached(,184
11716,static status_code_t sdm_maib_inform_crete_detached (,186
11717,STATIC status_code_t sdm_maib_ignore_cre_fwd_data(,188
11718,"STATIC status_code_t crete_register_get(uint32_t abs_addr,",190
11719,STATIC status_code_t sdm_maib_temp_monitor_setup_handler(,193
11720,STATIC status_code_t read_crete_efuse_handler(,200
11721,STATIC status_code_t sdm_maib_unload_iocsr_handler(,202
11722,STATIC status_code_t ssm_status(,327
11723,STATIC status_code_t ssm_mask (,377
11724,STATIC status_code_t sdm_maib_inform_crete_attached (,413
11725,STATIC status_code_t sdm_maib_ignore_cre_fwd_data (,447
11726,STATIC status_code_t  sdm_maib_cnoc_filter_wipe (,478
11727,STATIC status_code_t  sdm_maib_crete_cmd_filter (,517
11728,static status_code_t sdm_maib_inform_crete_detached (,557
11729,status_code_t internal_crssm_data_dwld_handler(uint32_t dma_src_buf_addr),589
11730,status_code_t crssm_data_downloader(uintptr_t dma_src_buf_addr),645
11731,STATIC status_code_t pio_release_maib_handler(,774
11732,STATIC status_code_t sdm_maib_wait_for_cre_boot(,829
11733,STATIC status_code_t sdm_maib_wait_for_cre_hip_conf_done(,884
11734,STATIC status_code_t sdm_maib_wait_for_cre_cal_done(,927
11735,STATIC status_code_t sdm_maib_wait_for_cre_not_busy(,972
11736,STATIC status_code_t pio_assert_maib_handler(,1015
11737,STATIC status_code_t pio_unfreeze_routing_handler(,1065
11738,STATIC status_code_t pio_freeze_routing_handler(,1100
11739,STATIC status_code_t pio_cnoc_stop_request_handler(,1133
11740,STATIC status_code_t pio_enter_user_mode_handler(,1174
11741,STATIC status_code_t pio_exit_user_mode_handler(,1223
11742,STATIC status_code_t forward_2_crete_handler(,1275
11743,STATIC status_code_t ubump_redundancy_mux_handler(,1346
11744,STATIC status_code_t sdm_maib_temp_monitor_setup_handler(,1432
11745,STATIC status_code_t register_get_handler(,1476
11746,STATIC status_code_t register_set_handler(,1524
11747,STATIC status_code_t crete_register_get_handler(,1567
11748,STATIC status_code_t crete_register_set_handler(,1607
11749,STATIC void crete_register_get_handler_cb (uint32_t regValue),1642
11750,STATIC status_code_t sdm_read_cre_temp_sensor(,1668
11751,STATIC status_code_t pio_cre_iocsr_rdy_dly_set_handler(,1736
11752,STATIC status_code_t pio_cnoc_stop_done_handler(,1784
11753,STATIC status_code_t crete_fw_fatal_error_handler(,1824
11754,STATIC status_code_t notify_sdm_crete_init_handler(,1865
11755,STATIC status_code_t notify_crete_iocsr_complete_handler(,1907
11756,STATIC status_code_t notify_crete_hip_conf_complete_handler(,1945
11757,STATIC status_code_t notify_crete_calibration_complete_handler(,1982
11758,STATIC status_code_t notify_crete_not_busy_handler(,2020
11759,STATIC status_code_t notify_aib_crete_temp_reading_handler(,2059
11760,"STATIC status_code_t crete_register_get(uint32_t abs_addr,",2107
11761,"STATIC void crete_register_set(uint32_t abs_addr, uint32_t value)",2140
11762,STATIC status_code_t read_crete_efuse_handler(,2169
11763,"STATIC status_code_t sdm_maib_unload_iocsr_handler(const uint32_t *cmd_packet, uint32_t payload_words)",2242
11764,(GEN_RING_BUF_IS_EMPTY(&cvp_ring_buffer) ? 0 : 1 ),71
11765,/*! @brief Wait time (us) for CRE to process a mesg from AIB */,76
11766,/*! @brief timeout (ms) for Crete to send any outstanding data to AIB */,85
11767,static inline void cvp_issue_crete_credit(,121
11768,STATIC void exe_state_init_to_wait(void),142
11769,void cvp_start_transfer(void),180
11770,STATIC void cvp_dma_isr (void),221
11771,void cnoc_rx_crete_cvp_data_transfer(void),316
11772,static inline void cvp_issue_crete_credit(uint8_t nCredits),351
11773,static inline void cvp_calc_sdm_credits(void),391
11774,status_code_t cvp_sdm2aib_assert_deassert_handler(,528
11775,status_code_t cvp_sdm2aib_aib_credits_handler(,562
11776,status_code_t cvp_sdm2aib_sync_adjust_handler(,662
11777,status_code_t cvp_sdm2aib_cvp_done_handler(,708
11778,status_code_t cvp_crete2aib_cvp_version_handler(,781
11779,status_code_t cvp_crete2aib_cvp_done_ack_handler(,816
11780,status_code_t cvp_crete2aib_cvp_init_handler(,882
11781,status_code_t cvp_crete2aib_cvp_credit_init_handler(,942
11782,status_code_t cvp_sdm2aib_cvp_enable_handler(,969
11783,void cvp_sw_inc_sync_count(void),1023
11784,static void cvp_sw_init_sync_count(),1031
11785,void cvp_sw_update_sync_count(uint32_t sync_count),1039
11786,cvp_state_enum_t get_cvp_state(void),1050
11787,extern void set_cvp_abort(),1055
11788,void cvp_state_machine(void),1101
11789,int main(void),78
11790,static void boot_crete(),151
11791,void alt_irq_init ( const void* base ),82
11792,void alt_sys_init( void ),93
11793,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11794,"* copy of this software and associated documentation files (the ""Software""),  *",9
11795,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
11796,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
11797,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
11798,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
11799,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
11800,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
11801,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
11802,int alt_avalon_dma_space (alt_dma_txchan dma),355
11803,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
11804,static void alt_avalon_dma_irq (void* context),446
11805,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
11806,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
11807,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11808,"* copy of this software and associated documentation files (the ""Software""),  *",9
11809,static void alt_avalon_timer_sc_irq (void* base),54
11810,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
11811,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
11812,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11813,"* copy of this software and associated documentation files (the ""Software""),  *",9
11814,int alt_timestamp_start(void),64
11815,alt_timestamp_type alt_timestamp(void),100
11816,alt_u32 alt_timestamp_freq(void),138
11817,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11818,"* copy of this software and associated documentation files (the ""Software""),  *",9
11819,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11820,"* copy of this software and associated documentation files (the ""Software""),  *",9
11821,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
11822,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
11823,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
11824,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11825,"* copy of this software and associated documentation files (the ""Software""),  *",9
11826,void alt_vic_irq_init (alt_vic_dev* pdev),45
11827,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11828,"* copy of this software and associated documentation files (the ""Software""),  *",9
11829,"int alt_ic_isr_register(alt_u32 ic_id,",59
11830,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11831,"* copy of this software and associated documentation files (the ""Software""),  *",9
11832,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
11833,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11834,"* copy of this software and associated documentation files (the ""Software""),  *",9
11835,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
11836,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
11837,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
11838,void altera_nios2_gen2_irq_init(void) ,34
11839,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11840,"* copy of this software and associated documentation files (the ""Software""),  *",9
11841,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
11842,unsigned int alt_busy_sleep (unsigned int us),52
11843,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11844,"* copy of this software and associated documentation files (the ""Software""),  *",9
11845,int ALT_CLOSE (int fildes),42
11846,int ALT_CLOSE (int fildes),64
11847,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11848,"* copy of this software and associated documentation files (the ""Software""),  *",9
11849,"void alt_dcache_flush (void* start, alt_u32 len)",46
11850,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11851,"* copy of this software and associated documentation files (the ""Software""),  *",9
11852,void alt_dcache_flush_all (void),41
11853,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
11854,"* copy of this software and associated documentation files (the ""Software""),  *",9
11855,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
11856,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11857,"* copy of this software and associated documentation files (the ""Software""),  *",9
11858,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
11859,ALT_SEM(alt_fd_list_lock),109
11860,int alt_dev_reg (alt_dev* dev),151
11861,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11862,"* copy of this software and associated documentation files (the ""Software""),  *",9
11863,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
11864,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11865,"* copy of this software and associated documentation files (the ""Software""),  *",9
11866,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
11867,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11868,"* copy of this software and associated documentation files (the ""Software""),  *",9
11869,alt_dma_txchan alt_dma_txchan_open (const char* name),51
11870,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11871,"* copy of this software and associated documentation files (the ""Software""),  *",9
11872,void _do_ctors(void),58
11873,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11874,"* copy of this software and associated documentation files (the ""Software""),  *",9
11875,void _do_dtors(void),58
11876,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
11877,"* copy of this software and associated documentation files (the ""Software""),  *",9
11878,alt_ecc_fatal_exception_register(alt_u32 handler),66
11879,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11880,"* copy of this software and associated documentation files (the ""Software""),  *",9
11881,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11882,"* copy of this software and associated documentation files (the ""Software""),  *",9
11883,void __env_lock ( struct _reent *_r ),43
11884,void __env_unlock ( struct _reent *_r ),51
11885,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11886,"* copy of this software and associated documentation files (the ""Software""),  *",9
11887,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11888,"* copy of this software and associated documentation files (the ""Software""),  *",9
11889,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
11890,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11891,"* copy of this software and associated documentation files (the ""Software""),  *",9
11892,void ALT_EXIT (int exit_code),52
11893,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11894,"* copy of this software and associated documentation files (the ""Software""),  *",9
11895,"int ALT_FCNTL (int file, int cmd, ...)",66
11896,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11897,"* copy of this software and associated documentation files (the ""Software""),  *",9
11898,int alt_fd_lock (alt_fd* fd),54
11899,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11900,"* copy of this software and associated documentation files (the ""Software""),  *",9
11901,int alt_fd_unlock (alt_fd* fd),52
11902,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11903,"* copy of this software and associated documentation files (the ""Software""),  *",9
11904,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
11905,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11906,"* copy of this software and associated documentation files (the ""Software""),  *",9
11907,alt_dev* alt_find_file (const char* name),54
11908,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11909,"* copy of this software and associated documentation files (the ""Software""),  *",9
11910,alt_flash_fd* alt_flash_open_dev(const char* name),49
11911,void alt_flash_close_dev(alt_flash_fd* fd),61
11912,int alt_flash_device_register( alt_flash_fd* fd),70
11913,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11914,"* copy of this software and associated documentation files (the ""Software""),  *",9
11915,int ALT_FORK (void),45
11916,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11917,"* copy of this software and associated documentation files (the ""Software""),  *",9
11918,"int ALT_FSTAT (int file, struct stat *st)",63
11919,"int ALT_FSTAT (int file, struct stat *st)",93
11920,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11921,"* copy of this software and associated documentation files (the ""Software""),  *",9
11922,int alt_fs_reg (alt_dev* dev),57
11923,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
11924,"* copy of this software and associated documentation files (the ""Software""),  *",9
11925,alt_getchar(void),51
11926,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11927,"* copy of this software and associated documentation files (the ""Software""),  *",9
11928,int ALT_GETPID (void),43
11929,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
11930,"* copy of this software and associated documentation files (the ""Software""),  *",9
11931,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
11932,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
11933,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11934,"* copy of this software and associated documentation files (the ""Software""),  *",9
11935,int alt_get_fd (alt_dev* dev),54
11936,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
11937,"* copy of this software and associated documentation files (the ""Software""),  *",9
11938,/* The compiler inserts calls to mcount() at the start of,48
11939,static __inline__ void * mcount_allocate(unsigned int size),133
11940,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
11941,static int nios2_pcsample_init(void),218
11942,static alt_u32 nios2_pcsample(void* context),250
11943,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11944,"* copy of this software and associated documentation files (the ""Software""),  *",9
11945,"void alt_icache_flush (void* start, alt_u32 len)",42
11946,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11947,"* copy of this software and associated documentation files (the ""Software""),  *",9
11948,void alt_icache_flush_all (void),41
11949,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
11950,"* copy of this software and associated documentation files (the ""Software""),  *",9
11951,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
11952,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
11953,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
11954,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
11955,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11956,"* copy of this software and associated documentation files (the ""Software""),  *",9
11957,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
11958,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
11959,"* copy of this software and associated documentation files (the ""Software""),  *",9
11960,alt_exception_result (*alt_instruction_exception_handler),49
11961,int alt_instruction_exception_entry (alt_u32 exception_pc),53
11962,alt_instruction_exception_entry (alt_u32 exception_pc),68
11963,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
11964,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
11965,"* copy of this software and associated documentation files (the ""Software""),  *",9
11966,void alt_instruction_exception_register (,73
11967,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11968,"* copy of this software and associated documentation files (the ""Software""),  *",9
11969,"int ALT_IOCTL (int file, int req, void* arg)",68
11970,"int ALT_IOCTL (int file, int req, void* arg)",106
11971,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11972,"* copy of this software and associated documentation files (the ""Software""),  *",9
11973,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
11974,"void alt_io_redirect(const char* stdout_dev, ",85
11975,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11976,"* copy of this software and associated documentation files (the ""Software""),  *",9
11977,void alt_irq_handler (void),80
11978,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
11979,"* copy of this software and associated documentation files (the ""Software""),  *",9
11980,"int alt_irq_register (alt_u32 id, ",75
11981,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
11982,"* copy of this software and associated documentation files (the ""Software""),  *",9
11983,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
11984,"* copy of this software and associated documentation files (the ""Software""),  *",9
11985,int ALT_ISATTY (int file),50
11986,int ALT_ISATTY (int file),84
11987,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11988,"* copy of this software and associated documentation files (the ""Software""),  *",9
11989,"int ALT_KILL (int pid, int sig)",49
11990,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
11991,"* copy of this software and associated documentation files (the ""Software""),  *",9
11992,"int ALT_LINK ( char *existing, char *new)",45
11993,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
11994,"* copy of this software and associated documentation files (the ""Software""),  *",9
11995,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
11996,void alt_load (void),67
11997,"void alt_log_txchar(int c,char *base)",95
11998,"void alt_log_repchar(char c,int r,int base)",106
11999,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
12000,"int alt_log_printf_proc(const char *fmt, ... )",344
12001,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
12002,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
12003,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
12004,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
12005,"void alt_log_write(const void *ptr, size_t len)",440
12006,void alt_log_system_clock(),474
12007,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
12008,"* copy of this software and associated documentation files (the ""Software""),  *",9
12009,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
12010,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
12011,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
12012,"* copy of this software and associated documentation files (the ""Software""),  *",9
12013,void alt_main (void),82
12014,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12015,"* copy of this software and associated documentation files (the ""Software""),  *",9
12016,void __malloc_lock ( struct _reent *_r ),42
12017,void __malloc_unlock ( struct _reent *_r ),50
12018,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12019,"* copy of this software and associated documentation files (the ""Software""),  *",9
12020,"int ALT_OPEN (const char* file, int flags, int mode)",41
12021,static int alt_file_locked (alt_fd* fd),64
12022,"int ALT_OPEN (const char* file, int flags, int mode)",105
12023,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12024,"* copy of this software and associated documentation files (the ""Software""),  *",9
12025,"alt_printf(const char* fmt, ... )",51
12026,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12027,"* copy of this software and associated documentation files (the ""Software""),  *",9
12028,alt_putchar(int c),50
12029,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12030,"* copy of this software and associated documentation files (the ""Software""),  *",9
12031,alt_putcharbuf(int c),58
12032,alt_putbufflush(),73
12033,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12034,"* copy of this software and associated documentation files (the ""Software""),  *",9
12035,alt_putstr(const char* str),52
12036,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12037,"* copy of this software and associated documentation files (the ""Software""),  *",9
12038,"int ALT_READ (int file, void *ptr, size_t len)",58
12039,"int ALT_READ (int file, void *ptr, size_t len)",82
12040,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12041,"* copy of this software and associated documentation files (the ""Software""),  *",9
12042,void alt_release_fd (int fd),44
12043,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12044,"* copy of this software and associated documentation files (the ""Software""),  *",9
12045,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
12046,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12047,"* copy of this software and associated documentation files (the ""Software""),  *",9
12048,"alt_remap_uncached(void* ptr, alt_u32 len)",49
12049,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12050,"* copy of this software and associated documentation files (the ""Software""),  *",9
12051,"int ALT_RENAME (char *existing, char *new)",45
12052,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12053,"* copy of this software and associated documentation files (the ""Software""),  *",9
12054,caddr_t ALT_SBRK (int incr),68
12055,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12056,"* copy of this software and associated documentation files (the ""Software""),  *",9
12057,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
12058,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12059,"* copy of this software and associated documentation files (the ""Software""),  *",9
12060,"int ALT_STAT (const char *file, struct stat *st)",49
12061,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12062,"* copy of this software and associated documentation files (the ""Software""),  *",9
12063,void alt_alarm_stop (alt_alarm* alarm),66
12064,void alt_tick (void),87
12065,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12066,"* copy of this software and associated documentation files (the ""Software""),  *",9
12067,clock_t ALT_TIMES (struct tms *buf),51
12068,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12069,"* copy of this software and associated documentation files (the ""Software""),  *",9
12070,alt_uncached_free(volatile void* ptr),40
12071,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12072,"* copy of this software and associated documentation files (the ""Software""),  *",9
12073,alt_uncached_malloc(size_t size),42
12074,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12075,"* copy of this software and associated documentation files (the ""Software""),  *",9
12076,int ALT_UNLINK (char *name),45
12077,int ALT_USLEEP (useconds_t us),46
12078,unsigned int ALT_USLEEP (unsigned int us),48
12079,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12080,"* copy of this software and associated documentation files (the ""Software""),  *",9
12081,int ALT_WAIT (int *status),44
12082,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12083,"* copy of this software and associated documentation files (the ""Software""),  *",9
12084,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
12085,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
12086,STATIC status_code_t ssm_status(,105
12087,STATIC status_code_t ssm_mask (,156
12088,STATIC status_code_t csm_unfreeze(,196
12089,STATIC status_code_t csm_refreeze(,239
12090,STATIC status_code_t csm_repair_request(,279
12091,static inline void csm_cnocRxClearInterrupts(),98
12092,STATIC csm_return_t cnoc_msi_main_cmd_req_handler_init(,124
12093,csm_return_t cnoc_rx_main_init(,150
12094,void cnoc_rx_ISR(void *context),235
12095,void supervisory_control_loop(void),430
12096,csm_return_t csm_cnoc_tx_init(),50
12097,void cnoc_tx_main_irq_assert(void),64
12098,uint8_t cnoc_tx_main_irq_status(void),79
12099,void cnoc_tx_main_irq_deassert(void),89
12100,"csm_return_t csm_cnoc_tx_main_transmit(uint32_t *pkt_buffer, uint32_t payload_words)",111
12101,void process_csm_dfx_function(),51
12102,"STATIC void process_cjtag_command(volatile uint32_t cjtag_opcode, volatile uint32_t cjtag_databit_length, volatile uint32_t * cjtag_data)",72
12103,STATIC void clear_cjtag_command_and_databit(void),117
12104,"STATIC void csm_cnoc_return(volatile uint32_t *start_addr, uint32_t num_of_words)",139
12105,STATIC inline void csm_update_cnoc_interrupt (void),65
12106,uint32_t csm_status_get(void),86
12107,uint32_t csm_irq_mask_get(void),96
12108,void csm_irq_mask_set(const uint32_t new_mask),106
12109,void csm_status_clear(uint32_t mask),116
12110,void csm_status_update(const uint32_t new_status),164
12111,"csm_return_t csm_cpu_ram_range_valid(void* addr, uint32_t size)",240
12112,"@param serial_ctlr_id is the serial controller ID defined for fmica cif_pack_mem(0), cif_depack_mem(1), ccl_mem(2)",68
12113,"static void fmica_conf_ramctlr_reg(const uint32_t serial_ctlr_id, const uint32_t rscen, const uint32_t rscrst, const uint32_t fiso)",73
12114,static void fmica_conf_mem_margin_reg(const uint32_t efuse_margin_data),93
12115,"@param serial_ctlr_id is the serial controller ID defined for fmica cif_pack_mem(0), cif_depack_mem(1), ccl_mem(2)",112
12116,"static csm_return_t fmica_apply_ram_repair(const uint32_t serial_ctlr_id,",117
12117,csm_return_t fmica_ram_repair(const uint32_t *efuse_data),215
12118,int main(void),57
12119,void alt_irq_init ( const void* base ),82
12120,void alt_sys_init( void ),93
12121,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12122,"* copy of this software and associated documentation files (the ""Software""),  *",9
12123,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
12124,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
12125,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
12126,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
12127,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
12128,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
12129,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
12130,int alt_avalon_dma_space (alt_dma_txchan dma),355
12131,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
12132,static void alt_avalon_dma_irq (void* context),446
12133,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
12134,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
12135,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12136,"* copy of this software and associated documentation files (the ""Software""),  *",9
12137,static void alt_avalon_timer_sc_irq (void* base),54
12138,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
12139,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
12140,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12141,"* copy of this software and associated documentation files (the ""Software""),  *",9
12142,int alt_timestamp_start(void),64
12143,alt_timestamp_type alt_timestamp(void),100
12144,alt_u32 alt_timestamp_freq(void),138
12145,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12146,"* copy of this software and associated documentation files (the ""Software""),  *",9
12147,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12148,"* copy of this software and associated documentation files (the ""Software""),  *",9
12149,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
12150,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
12151,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
12152,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12153,"* copy of this software and associated documentation files (the ""Software""),  *",9
12154,void alt_vic_irq_init (alt_vic_dev* pdev),45
12155,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12156,"* copy of this software and associated documentation files (the ""Software""),  *",9
12157,"int alt_ic_isr_register(alt_u32 ic_id,",59
12158,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12159,"* copy of this software and associated documentation files (the ""Software""),  *",9
12160,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
12161,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12162,"* copy of this software and associated documentation files (the ""Software""),  *",9
12163,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
12164,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
12165,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
12166,void altera_nios2_gen2_irq_init(void) ,34
12167,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12168,"* copy of this software and associated documentation files (the ""Software""),  *",9
12169,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
12170,unsigned int alt_busy_sleep (unsigned int us),52
12171,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12172,"* copy of this software and associated documentation files (the ""Software""),  *",9
12173,int ALT_CLOSE (int fildes),42
12174,int ALT_CLOSE (int fildes),64
12175,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
12176,"* copy of this software and associated documentation files (the ""Software""),  *",9
12177,"void alt_dcache_flush (void* start, alt_u32 len)",46
12178,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
12179,"* copy of this software and associated documentation files (the ""Software""),  *",9
12180,void alt_dcache_flush_all (void),41
12181,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
12182,"* copy of this software and associated documentation files (the ""Software""),  *",9
12183,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
12184,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12185,"* copy of this software and associated documentation files (the ""Software""),  *",9
12186,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
12187,ALT_SEM(alt_fd_list_lock),109
12188,int alt_dev_reg (alt_dev* dev),151
12189,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12190,"* copy of this software and associated documentation files (the ""Software""),  *",9
12191,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
12192,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12193,"* copy of this software and associated documentation files (the ""Software""),  *",9
12194,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
12195,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12196,"* copy of this software and associated documentation files (the ""Software""),  *",9
12197,alt_dma_txchan alt_dma_txchan_open (const char* name),51
12198,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12199,"* copy of this software and associated documentation files (the ""Software""),  *",9
12200,void _do_ctors(void),58
12201,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12202,"* copy of this software and associated documentation files (the ""Software""),  *",9
12203,void _do_dtors(void),58
12204,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
12205,"* copy of this software and associated documentation files (the ""Software""),  *",9
12206,alt_ecc_fatal_exception_register(alt_u32 handler),66
12207,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12208,"* copy of this software and associated documentation files (the ""Software""),  *",9
12209,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12210,"* copy of this software and associated documentation files (the ""Software""),  *",9
12211,void __env_lock ( struct _reent *_r ),43
12212,void __env_unlock ( struct _reent *_r ),51
12213,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12214,"* copy of this software and associated documentation files (the ""Software""),  *",9
12215,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12216,"* copy of this software and associated documentation files (the ""Software""),  *",9
12217,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
12218,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12219,"* copy of this software and associated documentation files (the ""Software""),  *",9
12220,void ALT_EXIT (int exit_code),52
12221,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12222,"* copy of this software and associated documentation files (the ""Software""),  *",9
12223,"int ALT_FCNTL (int file, int cmd, ...)",66
12224,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12225,"* copy of this software and associated documentation files (the ""Software""),  *",9
12226,int alt_fd_lock (alt_fd* fd),54
12227,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12228,"* copy of this software and associated documentation files (the ""Software""),  *",9
12229,int alt_fd_unlock (alt_fd* fd),52
12230,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12231,"* copy of this software and associated documentation files (the ""Software""),  *",9
12232,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
12233,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12234,"* copy of this software and associated documentation files (the ""Software""),  *",9
12235,alt_dev* alt_find_file (const char* name),54
12236,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12237,"* copy of this software and associated documentation files (the ""Software""),  *",9
12238,alt_flash_fd* alt_flash_open_dev(const char* name),49
12239,void alt_flash_close_dev(alt_flash_fd* fd),61
12240,int alt_flash_device_register( alt_flash_fd* fd),70
12241,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12242,"* copy of this software and associated documentation files (the ""Software""),  *",9
12243,int ALT_FORK (void),45
12244,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12245,"* copy of this software and associated documentation files (the ""Software""),  *",9
12246,"int ALT_FSTAT (int file, struct stat *st)",63
12247,"int ALT_FSTAT (int file, struct stat *st)",93
12248,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12249,"* copy of this software and associated documentation files (the ""Software""),  *",9
12250,int alt_fs_reg (alt_dev* dev),57
12251,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12252,"* copy of this software and associated documentation files (the ""Software""),  *",9
12253,alt_getchar(void),51
12254,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12255,"* copy of this software and associated documentation files (the ""Software""),  *",9
12256,int ALT_GETPID (void),43
12257,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12258,"* copy of this software and associated documentation files (the ""Software""),  *",9
12259,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
12260,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
12261,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12262,"* copy of this software and associated documentation files (the ""Software""),  *",9
12263,int alt_get_fd (alt_dev* dev),54
12264,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
12265,"* copy of this software and associated documentation files (the ""Software""),  *",9
12266,/* The compiler inserts calls to mcount() at the start of,48
12267,static __inline__ void * mcount_allocate(unsigned int size),133
12268,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
12269,static int nios2_pcsample_init(void),218
12270,static alt_u32 nios2_pcsample(void* context),250
12271,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12272,"* copy of this software and associated documentation files (the ""Software""),  *",9
12273,"void alt_icache_flush (void* start, alt_u32 len)",42
12274,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12275,"* copy of this software and associated documentation files (the ""Software""),  *",9
12276,void alt_icache_flush_all (void),41
12277,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12278,"* copy of this software and associated documentation files (the ""Software""),  *",9
12279,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
12280,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
12281,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
12282,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
12283,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
12284,"* copy of this software and associated documentation files (the ""Software""),  *",9
12285,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
12286,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
12287,"* copy of this software and associated documentation files (the ""Software""),  *",9
12288,alt_exception_result (*alt_instruction_exception_handler),49
12289,int alt_instruction_exception_entry (alt_u32 exception_pc),53
12290,alt_instruction_exception_entry (alt_u32 exception_pc),68
12291,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
12292,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
12293,"* copy of this software and associated documentation files (the ""Software""),  *",9
12294,void alt_instruction_exception_register (,73
12295,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12296,"* copy of this software and associated documentation files (the ""Software""),  *",9
12297,"int ALT_IOCTL (int file, int req, void* arg)",68
12298,"int ALT_IOCTL (int file, int req, void* arg)",106
12299,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12300,"* copy of this software and associated documentation files (the ""Software""),  *",9
12301,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
12302,"void alt_io_redirect(const char* stdout_dev, ",85
12303,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
12304,"* copy of this software and associated documentation files (the ""Software""),  *",9
12305,void alt_irq_handler (void),80
12306,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
12307,"* copy of this software and associated documentation files (the ""Software""),  *",9
12308,"int alt_irq_register (alt_u32 id, ",75
12309,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12310,"* copy of this software and associated documentation files (the ""Software""),  *",9
12311,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12312,"* copy of this software and associated documentation files (the ""Software""),  *",9
12313,int ALT_ISATTY (int file),50
12314,int ALT_ISATTY (int file),84
12315,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12316,"* copy of this software and associated documentation files (the ""Software""),  *",9
12317,"int ALT_KILL (int pid, int sig)",49
12318,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12319,"* copy of this software and associated documentation files (the ""Software""),  *",9
12320,"int ALT_LINK ( char *existing, char *new)",45
12321,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
12322,"* copy of this software and associated documentation files (the ""Software""),  *",9
12323,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
12324,void alt_load (void),67
12325,"void alt_log_txchar(int c,char *base)",95
12326,"void alt_log_repchar(char c,int r,int base)",106
12327,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
12328,"int alt_log_printf_proc(const char *fmt, ... )",344
12329,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
12330,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
12331,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
12332,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
12333,"void alt_log_write(const void *ptr, size_t len)",440
12334,void alt_log_system_clock(),474
12335,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
12336,"* copy of this software and associated documentation files (the ""Software""),  *",9
12337,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
12338,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
12339,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
12340,"* copy of this software and associated documentation files (the ""Software""),  *",9
12341,void alt_main (void),82
12342,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12343,"* copy of this software and associated documentation files (the ""Software""),  *",9
12344,void __malloc_lock ( struct _reent *_r ),42
12345,void __malloc_unlock ( struct _reent *_r ),50
12346,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12347,"* copy of this software and associated documentation files (the ""Software""),  *",9
12348,"int ALT_OPEN (const char* file, int flags, int mode)",41
12349,static int alt_file_locked (alt_fd* fd),64
12350,"int ALT_OPEN (const char* file, int flags, int mode)",105
12351,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12352,"* copy of this software and associated documentation files (the ""Software""),  *",9
12353,"alt_printf(const char* fmt, ... )",51
12354,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12355,"* copy of this software and associated documentation files (the ""Software""),  *",9
12356,alt_putchar(int c),50
12357,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12358,"* copy of this software and associated documentation files (the ""Software""),  *",9
12359,alt_putcharbuf(int c),58
12360,alt_putbufflush(),73
12361,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12362,"* copy of this software and associated documentation files (the ""Software""),  *",9
12363,alt_putstr(const char* str),52
12364,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12365,"* copy of this software and associated documentation files (the ""Software""),  *",9
12366,"int ALT_READ (int file, void *ptr, size_t len)",58
12367,"int ALT_READ (int file, void *ptr, size_t len)",82
12368,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12369,"* copy of this software and associated documentation files (the ""Software""),  *",9
12370,void alt_release_fd (int fd),44
12371,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12372,"* copy of this software and associated documentation files (the ""Software""),  *",9
12373,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
12374,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12375,"* copy of this software and associated documentation files (the ""Software""),  *",9
12376,"alt_remap_uncached(void* ptr, alt_u32 len)",49
12377,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12378,"* copy of this software and associated documentation files (the ""Software""),  *",9
12379,"int ALT_RENAME (char *existing, char *new)",45
12380,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12381,"* copy of this software and associated documentation files (the ""Software""),  *",9
12382,caddr_t ALT_SBRK (int incr),68
12383,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12384,"* copy of this software and associated documentation files (the ""Software""),  *",9
12385,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
12386,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12387,"* copy of this software and associated documentation files (the ""Software""),  *",9
12388,"int ALT_STAT (const char *file, struct stat *st)",49
12389,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12390,"* copy of this software and associated documentation files (the ""Software""),  *",9
12391,void alt_alarm_stop (alt_alarm* alarm),66
12392,void alt_tick (void),87
12393,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12394,"* copy of this software and associated documentation files (the ""Software""),  *",9
12395,clock_t ALT_TIMES (struct tms *buf),51
12396,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12397,"* copy of this software and associated documentation files (the ""Software""),  *",9
12398,alt_uncached_free(volatile void* ptr),40
12399,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12400,"* copy of this software and associated documentation files (the ""Software""),  *",9
12401,alt_uncached_malloc(size_t size),42
12402,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12403,"* copy of this software and associated documentation files (the ""Software""),  *",9
12404,int ALT_UNLINK (char *name),45
12405,int ALT_USLEEP (useconds_t us),46
12406,unsigned int ALT_USLEEP (unsigned int us),48
12407,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12408,"* copy of this software and associated documentation files (the ""Software""),  *",9
12409,int ALT_WAIT (int *status),44
12410,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12411,"* copy of this software and associated documentation files (the ""Software""),  *",9
12412,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
12413,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
12414,void alt_irq_init ( const void* base ),82
12415,void alt_sys_init( void ),93
12416,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12417,"* copy of this software and associated documentation files (the ""Software""),  *",9
12418,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
12419,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
12420,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
12421,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
12422,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
12423,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
12424,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
12425,int alt_avalon_dma_space (alt_dma_txchan dma),355
12426,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
12427,static void alt_avalon_dma_irq (void* context),446
12428,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
12429,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
12430,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12431,"* copy of this software and associated documentation files (the ""Software""),  *",9
12432,static void alt_avalon_timer_sc_irq (void* base),54
12433,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
12434,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
12435,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12436,"* copy of this software and associated documentation files (the ""Software""),  *",9
12437,int alt_timestamp_start(void),64
12438,alt_timestamp_type alt_timestamp(void),100
12439,alt_u32 alt_timestamp_freq(void),138
12440,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12441,"* copy of this software and associated documentation files (the ""Software""),  *",9
12442,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12443,"* copy of this software and associated documentation files (the ""Software""),  *",9
12444,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
12445,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
12446,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
12447,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12448,"* copy of this software and associated documentation files (the ""Software""),  *",9
12449,void alt_vic_irq_init (alt_vic_dev* pdev),45
12450,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12451,"* copy of this software and associated documentation files (the ""Software""),  *",9
12452,"int alt_ic_isr_register(alt_u32 ic_id,",59
12453,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12454,"* copy of this software and associated documentation files (the ""Software""),  *",9
12455,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
12456,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12457,"* copy of this software and associated documentation files (the ""Software""),  *",9
12458,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
12459,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
12460,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
12461,void altera_nios2_gen2_irq_init(void) ,34
12462,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12463,"* copy of this software and associated documentation files (the ""Software""),  *",9
12464,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
12465,unsigned int alt_busy_sleep (unsigned int us),52
12466,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12467,"* copy of this software and associated documentation files (the ""Software""),  *",9
12468,int ALT_CLOSE (int fildes),42
12469,int ALT_CLOSE (int fildes),64
12470,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
12471,"* copy of this software and associated documentation files (the ""Software""),  *",9
12472,"void alt_dcache_flush (void* start, alt_u32 len)",46
12473,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
12474,"* copy of this software and associated documentation files (the ""Software""),  *",9
12475,void alt_dcache_flush_all (void),41
12476,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
12477,"* copy of this software and associated documentation files (the ""Software""),  *",9
12478,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
12479,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12480,"* copy of this software and associated documentation files (the ""Software""),  *",9
12481,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
12482,ALT_SEM(alt_fd_list_lock),109
12483,int alt_dev_reg (alt_dev* dev),151
12484,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12485,"* copy of this software and associated documentation files (the ""Software""),  *",9
12486,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
12487,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12488,"* copy of this software and associated documentation files (the ""Software""),  *",9
12489,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
12490,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12491,"* copy of this software and associated documentation files (the ""Software""),  *",9
12492,alt_dma_txchan alt_dma_txchan_open (const char* name),51
12493,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12494,"* copy of this software and associated documentation files (the ""Software""),  *",9
12495,void _do_ctors(void),58
12496,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12497,"* copy of this software and associated documentation files (the ""Software""),  *",9
12498,void _do_dtors(void),58
12499,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
12500,"* copy of this software and associated documentation files (the ""Software""),  *",9
12501,alt_ecc_fatal_exception_register(alt_u32 handler),66
12502,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12503,"* copy of this software and associated documentation files (the ""Software""),  *",9
12504,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12505,"* copy of this software and associated documentation files (the ""Software""),  *",9
12506,void __env_lock ( struct _reent *_r ),43
12507,void __env_unlock ( struct _reent *_r ),51
12508,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12509,"* copy of this software and associated documentation files (the ""Software""),  *",9
12510,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12511,"* copy of this software and associated documentation files (the ""Software""),  *",9
12512,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
12513,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12514,"* copy of this software and associated documentation files (the ""Software""),  *",9
12515,void ALT_EXIT (int exit_code),52
12516,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12517,"* copy of this software and associated documentation files (the ""Software""),  *",9
12518,"int ALT_FCNTL (int file, int cmd, ...)",66
12519,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12520,"* copy of this software and associated documentation files (the ""Software""),  *",9
12521,int alt_fd_lock (alt_fd* fd),54
12522,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12523,"* copy of this software and associated documentation files (the ""Software""),  *",9
12524,int alt_fd_unlock (alt_fd* fd),52
12525,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12526,"* copy of this software and associated documentation files (the ""Software""),  *",9
12527,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
12528,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12529,"* copy of this software and associated documentation files (the ""Software""),  *",9
12530,alt_dev* alt_find_file (const char* name),54
12531,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12532,"* copy of this software and associated documentation files (the ""Software""),  *",9
12533,alt_flash_fd* alt_flash_open_dev(const char* name),49
12534,void alt_flash_close_dev(alt_flash_fd* fd),61
12535,int alt_flash_device_register( alt_flash_fd* fd),70
12536,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12537,"* copy of this software and associated documentation files (the ""Software""),  *",9
12538,int ALT_FORK (void),45
12539,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12540,"* copy of this software and associated documentation files (the ""Software""),  *",9
12541,"int ALT_FSTAT (int file, struct stat *st)",63
12542,"int ALT_FSTAT (int file, struct stat *st)",93
12543,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12544,"* copy of this software and associated documentation files (the ""Software""),  *",9
12545,int alt_fs_reg (alt_dev* dev),57
12546,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12547,"* copy of this software and associated documentation files (the ""Software""),  *",9
12548,alt_getchar(void),51
12549,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12550,"* copy of this software and associated documentation files (the ""Software""),  *",9
12551,int ALT_GETPID (void),43
12552,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12553,"* copy of this software and associated documentation files (the ""Software""),  *",9
12554,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
12555,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
12556,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12557,"* copy of this software and associated documentation files (the ""Software""),  *",9
12558,int alt_get_fd (alt_dev* dev),54
12559,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
12560,"* copy of this software and associated documentation files (the ""Software""),  *",9
12561,/* The compiler inserts calls to mcount() at the start of,48
12562,static __inline__ void * mcount_allocate(unsigned int size),133
12563,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
12564,static int nios2_pcsample_init(void),218
12565,static alt_u32 nios2_pcsample(void* context),250
12566,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12567,"* copy of this software and associated documentation files (the ""Software""),  *",9
12568,"void alt_icache_flush (void* start, alt_u32 len)",42
12569,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12570,"* copy of this software and associated documentation files (the ""Software""),  *",9
12571,void alt_icache_flush_all (void),41
12572,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
12573,"* copy of this software and associated documentation files (the ""Software""),  *",9
12574,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
12575,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
12576,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
12577,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
12578,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
12579,"* copy of this software and associated documentation files (the ""Software""),  *",9
12580,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
12581,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
12582,"* copy of this software and associated documentation files (the ""Software""),  *",9
12583,alt_exception_result (*alt_instruction_exception_handler),49
12584,int alt_instruction_exception_entry (alt_u32 exception_pc),53
12585,alt_instruction_exception_entry (alt_u32 exception_pc),68
12586,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
12587,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
12588,"* copy of this software and associated documentation files (the ""Software""),  *",9
12589,void alt_instruction_exception_register (,73
12590,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12591,"* copy of this software and associated documentation files (the ""Software""),  *",9
12592,"int ALT_IOCTL (int file, int req, void* arg)",68
12593,"int ALT_IOCTL (int file, int req, void* arg)",106
12594,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12595,"* copy of this software and associated documentation files (the ""Software""),  *",9
12596,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
12597,"void alt_io_redirect(const char* stdout_dev, ",85
12598,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
12599,"* copy of this software and associated documentation files (the ""Software""),  *",9
12600,void alt_irq_handler (void),80
12601,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
12602,"* copy of this software and associated documentation files (the ""Software""),  *",9
12603,"int alt_irq_register (alt_u32 id, ",75
12604,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
12605,"* copy of this software and associated documentation files (the ""Software""),  *",9
12606,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12607,"* copy of this software and associated documentation files (the ""Software""),  *",9
12608,int ALT_ISATTY (int file),50
12609,int ALT_ISATTY (int file),84
12610,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12611,"* copy of this software and associated documentation files (the ""Software""),  *",9
12612,"int ALT_KILL (int pid, int sig)",49
12613,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12614,"* copy of this software and associated documentation files (the ""Software""),  *",9
12615,"int ALT_LINK ( char *existing, char *new)",45
12616,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
12617,"* copy of this software and associated documentation files (the ""Software""),  *",9
12618,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
12619,void alt_load (void),67
12620,"void alt_log_txchar(int c,char *base)",95
12621,"void alt_log_repchar(char c,int r,int base)",106
12622,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
12623,"int alt_log_printf_proc(const char *fmt, ... )",344
12624,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
12625,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
12626,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
12627,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
12628,"void alt_log_write(const void *ptr, size_t len)",440
12629,void alt_log_system_clock(),474
12630,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
12631,"* copy of this software and associated documentation files (the ""Software""),  *",9
12632,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
12633,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
12634,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
12635,"* copy of this software and associated documentation files (the ""Software""),  *",9
12636,void alt_main (void),82
12637,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12638,"* copy of this software and associated documentation files (the ""Software""),  *",9
12639,void __malloc_lock ( struct _reent *_r ),42
12640,void __malloc_unlock ( struct _reent *_r ),50
12641,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12642,"* copy of this software and associated documentation files (the ""Software""),  *",9
12643,"int ALT_OPEN (const char* file, int flags, int mode)",41
12644,static int alt_file_locked (alt_fd* fd),64
12645,"int ALT_OPEN (const char* file, int flags, int mode)",105
12646,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12647,"* copy of this software and associated documentation files (the ""Software""),  *",9
12648,"alt_printf(const char* fmt, ... )",51
12649,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12650,"* copy of this software and associated documentation files (the ""Software""),  *",9
12651,alt_putchar(int c),50
12652,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12653,"* copy of this software and associated documentation files (the ""Software""),  *",9
12654,alt_putcharbuf(int c),58
12655,alt_putbufflush(),73
12656,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
12657,"* copy of this software and associated documentation files (the ""Software""),  *",9
12658,alt_putstr(const char* str),52
12659,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12660,"* copy of this software and associated documentation files (the ""Software""),  *",9
12661,"int ALT_READ (int file, void *ptr, size_t len)",58
12662,"int ALT_READ (int file, void *ptr, size_t len)",82
12663,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12664,"* copy of this software and associated documentation files (the ""Software""),  *",9
12665,void alt_release_fd (int fd),44
12666,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12667,"* copy of this software and associated documentation files (the ""Software""),  *",9
12668,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
12669,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12670,"* copy of this software and associated documentation files (the ""Software""),  *",9
12671,"alt_remap_uncached(void* ptr, alt_u32 len)",49
12672,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12673,"* copy of this software and associated documentation files (the ""Software""),  *",9
12674,"int ALT_RENAME (char *existing, char *new)",45
12675,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12676,"* copy of this software and associated documentation files (the ""Software""),  *",9
12677,caddr_t ALT_SBRK (int incr),68
12678,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12679,"* copy of this software and associated documentation files (the ""Software""),  *",9
12680,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
12681,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12682,"* copy of this software and associated documentation files (the ""Software""),  *",9
12683,"int ALT_STAT (const char *file, struct stat *st)",49
12684,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
12685,"* copy of this software and associated documentation files (the ""Software""),  *",9
12686,void alt_alarm_stop (alt_alarm* alarm),66
12687,void alt_tick (void),87
12688,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12689,"* copy of this software and associated documentation files (the ""Software""),  *",9
12690,clock_t ALT_TIMES (struct tms *buf),51
12691,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12692,"* copy of this software and associated documentation files (the ""Software""),  *",9
12693,alt_uncached_free(volatile void* ptr),40
12694,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
12695,"* copy of this software and associated documentation files (the ""Software""),  *",9
12696,alt_uncached_malloc(size_t size),42
12697,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12698,"* copy of this software and associated documentation files (the ""Software""),  *",9
12699,int ALT_UNLINK (char *name),45
12700,int ALT_USLEEP (useconds_t us),46
12701,unsigned int ALT_USLEEP (unsigned int us),48
12702,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
12703,"* copy of this software and associated documentation files (the ""Software""),  *",9
12704,int ALT_WAIT (int *status),44
12705,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
12706,"* copy of this software and associated documentation files (the ""Software""),  *",9
12707,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
12708,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
12709,IocsrBridgeWrite(,54
12710,IocsrBridgeUnload(,155
12711,VerifyIocsrPacketData(,225
12712,VerifyClockDivisionRatio(,266
12713,PhyBeadbusReg(,296
12714,BeadbusClear(,342
12715,BeadbusUpdate(,364
12716,BeadbusInit(,384
12717,BeadbusShift(,402
12718,BeadbusSample(,419
12719,BeadbusValueReversion(,438
12720,CalculateBeadBusBitWordLocation(,464
12721,UpdateBitsAtWordLocation(,497
12722,DibssmProgrammingBeadBus(,575
12723,DibConfigCalibrationBusBringup(),44
12724,DibssmCalibrationBusAccess(,92
12725,DibssmCnocRxClearInterrupts(),64
12726,DibssmCnocRxIsr(,94
12727,DibssmStateMachine(,335
12728,DibssmCnocRxInit(),499
12729,DibssmCnocTxInit(),49
12730,DibssmCnocTxBusy(,65
12731,DibssmCnocTxSendPacket(,115
12732,process_dib_dfx_function(),54
12733,process_cjtag_command(,88
12734,dfx_beadbus_unload(,309
12735,dfx_beadbus_write(),342
12736,dib_cnoc_return(,362
12737,DibUpdateCfgClkDiv(,403
12738,DibUpdateDibPhyCtrl0(,447
12739,clear_cjtag_command_and_databit(),506
12740,DibInitializePhyMmrData(),57
12741,DibTxRxUnfreeze(),185
12742,DibNfrzDeAssertion(),353
12743,DibIsChannelActive(,377
12744,DibIsChannelBypass(,403
12745,DibEnterUserMode(),430
12746,DibDisablePhaseDetector(),609
12747,DibNfrzAssertion(),645
12748,DibssmInit(),66
12749,"DibPrimaryNegoPacketEx(NegoPacketType_t *nego_packet, UINT8 * DataSample)",61
12750,"DibSecondaryNegoPacketEx(NegoPacketType_t *nego_packet, UINT8 * DataSample)",153
12751,DibParseTxRxEn(NegoPacketType_t *nego_packet),242
12752,"DibCompareNegoPacket(NegoPacketType_t *nego_packetA, NegoPacketType_t *nego_packetB)",326
12753,"DibCheckIOMode(UINT8 TX_EN,	UINT8 RX_EN)",394
12754,DibIsAllPowerdownLoopback(NegoPacketType_t nego_packet),420
12755,"DibNegoPacketEx(UINT32 DIBType, NegoPacketType_t *nego_packet, UINT8 * DataSample)",469
12756,DibSignalHandshake(,521
12757,DibIsPeerIOReadyLow(),628
12758,BOOLEAN DibIsConfigurationInterrupted(),665
12759,DibIoRedundancy(),46
12760,"VOID DibssmTrace(UINT32 key, UINT32 line)",63
12761,"VOID DibssmWarningTrace(UINT32 key, UINT32 line)",76
12762,main(,51
12763,void test_hmc_mmr(void) {,65
12764,void test_dcd_regs(void) {,108
12765,void test_pio_seq2core_core2seq(void) {,147
12766,"static void test_reg(ENUM_REG_MODE mode, alt_u32 addr, alt_u32 mask, alt_u32 data) {",225
12767,void test_misc_avl_access(void) {,248
12768,void pre_cal_tests(void) {,462
12769,alt_u16 bfm_pll_retry_test(void) {,481
12770,alt_u32 fake_dfx_commands(void) {,34
12771,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
12772,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
12773,void rbuf_init(ENUM_RINGBUFS rb) {,332
12774,"ENUM_RINGBUF_STAT rbuf_enq(ENUM_RINGBUFS rb, alt_u32 data) {",337
12775,alt_32 rbuf_entries(ENUM_RINGBUFS rb) {,343
12776,alt_u32 rbuf_deq(ENUM_RINGBUFS rb) {,348
12777,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
12778,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
12779,alt_u32 delay_mask(alt_u32 non_skip_value) {,66
12780,void set_skip_delay_mask(alt_u32 mask) {,72
12781,"void init_timer(alt_u32 nio_clk_freq_khz, alt_u32 timer_period) {",79
12782,void init_timer_default() {,124
12783,void stop_timer(void) {,131
12784,alt_u32 timer_val(void) {,138
12785,alt_u32 get_timer_ticks(alt_u32 nano_seconds) {,155
12786,"void timer_start_wait_ns_no_skip(ENUM_TIMER_WAIT_INDEX wait_idx, alt_u32 nano_seconds) {",160
12787,alt_u32 timer_wait_done(ENUM_TIMER_WAIT_INDEX wait_idx) {,173
12788,void timer_lapse_start(ENUM_TIMER_WAIT_INDEX wait_idx) {,185
12789,alt_u32 timer_lapse_end(ENUM_TIMER_WAIT_INDEX wait_idx) {,189
12790,void delay_for_n_ns_no_skip(alt_32 nano_seconds) {,202
12791,void delay_for_n_ns(alt_32 nano_seconds) {,212
12792,void timer_refresh(void) {,217
12793,void dfx_init(void) {,85
12794,void process_crete_dfx_function(),94
12795,ENUM_AVMM_ERR_CODE MMR_address_gatekeeper(uint32_t baseaddr),125
12796,"void process_cjtag_command(volatile uint32_t cjtag_opcode, volatile uint32_t cjtag_databit_length, volatile uint32_t * cjtag_data)",143
12797,void clear_cjtag_command_and_databit(),414
12798,"uint32_t prepare_bridge_data_unload(uint32_t number_channel, uint32_t data_size)",435
12799,"void prepare_bridge_data_load(uint32_t number_channel, uint32_t data_size)",474
12800,"void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet, uint32_t *dest_addr)",513
12801,"void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet, uint32_t *dest_addr)",528
12802,"void iossm_cnoc_return(volatile uint32_t *start_addr, uint32_t num_of_words)",565
12803,void IOSSM_IO_Freeze(),613
12804,void IOSSM_IO_Unfreeze(),626
12805,volatile uint32_t inst_cjtag_reserved_buffer[CJTAG_RESERVED_BUFF_REGION_SPAN / (sizeof(uint32_t) / sizeof(uint8_t))],30
12806,volatile uint32_t inst_config_buffer[CONFIG_BUFFER_REGION_SPAN / (sizeof(uint32_t) / sizeof(uint8_t))],33
12807,volatile uint32_t inst_constant_buffer[CONSTANT_DATA_REGION_SPAN / (sizeof(uint32_t) / sizeof(uint8_t))],36
12808,ENUM_EMIF_CAL_STAT emif_cal_loop(void) {,29
12809,void emif_cal_init(ENUM_SEQ_INIT_MODE mode) {,33
12810,"void emif_cal_consume_param_table(uint32_t addr, uint32_t pkt_size_in_words) {",36
12811,static void init_bcast(void) {,39
12812,/*static void set_odd_lane_bcast(alt_u32 en) {,65
12813,"static void set_out_buf_enable(ENUM_OUT_BUF_EN_MODE mode, alt_u32 en) {",87
12814,void data_buf_init(void) {,95
12815,void data_buf_set(ENUM_DATA_BUF_PATTERN pat) {,132
12816,void dbg_init_stat() {,60
12817,"static void dbg_set_stat_impl(alt_u32 id, ENUM_STAT_ID_TYPE type, ENUM_ERR_CODE_DFT err_code) {",76
12818,"void dbg_set_stat(alt_u32 tile, ENUM_ERR_CODE_DFT err_code) {",102
12819,"void dbg_set_lane_stat(alt_u32 lane, ENUM_ERR_CODE_DFT err_code) {",106
12820,alt_u32 dbg_get_stat(void) {,110
12821,void dbg_set_final_stat() {,114
12822,alt_u32 dbg_get_cmd(void) {,121
12823,"void dbg_set_stage(alt_u32 tile, ENUM_TD_STAGE err_stage) {",131
12824,void dbg_set_stage_all_tiles(ENUM_TD_STAGE err_stage) {,136
12825,void check_tiles(alt_u32 tiles_skipped) {,41
12826,alt_32 next_tile(void) {,94
12827,void init_phy(void) {,105
12828,void set_iossm_master(void) {,128
12829,void set_io_calbus(alt_u32 div) {,135
12830,void init_calbus(alt_u32 div) {,160
12831,void init_iossm(void) {,174
12832,alt_u32 check_pll_lock(void) {,180
12833,void wait_pll_lock(void) {,189
12834,"alt_u32 bad_entry(char *fn, alt_u32 line) {",206
12835,alt_u32 bfm_fail(alt_u32 line_num) {,213
12836,void log_entry(void) {,219
12837,void log_exit(alt_u32 err_code) {,226
12838,int main(void) {,237
12839,int my_print(int c),638
12840,static void uart_puts(char *str),660
12841,"static alt_u32 uart_puth(alt_32 dont_put_zero, alt_u32 i)",670
12842,static void uart_puti(alt_u32 i),687
12843,"extern void uart_printf(char *format, ...)",726
12844,"void update_status(alt_u32 tile, ioddr_status_code_t status_code)",781
12845,"static void update_burn_in_test_in_progress(alt_u32 tile, alt_u32 val)",795
12846,"static void update_burn_in_test_fail(alt_u32 tile, alt_u32 val)",800
12847,"static void calc_loop_num(alt_u32 num_loops, alt_u32 *outer_loop, alt_u32 *inner_loop)",809
12848,alt_u32 is_sequencer_done(alt_u32 tile),825
12849,void wait_sequencer_done(alt_u32 tile_mask),830
12850,"static alt_32 wait_for_interpolator(alt_u32 tile_mask, alt_u32 lane_mask, alt_u32 ioereg_mask, alt_u32 value)",846
12851,static void get_phy_configuration(alt_u32 reference_tile),897
12852,"alt_32 test_dqs_enable(alt_u32 tile, alt_u32 lane)",983
12853,alt_32 get_smallest_vfifo(alt_32 dqs_en_clks),1098
12854,"alt_u32 calibrate_dqs_enable(alt_u32 tile, alt_u32 lane)",1111
12855,void initialize_broadcasting(void) {,1234
12856,void reset_phy(void) {,1349
12857,void wake_phy(void) {,1362
12858,void configure_inst_rom(void) {,1375
12859,void configure_data_rom(ENUM_DATA_ROM_MODE mode) {,1397
12860,void configure_ac_rom(void) {,1497
12861,void setup_phy_default_delays(alt_u32 tile_mask) {,1531
12862,void turn_on_sequencer(void) {,1629
12863,"static void ioddr_single_read(alt_u32 tile_mask, alt_u32 num_nibbles)",1645
12864,"static void ioddr_multi_read(alt_u32 op_mode, alt_u32 tile_mask, alt_u32 lane_mask, alt_u32 start_delay_val, alt_u32 num_delay_steps, alt_u32 num_nibbles)",1668
12865,"static void ioddr_auto_sweep_read(alt_u32 tile_mask, alt_u32 num_loops, alt_32 delay_update_latency, alt_u32 num_nibbles)",1784
12866,"static void analyze_windows(alt_u32 * tile_mask, ioddr_window_sweep_t sweep_type)",1823
12867,"static void full_window_sweep(alt_u32 tile_mask, alt_u32 read_num_nibbles)",1904
12868,void ioddr_main (void),2141
12869,ENUM_ERR_CODE_DFT test_dc(void) {,34
12870,"void dc_set_stat(alt_u32 tile, ENUM_ERR_CODE_DFT err_code) {",34
12871,void dc_set_stage_impl(ENUM_TD_STAGE stage) {,46
12872,void dc_set_final_stat() {,54
12873,void dc_init_stat(bool dc_dbg_enabled) {,83
12874,void dc_print_test_data(void) {,92
12875,alt_32 dc_scale_dc(alt_32 dc) {,112
12876,alt_u32 dc_tile_enable(void) {,121
12877,static void set_out_buf_enable_staggered(alt_u32 en) {,347
12878,"static void set_dc_mux(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 quad) {",380
12879,static void set_dc(dc_ctx_t *dcx) {,413
12880,static void run_dc(void) {,472
12881,"static void read_dc(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 quad) {",492
12882,static void check_result(dc_ctx_t *dcx) {,511
12883,"static DC_DATA data_signature(ENUM_CAL_PIN_DCD_PINS cal_pins, ENUM_DC_VAL dc_val, alt_u32 tile, alt_u32 pin, DC_DATA data) {",589
12884,static void update_data(dc_ctx_t *dcx) {,597
12885,static void measure_dc(dc_ctx_t *dcx) {,755
12886,ENUM_ERR_CODE_DFT test_pin_dcc(void) {,777
12887,static void write_phase_positions(,127
12888,static void test_dcd(,147
12889,static void calc_gold(,179
12890,static void check_result(,234
12891,static void store_data(,259
12892,static void test_dcd_all() {,305
12893,ENUM_ERR_CODE_DFT test_pll_dcc(void) {,364
12894,static alt_u32 pair_number(alt_u32 pin) {,161
12895,static bool pin_enabled(alt_u32 pin) {,166
12896,static bool pin_bonded(alt_u32 pin) {,177
12897,static bool lane_bonded(alt_u32 lane) {,184
12898,"static void calc_rupdn(alt_u32 pin_up, alt_u32 pin_dn) {",188
12899,"static void calc_leak(ENUM_NTL_DATA_TYPE type, ENUM_NTL_RESULT_TYPE result_type,",211
12900,"static void ntl_calc(ENUM_NTL_DATA_TYPE type, alt_u32 pin) {",225
12901,alt_32 adc_actual_val(alt_u32 val) {,244
12902,"static inline void csim_test(ENUM_NTL_DATA_TYPE type, alt_u32 ln, alt_u32 pin)  {",252
12903,static void ntl_powerup(void) {,293
12904,"static void measure_voltages(ENUM_NTL_DATA_TYPE type, DATA_ADC *first_pin,",351
12905,static ENUM_ERR_CODE_DFT check_results() {,438
12906,static ENUM_ERR_CODE_DFT ntl_measure() {,530
12907,static void init_ntl(void) {,591
12908,static void init_io_lanes(void) {,614
12909,void receive_ntl_param(void) {,629
12910,void measure_vsshi(void) {,710
12911,void test_adc_offset(void) {,782
12912,ENUM_ERR_CODE_DFT test_ntl(void) {,859
12913,TEST_MAIN(test_ntl),897
12914,ENUM_ERR_CODE_DFT test_pll(void) {,39
12915,TEST_MAIN(test_pll),187
12916,ENUM_ERR_CODE_DFT test_vreg(void) {,32
12917,TEST_MAIN(test_vreg),68
12918,"alt_u32 g_heap[BYTES_IN_WORDS(HEAP_SIZE_IN_BYTES)] __attribute__((section("".g_heap""))) = {",2942
12919,static alt_u32 g_user_ram[BYTES_IN_WORDS(USER_RAM_PRI3_SLAVE_AV_MM_SLV_SPAN)],3199
12920,alt_32 g_max_effective_dqs_en_phases; // max effective dqs_en delay across all groups (combo of vfifo and phase),3234
12921,alt_32 g_cur_rank; // the current rank (try avoid using this variable whenever possible for better modularity),3240
12922,alt_u32 bfm_fail(alt_u32 line_num) {,3902
12923,static void clear_fail_info() {,3917
12924,"static void set_fail_info(ENUM_CAL_ERR err_code, alt_u32 group, alt_u32 err_info) {",3941
12925,static void const_check() {,3973
12926,static void copy_param_table_to_user_ram(void) {,4459
12927,static void init_malloc(void) {,4471
12928,"alt_u32 util_malloc(const alt_u32 size_in_words, alt_u32 **dest) {",4517
12929,static void util_free(alt_u32 token) {,4559
12930,static void util_malloc_check(void) {,4576
12931,void util_malloc_reset(ENUM_MALLOC_RESET_MODE malloc_reset_mode) {,4584
12932,"static alt_u32 util_div_no_check(alt_u32 dividend, alt_u32 divisor) {",4611
12933,"static alt_u32 util_div(alt_u32 dividend, alt_u32 divisor) {",4622
12934,"static alt_u32 util_div_power_2_opt(alt_u32 dividend, alt_u32 divisor) {",4631
12935,static alt_u32 util_log2(alt_u32 data) {,4645
12936,"static alt_32 util_max(alt_32 a, alt_32 b) {",4655
12937,"static alt_32 util_min(alt_32 a, alt_32 b) {",4660
12938,"static alt_u32 util_mod(alt_u32 dividend, alt_u32 divisor) {",4666
12939,"static void util_btfld_set(t_btfld *var, alt_u32 val, alt_32 shift) {",4678
12940,"static alt_u32 util_btfld_get(t_btfld *var, alt_32 shift) {",4699
12941,"static void util_read_intel_hex_from_file(alt_u32 *dest_data, const char *file_name) {",4716
12942,"void util_init_array(alt_u32 *ary, alt_u32 size, alt_u32 val) {",4758
12943,"static alt_u32  ac_rom_data(alt_u32 pin, alt_u32 idx) {",4769
12944,static alt_u32 time_for_refresh(void) {,4774
12945,"static alt_u32 hmc_read(alt_u32 center_base, alt_u32 hmc_base, alt_u32 addr) {",4784
12946,"static alt_u32 hmc_mmr_access_succeeded(alt_u32 center_base, alt_u32 hmc_base) {",4791
12947,"alt_u32 hmc_mmr_read(alt_u32 center_base, alt_u32 addr) {",4795
12948,"void hmc_mmr_write(alt_u32 center_base, alt_u32 addr, alt_u32 data) {",4804
12949,static void set_out_track_speed_in_mem_clk(alt_u32 speed) {,4811
12950,static void set_dqs_en_track_speed_in_mem_clk(alt_u32 speed) {,4819
12951,static void set_in_track_speed_in_mem_clk(alt_u32 speed) {,4828
12952,static alt_u32 is_sequencer_done(void) {,4839
12953,static void wait_sequencer_done(void) {,4845
12954,static void wait_sequencer_done_with_timeout_ns(alt_u32 timeout) {,4850
12955,static void send_cmd_no_wait(alt_u32 cmd) {,4859
12956,static void send_cmd_wait(alt_u32 cmd) {,4863
12957,static void set_cal_stat(ENUM_CAL_STAT stat) {,4869
12958,static alt_u32 read_input_pin_toggle_cnt(alt_u32 pin_addr) {,4905
12959,"static void set_ac_rom_override(alt_u32 ac_idx, alt_u32 ovr) {",4911
12960,"static void set_cs_out_enable(alt_u32 cs_mask, ENUM_SET_CS_OUT_MODE set_cs_mode) {",4924
12961,static void set_addr_mirror(alt_u32 rank) {,4947
12962,"static void set_rank_impl(alt_32 rank_sel, ENUM_ODT_MODE odt_mode, alt_u32 is_lrdimm_odd_pin) {",5027
12963,"static void set_rank(alt_32 rank_sel, ENUM_ODT_MODE odt_mode) {",5189
12964,"static void set_pin_mask(alt_u32 addr, alt_u32 id) {",5194
12965,"static void set_iob_mask(alt_u32 addr, alt_u32 id) {",5206
12966,static void delay_for_n_mem_clocks_no_skip(const alt_u32 clocks) {,5218
12967,static void delay_for_n_mem_clocks(const alt_u32 clocks) {,5279
12968,"static alt_32 get_rank_offset_delay_in_osc_clks(alt_32 rank_skew_in_out_phases, ENUM_RANK_OFFSET_TYPE type) {",5294
12969,"static alt_32 get_rank_offset(alt_32 rank_skew_in_out_phases, ENUM_RANK_OFFSET_TYPE type) {",5325
12970,"static alt_u32 get_lane_idx_read(alt_u32 dqs, alt_u32 lane) {",5355
12971,"static alt_u32 get_lane_idx_write(alt_u32 dqs, alt_u32 lane) {",5359
12972,static alt_u32 out_delay_offset_write(alt_u32 addr) {,5363
12973,static alt_u32 out_delay_offset_read(alt_u32 addr) {,5367
12974,static alt_u32 dq_in_offset(alt_u32 dq_idx) {,5374
12975,static alt_u32 dbi_in_offset(alt_u32 dbi) {,5381
12976,static alt_u32 dq_out_offset_write(alt_u32 dq_idx) {,5388
12977,static alt_u32 dq_out_offset_read(alt_u32 dq_idx) {,5393
12978,static alt_u32 get_read_lane_addr(alt_u32 lane_idx) {,5398
12979,static alt_u32 get_write_lane_addr(alt_u32 lane_idx) {,5402
12980,static alt_u32 is_x4_dqs_b(alt_u32 dqs) {,5407
12981,"static alt_u32 dqs_in_b_offset(alt_u32 dqs, alt_u32 lane) {",5412
12982,"static alt_u32 dqs_in_offset(alt_u32 dqs, alt_u32 lane) {",5418
12983,"static alt_u32 dqs_en_delay_offset(alt_u32 dqs, alt_u32 lane) {",5426
12984,"static alt_u32 dqs_en_delay_b_offset(alt_u32 dqs, alt_u32 lane) {",5435
12985,static alt_u32 dqs_out_offset_write(alt_u32 dqs) {,5442
12986,static alt_u32 dqs_out_offset_read(alt_u32 dqs) {,5448
12987,static alt_u32 dm_dbi_out_offset_write(alt_u32 dm) {,5454
12988,"static alt_u32 vfifo_offset(alt_u32 dqs, alt_u32 lane) {",5459
12989,"static alt_u32 dcc_dqsb_info(ENUM_DCC_DQSB_INFO mode, alt_u32 data) {",5545
12990,"static alt_u32 get_dcc_addr(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 pin_addr) {",5558
12991,static alt_u32 get_dcc_base(alt_u32 tile_idx) {,5582
12992,static alt_u32 dcc_dqs_in_lane_base(alt_u32 lane) {,5590
12993,static alt_u16 *sw_shadow_addr(alt_u32 addr) {,5604
12994,"static void sw_shadow_write(alt_u32 addr, alt_u32 data) {",5622
12995,static alt_u32 sw_shadow_read(alt_u32 addr) {,5633
12996,static alt_32 get_dq_in_delay(alt_u32 dq_idx) {,5654
12997,static alt_32 get_dbi_in_delay(alt_u32 dbi) {,5662
12998,"static alt_32 get_dqs_lane_in_delay(alt_u32 dqs, alt_u32 lane) {",5670
12999,static alt_32 get_dqs_in_delay(alt_u32 dqs) {,5685
13000,"static alt_32 get_dqs_lane_in_b_delay(alt_u32 dqs, alt_u32 lane) {",5694
13001,static alt_32 get_dqs_en_delay(alt_u32 dqs) {,5701
13002,static alt_32 get_dqs_en_pattern_position(alt_u32 dqs) {,5714
13003,static alt_32 get_csr_dqs_en_phase(alt_u32 dqs) {,5720
13004,static alt_32 get_cur_dq_out_delay(alt_u32 dq_idx) {,5728
13005,static alt_32 get_final_dq_out_delay(alt_u32 dq_idx) {,5737
13006,static alt_32 get_cur_dqs_out_delay(alt_u32 dqs) {,5743
13007,static alt_32 get_final_dqs_out_delay(alt_u32 dqs) {,5752
13008,static alt_32 get_out_delay_csr(alt_u32 addr) {,5757
13009,static alt_32 get_out_delay_write(alt_u32 addr) {,5762
13010,static alt_32 get_final_dm_dbi_out_delay(alt_u32 dm) {,5771
13011,static alt_32 get_vfifo_latency(alt_u32 dqs) {,5778
13012,static alt_32 get_csr_vfifo_latency(alt_u32 dqs) {,5784
13013,static alt_32 get_lfifo_latency(alt_u32 dqs) {,5793
13014,static alt_32 get_csr_lfifo_latency(alt_u32 dqs) {,5800
13015,static alt_32 get_ca_delay(alt_u32 ca_idx) {,5809
13016,"static inline void range_check(alt_32 val, alt_32 min, alt_32 max) {",5815
13017,static inline void check_out_delay_range(alt_32 delay) {,5824
13018,static inline void check_dqsen_delay_range(alt_32 delay) {,5828
13019,static inline void check_dq_in_delay_range(alt_32 delay) {,5832
13020,static inline void check_dqs_in_delay_range(alt_32 delay) {,5836
13021,"static void set_dq_in_delay(alt_u32 dq_idx, alt_32 delay) {",5844
13022,"static void set_dbi_in_delay(alt_u32 dqs, alt_32 delay) {",5865
13023,"static void set_dqs_lane_in_b_delay(alt_u32 dqs, alt_u32 lane, alt_32 delay) {",5886
13024,"static void set_dqs_lane_in_a_delay(alt_u32 dqs, alt_u32 lane , alt_32 delay) {",5903
13025,"static void set_dqs_in_delay(alt_u32 dqs, alt_32 delay) {",5918
13026,"static void spread_dq_in_delay(alt_u32 dq_idx, alt_32 delay) {",5938
13027,"static void set_dqs_en_delay_impl(alt_u32 dqs, alt_32 delay, ENUM_SET_DQS_EN set_dqs_en_sel) {",5959
13028,"static void set_dqs_en_delay(alt_u32 dqs, alt_32 delay) {",6016
13029,"static void set_dqs_en_delay_single_rank(alt_u32 dqs, alt_32 delay) {",6022
13030,"static void set_dq_out_delay(alt_u32 dq_idx, alt_32 delay) {",6030
13031,"static void spread_dq_out_delay(alt_u32 dq_idx, alt_32 delay, alt_u32 spread_range_shift) {",6047
13032,"static void set_dqs_out_delay(alt_u32 dqs, alt_32 delay) {",6070
13033,"static void set_dm_dbi_out_delay(alt_u32 dm, alt_32 delay) {",6085
13034,"static void set_vfifo_latency(alt_u32 dqs, alt_32 latency) {",6100
13035,"static void set_lfifo_latency(alt_u32 dqs, alt_32 lfifo) {",6119
13036,"static void set_ca_delay(alt_u32 ca_idx, alt_32 delay) {",6137
13037,static void set_ca_delay_all(alt_32 delay) {,6149
13038,alt_32 get_smallest_vfifo(alt_32 dqs_en_clks) {,6203
13039,"static alt_u32 calc_lfifo_latency(alt_u32 effective_dqs_phases, alt_u32 burst_len) {",6212
13040,static alt_u32 calc_rlat(alt_32 lfifo_latency) {,6231
13041,static void set_rlat(alt_32 rlat) {,6236
13042,static void set_wlat(alt_32 wlat) {,6245
13043,"static void dbg_log_margins(debug_cal_data_t *data, alt_32 left_margin, alt_32 right_margin) {",6255
13044,"static void dbg_log_edges(debug_cal_data_t *data, alt_32 delay, alt_32 left_edge, alt_32 right_edge) {",6262
13045,static void set_dq_dbi_in_delay_all_groups(alt_32 delay) {,6274
13046,static void set_dbi_in_delay_all_groups(alt_32 delay) {,6293
13047,"static void set_dqs_in_delay_all_groups_impl(alt_32 delay, ENUM_DQS_IN_SEL dqs_in_sel) {",6309
13048,static void set_dqs_in_delay_all_groups(alt_32 delay) {,6328
13049,static void set_dqs_en_delay_all_groups(alt_32 delay) {,6333
13050,static void set_dq_out_delay_all_groups(alt_32 delay) {,6350
13051,static void set_dq_out_delay_individually_all_groups(alt_16 *delay) {,6363
13052,static void set_dqs_out_delay_all_groups(alt_32 delay) {,6375
13053,static void set_pipe_compensated_vfifo_latency_all_groups(alt_32 latency) {,6386
13054,static void set_dm_dbi_out_delay_all_groups(alt_32 delay) {,6400
13055,static void set_pipe_compensated_lfifo_latency_all_groups(alt_32 latency) {,6416
13056,"static void spread_dq_out_delay_all_groups(alt_32 delay, alt_u32 spread_range_shift) {",6427
13057,static void spread_dq_in_delay_all_groups(alt_32 delay) {,6436
13058,alt_u32 cal_fail(ENUM_CAL_ERR cal_err_code) {,6446
13059,static void print_all_delays() {,6474
13060,"void x_rank_init(ENUM_RANK_OPER_MODE oper_mode, alt_32 src_rank, alt_32 dest_rank) {",6582
13061,void x_rank_exec(alt_u32 src_addr) {,6591
13062,alt_32 x_rank_end(void) {,6642
13063,"static alt_32 cross_rank_oper(ENUM_RANK_OPER_MODE oper_mode, ENUM_DELAY_MASK delay_mask, alt_32 src_rank, alt_32 dest_rank) {",6664
13064,"static void copy_all_delays(alt_u32 src_rank, alt_u32 dest_rank) {",6783
13065,"static void swap_all_delays(alt_u32 src_rank, alt_u32 dest_rank) {",6789
13066,static void unify_all_rank_delays(void) {,6795
13067,static alt_32 get_data_out_rank_skew(void) {,6806
13068,static alt_32 get_dqs_en_rank_skew(void) {,6812
13069,static void mem_precharge(void) {,6823
13070,static void mem_activate(void) {,6831
13071,static void manage_banks(ENUM_BANK_MODE mode) {,6846
13072,"static void write_ac(alt_u32 pin_idx, alt_u32 ac_rom_idx, alt_u32 val, ENUM_WRITE_MRS_VAL_MODE mode) {",6882
13073,"static void write_mrs_val_impl(alt_u32 mrs_cfg, ENUM_WRITE_MRS_VAL_MODE mrs_mode, alt_u32 mrs_ac_rom_idx) {",6918
13074,static void ATTR_SOFT_M20K ddr4_lrdimm_write_mpr_val(alt_u32 mrs_cfg) {,7057
13075,"static alt_u32 ATTR_SOFT_M20K get_rdimm_cfg(alt_u32 value_width, alt_u32 idx) {",7126
13076,static alt_u32 ATTR_SOFT_M20K get_lrdimm_cfg(alt_u32 idx) {,7139
13077,static void write_mrs_val(alt_u32 mrs_cfg) {,7151
13078,static void write_mrs(alt_u32 pt_idx) {,7194
13079,static void write_mrs_all(ENUM_WRITE_MRS_MODE mrs_mode) {,7203
13080,static void mem_lpddr3_guaranteed_precharge(void) {,7276
13081,static void set_mrs_mode(ENUM_MRS_MODE mrs_mode) {,7282
13082,"static void ATTR_SOFT_M20K write_ddr3_control_word(alt_u32 addr, alt_u32 val) {",7329
13083,"static void ATTR_SOFT_M20K write_ddr4_rcd_control_word(alt_u32 value_width, alt_u32 addr, alt_u32 val) {",7350
13084,"static void ATTR_SOFT_M20K write_ddr4_db_control_word(alt_u32 value_width, alt_u32 addr, alt_u32 val) {",7381
13085,"static void ATTR_SOFT_M20K program_ddr3_rdimm_control_word(alt_u32 addr, alt_u32 val) {",7411
13086,"static void ATTR_SOFT_M20K program_ddr4_rcd_control_word(alt_u32 value_width, alt_u32 addr, alt_u32 val) {",7423
13087,"static void ATTR_SOFT_M20K program_ddr4_db_control_word(alt_u32 function_space, alt_u32 value_width, alt_u32 addr, alt_u32 val) {",7439
13088,static void ATTR_SOFT_M20K program_ddr4_db_F6BC4x(void) {,7460
13089,static void ATTR_SOFT_M20K ddr4_lrdimm_function_space_restore() {,7479
13090,static void ATTR_SOFT_M20K init_rdimm_lrdimm_before_mrs(void) {,7484
13091,static void ATTR_SOFT_M20K init_rdimm_lrdimm_after_mrs(void) {,7567
13092,"static void set_vref_in(alt_u32 lane_addr, alt_32 vref) {",7598
13093,static void set_vref_in_all_lanes(alt_32 vref) {,7604
13094,"static void ATTR_SOFT_M20K set_ddr4_lrdimm_db_vref(alt_32 vref, alt_32 en) {",7610
13095,"static void set_vref_out(alt_32 vref, ENUM_VREF_TRAINING_MODE vref_training_enabled) {",7637
13096,"static void set_ddr4_dram_access(alt_u32 dq, alt_u32 en) {",7659
13097,"static void set_ddr4_per_dram_addressability(alt_u32 en, alt_u32 rtt_nom_park_during_pda) {",7707
13098,static void exit_ddr4_pda() {,7759
13099,static void ATTR_SOFT_M20K exit_ddr4_lrdimm_pba(void) {,7769
13100,"static void ATTR_SOFT_M20K set_ddr4_db_access(alt_32 dqs, alt_32 en) {",7779
13101,static void ATTR_SOFT_M20K enter_ddr4_lrdimm_pba(void) {,7784
13102,static void enter_vref_out_cal(void) {,7789
13103,static void exit_vref_out_cal(alt_32 vref) {,7803
13104,static void override_vref_out(alt_32 vref) {,7811
13105,"static void override_vref_out_one_group(alt_u32 dq, alt_32 vref) {",7820
13106,static void set_ddr4_weak_pull_en_alert_n(alt_u32 en) {,7826
13107,static void ATTR_SOFT_M20K init_lpddr3_after_ca_deskew(alt_u32 rank) {,7841
13108,"static void ATTR_SOFT_M20K config_odt_qdriv(alt_u16 ac_opt, alt_u16 ci_opt) {",7868
13109,static void ATTR_SOFT_M20K init_mem_qdriv(void) {,7877
13110,static void ATTR_SOFT_M20K init_mem_rld2(void) {,7937
13111,static void ATTR_SOFT_M20K init_mem_rld3() {,7962
13112,static void init_mem(ENUM_INIT_MEM_MODE init_mode) {,8010
13113,static void ATTR_SOFT_M20K reset_mem_rld3() {,8145
13114,static void mem_handoff(void) {,8159
13115,static void set_seq_enable(const alt_u32 ena) {,8207
13116,static void set_bcast_en(const ENUM_BCAST_MODE mode) {,8328
13117,static void reset_tiles(ENUM_RESET_MODE reset_mode) {,8472
13118,static void set_ac_rom_write_en(const alt_u32 ena) {,8608
13119,alt_u8 * get_global_param_offs(alt_u32 byte_offset) {,8621
13120,mem_param_t * get_mem_param(alt_u32 mem_idx) {,8626
13121,alt_u32 mem_interface_exists(alt_u32 mem_idx) {,8643
13122,static alt_u32 mem_interface_exists_and_cal_done(alt_u32 mem_idx) {,8647
13123,static void assert_reset(ENUM_TILES_USED_BY used_by) {,8656
13124,static void remove_reset_c2f_f2c(void) {,8682
13125,static void wait_phy_ready() {,8695
13126,static void wait_oct_ready() {,8742
13127,"static void write_inst_rom_entry(alt_u32 inst_idx, alt_u16 val) {",8781
13128,"static void load_inst_rom(const alt_u16 *inst_rom_ptr, alt_u32 inst_rom_size, ENUM_LOAD_INST_ROM_MODE load_inst_rom_mode) {",8788
13129,"static void fill_partial_rom(alt_u32 addr_begin, alt_u32 addr_end, alt_u32 val) {",8808
13130,static void patch_inst_rom_ac() {,8819
13131,static void patch_inst_rom_do(ENUM_DO_PATTERN do_pattern) {,8907
13132,static void ATTR_SOFT_M20K qdriv_init_lbk(void) {,9023
13133,static void ATTR_SOFT_M20K qdriv_set_lbk(alt_u32 lbk) {,9034
13134,"static void load_ac_rom(const alt_u16 *ac_rom_ptr, alt_u32 ac_rom_size) {",9044
13135,"static void check_ac_rom_parity(const alt_u16 *ac_rom_ptr, alt_u32 ac_rom_size) {",9183
13136,static void map_stress_pattern_to_pins() {,9204
13137,"static void load_data_rom(ENUM_DATA_PATTERN pat, ENUM_PATTERN_VARIANT variant) {",9272
13138,static void load_ck_ac_rom(void) {,9496
13139,static void init_rom_data(void) {,9505
13140,static void set_dm_dbi_en(ENUM_SET_DM_DBI_EN mode) {,9529
13141,"static void set_idle_term(ENUM_IDLE_TERM_PINS pins, alt_u32 disable) {",9566
13142,static void set_weak_pull_en_dm(alt_u32 en) {,9592
13143,static void set_weak_pull_en_dqs(alt_u32 en) {,9606
13144,static void set_hmc_reorder_en(alt_u32 en) {,9645
13145,static void init_controller() {,9687
13146,static void controller_handoff() {,9700
13147,"static void store_lane_addr(ENUM_STORE_ADDR addr_type, alt_u32 dqs_idx, alt_u32 addr) {",9711
13148,static void print_param_table(alt_u8 *pin_addr_ptr) {,9737
13149,"static void init_parameter_table(alt_u32 mem_idx, ENUM_INIT_MODE init_mode) {",9913
13150,static void read_csr_params(void) {,10541
13151,static void release_vsshi_reset() {,10681
13152,static void prep_emif() {,10690
13153,static void read_hmc_mmr_params(void) {,10707
13154,"static alt_u32 set_phy_tracking_enable(alt_u32 en, alt_32 track_speed) {",10742
13155,static void set_tracking_mgr_enable(alt_u32 en) {,10767
13156,"static void write_phase_positions(const alt_u32 *dcd_offs, alt_u32 num_tiles, const alt_u8 *phase_pos,",10941
13157,"static void test_dcd(const alt_u32 *dcd_offs, alt_u32 num_tiles,",10976
13158,static alt_u32 get_best_osc_sel(alt_16 (*dcd_counters)[NUM_DCC_ALL_COUNTERS]) {,11038
13159,static alt_u32 single_step_bin_search_dcc_phase(,11065
13160,"static ENUM_CAL_ERROR_CODE calibrate_dcd_impl(const alt_u32 *dcd_offs, alt_u32 num_tiles) {",11182
13161,"static alt_32 util_div_no_check_signed(alt_32 dividend, alt_u32 divisor) {",11376
13162,"static void dcd_calc_phase_bias(const alt_u16 *duty, alt_16 *phase_bias) {",11382
13163,"static void test_dcd(const alt_u32 *dcd_offs, alt_u32 num_tiles,",11479
13164,static alt_u32 get_best_osc_sel(alt_8 (*fitting_curve)[NUM_DCC_PIECEWISE_POINTS]) {,11516
13165,"static void dcd_interpolate(const alt_16 *y_in, const alt_16 *axis_y, const alt_u8 *axis_x,",11557
13166,"static ENUM_CAL_ERROR_CODE calibrate_dcd_impl(const alt_u32 *dcd_offs, alt_u32 num_tiles) {",11632
13167,static ENUM_CAL_ERROR_CODE calibrate_dcd(ENUM_PLL_DCD_CAL_MODE mode) {,12019
13168,void measure_delay_chains(void) {,12142
13169,static void init_sequencer(ENUM_INIT_MODE init_mode) {,12259
13170,"static alt_u32 stress_pattern(ENUM_DATA_PATTERN pat, ENUM_STRESS_PATTERN op) {",12438
13171,static void int_refresh(void* context) {,12493
13172,"static void test_dqs_en(ENUM_DQS_EN_CAL_MODE mode, alt_u32 track_speed_in_mem_clk) {",12568
13173,static alt_u32 result_dqs_en(alt_u32 dqs) {,12624
13174,"static t_btfld result_read(alt_u32 dqs, ENUM_STOP_CONDITION stop_condition) {",12630
13175,"static t_btfld result_dbi_read(alt_u32 dqs, ENUM_STOP_CONDITION stop_condition) {",12646
13176,"static t_btfld result_write(alt_u32 dqs, ENUM_STOP_CONDITION stop_condition) {",12655
13177,static alt_u32 result_lane(alt_u32 lane) {,12673
13178,"static ENUM_CAL_ERROR_CODE result_write_dqs_group(alt_u32 dqs, ENUM_RESULT_DQS_GROUP result_mode) {",12681
13179,static void clear_checker_errror() {,12695
13180,"void config_checkers(ENUM_CHECKER_CONFIG checker_cfg, alt_u32 x1_cfg0, alt_u32 x12_cfg0) {",12743
13181,static void enable_checkers(const alt_u32 enable) {,12899
13182,static void test_write_leveling() {,12911
13183,static void config_write_leveling_ddr() {,12922
13184,static void exit_write_leveling_ddr() {,13021
13185,"static void calc_loop_num(alt_u32 num_loops, alt_u32 *outer_loop, alt_u32 *inner_loop) {",13053
13186,"static void test_read_impl(alt_u32 num_loops, alt_32 delay_update_latency, alt_u32 redo) {",13073
13187,static void test_ddrx_ca_level_read_impl(alt_u32 redo) {,13174
13188,static void test_rld3_rtr_impl(alt_u32 redo) {,13215
13189,static void test_rld3_addr_deskew_read(alt_32 is_ba_deskew) {,13246
13190,"void wait_qk_tracking_done(alt_u32 num_mem_clk, alt_u32 track_speed) {",13256
13191,"static void test_read(alt_u32 num_loops, alt_32 delay_update_latency) {",13294
13192,static void redo_test_read(void) {,13300
13193,static void test_ddrx_ca_level_read() {,13306
13194,static void redo_test_ddrx_ca_level_read() {,13310
13195,static void test_rld3_rtr() {,13315
13196,static void redo_test_rld3_rtr() {,13320
13197,"static void test_write_impl(ENUM_TEST_WRITE_MODE do_dm_test,",13333
13198,"static void test_write(alt_u32 num_loops, alt_32 delay_update_latency) {",13513
13199,"static void test_write_dm(alt_u32 num_loops, alt_32 delay_update_latency) {",13517
13200,static void test_inf_read_rld_qdr(void) {,13522
13201,static void redo_test_write() {,13528
13202,static ENUM_CAL_ERROR_CODE test_read_get_result(,13534
13203,"static void ATTR_SOFT_M20K freeze_x1_checker_by_write_test(ENUM_STOP_CONDITION stop_condition, alt_u32 sweep_steps) {",13553
13204,static void ATTR_SOFT_M20K set_cke_low_on_mrs_and_des(alt_u32 en) {,13606
13205,static void unify_x12_checker_in_delay_result(void) {,13630
13206,ENUM_CAL_ERROR_CODE calibrate_pll_wrap(alt_u32 tile_enable) {,13694
13207,ENUM_CAL_ERROR_CODE calibrate_pll_fbr(void) {,13714
13208,static ENUM_CAL_ERROR_CODE skip_pll_cal(alt_u32 tile_enable) {,13719
13209,static ENUM_CAL_ERROR_CODE skip_fbr_pll_cal() {,13740
13210,static void test_inf(ENUM_TEST_INF_MODE test_mode) {,13770
13211,static alt_u32 get_dcc_cnt_offs(alt_u32 addr) {,13871
13212,static ENUM_DCC_QUADRANT get_quadrant(alt_u32 addr) {,13912
13213,"static void set_dcc_mux(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 quadrant) {",13923
13214,static alt_u32 pin_dcd_pattern(,13972
13215,"static alt_8 get_dcc(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 pin_addr) {",14094
13216,"static void set_dcc(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 pin_addr, alt_8 dcc) {",14115
13217,static alt_u32 measure_dcc(,14144
13218,static void calculate_final_dqs_in_dcc(,14305
13219,static alt_u32 search_next_dcc(,14366
13220,"static void calc_and_set_pin_dcc(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 num_pins,",14435
13221,static void set_pin_dcc_all(alt_u32 dc) {,14486
13222,"static void adjust_delays_post_dcd(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 num_pins,",14545
13223,static ENUM_CAL_ERROR_CODE calibrate_pin_dcd_dc_driven(,14646
13224,static ENUM_CAL_ERROR_CODE calibrate_cmd_deskew_ddrx(alt_32 ca_idx) {,14867
13225,static ENUM_CAL_ERROR_CODE calibrate_cmd_deskew_rld3(alt_32 ca_idx) {,15335
13226,static ENUM_CAL_ERROR_CODE calibrate_ca_level(alt_32 rank) {,15705
13227,static ENUM_CAL_ERROR_CODE calibrate_ca_rank_center(void) {,15748
13228,static void load_read_patterns() {,15853
13229,static void load_read_patterns_rld3_addr_deskew() {,15876
13230,static ENUM_CAL_ERROR_CODE calibrate_addr_deskew_rld3(alt_u32 rank) {,15889
13231,"static void change_ac_rom_for_addr_deskew_ddr3(ENUM_CHANGE_ADDR_MODE mode, alt_32 ca_idx_deskew) {",16176
13232,static ENUM_CAL_ERROR_CODE calibrate_addr_deskew_ddr3() {,16401
13233,static ENUM_CAL_ERROR_CODE ca_deskew_ddr4(void) {,16558
13234,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K ca_deskew_lpddr3(alt_u32 lpddr3_rank) {,16976
13235,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_dbi_qdriv(void) {,17286
13236,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K ca_deskew_qdriv(void) {,17451
13237,static ENUM_CAL_ERROR_CODE calibrate_ca_deskew(alt_u32 lpddr3_rank) {,17874
13238,"static ENUM_CAL_ERROR_CODE calibrate_vref(ENUM_VREF_MODE vref_mode, ENUM_DATA_PATTERN pat, alt_u8 *vref_val) {",17895
13239,"static ENUM_CAL_ERROR_CODE calibrate_vref(ENUM_VREF_MODE vref_mode, ENUM_DATA_PATTERN pat, alt_u8 *vref_val) {",18420
13240,"static ENUM_CAL_ERROR_CODE calibrate_vref_out(ENUM_DATA_PATTERN pat, alt_u32 rtt_nom_park_during_pda) {",18426
13241,static ENUM_CAL_ERROR_CODE calibrate_vref_in(ENUM_DATA_PATTERN pat) {,18550
13242,static ENUM_CAL_ERROR_CODE debug_per_pin_vref_in(void) {,18601
13243,"static ENUM_CAL_ERROR_CODE calibrate_read_deskew_impl(ENUM_READ_DESKEW_TEST_MODE test_mode,",18662
13244,"static ENUM_CAL_ERROR_CODE calibrate_read_deskew(ENUM_READ_DESKEW_TEST_MODE test_mode,",19279
13245,static ENUM_CAL_ERROR_CODE calibrate_read_deskew_with_dqsout_retry(void) {,19317
13246,static ENUM_CAL_ERROR_CODE test_read_per_dqs(alt_u32 dqs) {,19384
13247,static ENUM_CAL_ERROR_CODE bringup_dqs_en_sweep() {,19399
13248,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_dqs_en_qdr_rld() {,19516
13249,static void ATTR_SOFT_M20K ddr4_lrdimm_preamble_training_en(alt_32 en) {,19628
13250,static ENUM_CAL_ERROR_CODE calibrate_dqs_en() {,19646
13251,static ENUM_CAL_ERROR_CODE calculate_lfifo(void) {,19969
13252,static void optimize_lfifo() {,19991
13253,static ENUM_CAL_ERROR_CODE calibrate_ddr_write_level(void) {,20083
13254,static ENUM_CAL_ERROR_CODE calibrate_write_level(alt_u32 speed) {,20249
13255,"static ENUM_CAL_ERROR_CODE calibrate_write_deskew(ENUM_DM_DESKEW_MODE dm_deskew_mode,",20602
13256,"static ENUM_CAL_ERROR_CODE calibrate_write_deskew_with_vrefout_retry(ENUM_DM_DESKEW_MODE dm_deskew_mode, ENUM_DATA_PATTERN data_pat) {",21166
13257,"static void set_dcc_by_pin_type(ENUM_CAL_PIN_DCD_PINS cal_pins, SET_DCC_BY_PIN_TYPE_MODE mode, alt_8 *dcc) {",21219
13258,"static ENUM_CAL_ERROR_CODE calibrate_pin_dcd_window_driven(ENUM_CALIBRATE_PIN_DCD_MODE in_out_dcd_mode,",21266
13259,static void init_ctle_write(void) {,21574
13260,static void set_ctle_write(alt_u32 ctle) {,21581
13261,"static void set_ctle_write_one_group(alt_u32 dq, alt_u32 val) {",21604
13262,"static void ctle_write_csim_test(alt_u32 ctle, alt_u8 *curr_wins) {",21612
13263,static ENUM_CAL_ERROR_CODE calibrate_ctle_write(void) {,21628
13264,alt_u32 get_iobuf_addr(alt_u32 pin_addr) {,21777
13265,"static void update_ctle(CTLE_UPDATE_ENUM mode, alt_u32 val) {",21791
13266,"static void ctle_read_csim_test(CTLE_UPDATE_ENUM post_cal_mode, alt_u32 var) {",22032
13267,static void init_ctle_read(void) {,22069
13268,"static void sweep_ctle(CTLE_UPDATE_ENUM pre_cal_mode,",22079
13269,static ENUM_CAL_ERROR_CODE calibrate_ctle_read(void) {,22112
13270,static ENUM_CAL_ERROR_CODE calibrate_ctle_read_all_ranks() {,22201
13271,static ENUM_CAL_ERROR_CODE test_simple_confirm_read(void) {,22334
13272,static ENUM_CAL_ERROR_CODE test_simple_confirm_write(void) {,22354
13273,static ENUM_CAL_ERROR_CODE test_simple_confirm(void) {,22373
13274,static void bringup_write_err_code(ENUM_CAL_ERROR_CODE err_code) {,22380
13275,static void bringup_rw_scoping(ENUM_CAL_ERROR_CODE err_code) {,22390
13276,"static ENUM_CAL_ERROR_CODE mem_skip_calibrate(ENUM_SKIP_CAL skip_cal_mode,",22405
13277,"static ENUM_CAL_ERROR_CODE init_all_delays(alt_32 wlat_shrink_after_wl, alt_32 command_delay_increment_after_ca_deskew) {",23041
13278,static void adjust_delays_after_calibration(void) {,23051
13279,static void sequencer_handoff(ENUM_HANDOFF_MODE handoff_mode) {,23350
13280,static ENUM_HPS_REQ_STATUS handle_warm_reset(alt_u32 itf_idx) {,23435
13281,void init_user_reset_req(void) {,23619
13282,ENUM_CAL_LOOP_STAT init_user_cal_req(void) {,23746
13283,static void bringup_guarantee_rw() {,24064
13284,"static alt_32 ATTR_SOFT_M20K read_dq_in_group(alt_32 dqs, alt_32 pass_all) {",24084
13285,static alt_u32 ATTR_SOFT_M20K encode_ddr4_lrdimm_db_deskew(alt_32 delay) {,24099
13286,"static void ATTR_SOFT_M20K ddr4_lrdimm_load_mpr_data(alt_u32 pattern, alt_32 rank, ENUM_DDR4_LRDIMM_LOAD_DATA_LOC loc) {",24105
13287,static void ATTR_SOFT_M20K ddr4_lrdimm_test_read(void) {,24168
13288,static void ATTR_SOFT_M20K ddr4_lrdimm_do_write(void) {,24191
13289,static void ATTR_SOFT_M20K set_ddr4_dq_read_enable_mode(alt_32 en) {,24216
13290,static alt_u32 ATTR_SOFT_M20K ddr4_lrdimm_db_test(,24235
13291,static void ATTR_SOFT_M20K set_ddr4_lrdimm_dqs_en_cal_mode(alt_32 en) {,24306
13292,static void ATTR_SOFT_M20K exit_db_training(void) {,24336
13293,"static void ATTR_SOFT_M20K set_ddr4_mpr_mode(alt_32 en, alt_32 rank) {",24341
13294,"static void ATTR_SOFT_M20K set_ddr4_write_leveling_mode(alt_32 en, alt_32 rank) {",24352
13295,static void ATTR_SOFT_M20K set_ddr4_lrdimm_rank_selector(alt_32 rank) {,24384
13296,"static alt_32 ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside_deskew(ENUM_READ_OR_WRITE read_or_write, alt_u32 *grp_result, alt_32 rank) {",24399
13297,static alt_32 ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside_fifo(,24576
13298,"static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside_fifo_and_deskew(ENUM_READ_OR_WRITE read_or_write, alt_32 rank) {",24738
13299,"static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside_level(ENUM_READ_OR_WRITE read_or_write, alt_32 rank) {",24788
13300,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside(alt_32 rank) {,24934
13301,"static void extract_linear_interpolation(alt_u32 x, const alt_u32 *x_array, alt_u32 size_array, linear_interp_t *lin) {",24993
13302,"static alt_u32 linear_interp(const alt_u32 *y, linear_interp_t *lin) {",25021
13303,static ENUM_CAL_ERROR_CODE init_phase_interpolater(void) {,25034
13304,static ENUM_CAL_ERROR_CODE mem_calibrate(void) {,25168
13305,"ENUM_CAL_ERROR_CODE run_mem_calibrate(ENUM_INIT_MODE init_mode, alt_u32 skip_reset, alt_u32 first_cal_after_reset) {",26134
13306,static void bringup_seq_bus() {,26340
13307,"ENUM_CAL_ERROR_CODE mem_cal_main(alt_u32 mem_idx, ENUM_INIT_MODE init_mode, alt_u32 skip_reset) {",26376
13308,static void timer_interrupt_latency_irq(void* context) {,26493
13309,static void bringup_tests(void) {,26507
13310,static ENUM_CAL_ERROR_CODE direct_test_main() {,26574
13311,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,26694
13312,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K soft_ram_sanity(void) {,26731
13313,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,26736
13314,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,26766
13315,"static ENUM_CAL_ERROR_CODE test_reg_decoding(TEST_MODE mode, alt_u32 tile_mask) {",26800
13316,"static ENUM_CAL_ERROR_CODE test_reg(alt_u32 num_tests, alt_u32 tile_mask) {",26919
13317,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,26936
13318,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,26978
13319,static void double_poll(void) {,27051
13320,static void bfm_post_cal_main(void) {,27071
13321,void init_iossm(void) {,27213
13322,ENUM_CAL_ERROR_CODE direct_test(void) {,27256
13323,static void config_timer(void) {,27269
13324,static void set_param_table_flags(void) {,27295
13325,"alt_u32 consume_param_table(alt_u32 addr, alt_u32 pkt_size_in_words) {",27366
13326,static void seq_main_init_powerup(void) {,27398
13327,void seq_main_init(ENUM_SEQ_MAIN_MODE mode) {,27471
13328,"ENUM_CAL_LOOP_STAT seq_main_cal(ENUM_TILES_USED_BY used_by, ENUM_SEQ_CAL_MODE seq_cal_mode) {",27548
13329,ENUM_CAL_LOOP_STAT seq_main_poll() {,27876
13330,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13331,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13332,static void update_iossm_stat(void) {,56
13333,static void consume_param_table_delayed(void) {,76
13334,ENUM_EMIF_CAL_STAT emif_cal_loop(void) {,110
13335,void emif_cal_init(ENUM_SEQ_INIT_MODE mode) {,262
13336,"void emif_cal_consume_param_table(uint32_t addr, uint32_t pkt_size_in_words) {",288
13337,uint32_t emif_direct_test(void) {,295
13338,LIST_CAL_REPORT_DATA(DECLARE_GLOBAL_CAL_REPORT_DATA),63
13339,static void ATTR_SOFT_M20K create_static_structs(void) {,75
13340,static void ATTR_SOFT_M20K create_and_initialize_dynamic_structs(void) {,94
13341,static void ATTR_SOFT_M20K initialize_debug_status(void) {,205
13342,static void ATTR_SOFT_M20K mark_interface_as_ready(void) {,218
13343,static void ATTR_SOFT_M20K mark_interface_as_response_ready(void) {,228
13344,static void ATTR_SOFT_M20K mark_interface_as_illegal_command(void) {,234
13345,static void ATTR_SOFT_M20K initialize_static_structs(void) {,241
13346,static alt_u32 adjust_addr_for_csim_print(alt_u32 *ptr) {,254
13347,"static void dump_one_section(FILE *fh, char *title, alt_u32 *mem_in, alt_u32 size_u32) {",286
13348,static void print_global_param(global_param_t *ptr) {,342
13349,static void print_mem_param(mem_param_t *ptr) {,363
13350,static void print_debug_data(debug_data_t *ptr) {,414
13351,static void print_summary_report(debug_summary_report_t *ptr) {,436
13352,static void print_static_report(debug_static_report_t *ptr) {,478
13353,"static void print_debug_cal_data_t(char *name, debug_cal_data_t *ptr, int size) {",493
13354,"static void print_debug_cal_margin_t(char *name, debug_cal_margin_t *ptr, int size) {",503
13355,"static void print_debug_cal_status_per_group_t(char *name, debug_cal_status_per_group_t *ptr, int size) {",513
13356,"static void print_alt_u32(char *name, alt_u32 *ptr, int size) {",522
13357,"static void print_alt_u8(char *name, alt_u8 *ptr, int size) {",529
13358,"static void print_alt_8(char *name, alt_8 *ptr, int size) {",536
13359,static void print_cal_report(debug_cal_report_t *ptr) {,546
13360,void dump_internal_data(void) {,572
13361,static void print_internal_data(void) {,642
13362,void ATTR_SOFT_M20K init_dynamic_dbg_ptr(void) {,654
13363,void ATTR_SOFT_M20K tclrpt_enable_report(alt_u32 en) {,671
13364,void ATTR_SOFT_M20K tclrpt_enable_emif_report(alt_u32 en) {,676
13365,void ATTR_SOFT_M20K tclrpt_init(void) {,681
13366,void ATTR_SOFT_M20K tclrpt_init_interface(void) {,695
13367,void ATTR_SOFT_M20K tclrpt_wrap_up_interface(void) {,747
13368,void ATTR_SOFT_M20K tclrpt_loop(void) {,771
13369,void reset_tiles_on_freeze(ENUM_RESET_TILE_TYPE type) {,40
13370,void alt_irq_init ( const void* base ),82
13371,void alt_sys_init( void ),93
13372,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
13373,"* copy of this software and associated documentation files (the ""Software""),  *",9
13374,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
13375,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
13376,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
13377,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
13378,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
13379,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
13380,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
13381,int alt_avalon_dma_space (alt_dma_txchan dma),355
13382,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
13383,static void alt_avalon_dma_irq (void* context),446
13384,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
13385,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
13386,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
13387,"* copy of this software and associated documentation files (the ""Software""),  *",9
13388,static void alt_avalon_timer_sc_irq (void* base),54
13389,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
13390,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
13391,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
13392,"* copy of this software and associated documentation files (the ""Software""),  *",9
13393,int alt_timestamp_start(void),64
13394,alt_timestamp_type alt_timestamp(void),100
13395,alt_u32 alt_timestamp_freq(void),138
13396,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
13397,"* copy of this software and associated documentation files (the ""Software""),  *",9
13398,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
13399,"* copy of this software and associated documentation files (the ""Software""),  *",9
13400,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
13401,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
13402,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
13403,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
13404,"* copy of this software and associated documentation files (the ""Software""),  *",9
13405,void alt_vic_irq_init (alt_vic_dev* pdev),45
13406,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
13407,"* copy of this software and associated documentation files (the ""Software""),  *",9
13408,"int alt_ic_isr_register(alt_u32 ic_id,",59
13409,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
13410,"* copy of this software and associated documentation files (the ""Software""),  *",9
13411,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
13412,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
13413,"* copy of this software and associated documentation files (the ""Software""),  *",9
13414,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
13415,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
13416,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
13417,void altera_nios2_gen2_irq_init(void) ,34
13418,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
13419,"* copy of this software and associated documentation files (the ""Software""),  *",9
13420,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
13421,unsigned int alt_busy_sleep (unsigned int us),52
13422,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13423,"* copy of this software and associated documentation files (the ""Software""),  *",9
13424,int ALT_CLOSE (int fildes),42
13425,int ALT_CLOSE (int fildes),64
13426,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
13427,"* copy of this software and associated documentation files (the ""Software""),  *",9
13428,"void alt_dcache_flush (void* start, alt_u32 len)",46
13429,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
13430,"* copy of this software and associated documentation files (the ""Software""),  *",9
13431,void alt_dcache_flush_all (void),41
13432,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
13433,"* copy of this software and associated documentation files (the ""Software""),  *",9
13434,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
13435,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13436,"* copy of this software and associated documentation files (the ""Software""),  *",9
13437,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
13438,ALT_SEM(alt_fd_list_lock),109
13439,int alt_dev_reg (alt_dev* dev),151
13440,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13441,"* copy of this software and associated documentation files (the ""Software""),  *",9
13442,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
13443,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13444,"* copy of this software and associated documentation files (the ""Software""),  *",9
13445,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
13446,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13447,"* copy of this software and associated documentation files (the ""Software""),  *",9
13448,alt_dma_txchan alt_dma_txchan_open (const char* name),51
13449,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13450,"* copy of this software and associated documentation files (the ""Software""),  *",9
13451,void _do_ctors(void),58
13452,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13453,"* copy of this software and associated documentation files (the ""Software""),  *",9
13454,void _do_dtors(void),58
13455,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
13456,"* copy of this software and associated documentation files (the ""Software""),  *",9
13457,alt_ecc_fatal_exception_register(alt_u32 handler),66
13458,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13459,"* copy of this software and associated documentation files (the ""Software""),  *",9
13460,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13461,"* copy of this software and associated documentation files (the ""Software""),  *",9
13462,void __env_lock ( struct _reent *_r ),43
13463,void __env_unlock ( struct _reent *_r ),51
13464,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13465,"* copy of this software and associated documentation files (the ""Software""),  *",9
13466,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13467,"* copy of this software and associated documentation files (the ""Software""),  *",9
13468,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
13469,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13470,"* copy of this software and associated documentation files (the ""Software""),  *",9
13471,void ALT_EXIT (int exit_code),52
13472,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13473,"* copy of this software and associated documentation files (the ""Software""),  *",9
13474,"int ALT_FCNTL (int file, int cmd, ...)",66
13475,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13476,"* copy of this software and associated documentation files (the ""Software""),  *",9
13477,int alt_fd_lock (alt_fd* fd),54
13478,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13479,"* copy of this software and associated documentation files (the ""Software""),  *",9
13480,int alt_fd_unlock (alt_fd* fd),52
13481,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13482,"* copy of this software and associated documentation files (the ""Software""),  *",9
13483,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
13484,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13485,"* copy of this software and associated documentation files (the ""Software""),  *",9
13486,alt_dev* alt_find_file (const char* name),54
13487,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13488,"* copy of this software and associated documentation files (the ""Software""),  *",9
13489,alt_flash_fd* alt_flash_open_dev(const char* name),49
13490,void alt_flash_close_dev(alt_flash_fd* fd),61
13491,int alt_flash_device_register( alt_flash_fd* fd),70
13492,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13493,"* copy of this software and associated documentation files (the ""Software""),  *",9
13494,int ALT_FORK (void),45
13495,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
13496,"* copy of this software and associated documentation files (the ""Software""),  *",9
13497,"int ALT_FSTAT (int file, struct stat *st)",63
13498,"int ALT_FSTAT (int file, struct stat *st)",93
13499,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13500,"* copy of this software and associated documentation files (the ""Software""),  *",9
13501,int alt_fs_reg (alt_dev* dev),57
13502,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
13503,"* copy of this software and associated documentation files (the ""Software""),  *",9
13504,alt_getchar(void),51
13505,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13506,"* copy of this software and associated documentation files (the ""Software""),  *",9
13507,int ALT_GETPID (void),43
13508,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
13509,"* copy of this software and associated documentation files (the ""Software""),  *",9
13510,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
13511,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
13512,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13513,"* copy of this software and associated documentation files (the ""Software""),  *",9
13514,int alt_get_fd (alt_dev* dev),54
13515,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
13516,"* copy of this software and associated documentation files (the ""Software""),  *",9
13517,/* The compiler inserts calls to mcount() at the start of,48
13518,static __inline__ void * mcount_allocate(unsigned int size),133
13519,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
13520,static int nios2_pcsample_init(void),218
13521,static alt_u32 nios2_pcsample(void* context),250
13522,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
13523,"* copy of this software and associated documentation files (the ""Software""),  *",9
13524,"void alt_icache_flush (void* start, alt_u32 len)",42
13525,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
13526,"* copy of this software and associated documentation files (the ""Software""),  *",9
13527,void alt_icache_flush_all (void),41
13528,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
13529,"* copy of this software and associated documentation files (the ""Software""),  *",9
13530,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
13531,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
13532,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
13533,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
13534,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
13535,"* copy of this software and associated documentation files (the ""Software""),  *",9
13536,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
13537,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
13538,"* copy of this software and associated documentation files (the ""Software""),  *",9
13539,alt_exception_result (*alt_instruction_exception_handler),49
13540,int alt_instruction_exception_entry (alt_u32 exception_pc),53
13541,alt_instruction_exception_entry (alt_u32 exception_pc),68
13542,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
13543,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
13544,"* copy of this software and associated documentation files (the ""Software""),  *",9
13545,void alt_instruction_exception_register (,73
13546,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
13547,"* copy of this software and associated documentation files (the ""Software""),  *",9
13548,"int ALT_IOCTL (int file, int req, void* arg)",68
13549,"int ALT_IOCTL (int file, int req, void* arg)",106
13550,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13551,"* copy of this software and associated documentation files (the ""Software""),  *",9
13552,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
13553,"void alt_io_redirect(const char* stdout_dev, ",85
13554,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
13555,"* copy of this software and associated documentation files (the ""Software""),  *",9
13556,void alt_irq_handler (void),80
13557,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
13558,"* copy of this software and associated documentation files (the ""Software""),  *",9
13559,"int alt_irq_register (alt_u32 id, ",75
13560,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
13561,"* copy of this software and associated documentation files (the ""Software""),  *",9
13562,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
13563,"* copy of this software and associated documentation files (the ""Software""),  *",9
13564,int ALT_ISATTY (int file),50
13565,int ALT_ISATTY (int file),84
13566,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13567,"* copy of this software and associated documentation files (the ""Software""),  *",9
13568,"int ALT_KILL (int pid, int sig)",49
13569,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13570,"* copy of this software and associated documentation files (the ""Software""),  *",9
13571,"int ALT_LINK ( char *existing, char *new)",45
13572,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
13573,"* copy of this software and associated documentation files (the ""Software""),  *",9
13574,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
13575,void alt_load (void),67
13576,"void alt_log_txchar(int c,char *base)",95
13577,"void alt_log_repchar(char c,int r,int base)",106
13578,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
13579,"int alt_log_printf_proc(const char *fmt, ... )",344
13580,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
13581,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
13582,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
13583,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
13584,"void alt_log_write(const void *ptr, size_t len)",440
13585,void alt_log_system_clock(),474
13586,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
13587,"* copy of this software and associated documentation files (the ""Software""),  *",9
13588,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
13589,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
13590,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
13591,"* copy of this software and associated documentation files (the ""Software""),  *",9
13592,void alt_main (void),82
13593,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13594,"* copy of this software and associated documentation files (the ""Software""),  *",9
13595,void __malloc_lock ( struct _reent *_r ),42
13596,void __malloc_unlock ( struct _reent *_r ),50
13597,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13598,"* copy of this software and associated documentation files (the ""Software""),  *",9
13599,"int ALT_OPEN (const char* file, int flags, int mode)",41
13600,static int alt_file_locked (alt_fd* fd),64
13601,"int ALT_OPEN (const char* file, int flags, int mode)",105
13602,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
13603,"* copy of this software and associated documentation files (the ""Software""),  *",9
13604,"alt_printf(const char* fmt, ... )",51
13605,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
13606,"* copy of this software and associated documentation files (the ""Software""),  *",9
13607,alt_putchar(int c),50
13608,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
13609,"* copy of this software and associated documentation files (the ""Software""),  *",9
13610,alt_putcharbuf(int c),58
13611,alt_putbufflush(),73
13612,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
13613,"* copy of this software and associated documentation files (the ""Software""),  *",9
13614,alt_putstr(const char* str),52
13615,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
13616,"* copy of this software and associated documentation files (the ""Software""),  *",9
13617,"int ALT_READ (int file, void *ptr, size_t len)",58
13618,"int ALT_READ (int file, void *ptr, size_t len)",82
13619,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13620,"* copy of this software and associated documentation files (the ""Software""),  *",9
13621,void alt_release_fd (int fd),44
13622,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
13623,"* copy of this software and associated documentation files (the ""Software""),  *",9
13624,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
13625,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
13626,"* copy of this software and associated documentation files (the ""Software""),  *",9
13627,"alt_remap_uncached(void* ptr, alt_u32 len)",49
13628,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13629,"* copy of this software and associated documentation files (the ""Software""),  *",9
13630,"int ALT_RENAME (char *existing, char *new)",45
13631,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13632,"* copy of this software and associated documentation files (the ""Software""),  *",9
13633,caddr_t ALT_SBRK (int incr),68
13634,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
13635,"* copy of this software and associated documentation files (the ""Software""),  *",9
13636,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
13637,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13638,"* copy of this software and associated documentation files (the ""Software""),  *",9
13639,"int ALT_STAT (const char *file, struct stat *st)",49
13640,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
13641,"* copy of this software and associated documentation files (the ""Software""),  *",9
13642,void alt_alarm_stop (alt_alarm* alarm),66
13643,void alt_tick (void),87
13644,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13645,"* copy of this software and associated documentation files (the ""Software""),  *",9
13646,clock_t ALT_TIMES (struct tms *buf),51
13647,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
13648,"* copy of this software and associated documentation files (the ""Software""),  *",9
13649,alt_uncached_free(volatile void* ptr),40
13650,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
13651,"* copy of this software and associated documentation files (the ""Software""),  *",9
13652,alt_uncached_malloc(size_t size),42
13653,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13654,"* copy of this software and associated documentation files (the ""Software""),  *",9
13655,int ALT_UNLINK (char *name),45
13656,int ALT_USLEEP (useconds_t us),46
13657,unsigned int ALT_USLEEP (unsigned int us),48
13658,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
13659,"* copy of this software and associated documentation files (the ""Software""),  *",9
13660,int ALT_WAIT (int *status),44
13661,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
13662,"* copy of this software and associated documentation files (the ""Software""),  *",9
13663,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
13664,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
13665,"static void write_vco(alt_u32 base_addr, alt_u32 clk, alt_u32 val) {",145
13666,"alt_u32 calibrate_pll_impl(alt_u32 tile_enable, ENUM_PLL_IMPL_MODE impl_mode) {",160
13667,alt_u32 calibrate_pll(alt_u32 tile_enable) {,634
13668,void pll_wait_lock(alt_u32 tile_enable) {,761
13669,static void oct_wait_cal(alt_u32 tile) {,152
13670,static void oct_ack(alt_u32 tile) {,172
13671,static bool oct_recal_happened(alt_u32 tile) {,185
13672,static void oct_cap(alt_u32 *code) {,195
13673,static void oct_scale(alt_u32 *code) {,203
13674,"static void oct_adj(alt_u32 *code, alt_u32 adj) {",213
13675,"static void oct_transfer(alt_u32 oct_tile, ENUM_OCT_INIT_MODE init_mode) {",224
13676,"static void oct_cal_one_tile(alt_u32 tile, ENUM_OCT_INIT_MODE init_mode) {",378
13677,"void oct_reset(alt_u32 tile, ENUM_OCT_INIT_MODE init_mode) {",402
13678,"static ENUM_OCT_CAL_ERR_COCE oct_cal(ENUM_OCT_INIT_MODE init_mode, ENUM_OCT_CAL_MODE cal_mode) {",436
13679,"static alt_u32 iobuf_exists(alt_u32 tile, alt_u32 lane) {",467
13680,static void oct_init(ENUM_OCT_INIT_MODE init_mode) {,481
13681,void io_oct_init(void) {,572
13682,ENUM_OCT_CAL_ERR_COCE io_oct_cal(ENUM_OCT_INIT_MODE init_mode) {,583
13683,ENUM_OCT_CAL_ERR_COCE io_oct_poll(void) {,589
13684,void dfx_oct_cal(alt_u32 tiles_en) {,606
13685,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13686,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13687,static inline void clear_intr() {,61
13688,status_code_t cnoc_rx_init(),71
13689,void cnoc_rx_isr(void* context),127
13690,void supervisory_control_loop(void),267
13691,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13692,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13693,static void set_oct_clk(void) {,81
13694,static void do_oct_cal(ENUM_OCT_INIT_MODE mode) {,100
13695,static void check_ufi_reset(ENUM_UFI_CHECK_CALLER_TYPE caller) {,133
13696,static void handle_hps_shared_tile(void) {,303
13697,static void do_csr_enable(ENUM_POWER_SEQ_TYPE type) {,319
13698,static void do_csr_disable(ENUM_POWER_SEQ_TYPE type) {,332
13699,static void do_io_unfrz(ENUM_POWER_SEQ_TYPE type) {,338
13700,static void do_io_refrz(ENUM_POWER_SEQ_TYPE type) {,342
13701,static void do_enter_user_mode(ENUM_POWER_SEQ_TYPE type) {,354
13702,static void do_exit_user_mode(ENUM_POWER_SEQ_TYPE type) {,358
13703,static void do_io_tristate_disable(ENUM_POWER_SEQ_TYPE type) {,362
13704,static void do_io_tristate_enable(ENUM_POWER_SEQ_TYPE type) {,370
13705,"status_code_t hps_csr_enable(const uint32_t* cmd_packet, uint32_t payload_words)",380
13706,"status_code_t hps_csr_disable(const uint32_t* cmd_packet, uint32_t payload_words)",388
13707,"status_code_t hps_io_unfrz(const uint32_t* cmd_packet, uint32_t payload_words)",396
13708,"status_code_t hps_io_refrz(const uint32_t* cmd_packet, uint32_t payload_words)",407
13709,"status_code_t hps_enter_user_mode(const uint32_t* cmd_packet, uint32_t payload_words)",415
13710,"status_code_t hps_exit_user_mode(const uint32_t* cmd_packet, uint32_t payload_words)",435
13711,"status_code_t hps_io_tristate_disable(const uint32_t* cmd_packet, uint32_t payload_words)",457
13712,"status_code_t hps_io_tristate_enable(const uint32_t* cmd_packet, uint32_t payload_words)",472
13713,"status_code_t hps_ufi_reset_pre_release(const uint32_t* cmd_packet, uint32_t payload_words)",481
13714,"status_code_t hps_ufi_reset_release(const uint32_t* cmd_packet, uint32_t payload_words)",490
13715,"status_code_t hps_power_up(const uint32_t* cmd_packet, uint32_t payload_words)",500
13716,"status_code_t hps_power_down(const uint32_t* cmd_packet, uint32_t payload_words)",523
13717,"status_code_t csr_enable(const uint32_t* cmd_packet, uint32_t payload_words)",537
13718,"status_code_t csr_disable(const uint32_t* cmd_packet, uint32_t payload_words)",545
13719,"status_code_t io_unfrz(const uint32_t* cmd_packet, uint32_t payload_words)",553
13720,"status_code_t io_refrz(const uint32_t* cmd_packet, uint32_t payload_words)",564
13721,"status_code_t enter_user_mode(const uint32_t* cmd_packet, uint32_t payload_words)",575
13722,"status_code_t exit_user_mode(const uint32_t* cmd_packet, uint32_t payload_words)",593
13723,"status_code_t io_tristate_disable(const uint32_t* cmd_packet, uint32_t payload_words)",628
13724,"status_code_t io_tristate_enable(const uint32_t* cmd_packet, uint32_t payload_words)",642
13725,void return_status(void) {,652
13726,void warm_reset_warning(void) {,661
13727,uint32_t cnoc_rx_cmd_init(void),740
13728,uint32_t cnoc_rx_cmd_get_next_buf(uint32_t addr),766
13729,static void fake_powerup_sequence(void) {,849
13730,status_code_t cnoc_rx_cmd_loop(void),1033
13731,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13732,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13733,static status_code_t process_param_data(uint32_t idx) {,63
13734,uint32_t cnoc_rx_param_init(void),71
13735,"uint32_t cnoc_rx_param_get_next_buf(uint32_t addr, uint32_t pkt_size_in_words)",86
13736,status_code_t cnoc_rx_param_loop(void),106
13737,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13738,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13739,uint32_t cnoc_rx_ssm_init(void),40
13740,"uint32_t cnoc_rx_ssm_get_next_buf(uint32_t addr, uint32_t pkt_size_in_words)",59
13741,status_code_t cnoc_rx_ssm_loop(void),75
13742,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13743,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13744,"void io_cnoc_tx_send_packet(uint32_t size_in_words, uint32_t *data) {",62
13745,void io_cnoc_tx_init() {,77
13746,void io_cnoc_tx_irq_assert() {,81
13747,void io_cnoc_tx_irq_deassert() {,85
13748,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13749,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13750,"void csr_receive_pkt(uint32_t addr, uint32_t pkt_size_in_words)",57
13751,uint32_t csr_init(void),71
13752,status_code_t csr_loop(void),92
13753,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13754,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13755,void snoop_csr_reset(void) {,85
13756,void snoop_csr_data(IOCSR_Packet_t *pkt) {,139
13757,uint32_t get_snooped_csr(ENUM_SNOOP_DATA snoop_data) {,229
13758,uint32_t is_snoop_ready(void) {,253
13759,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13760,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13761,static void log_entry(void) {,56
13762,static void log_exit(void) {,62
13763,void io_fail(ENUM_IOSSM_ERR_CODE err_code) {,69
13764,void cnt_busy(bool busy),76
13765,static void iossm_init(void),90
13766,static void clear_flags(ENUM_IOSSM_TASK task_flags) {,125
13767,void iossm_task_loop(void) {,130
13768,void wait_ns(uint32_t delay_ns) {,286
13769,int seq_main(void),291
13770,int main(void),293
13771,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13772,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13773,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
13774,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
13775,alt_u32 delay_mask(alt_u32 non_skip_value) {,71
13776,void set_skip_delay_mask(alt_u32 mask) {,75
13777,"void init_timer(alt_u32 nio_clk_freq_khz, alt_u32 timer_period) {",82
13778,void init_timer_default() {,125
13779,void stop_timer(void) {,132
13780,alt_u32 timer_val(void) {,139
13781,alt_u32 get_timer_ticks(alt_u32 nano_seconds) {,156
13782,"void timer_start_wait_ns_no_skip(ENUM_TIMER_WAIT_INDEX wait_idx, alt_u32 nano_seconds) {",161
13783,alt_u32 timer_wait_done(ENUM_TIMER_WAIT_INDEX wait_idx) {,174
13784,void delay_for_n_ns_no_skip(alt_32 nano_seconds) {,188
13785,void delay_for_n_ns(alt_32 nano_seconds) {,198
13786,void timer_refresh(void) {,203
13787,ENUM_EMIF_CAL_STAT emif_cal_loop(void) {,6
13788,void emif_cal_init(ENUM_SEQ_INIT_MODE mode) {,10
13789,"void emif_cal_consume_param_table(uint32_t addr, uint32_t pkt_size_in_words) {",13
13790,void dbg_init_stat() {,65
13791,"void dbg_set_stat(alt_u32 tile, ENUM_ERR_CODE err_code) {",77
13792,alt_u32 dbg_get_stat(void) {,102
13793,alt_u32 dbg_get_resp(void) {,106
13794,void dbg_set_final_stat() {,110
13795,td_cmd_t dbg_get_cmd(void) {,116
13796,void dbg_save_cmd_copy(void) {,139
13797,td_cmd_t dbg_get_cmd_copy(void) {,145
13798,"void dbg_set_stage(alt_u32 tile, ENUM_TD_STAGE err_stage) {",149
13799,void dbg_set_stage_all_tiles(ENUM_TD_STAGE err_stage) {,154
13800,alt_u32 dbg_tile_enable(void) {,161
13801,alt_32 dbg_scale_dc(alt_32 dc) {,165
13802,"void check_tiles(alt_u32 tiles_skipped, ENUM_CHECK_TILE_MODE mode) {",37
13803,alt_32 next_tile(void) {,85
13804,void init_phy(void) {,96
13805,void init_iossm(void) {,118
13806,alt_u32 check_pll_lock(void) {,137
13807,void wait_pll_lock(void) {,146
13808,"alt_u32 bad_entry(char *fn, alt_u32 line) {",163
13809,alt_u32 bfm_fail(alt_u32 line_num) {,170
13810,int my_print(int c),636
13811,static void uart_puts(char *str),658
13812,"static alt_u32 uart_puth(alt_32 dont_put_zero, alt_u32 i)",668
13813,static void uart_puti(alt_u32 i),685
13814,"extern void uart_printf(char *format, ...)",724
13815,"void update_status(alt_u32 tile, ioddr_status_code_t status_code)",779
13816,"static void update_burn_in_test_in_progress(alt_u32 tile, alt_u32 val)",793
13817,"static void update_burn_in_test_fail(alt_u32 tile, alt_u32 val)",798
13818,"static void calc_loop_num(alt_u32 num_loops, alt_u32 *outer_loop, alt_u32 *inner_loop)",807
13819,alt_u32 is_sequencer_done(alt_u32 tile),823
13820,void wait_sequencer_done(alt_u32 tile_mask),828
13821,"static alt_32 wait_for_interpolator(alt_u32 tile_mask, alt_u32 lane_mask, alt_u32 ioereg_mask, alt_u32 value)",844
13822,static void get_phy_configuration(alt_u32 reference_tile),895
13823,"alt_32 test_dqs_enable(alt_u32 tile, alt_u32 lane)",981
13824,alt_32 get_smallest_vfifo(alt_32 dqs_en_clks),1096
13825,"alt_u32 calibrate_dqs_enable(alt_u32 tile, alt_u32 lane)",1109
13826,void initialize_broadcasting(void) {,1232
13827,void reset_phy(void) {,1347
13828,void wake_phy(void) {,1360
13829,void configure_inst_rom(void) {,1373
13830,void configure_data_rom(ENUM_DATA_ROM_MODE mode) {,1395
13831,void configure_ac_rom(void) {,1495
13832,void setup_phy_default_delays(alt_u32 tile_mask) {,1529
13833,void turn_on_sequencer(void) {,1627
13834,"static void ioddr_single_read(alt_u32 tile_mask, alt_u32 num_nibbles)",1643
13835,"static void ioddr_multi_read(alt_u32 op_mode, alt_u32 tile_mask, alt_u32 lane_mask, alt_u32 start_delay_val, alt_u32 num_delay_steps, alt_u32 num_nibbles)",1666
13836,"static void ioddr_auto_sweep_read(alt_u32 tile_mask, alt_u32 num_loops, alt_32 delay_update_latency, alt_u32 num_nibbles)",1782
13837,"static void analyze_windows(alt_u32 * tile_mask, ioddr_window_sweep_t sweep_type)",1821
13838,"static void full_window_sweep(alt_u32 tile_mask, alt_u32 read_num_nibbles)",1902
13839,void ioddr_main (void),2139
13840,ENUM_ERR_CODE test_dc(void) {,34
13841,static void log_entry(void) {,59
13842,static void log_exit(alt_u32 err_code) {,66
13843,int seq_main(void),77
13844,int main(void),79
13845,"void dc_set_stat(alt_u32 tile, ENUM_ERR_CODE err_code) {",39
13846,void dc_set_stage_impl(ENUM_TD_STAGE stage) {,51
13847,void dc_set_final_stat() {,59
13848,void dc_init_stat(bool dc_dbg_enabled) {,89
13849,void dc_print_test_data(void) {,98
13850,static void init_bcast(void) {,347
13851,static void set_out_buf_enable(alt_u32 en) {,366
13852,static void set_out_buf_enable_staggered(alt_u32 en) {,371
13853,static void init_data_buf(void) {,384
13854,static void set_out_data(ENUM_DATA_PATTERN data) {,418
13855,"static void set_dc_mux(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 quad) {",450
13856,static void set_dc(dc_ctx_t *dcx) {,483
13857,static void run_dc(void) {,542
13858,"static void read_dc(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 quad) {",562
13859,static void check_result(dc_ctx_t *dcx) {,581
13860,"static DC_DATA data_signature(ENUM_CAL_PIN_DCD_PINS cal_pins, ENUM_DC_VAL dc_val, alt_u32 tile, alt_u32 pin, DC_DATA data) {",659
13861,static void update_data(dc_ctx_t *dcx) {,667
13862,static void measure_dc(dc_ctx_t *dcx) {,826
13863,ENUM_ERR_CODE test_pin_dcc(void) {,847
13864,static void write_phase_positions(,123
13865,static void test_dcd(,143
13866,static void calc_gold(,175
13867,static void check_result(,230
13868,static void store_data(,255
13869,static void test_dcd_all() {,301
13870,ENUM_ERR_CODE test_pll_dcc(void) {,360
13871,"static void write_vco(alt_u32 base_addr, alt_u32 clk, alt_u32 val) {",87
13872,"static alt_u32 calibrate_pll_impl(alt_u32 tile_enable, ENUM_PLL_RECAL_MODE recal_mode) {",106
13873,ENUM_ERR_CODE test_pll(void) {,523
13874,static void log_entry(void) {,557
13875,static void log_exit(alt_u32 err_code) {,564
13876,int seq_main(void),575
13877,int main(void),577
13878,ENUM_ERR_CODE test_vreg(void) {,31
13879,static void log_entry(void) {,69
13880,static void log_exit(alt_u32 err_code) {,76
13881,int seq_main(void),87
13882,int main(void),89
13883,"alt_u32 g_heap[BYTES_IN_WORDS(HEAP_SIZE_IN_BYTES)] __attribute__((section("".g_heap""))) = {",2877
13884,static alt_u32 g_user_ram[BYTES_IN_WORDS(USER_RAM_PRI3_SLAVE_AV_MM_SLV_SPAN)],3089
13885,alt_32 g_max_effective_dqs_en_phases; // max effective dqs_en delay across all groups (combo of vfifo and phase),3124
13886,alt_32 g_cur_rank; // the current rank (try avoid using this variable whenever possible for better modularity),3130
13887,alt_u32 bfm_fail(alt_u32 line_num) {,3706
13888,static void clear_fail_info() {,3721
13889,"static void set_fail_info(ENUM_CAL_ERR err_code, alt_u32 group, alt_u32 err_info) {",3745
13890,static void const_check() {,3777
13891,static void copy_param_table_to_user_ram(void) {,4231
13892,static void init_malloc(void) {,4243
13893,"alt_u32 util_malloc(const alt_u32 size_in_words, alt_u32 **dest) {",4282
13894,static void util_free(alt_u32 token) {,4324
13895,static void util_malloc_check(void) {,4341
13896,void util_malloc_reset(ENUM_MALLOC_RESET_MODE malloc_reset_mode) {,4349
13897,"static alt_u32 util_div_no_check(alt_u32 dividend, alt_u32 divisor) {",4376
13898,"static alt_u32 util_div(alt_u32 dividend, alt_u32 divisor) {",4387
13899,"static alt_u32 util_div_power_2_opt(alt_u32 dividend, alt_u32 divisor) {",4399
13900,static alt_u32 util_log2(alt_u32 data) {,4413
13901,"static alt_32 util_max(alt_32 a, alt_32 b) {",4423
13902,"static alt_32 util_min(alt_32 a, alt_32 b) {",4428
13903,"static alt_u32 util_mod(alt_u32 dividend, alt_u32 divisor) {",4434
13904,"static void util_btfld_set(t_btfld *var, alt_u32 val, alt_32 shift) {",4446
13905,"static alt_u32 util_btfld_get(t_btfld *var, alt_32 shift) {",4467
13906,"static void util_read_intel_hex_from_file(alt_u32 *dest_data, const char *file_name) {",4484
13907,"void util_init_array(alt_u32 *ary, alt_u32 size, alt_u32 val) {",4517
13908,"static alt_u32  ac_rom_data(alt_u32 pin, alt_u32 idx) {",4524
13909,static alt_u32 time_for_refresh(void) {,4529
13910,"static alt_u32 hmc_read(alt_u32 center_base, alt_u32 hmc_base, alt_u32 addr) {",4539
13911,"static alt_u32 hmc_mmr_access_succeeded(alt_u32 center_base, alt_u32 hmc_base) {",4546
13912,"static alt_u32 hmc_mmr_read(alt_u32 center_base, alt_u32 addr) {",4550
13913,"static void hmc_mmr_write(alt_u32 center_base, alt_u32 addr, alt_u32 data) {",4559
13914,static void set_out_track_speed_in_mem_clk(alt_u32 speed) {,4566
13915,static void set_dqs_en_track_speed_in_mem_clk(alt_u32 speed) {,4574
13916,static void set_in_track_speed_in_mem_clk(alt_u32 speed) {,4583
13917,static alt_u32 is_sequencer_done(void) {,4594
13918,static void wait_sequencer_done(void) {,4600
13919,static void send_cmd_no_wait(alt_u32 cmd) {,4615
13920,static void send_cmd_wait(alt_u32 cmd) {,4619
13921,static void set_cal_stat(ENUM_CAL_STAT stat) {,4625
13922,static alt_u32 read_input_pin_toggle_cnt(alt_u32 pin_addr) {,4653
13923,"static void set_ac_rom_override(alt_u32 ac_idx, alt_u32 ovr) {",4659
13924,"static void set_cs_out_enable(alt_u32 cs_mask, ENUM_SET_CS_OUT_MODE set_cs_mode) {",4672
13925,static void set_addr_mirror(alt_u32 rank) {,4695
13926,"static void set_rank_impl(alt_32 rank_sel, ENUM_ODT_MODE odt_mode, alt_u32 is_lrdimm_odd_pin) {",4775
13927,"static void set_rank(alt_32 rank_sel, ENUM_ODT_MODE odt_mode) {",4937
13928,"static void set_pin_mask(alt_u32 addr, alt_u32 id) {",4942
13929,static void delay_for_n_mem_clocks_no_skip(const alt_u32 clocks) {,4956
13930,static void delay_for_n_mem_clocks(const alt_u32 clocks) {,5017
13931,"static alt_32 get_rank_offset_delay_in_osc_clks(alt_32 rank_skew_in_out_phases, ENUM_RANK_OFFSET_TYPE type) {",5032
13932,"static alt_32 get_rank_offset(alt_32 rank_skew_in_out_phases, ENUM_RANK_OFFSET_TYPE type) {",5063
13933,"static alt_u32 get_lane_idx_read(alt_u32 dqs, alt_u32 lane) {",5095
13934,"static alt_u32 get_lane_idx_write(alt_u32 dqs, alt_u32 lane) {",5099
13935,static alt_u32 out_delay_offset_write(alt_u32 addr) {,5103
13936,static alt_u32 out_delay_offset_read(alt_u32 addr) {,5107
13937,static alt_u32 dq_in_offset(alt_u32 dq_idx) {,5114
13938,static alt_u32 dbi_in_offset(alt_u32 dbi) {,5121
13939,static alt_u32 dq_out_offset_write(alt_u32 dq_idx) {,5128
13940,static alt_u32 dq_out_offset_read(alt_u32 dq_idx) {,5133
13941,static alt_u32 get_read_lane_addr(alt_u32 lane_idx) {,5138
13942,static alt_u32 get_write_lane_addr(alt_u32 lane_idx) {,5142
13943,static alt_u32 is_x4_dqs_b(alt_u32 dqs) {,5147
13944,"static alt_u32 dqs_in_b_offset(alt_u32 dqs, alt_u32 lane) {",5152
13945,"static alt_u32 dqs_in_offset(alt_u32 dqs, alt_u32 lane) {",5158
13946,"static alt_u32 dqs_en_delay_offset(alt_u32 dqs, alt_u32 lane) {",5166
13947,"static alt_u32 dqs_en_delay_b_offset(alt_u32 dqs, alt_u32 lane) {",5175
13948,static alt_u32 dqs_out_offset_write(alt_u32 dqs) {,5182
13949,static alt_u32 dqs_out_offset_read(alt_u32 dqs) {,5188
13950,static alt_u32 dm_dbi_out_offset_write(alt_u32 dm) {,5194
13951,"static alt_u32 vfifo_offset(alt_u32 dqs, alt_u32 lane) {",5199
13952,"static alt_u32 dcc_dqsb_info(ENUM_DCC_DQSB_INFO mode, alt_u32 data) {",5285
13953,"static alt_u32 get_dcc_addr(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 pin_addr) {",5298
13954,static alt_u32 get_dcc_base(alt_u32 tile_idx) {,5321
13955,static alt_u32 dcc_dqs_in_lane_base(alt_u32 lane) {,5328
13956,static alt_u16 *sw_shadow_addr(alt_u32 addr) {,5342
13957,"static void sw_shadow_write(alt_u32 addr, alt_u32 data) {",5360
13958,static alt_u32 sw_shadow_read(alt_u32 addr) {,5371
13959,static alt_32 get_dq_in_delay(alt_u32 dq_idx) {,5392
13960,static alt_32 get_dbi_in_delay(alt_u32 dbi) {,5400
13961,"static alt_32 get_dqs_lane_in_delay(alt_u32 dqs, alt_u32 lane) {",5408
13962,static alt_32 get_dqs_in_delay(alt_u32 dqs) {,5423
13963,"static alt_32 get_dqs_lane_in_b_delay(alt_u32 dqs, alt_u32 lane) {",5432
13964,static alt_32 get_dqs_en_delay(alt_u32 dqs) {,5439
13965,static alt_32 get_dqs_en_pattern_position(alt_u32 dqs) {,5452
13966,static alt_32 get_csr_dqs_en_phase(alt_u32 dqs) {,5458
13967,static alt_32 get_cur_dq_out_delay(alt_u32 dq_idx) {,5466
13968,static alt_32 get_final_dq_out_delay(alt_u32 dq_idx) {,5475
13969,static alt_32 get_cur_dqs_out_delay(alt_u32 dqs) {,5481
13970,static alt_32 get_final_dqs_out_delay(alt_u32 dqs) {,5490
13971,static alt_32 get_out_delay_csr(alt_u32 addr) {,5495
13972,static alt_32 get_out_delay_write(alt_u32 addr) {,5500
13973,static alt_32 get_final_dm_dbi_out_delay(alt_u32 dm) {,5509
13974,static alt_32 get_vfifo_latency(alt_u32 dqs) {,5516
13975,static alt_32 get_csr_vfifo_latency(alt_u32 dqs) {,5522
13976,static alt_32 get_lfifo_latency(alt_u32 dqs) {,5531
13977,static alt_32 get_csr_lfifo_latency(alt_u32 dqs) {,5538
13978,static alt_32 get_ca_delay(alt_u32 ca_idx) {,5547
13979,"static inline void range_check(alt_32 val, alt_32 min, alt_32 max) {",5553
13980,static inline void check_out_delay_range(alt_32 delay) {,5562
13981,static inline void check_dq_in_delay_range(alt_32 delay) {,5566
13982,static inline void check_dqs_in_delay_range(alt_32 delay) {,5570
13983,"static void set_dq_in_delay(alt_u32 dq_idx, alt_32 delay) {",5578
13984,"static void set_dbi_in_delay(alt_u32 dqs, alt_32 delay) {",5599
13985,"static void set_dqs_lane_in_b_delay(alt_u32 dqs, alt_u32 lane, alt_32 delay) {",5620
13986,"static void set_dqs_lane_in_a_delay(alt_u32 dqs, alt_u32 lane , alt_32 delay) {",5637
13987,"static void set_dqs_in_delay(alt_u32 dqs, alt_32 delay) {",5652
13988,"static void spread_dq_in_delay(alt_u32 dq_idx, alt_32 delay) {",5672
13989,"static void set_dqs_en_delay_impl(alt_u32 dqs, alt_32 delay, ENUM_SET_DQS_EN set_dqs_en_sel) {",5693
13990,"static void set_dqs_en_delay(alt_u32 dqs, alt_32 delay) {",5750
13991,"static void set_dqs_en_delay_single_rank(alt_u32 dqs, alt_32 delay) {",5756
13992,"static void set_dq_out_delay(alt_u32 dq_idx, alt_32 delay) {",5764
13993,"static void spread_dq_out_delay(alt_u32 dq_idx, alt_32 delay, alt_u32 spread_range_shift) {",5781
13994,"static void set_dqs_out_delay(alt_u32 dqs, alt_32 delay) {",5804
13995,"static void set_dm_dbi_out_delay(alt_u32 dm, alt_32 delay) {",5819
13996,"static void set_vfifo_latency(alt_u32 dqs, alt_32 latency) {",5834
13997,"static void set_lfifo_latency(alt_u32 dqs, alt_32 lfifo) {",5853
13998,"static void set_ca_delay(alt_u32 ca_idx, alt_32 delay) {",5871
13999,static void set_ca_delay_all(alt_32 delay) {,5883
14000,alt_32 get_smallest_vfifo(alt_32 dqs_en_clks) {,5937
14001,"static alt_u32 calc_lfifo_latency(alt_u32 effective_dqs_phases, alt_u32 burst_len) {",5946
14002,static alt_u32 calc_rlat(alt_32 lfifo_latency) {,5965
14003,static void set_rlat(alt_32 rlat) {,5970
14004,static void set_wlat(alt_32 wlat) {,5979
14005,"static void dbg_log_margins(debug_cal_data_t *data, alt_32 left_margin, alt_32 right_margin) {",5989
14006,"static void dbg_log_edges(debug_cal_data_t *data, alt_32 delay, alt_32 left_edge, alt_32 right_edge) {",5996
14007,static void set_dq_dbi_in_delay_all_groups(alt_32 delay) {,6008
14008,static void set_dbi_in_delay_all_groups(alt_32 delay) {,6027
14009,"static void set_dqs_in_delay_all_groups_impl(alt_32 delay, ENUM_DQS_IN_SEL dqs_in_sel) {",6043
14010,static void set_dqs_in_delay_all_groups(alt_32 delay) {,6062
14011,static void set_dqs_en_delay_all_groups(alt_32 delay) {,6067
14012,static void set_dq_out_delay_all_groups(alt_32 delay) {,6084
14013,static void set_dq_out_delay_individually_all_groups(alt_16 *delay) {,6097
14014,static void set_dqs_out_delay_all_groups(alt_32 delay) {,6109
14015,static void set_pipe_compensated_vfifo_latency_all_groups(alt_32 latency) {,6120
14016,static void set_dm_dbi_out_delay_all_groups(alt_32 delay) {,6133
14017,static void set_pipe_compensated_lfifo_latency_all_groups(alt_32 latency) {,6149
14018,"static void spread_dq_out_delay_all_groups(alt_32 delay, alt_u32 spread_range_shift) {",6160
14019,static void spread_dq_in_delay_all_groups(alt_32 delay) {,6169
14020,alt_u32 cal_fail(ENUM_CAL_ERR cal_err_code) {,6179
14021,static void print_all_delays() {,6207
14022,"void x_rank_init(ENUM_RANK_OPER_MODE oper_mode, alt_32 src_rank, alt_32 dest_rank) {",6315
14023,void x_rank_exec(alt_u32 src_addr) {,6324
14024,alt_32 x_rank_end(void) {,6375
14025,"static alt_32 cross_rank_oper(ENUM_RANK_OPER_MODE oper_mode, ENUM_DELAY_MASK delay_mask, alt_32 src_rank, alt_32 dest_rank) {",6397
14026,"static void copy_all_delays(alt_u32 src_rank, alt_u32 dest_rank) {",6516
14027,"static void swap_all_delays(alt_u32 src_rank, alt_u32 dest_rank) {",6522
14028,static void unify_all_rank_delays(void) {,6528
14029,static alt_32 get_data_out_rank_skew(void) {,6539
14030,static alt_32 get_dqs_en_rank_skew(void) {,6545
14031,static void mem_precharge(void) {,6556
14032,static void mem_activate(void) {,6564
14033,static void manage_banks(ENUM_BANK_MODE mode) {,6579
14034,"static void write_ac(alt_u32 pin_idx, alt_u32 ac_rom_idx, alt_u32 val, ENUM_WRITE_MRS_VAL_MODE mode) {",6615
14035,"static void write_mrs_val_impl(alt_u32 mrs_cfg, ENUM_WRITE_MRS_VAL_MODE mrs_mode, alt_u32 mrs_ac_rom_idx) {",6651
14036,static void ATTR_SOFT_M20K ddr4_lrdimm_write_mpr_val(alt_u32 mrs_cfg) {,6788
14037,"static alt_u32 ATTR_SOFT_M20K get_rdimm_cfg(alt_u32 value_width, alt_u32 idx) {",6857
14038,static alt_u32 ATTR_SOFT_M20K get_lrdimm_cfg(alt_u32 idx) {,6870
14039,static void write_mrs_val(alt_u32 mrs_cfg) {,6882
14040,static void write_mrs(alt_u32 pt_idx) {,6919
14041,static void write_mrs_all(ENUM_WRITE_MRS_MODE mrs_mode) {,6928
14042,static void mem_lpddr3_guaranteed_precharge(void) {,7001
14043,static void set_mrs_mode(ENUM_MRS_MODE mrs_mode) {,7007
14044,"static void ATTR_SOFT_M20K write_ddr3_control_word(alt_u32 addr, alt_u32 val) {",7054
14045,"static void ATTR_SOFT_M20K write_ddr4_rcd_control_word(alt_u32 value_width, alt_u32 addr, alt_u32 val) {",7075
14046,"static void ATTR_SOFT_M20K write_ddr4_db_control_word(alt_u32 value_width, alt_u32 addr, alt_u32 val) {",7106
14047,"static void ATTR_SOFT_M20K program_ddr3_rdimm_control_word(alt_u32 addr, alt_u32 val) {",7136
14048,"static void ATTR_SOFT_M20K program_ddr4_rcd_control_word(alt_u32 value_width, alt_u32 addr, alt_u32 val) {",7148
14049,"static void ATTR_SOFT_M20K program_ddr4_db_control_word(alt_u32 function_space, alt_u32 value_width, alt_u32 addr, alt_u32 val) {",7164
14050,static void ATTR_SOFT_M20K program_ddr4_db_F6BC4x(void) {,7185
14051,static void ATTR_SOFT_M20K ddr4_lrdimm_function_space_restore() {,7204
14052,static void ATTR_SOFT_M20K init_rdimm_lrdimm_before_mrs(void) {,7209
14053,static void ATTR_SOFT_M20K init_rdimm_lrdimm_after_mrs(void) {,7292
14054,"static void set_vref_in(alt_u32 lane_addr, alt_32 vref) {",7323
14055,static void set_vref_in_all_lanes(alt_32 vref) {,7329
14056,"static void ATTR_SOFT_M20K set_ddr4_lrdimm_db_vref(alt_32 vref, alt_32 en) {",7335
14057,"static void set_vref_out(alt_32 vref, ENUM_VREF_TRAINING_MODE vref_training_enabled) {",7362
14058,"static void set_ddr4_dram_access(alt_u32 dq, alt_u32 en) {",7384
14059,"static void set_ddr4_per_dram_addressability(alt_u32 en, alt_u32 rtt_nom_park_during_pda) {",7432
14060,static void exit_ddr4_pda() {,7484
14061,static void ATTR_SOFT_M20K exit_ddr4_lrdimm_pba(void) {,7494
14062,"static void ATTR_SOFT_M20K set_ddr4_db_access(alt_32 dqs, alt_32 en) {",7504
14063,static void ATTR_SOFT_M20K enter_ddr4_lrdimm_pba(void) {,7509
14064,static void enter_vref_out_cal(void) {,7514
14065,static void exit_vref_out_cal(alt_32 vref) {,7528
14066,static void override_vref_out(alt_32 vref) {,7536
14067,"static void override_vref_out_one_group(alt_u32 dq, alt_32 vref) {",7545
14068,static void set_ddr4_weak_pull_en_alert_n(alt_u32 en) {,7551
14069,static void ATTR_SOFT_M20K init_lpddr3_after_ca_deskew(alt_u32 rank) {,7567
14070,"static void ATTR_SOFT_M20K config_odt_qdriv(alt_u16 ac_opt, alt_u16 ci_opt) {",7594
14071,static void ATTR_SOFT_M20K init_mem_qdriv(void) {,7603
14072,static void ATTR_SOFT_M20K init_mem_rld2(void) {,7663
14073,static void ATTR_SOFT_M20K init_mem_rld3() {,7688
14074,static void init_mem(ENUM_INIT_MEM_MODE init_mode) {,7736
14075,static void ATTR_SOFT_M20K reset_mem_rld3() {,7871
14076,static void mem_handoff(void) {,7885
14077,static void set_seq_enable(const alt_u32 ena) {,7933
14078,static void set_bcast_en(const ENUM_BCAST_MODE mode) {,8053
14079,static void reset_tiles(ENUM_RESET_MODE reset_mode) {,8176
14080,static void set_ac_rom_write_en(const alt_u32 ena) {,8278
14081,static alt_u8 * get_global_param_offs(alt_u32 byte_offset) {,8291
14082,static mem_param_t * get_mem_param(alt_u32 mem_idx) {,8296
14083,static alt_u32 mem_interface_exists(alt_u32 mem_idx) {,8303
14084,static alt_u32 mem_interface_exists_and_cal_done(alt_u32 mem_idx) {,8312
14085,"static alt_u32 get_tiles_used_by_emif(alt_u32 interface_enable, ENUM_TILES_USED_BY used_by) {",8326
14086,static void assert_reset(ENUM_TILES_USED_BY used_by) {,8354
14087,static void wait_phy_ready() {,8381
14088,static void wait_oct_ready() {,8426
14089,"static void write_inst_rom_entry(alt_u32 inst_idx, alt_u16 val) {",8465
14090,"static void load_inst_rom(const alt_u16 *inst_rom_ptr, alt_u32 inst_rom_size, ENUM_LOAD_INST_ROM_MODE load_inst_rom_mode) {",8472
14091,"static void fill_partial_rom(alt_u32 addr_begin, alt_u32 addr_end, alt_u32 val) {",8492
14092,static void patch_inst_rom_ac() {,8503
14093,static void patch_inst_rom_do(ENUM_DO_PATTERN do_pattern) {,8591
14094,static void ATTR_SOFT_M20K qdriv_init_lbk(void) {,8707
14095,static void ATTR_SOFT_M20K qdriv_set_lbk(alt_u32 lbk) {,8718
14096,"static void load_ac_rom(const alt_u16 *ac_rom_ptr, alt_u32 ac_rom_size) {",8728
14097,"static void check_ac_rom_parity(const alt_u16 *ac_rom_ptr, alt_u32 ac_rom_size) {",8867
14098,static void map_stress_pattern_to_pins() {,8888
14099,"static void load_data_rom(ENUM_DATA_PATTERN pat, ENUM_PATTERN_VARIANT variant) {",8956
14100,static void load_ck_ac_rom(void) {,9180
14101,static void test_hmc_mmr(void) {,9190
14102,static void test_dcd_regs(void) {,9232
14103,static void test_pio_seq2core_core2seq(void) {,9269
14104,static void init_rom_data(void) {,9315
14105,static void set_dm_dbi_en(ENUM_SET_DM_DBI_EN mode) {,9339
14106,"static void set_idle_term(ENUM_IDLE_TERM_PINS pins, alt_u32 disable) {",9376
14107,static void set_weak_pull_en_dm(alt_u32 en) {,9402
14108,static void set_weak_pull_en_dqs(alt_u32 en) {,9416
14109,static void set_hmc_reorder_en(alt_u32 en) {,9455
14110,static void init_controller() {,9498
14111,static void controller_handoff() {,9512
14112,"static void store_lane_addr(ENUM_STORE_ADDR addr_type, alt_u32 dqs_idx, alt_u32 addr) {",9524
14113,static void print_param_table(alt_u8 *pin_addr_ptr) {,9550
14114,"static void init_parameter_table(alt_u32 mem_idx, ENUM_INIT_MODE init_mode) {",9728
14115,static void read_csr_params(void) {,10368
14116,"static alt_u32 set_phy_tracking_enable(alt_u32 en, alt_32 track_speed) {",10536
14117,static void set_tracking_mgr_enable(alt_u32 en) {,10566
14118,"static void write_phase_positions(const alt_u32 *dcd_offs, alt_u32 num_tiles, const alt_u8 *phase_pos,",10739
14119,"static void test_dcd(const alt_u32 *dcd_offs, alt_u32 num_tiles,",10774
14120,static alt_u32 get_best_osc_sel(alt_16 (*dcd_counters)[NUM_DCC_ALL_COUNTERS]) {,10836
14121,static alt_u32 single_step_bin_search_dcc_phase(,10863
14122,"static ENUM_CAL_ERROR_CODE calibrate_dcd_impl(const alt_u32 *dcd_offs, alt_u32 num_tiles) {",10980
14123,"static alt_32 util_div_no_check_signed(alt_32 dividend, alt_u32 divisor) {",11174
14124,"static void dcd_calc_phase_bias(const alt_u16 *duty, alt_16 *phase_bias) {",11180
14125,"static void test_dcd(const alt_u32 *dcd_offs, alt_u32 num_tiles,",11277
14126,static alt_u32 get_best_osc_sel(alt_8 (*fitting_curve)[NUM_DCC_PIECEWISE_POINTS]) {,11314
14127,"static void dcd_interpolate(const alt_16 *y_in, const alt_16 *axis_y, const alt_u8 *axis_x,",11355
14128,"static ENUM_CAL_ERROR_CODE calibrate_dcd_impl(const alt_u32 *dcd_offs, alt_u32 num_tiles) {",11430
14129,static ENUM_CAL_ERROR_CODE calibrate_dcd(ENUM_PLL_DCD_CAL_MODE mode) {,11816
14130,static void pre_cal_tests(void) {,11936
14131,void measure_delay_chains(void) {,11954
14132,static void init_sequencer(ENUM_INIT_MODE init_mode) {,12064
14133,"static alt_u32 stress_pattern(ENUM_DATA_PATTERN pat, ENUM_STRESS_PATTERN op) {",12228
14134,static void int_refresh(void* context) {,12283
14135,"static void test_dqs_en(ENUM_DQS_EN_CAL_MODE mode, alt_u32 track_speed_in_mem_clk) {",12358
14136,static alt_u32 result_dqs_en(alt_u32 dqs) {,12414
14137,"static t_btfld result_read(alt_u32 dqs, ENUM_STOP_CONDITION stop_condition) {",12420
14138,"static t_btfld result_dbi_read(alt_u32 dqs, ENUM_STOP_CONDITION stop_condition) {",12436
14139,"static t_btfld result_write(alt_u32 dqs, ENUM_STOP_CONDITION stop_condition) {",12445
14140,static alt_u32 result_lane(alt_u32 lane) {,12463
14141,"static ENUM_CAL_ERROR_CODE result_write_dqs_group(alt_u32 dqs, ENUM_RESULT_DQS_GROUP result_mode) {",12471
14142,static void clear_checker_errror() {,12485
14143,"void config_checkers(ENUM_CHECKER_CONFIG checker_cfg, alt_u32 x1_cfg0, alt_u32 x12_cfg0) {",12533
14144,static void enable_checkers(const alt_u32 enable) {,12688
14145,static void test_write_leveling() {,12700
14146,static void config_write_leveling_ddr() {,12711
14147,static void exit_write_leveling_ddr() {,12804
14148,"static void calc_loop_num(alt_u32 num_loops, alt_u32 *outer_loop, alt_u32 *inner_loop) {",12831
14149,"static void test_read_impl(alt_u32 num_loops, alt_32 delay_update_latency, alt_u32 redo) {",12851
14150,static void test_ddrx_ca_level_read_impl(alt_u32 redo) {,12952
14151,static void test_rld3_rtr_impl(alt_u32 redo) {,12993
14152,static void test_rld3_addr_deskew_read(alt_32 is_ba_deskew) {,13024
14153,"void wait_qk_tracking_done(alt_u32 num_mem_clk, alt_u32 track_speed) {",13034
14154,"static void test_read(alt_u32 num_loops, alt_32 delay_update_latency) {",13072
14155,static void redo_test_read(void) {,13077
14156,static void test_ddrx_ca_level_read() {,13082
14157,static void redo_test_ddrx_ca_level_read() {,13086
14158,static void test_rld3_rtr() {,13091
14159,static void redo_test_rld3_rtr() {,13096
14160,"static void test_write_impl(ENUM_TEST_WRITE_MODE do_dm_test,",13109
14161,"static void test_write(alt_u32 num_loops, alt_32 delay_update_latency) {",13289
14162,"static void test_write_dm(alt_u32 num_loops, alt_32 delay_update_latency) {",13293
14163,static void test_inf_read_rld_qdr(void) {,13298
14164,static void redo_test_write() {,13304
14165,static ENUM_CAL_ERROR_CODE test_read_get_result(,13310
14166,"static void ATTR_SOFT_M20K freeze_x1_checker_by_write_test(ENUM_STOP_CONDITION stop_condition, alt_u32 sweep_steps) {",13329
14167,static void ATTR_SOFT_M20K set_cke_low_on_mrs_and_des(alt_u32 en) {,13382
14168,static void unify_x12_checker_in_delay_result(void) {,13406
14169,"ENUM_CAL_ERROR_CODE calibrate_pll_wrap(ENUM_PLL_CAL_TILES cal_mode, ENUM_TILES_USED_BY used_by) {",13458
14170,static ENUM_CAL_ERROR_CODE skip_pll_cal(ENUM_TILES_USED_BY used_by) {,13462
14171,static void test_inf(ENUM_TEST_INF_MODE test_mode) {,13495
14172,static alt_u32 get_dcc_cnt_offs(alt_u32 addr) {,13595
14173,static ENUM_DCC_QUADRANT get_quadrant(alt_u32 addr) {,13636
14174,"static void set_dcc_mux(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 quadrant) {",13647
14175,static alt_u32 pin_dcd_pattern(,13695
14176,"static alt_8 get_dcc(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 pin_addr) {",13816
14177,"static void set_dcc(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 pin_addr, alt_8 dcc) {",13836
14178,static alt_u32 measure_dcc(,13864
14179,static void calculate_final_dqs_in_dcc(,14024
14180,static alt_u32 search_next_dcc(,14088
14181,"static void calc_and_set_pin_dcc(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 num_pins,",14157
14182,static void set_pin_dcc_all(alt_u32 dc) {,14207
14183,"static void adjust_delays_post_dcd(ENUM_CAL_PIN_DCD_PINS cal_pins, alt_u32 num_pins,",14266
14184,static ENUM_CAL_ERROR_CODE calibrate_pin_dcd_dc_driven(,14366
14185,static ENUM_CAL_ERROR_CODE calibrate_cmd_deskew_ddrx(alt_32 ca_idx) {,14586
14186,static ENUM_CAL_ERROR_CODE calibrate_cmd_deskew_rld3(alt_32 ca_idx) {,15019
14187,static ENUM_CAL_ERROR_CODE calibrate_ca_level(alt_32 rank) {,15382
14188,static ENUM_CAL_ERROR_CODE calibrate_ca_rank_center(void) {,15425
14189,static void load_read_patterns() {,15527
14190,static void load_read_patterns_rld3_addr_deskew() {,15550
14191,static ENUM_CAL_ERROR_CODE calibrate_addr_deskew_rld3(alt_u32 rank) {,15563
14192,"static void change_ac_rom_for_addr_deskew_ddr3(ENUM_CHANGE_ADDR_MODE mode, alt_32 ca_idx_deskew) {",15850
14193,static ENUM_CAL_ERROR_CODE calibrate_addr_deskew_ddr3() {,16075
14194,static ENUM_CAL_ERROR_CODE ca_deskew_ddr4(void) {,16226
14195,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K ca_deskew_lpddr3(alt_u32 lpddr3_rank) {,16573
14196,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_dbi_qdriv(void) {,16883
14197,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K ca_deskew_qdriv(void) {,17048
14198,static ENUM_CAL_ERROR_CODE calibrate_ca_deskew(alt_u32 lpddr3_rank) {,17471
14199,"static ENUM_CAL_ERROR_CODE calibrate_vref(ENUM_VREF_MODE vref_mode, ENUM_DATA_PATTERN pat, alt_u8 *vref_val) {",17492
14200,"static ENUM_CAL_ERROR_CODE calibrate_vref(ENUM_VREF_MODE vref_mode, ENUM_DATA_PATTERN pat, alt_u8 *vref_val) {",18014
14201,"static ENUM_CAL_ERROR_CODE calibrate_vref_out(ENUM_DATA_PATTERN pat, alt_u32 rtt_nom_park_during_pda) {",18020
14202,static ENUM_CAL_ERROR_CODE calibrate_vref_in(ENUM_DATA_PATTERN pat) {,18137
14203,static ENUM_CAL_ERROR_CODE debug_per_pin_vref_in(void) {,18188
14204,"static ENUM_CAL_ERROR_CODE calibrate_read_deskew_impl(ENUM_READ_DESKEW_TEST_MODE test_mode,",18249
14205,"static ENUM_CAL_ERROR_CODE calibrate_read_deskew(ENUM_READ_DESKEW_TEST_MODE test_mode,",18879
14206,static ENUM_CAL_ERROR_CODE calibrate_read_deskew_with_dqsout_retry(void) {,18917
14207,static ENUM_CAL_ERROR_CODE test_read_per_dqs(alt_u32 dqs) {,18984
14208,static ENUM_CAL_ERROR_CODE bringup_dqs_en_sweep() {,18999
14209,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_dqs_en_qdr_rld() {,19116
14210,static void ATTR_SOFT_M20K ddr4_lrdimm_preamble_training_en(alt_32 en) {,19228
14211,static ENUM_CAL_ERROR_CODE calibrate_dqs_en() {,19246
14212,static ENUM_CAL_ERROR_CODE calculate_lfifo(void) {,19565
14213,static void optimize_lfifo() {,19587
14214,static ENUM_CAL_ERROR_CODE calibrate_ddr_write_level(void) {,19679
14215,static ENUM_CAL_ERROR_CODE calibrate_write_level(alt_u32 speed) {,19845
14216,"static ENUM_CAL_ERROR_CODE calibrate_write_deskew(ENUM_DM_DESKEW_MODE dm_deskew_mode,",20197
14217,"static ENUM_CAL_ERROR_CODE calibrate_write_deskew_with_vrefout_retry(ENUM_DM_DESKEW_MODE dm_deskew_mode, ENUM_DATA_PATTERN data_pat) {",20766
14218,"static void set_dcc_by_pin_type(ENUM_CAL_PIN_DCD_PINS cal_pins, SET_DCC_BY_PIN_TYPE_MODE mode, alt_8 *dcc) {",20819
14219,"static ENUM_CAL_ERROR_CODE calibrate_pin_dcd_window_driven(ENUM_CALIBRATE_PIN_DCD_MODE in_out_dcd_mode,",20866
14220,static ENUM_CAL_ERROR_CODE test_simple_confirm_read(void) {,21168
14221,static ENUM_CAL_ERROR_CODE test_simple_confirm_write(void) {,21189
14222,static ENUM_CAL_ERROR_CODE test_simple_confirm(void) {,21208
14223,static void bringup_write_err_code(ENUM_CAL_ERROR_CODE err_code) {,21215
14224,static void bringup_rw_scoping(ENUM_CAL_ERROR_CODE err_code) {,21225
14225,"static ENUM_CAL_ERROR_CODE mem_skip_calibrate(ENUM_SKIP_CAL skip_cal_mode,",21240
14226,"static ENUM_CAL_ERROR_CODE init_all_delays(alt_32 wlat_shrink_after_wl, alt_32 command_delay_increment_after_ca_deskew) {",21852
14227,static void adjust_delays_after_calibration(void) {,21862
14228,static void sequencer_handoff(ENUM_HANDOFF_MODE handoff_mode) {,22133
14229,static ENUM_HPS_REQ_STATUS handle_warm_reset(alt_u32 itf_idx) {,22210
14230,void init_user_reset_req(void) {,22389
14231,ENUM_CAL_LOOP_STAT init_user_cal_req(void) {,22508
14232,static void bringup_guarantee_rw() {,22782
14233,"static alt_32 ATTR_SOFT_M20K read_dq_in_group(alt_32 dqs, alt_32 pass_all) {",22802
14234,static alt_u32 ATTR_SOFT_M20K encode_ddr4_lrdimm_db_deskew(alt_32 delay) {,22817
14235,"static void ATTR_SOFT_M20K ddr4_lrdimm_load_mpr_data(alt_u32 pattern, alt_32 rank, ENUM_DDR4_LRDIMM_LOAD_DATA_LOC loc) {",22823
14236,static void ATTR_SOFT_M20K ddr4_lrdimm_test_read(void) {,22886
14237,static void ATTR_SOFT_M20K ddr4_lrdimm_do_write(void) {,22909
14238,static void ATTR_SOFT_M20K set_ddr4_dq_read_enable_mode(alt_32 en) {,22934
14239,static alt_u32 ATTR_SOFT_M20K ddr4_lrdimm_db_test(,22953
14240,static void ATTR_SOFT_M20K set_ddr4_lrdimm_dqs_en_cal_mode(alt_32 en) {,23024
14241,static void ATTR_SOFT_M20K exit_db_training(void) {,23054
14242,"static void ATTR_SOFT_M20K set_ddr4_mpr_mode(alt_32 en, alt_32 rank) {",23059
14243,"static void ATTR_SOFT_M20K set_ddr4_write_leveling_mode(alt_32 en, alt_32 rank) {",23070
14244,static void ATTR_SOFT_M20K set_ddr4_lrdimm_rank_selector(alt_32 rank) {,23102
14245,"static alt_32 ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside_deskew(ENUM_READ_OR_WRITE read_or_write, alt_u32 *grp_result, alt_32 rank) {",23117
14246,static alt_32 ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside_fifo(,23288
14247,"static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside_fifo_and_deskew(ENUM_READ_OR_WRITE read_or_write, alt_32 rank) {",23444
14248,"static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside_level(ENUM_READ_OR_WRITE read_or_write, alt_32 rank) {",23494
14249,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K calibrate_ddr4_lrdimm_backside(alt_32 rank) {,23637
14250,static ENUM_CAL_ERROR_CODE mem_calibrate(void) {,23691
14251,"ENUM_CAL_ERROR_CODE run_mem_calibrate(ENUM_INIT_MODE init_mode, alt_u32 skip_reset, alt_u32 first_cal_after_reset) {",24538
14252,static void bringup_seq_bus() {,24729
14253,"ENUM_CAL_ERROR_CODE mem_cal_main(alt_u32 mem_idx, ENUM_INIT_MODE init_mode, alt_u32 skip_reset) {",24765
14254,static void timer_interrupt_latency_irq(void* context) {,24895
14255,static void bringup_tests(void) {,24909
14256,static ENUM_CAL_ERROR_CODE direct_test_main() {,24976
14257,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,25096
14258,static ENUM_CAL_ERROR_CODE ATTR_SOFT_M20K soft_ram_sanity(void) {,25133
14259,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,25138
14260,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,25168
14261,"static ENUM_CAL_ERROR_CODE test_reg_decoding(TEST_MODE mode, alt_u32 tile_mask) {",25202
14262,"static ENUM_CAL_ERROR_CODE test_reg(alt_u32 num_tests, alt_u32 tile_mask) {",25305
14263,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,25322
14264,static ENUM_CAL_ERROR_CODE direct_test_main(void) {,25360
14265,static void double_poll(void) {,25433
14266,static void bfm_post_cal_main(void) {,25453
14267,void init_iossm(void) {,25595
14268,ENUM_CAL_ERROR_CODE direct_test(void) {,25627
14269,static void set_param_table_flags(void) {,25641
14270,"alt_u32 consume_param_table(alt_u32 addr, alt_u32 pkt_size_in_words) {",25664
14271,static void seq_main_init_powerup(void) {,25695
14272,void seq_main_init(ENUM_SEQ_MAIN_MODE mode) {,25793
14273,"ENUM_CAL_LOOP_STAT seq_main_cal(ENUM_TILES_USED_BY used_by, ENUM_SEQ_CAL_MODE seq_cal_mode) {",25859
14274,ENUM_CAL_LOOP_STAT seq_main_poll() {,26062
14275,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, *",22
14276,"* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR      *",25
14277,static void update_iossm_stat(void) {,51
14278,static void consume_param_table_delayed(void) {,59
14279,ENUM_EMIF_CAL_STAT emif_cal_loop(void) {,88
14280,void emif_cal_init(ENUM_SEQ_INIT_MODE mode) {,217
14281,"void emif_cal_consume_param_table(uint32_t addr, uint32_t pkt_size_in_words) {",235
14282,uint32_t emif_direct_test(void) {,242
14283,debug_summary_report_t *g_ptr_summary_report; // note: (same as above),56
14284,LIST_CAL_REPORT_DATA(DECLARE_GLOBAL_CAL_REPORT_DATA),60
14285,static void ATTR_SOFT_M20K create_static_structs(void) {,72
14286,static void ATTR_SOFT_M20K create_and_initialize_dynamic_structs(void) {,84
14287,static void ATTR_SOFT_M20K initialize_debug_status(void) {,171
14288,static void ATTR_SOFT_M20K mark_interface_as_ready(void) {,184
14289,static void ATTR_SOFT_M20K mark_interface_as_response_ready(void) {,194
14290,static void ATTR_SOFT_M20K mark_interface_as_illegal_command(void) {,200
14291,static void ATTR_SOFT_M20K initialize_static_structs(void) {,207
14292,static alt_u32 adjust_addr_for_csim_print(alt_u32 *ptr) {,219
14293,"static void dump_one_section(FILE *fh, char *title, alt_u32 *mem_in, alt_u32 size_u32) {",251
14294,static void print_global_param(global_param_t *ptr) {,307
14295,static void print_mem_param(mem_param_t *ptr) {,328
14296,static void print_debug_data(debug_data_t *ptr) {,380
14297,static void print_summary_report(debug_summary_report_t *ptr) {,401
14298,"static void print_debug_cal_data_t(char *name, debug_cal_data_t *ptr, int size) {",443
14299,"static void print_debug_cal_margin_t(char *name, debug_cal_margin_t *ptr, int size) {",453
14300,"static void print_debug_cal_status_per_group_t(char *name, debug_cal_status_per_group_t *ptr, int size) {",463
14301,"static void print_alt_u8(char *name, alt_u8 *ptr, int size) {",472
14302,"static void print_alt_8(char *name, alt_8 *ptr, int size) {",479
14303,static void print_cal_report(debug_cal_report_t *ptr) {,489
14304,void dump_internal_data(void) {,515
14305,static void print_internal_data(void) {,585
14306,void ATTR_SOFT_M20K tclrpt_enable_report(alt_u32 en) {,600
14307,void ATTR_SOFT_M20K tclrpt_init(void) {,619
14308,void ATTR_SOFT_M20K tclrpt_init_interface(void) {,633
14309,void ATTR_SOFT_M20K tclrpt_wrap_up_interface(void) {,684
14310,void ATTR_SOFT_M20K tclrpt_loop(void) {,708
14311,"static void write_vco(alt_u32 base_addr, alt_u32 clk, alt_u32 val) {",90
14312,"static alt_u32 calibrate_pll_impl(alt_u32 tile_enable, ENUM_PLL_RECAL_MODE recal_mode) {",109
14313,"ENUM_PLL_CAL_ERROR_CODE calibrate_pll(ENUM_PLL_CAL_TILES cal_mode, alt_u32 tiles_used_by_emif, alt_u32 num_tiles) {",539
14314,void alt_irq_init ( const void* base ),82
14315,void alt_sys_init( void ),93
14316,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14317,"* copy of this software and associated documentation files (the ""Software""),  *",9
14318,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
14319,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
14320,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
14321,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
14322,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
14323,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
14324,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
14325,int alt_avalon_dma_space (alt_dma_txchan dma),355
14326,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
14327,static void alt_avalon_dma_irq (void* context),446
14328,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
14329,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
14330,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14331,"* copy of this software and associated documentation files (the ""Software""),  *",9
14332,static void alt_avalon_timer_sc_irq (void* base),54
14333,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
14334,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
14335,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14336,"* copy of this software and associated documentation files (the ""Software""),  *",9
14337,int alt_timestamp_start(void),64
14338,alt_timestamp_type alt_timestamp(void),100
14339,alt_u32 alt_timestamp_freq(void),138
14340,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14341,"* copy of this software and associated documentation files (the ""Software""),  *",9
14342,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14343,"* copy of this software and associated documentation files (the ""Software""),  *",9
14344,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
14345,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
14346,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
14347,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14348,"* copy of this software and associated documentation files (the ""Software""),  *",9
14349,void alt_vic_irq_init (alt_vic_dev* pdev),45
14350,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14351,"* copy of this software and associated documentation files (the ""Software""),  *",9
14352,"int alt_ic_isr_register(alt_u32 ic_id,",59
14353,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14354,"* copy of this software and associated documentation files (the ""Software""),  *",9
14355,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
14356,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14357,"* copy of this software and associated documentation files (the ""Software""),  *",9
14358,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
14359,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
14360,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
14361,void altera_nios2_gen2_irq_init(void) ,34
14362,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14363,"* copy of this software and associated documentation files (the ""Software""),  *",9
14364,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
14365,unsigned int alt_busy_sleep (unsigned int us),52
14366,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14367,"* copy of this software and associated documentation files (the ""Software""),  *",9
14368,int ALT_CLOSE (int fildes),42
14369,int ALT_CLOSE (int fildes),64
14370,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
14371,"* copy of this software and associated documentation files (the ""Software""),  *",9
14372,"void alt_dcache_flush (void* start, alt_u32 len)",46
14373,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
14374,"* copy of this software and associated documentation files (the ""Software""),  *",9
14375,void alt_dcache_flush_all (void),41
14376,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
14377,"* copy of this software and associated documentation files (the ""Software""),  *",9
14378,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
14379,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14380,"* copy of this software and associated documentation files (the ""Software""),  *",9
14381,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
14382,ALT_SEM(alt_fd_list_lock),109
14383,int alt_dev_reg (alt_dev* dev),151
14384,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14385,"* copy of this software and associated documentation files (the ""Software""),  *",9
14386,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
14387,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14388,"* copy of this software and associated documentation files (the ""Software""),  *",9
14389,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
14390,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14391,"* copy of this software and associated documentation files (the ""Software""),  *",9
14392,alt_dma_txchan alt_dma_txchan_open (const char* name),51
14393,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14394,"* copy of this software and associated documentation files (the ""Software""),  *",9
14395,void _do_ctors(void),58
14396,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14397,"* copy of this software and associated documentation files (the ""Software""),  *",9
14398,void _do_dtors(void),58
14399,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
14400,"* copy of this software and associated documentation files (the ""Software""),  *",9
14401,alt_ecc_fatal_exception_register(alt_u32 handler),66
14402,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14403,"* copy of this software and associated documentation files (the ""Software""),  *",9
14404,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14405,"* copy of this software and associated documentation files (the ""Software""),  *",9
14406,void __env_lock ( struct _reent *_r ),43
14407,void __env_unlock ( struct _reent *_r ),51
14408,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14409,"* copy of this software and associated documentation files (the ""Software""),  *",9
14410,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14411,"* copy of this software and associated documentation files (the ""Software""),  *",9
14412,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
14413,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14414,"* copy of this software and associated documentation files (the ""Software""),  *",9
14415,void ALT_EXIT (int exit_code),52
14416,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14417,"* copy of this software and associated documentation files (the ""Software""),  *",9
14418,"int ALT_FCNTL (int file, int cmd, ...)",66
14419,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14420,"* copy of this software and associated documentation files (the ""Software""),  *",9
14421,int alt_fd_lock (alt_fd* fd),54
14422,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14423,"* copy of this software and associated documentation files (the ""Software""),  *",9
14424,int alt_fd_unlock (alt_fd* fd),52
14425,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14426,"* copy of this software and associated documentation files (the ""Software""),  *",9
14427,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
14428,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14429,"* copy of this software and associated documentation files (the ""Software""),  *",9
14430,alt_dev* alt_find_file (const char* name),54
14431,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14432,"* copy of this software and associated documentation files (the ""Software""),  *",9
14433,alt_flash_fd* alt_flash_open_dev(const char* name),49
14434,void alt_flash_close_dev(alt_flash_fd* fd),61
14435,int alt_flash_device_register( alt_flash_fd* fd),70
14436,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14437,"* copy of this software and associated documentation files (the ""Software""),  *",9
14438,int ALT_FORK (void),45
14439,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14440,"* copy of this software and associated documentation files (the ""Software""),  *",9
14441,"int ALT_FSTAT (int file, struct stat *st)",63
14442,"int ALT_FSTAT (int file, struct stat *st)",93
14443,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14444,"* copy of this software and associated documentation files (the ""Software""),  *",9
14445,int alt_fs_reg (alt_dev* dev),57
14446,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14447,"* copy of this software and associated documentation files (the ""Software""),  *",9
14448,alt_getchar(void),51
14449,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14450,"* copy of this software and associated documentation files (the ""Software""),  *",9
14451,int ALT_GETPID (void),43
14452,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14453,"* copy of this software and associated documentation files (the ""Software""),  *",9
14454,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
14455,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
14456,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14457,"* copy of this software and associated documentation files (the ""Software""),  *",9
14458,int alt_get_fd (alt_dev* dev),54
14459,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
14460,"* copy of this software and associated documentation files (the ""Software""),  *",9
14461,/* The compiler inserts calls to mcount() at the start of,48
14462,static __inline__ void * mcount_allocate(unsigned int size),133
14463,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
14464,static int nios2_pcsample_init(void),218
14465,static alt_u32 nios2_pcsample(void* context),250
14466,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14467,"* copy of this software and associated documentation files (the ""Software""),  *",9
14468,"void alt_icache_flush (void* start, alt_u32 len)",42
14469,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14470,"* copy of this software and associated documentation files (the ""Software""),  *",9
14471,void alt_icache_flush_all (void),41
14472,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14473,"* copy of this software and associated documentation files (the ""Software""),  *",9
14474,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
14475,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
14476,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
14477,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
14478,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
14479,"* copy of this software and associated documentation files (the ""Software""),  *",9
14480,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
14481,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
14482,"* copy of this software and associated documentation files (the ""Software""),  *",9
14483,alt_exception_result (*alt_instruction_exception_handler),49
14484,int alt_instruction_exception_entry (alt_u32 exception_pc),53
14485,alt_instruction_exception_entry (alt_u32 exception_pc),68
14486,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
14487,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
14488,"* copy of this software and associated documentation files (the ""Software""),  *",9
14489,void alt_instruction_exception_register (,73
14490,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14491,"* copy of this software and associated documentation files (the ""Software""),  *",9
14492,"int ALT_IOCTL (int file, int req, void* arg)",68
14493,"int ALT_IOCTL (int file, int req, void* arg)",106
14494,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14495,"* copy of this software and associated documentation files (the ""Software""),  *",9
14496,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
14497,"void alt_io_redirect(const char* stdout_dev, ",85
14498,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
14499,"* copy of this software and associated documentation files (the ""Software""),  *",9
14500,void alt_irq_handler (void),80
14501,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
14502,"* copy of this software and associated documentation files (the ""Software""),  *",9
14503,"int alt_irq_register (alt_u32 id, ",75
14504,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14505,"* copy of this software and associated documentation files (the ""Software""),  *",9
14506,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14507,"* copy of this software and associated documentation files (the ""Software""),  *",9
14508,int ALT_ISATTY (int file),50
14509,int ALT_ISATTY (int file),84
14510,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14511,"* copy of this software and associated documentation files (the ""Software""),  *",9
14512,"int ALT_KILL (int pid, int sig)",49
14513,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14514,"* copy of this software and associated documentation files (the ""Software""),  *",9
14515,"int ALT_LINK ( char *existing, char *new)",45
14516,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
14517,"* copy of this software and associated documentation files (the ""Software""),  *",9
14518,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
14519,void alt_load (void),67
14520,"void alt_log_txchar(int c,char *base)",95
14521,"void alt_log_repchar(char c,int r,int base)",106
14522,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
14523,"int alt_log_printf_proc(const char *fmt, ... )",344
14524,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
14525,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
14526,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
14527,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
14528,"void alt_log_write(const void *ptr, size_t len)",440
14529,void alt_log_system_clock(),474
14530,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
14531,"* copy of this software and associated documentation files (the ""Software""),  *",9
14532,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
14533,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
14534,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
14535,"* copy of this software and associated documentation files (the ""Software""),  *",9
14536,void alt_main (void),82
14537,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14538,"* copy of this software and associated documentation files (the ""Software""),  *",9
14539,void __malloc_lock ( struct _reent *_r ),42
14540,void __malloc_unlock ( struct _reent *_r ),50
14541,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14542,"* copy of this software and associated documentation files (the ""Software""),  *",9
14543,"int ALT_OPEN (const char* file, int flags, int mode)",41
14544,static int alt_file_locked (alt_fd* fd),64
14545,"int ALT_OPEN (const char* file, int flags, int mode)",105
14546,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14547,"* copy of this software and associated documentation files (the ""Software""),  *",9
14548,"alt_printf(const char* fmt, ... )",51
14549,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14550,"* copy of this software and associated documentation files (the ""Software""),  *",9
14551,alt_putchar(int c),50
14552,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14553,"* copy of this software and associated documentation files (the ""Software""),  *",9
14554,alt_putcharbuf(int c),58
14555,alt_putbufflush(),73
14556,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14557,"* copy of this software and associated documentation files (the ""Software""),  *",9
14558,alt_putstr(const char* str),52
14559,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14560,"* copy of this software and associated documentation files (the ""Software""),  *",9
14561,"int ALT_READ (int file, void *ptr, size_t len)",58
14562,"int ALT_READ (int file, void *ptr, size_t len)",82
14563,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14564,"* copy of this software and associated documentation files (the ""Software""),  *",9
14565,void alt_release_fd (int fd),44
14566,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
14567,"* copy of this software and associated documentation files (the ""Software""),  *",9
14568,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
14569,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
14570,"* copy of this software and associated documentation files (the ""Software""),  *",9
14571,"alt_remap_uncached(void* ptr, alt_u32 len)",49
14572,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14573,"* copy of this software and associated documentation files (the ""Software""),  *",9
14574,"int ALT_RENAME (char *existing, char *new)",45
14575,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14576,"* copy of this software and associated documentation files (the ""Software""),  *",9
14577,caddr_t ALT_SBRK (int incr),68
14578,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14579,"* copy of this software and associated documentation files (the ""Software""),  *",9
14580,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
14581,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14582,"* copy of this software and associated documentation files (the ""Software""),  *",9
14583,"int ALT_STAT (const char *file, struct stat *st)",49
14584,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14585,"* copy of this software and associated documentation files (the ""Software""),  *",9
14586,void alt_alarm_stop (alt_alarm* alarm),66
14587,void alt_tick (void),87
14588,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14589,"* copy of this software and associated documentation files (the ""Software""),  *",9
14590,clock_t ALT_TIMES (struct tms *buf),51
14591,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
14592,"* copy of this software and associated documentation files (the ""Software""),  *",9
14593,alt_uncached_free(volatile void* ptr),40
14594,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
14595,"* copy of this software and associated documentation files (the ""Software""),  *",9
14596,alt_uncached_malloc(size_t size),42
14597,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14598,"* copy of this software and associated documentation files (the ""Software""),  *",9
14599,int ALT_UNLINK (char *name),45
14600,int ALT_USLEEP (useconds_t us),46
14601,unsigned int ALT_USLEEP (unsigned int us),48
14602,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14603,"* copy of this software and associated documentation files (the ""Software""),  *",9
14604,int ALT_WAIT (int *status),44
14605,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14606,"* copy of this software and associated documentation files (the ""Software""),  *",9
14607,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
14608,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
14609,void alt_irq_init ( const void* base ),82
14610,void alt_sys_init( void ),93
14611,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14612,"* copy of this software and associated documentation files (the ""Software""),  *",9
14613,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
14614,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
14615,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
14616,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
14617,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
14618,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
14619,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
14620,int alt_avalon_dma_space (alt_dma_txchan dma),355
14621,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
14622,static void alt_avalon_dma_irq (void* context),446
14623,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
14624,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
14625,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14626,"* copy of this software and associated documentation files (the ""Software""),  *",9
14627,static void alt_avalon_timer_sc_irq (void* base),54
14628,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
14629,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
14630,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14631,"* copy of this software and associated documentation files (the ""Software""),  *",9
14632,int alt_timestamp_start(void),64
14633,alt_timestamp_type alt_timestamp(void),100
14634,alt_u32 alt_timestamp_freq(void),138
14635,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14636,"* copy of this software and associated documentation files (the ""Software""),  *",9
14637,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14638,"* copy of this software and associated documentation files (the ""Software""),  *",9
14639,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
14640,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
14641,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
14642,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14643,"* copy of this software and associated documentation files (the ""Software""),  *",9
14644,void alt_vic_irq_init (alt_vic_dev* pdev),45
14645,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14646,"* copy of this software and associated documentation files (the ""Software""),  *",9
14647,"int alt_ic_isr_register(alt_u32 ic_id,",59
14648,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14649,"* copy of this software and associated documentation files (the ""Software""),  *",9
14650,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
14651,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14652,"* copy of this software and associated documentation files (the ""Software""),  *",9
14653,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
14654,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
14655,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
14656,void altera_nios2_gen2_irq_init(void) ,34
14657,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14658,"* copy of this software and associated documentation files (the ""Software""),  *",9
14659,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
14660,unsigned int alt_busy_sleep (unsigned int us),52
14661,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14662,"* copy of this software and associated documentation files (the ""Software""),  *",9
14663,int ALT_CLOSE (int fildes),42
14664,int ALT_CLOSE (int fildes),64
14665,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
14666,"* copy of this software and associated documentation files (the ""Software""),  *",9
14667,"void alt_dcache_flush (void* start, alt_u32 len)",46
14668,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
14669,"* copy of this software and associated documentation files (the ""Software""),  *",9
14670,void alt_dcache_flush_all (void),41
14671,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
14672,"* copy of this software and associated documentation files (the ""Software""),  *",9
14673,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
14674,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14675,"* copy of this software and associated documentation files (the ""Software""),  *",9
14676,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
14677,ALT_SEM(alt_fd_list_lock),109
14678,int alt_dev_reg (alt_dev* dev),151
14679,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14680,"* copy of this software and associated documentation files (the ""Software""),  *",9
14681,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
14682,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14683,"* copy of this software and associated documentation files (the ""Software""),  *",9
14684,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
14685,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14686,"* copy of this software and associated documentation files (the ""Software""),  *",9
14687,alt_dma_txchan alt_dma_txchan_open (const char* name),51
14688,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14689,"* copy of this software and associated documentation files (the ""Software""),  *",9
14690,void _do_ctors(void),58
14691,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14692,"* copy of this software and associated documentation files (the ""Software""),  *",9
14693,void _do_dtors(void),58
14694,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
14695,"* copy of this software and associated documentation files (the ""Software""),  *",9
14696,alt_ecc_fatal_exception_register(alt_u32 handler),66
14697,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14698,"* copy of this software and associated documentation files (the ""Software""),  *",9
14699,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14700,"* copy of this software and associated documentation files (the ""Software""),  *",9
14701,void __env_lock ( struct _reent *_r ),43
14702,void __env_unlock ( struct _reent *_r ),51
14703,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14704,"* copy of this software and associated documentation files (the ""Software""),  *",9
14705,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14706,"* copy of this software and associated documentation files (the ""Software""),  *",9
14707,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
14708,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14709,"* copy of this software and associated documentation files (the ""Software""),  *",9
14710,void ALT_EXIT (int exit_code),52
14711,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14712,"* copy of this software and associated documentation files (the ""Software""),  *",9
14713,"int ALT_FCNTL (int file, int cmd, ...)",66
14714,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14715,"* copy of this software and associated documentation files (the ""Software""),  *",9
14716,int alt_fd_lock (alt_fd* fd),54
14717,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14718,"* copy of this software and associated documentation files (the ""Software""),  *",9
14719,int alt_fd_unlock (alt_fd* fd),52
14720,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14721,"* copy of this software and associated documentation files (the ""Software""),  *",9
14722,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
14723,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14724,"* copy of this software and associated documentation files (the ""Software""),  *",9
14725,alt_dev* alt_find_file (const char* name),54
14726,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14727,"* copy of this software and associated documentation files (the ""Software""),  *",9
14728,alt_flash_fd* alt_flash_open_dev(const char* name),49
14729,void alt_flash_close_dev(alt_flash_fd* fd),61
14730,int alt_flash_device_register( alt_flash_fd* fd),70
14731,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14732,"* copy of this software and associated documentation files (the ""Software""),  *",9
14733,int ALT_FORK (void),45
14734,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14735,"* copy of this software and associated documentation files (the ""Software""),  *",9
14736,"int ALT_FSTAT (int file, struct stat *st)",63
14737,"int ALT_FSTAT (int file, struct stat *st)",93
14738,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14739,"* copy of this software and associated documentation files (the ""Software""),  *",9
14740,int alt_fs_reg (alt_dev* dev),57
14741,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14742,"* copy of this software and associated documentation files (the ""Software""),  *",9
14743,alt_getchar(void),51
14744,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14745,"* copy of this software and associated documentation files (the ""Software""),  *",9
14746,int ALT_GETPID (void),43
14747,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14748,"* copy of this software and associated documentation files (the ""Software""),  *",9
14749,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
14750,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
14751,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14752,"* copy of this software and associated documentation files (the ""Software""),  *",9
14753,int alt_get_fd (alt_dev* dev),54
14754,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
14755,"* copy of this software and associated documentation files (the ""Software""),  *",9
14756,/* The compiler inserts calls to mcount() at the start of,48
14757,static __inline__ void * mcount_allocate(unsigned int size),133
14758,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
14759,static int nios2_pcsample_init(void),218
14760,static alt_u32 nios2_pcsample(void* context),250
14761,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14762,"* copy of this software and associated documentation files (the ""Software""),  *",9
14763,"void alt_icache_flush (void* start, alt_u32 len)",42
14764,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14765,"* copy of this software and associated documentation files (the ""Software""),  *",9
14766,void alt_icache_flush_all (void),41
14767,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14768,"* copy of this software and associated documentation files (the ""Software""),  *",9
14769,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
14770,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
14771,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
14772,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
14773,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
14774,"* copy of this software and associated documentation files (the ""Software""),  *",9
14775,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
14776,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
14777,"* copy of this software and associated documentation files (the ""Software""),  *",9
14778,alt_exception_result (*alt_instruction_exception_handler),49
14779,int alt_instruction_exception_entry (alt_u32 exception_pc),53
14780,alt_instruction_exception_entry (alt_u32 exception_pc),68
14781,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
14782,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
14783,"* copy of this software and associated documentation files (the ""Software""),  *",9
14784,void alt_instruction_exception_register (,73
14785,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14786,"* copy of this software and associated documentation files (the ""Software""),  *",9
14787,"int ALT_IOCTL (int file, int req, void* arg)",68
14788,"int ALT_IOCTL (int file, int req, void* arg)",106
14789,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14790,"* copy of this software and associated documentation files (the ""Software""),  *",9
14791,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
14792,"void alt_io_redirect(const char* stdout_dev, ",85
14793,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
14794,"* copy of this software and associated documentation files (the ""Software""),  *",9
14795,void alt_irq_handler (void),80
14796,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
14797,"* copy of this software and associated documentation files (the ""Software""),  *",9
14798,"int alt_irq_register (alt_u32 id, ",75
14799,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14800,"* copy of this software and associated documentation files (the ""Software""),  *",9
14801,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14802,"* copy of this software and associated documentation files (the ""Software""),  *",9
14803,int ALT_ISATTY (int file),50
14804,int ALT_ISATTY (int file),84
14805,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14806,"* copy of this software and associated documentation files (the ""Software""),  *",9
14807,"int ALT_KILL (int pid, int sig)",49
14808,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14809,"* copy of this software and associated documentation files (the ""Software""),  *",9
14810,"int ALT_LINK ( char *existing, char *new)",45
14811,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
14812,"* copy of this software and associated documentation files (the ""Software""),  *",9
14813,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
14814,void alt_load (void),67
14815,"void alt_log_txchar(int c,char *base)",95
14816,"void alt_log_repchar(char c,int r,int base)",106
14817,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
14818,"int alt_log_printf_proc(const char *fmt, ... )",344
14819,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
14820,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
14821,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
14822,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
14823,"void alt_log_write(const void *ptr, size_t len)",440
14824,void alt_log_system_clock(),474
14825,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
14826,"* copy of this software and associated documentation files (the ""Software""),  *",9
14827,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
14828,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
14829,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
14830,"* copy of this software and associated documentation files (the ""Software""),  *",9
14831,void alt_main (void),82
14832,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14833,"* copy of this software and associated documentation files (the ""Software""),  *",9
14834,void __malloc_lock ( struct _reent *_r ),42
14835,void __malloc_unlock ( struct _reent *_r ),50
14836,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14837,"* copy of this software and associated documentation files (the ""Software""),  *",9
14838,"int ALT_OPEN (const char* file, int flags, int mode)",41
14839,static int alt_file_locked (alt_fd* fd),64
14840,"int ALT_OPEN (const char* file, int flags, int mode)",105
14841,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14842,"* copy of this software and associated documentation files (the ""Software""),  *",9
14843,"alt_printf(const char* fmt, ... )",51
14844,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14845,"* copy of this software and associated documentation files (the ""Software""),  *",9
14846,alt_putchar(int c),50
14847,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14848,"* copy of this software and associated documentation files (the ""Software""),  *",9
14849,alt_putcharbuf(int c),58
14850,alt_putbufflush(),73
14851,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
14852,"* copy of this software and associated documentation files (the ""Software""),  *",9
14853,alt_putstr(const char* str),52
14854,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14855,"* copy of this software and associated documentation files (the ""Software""),  *",9
14856,"int ALT_READ (int file, void *ptr, size_t len)",58
14857,"int ALT_READ (int file, void *ptr, size_t len)",82
14858,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14859,"* copy of this software and associated documentation files (the ""Software""),  *",9
14860,void alt_release_fd (int fd),44
14861,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
14862,"* copy of this software and associated documentation files (the ""Software""),  *",9
14863,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
14864,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
14865,"* copy of this software and associated documentation files (the ""Software""),  *",9
14866,"alt_remap_uncached(void* ptr, alt_u32 len)",49
14867,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14868,"* copy of this software and associated documentation files (the ""Software""),  *",9
14869,"int ALT_RENAME (char *existing, char *new)",45
14870,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14871,"* copy of this software and associated documentation files (the ""Software""),  *",9
14872,caddr_t ALT_SBRK (int incr),68
14873,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14874,"* copy of this software and associated documentation files (the ""Software""),  *",9
14875,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
14876,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14877,"* copy of this software and associated documentation files (the ""Software""),  *",9
14878,"int ALT_STAT (const char *file, struct stat *st)",49
14879,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14880,"* copy of this software and associated documentation files (the ""Software""),  *",9
14881,void alt_alarm_stop (alt_alarm* alarm),66
14882,void alt_tick (void),87
14883,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14884,"* copy of this software and associated documentation files (the ""Software""),  *",9
14885,clock_t ALT_TIMES (struct tms *buf),51
14886,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
14887,"* copy of this software and associated documentation files (the ""Software""),  *",9
14888,alt_uncached_free(volatile void* ptr),40
14889,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
14890,"* copy of this software and associated documentation files (the ""Software""),  *",9
14891,alt_uncached_malloc(size_t size),42
14892,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14893,"* copy of this software and associated documentation files (the ""Software""),  *",9
14894,int ALT_UNLINK (char *name),45
14895,int ALT_USLEEP (useconds_t us),46
14896,unsigned int ALT_USLEEP (unsigned int us),48
14897,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14898,"* copy of this software and associated documentation files (the ""Software""),  *",9
14899,int ALT_WAIT (int *status),44
14900,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
14901,"* copy of this software and associated documentation files (the ""Software""),  *",9
14902,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
14903,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
14904,void alt_irq_init ( const void* base ),82
14905,void alt_sys_init( void ),93
14906,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14907,"* copy of this software and associated documentation files (the ""Software""),  *",9
14908,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
14909,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
14910,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
14911,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
14912,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
14913,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
14914,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
14915,int alt_avalon_dma_space (alt_dma_txchan dma),355
14916,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
14917,static void alt_avalon_dma_irq (void* context),446
14918,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
14919,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
14920,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14921,"* copy of this software and associated documentation files (the ""Software""),  *",9
14922,static void alt_avalon_timer_sc_irq (void* base),54
14923,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
14924,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
14925,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14926,"* copy of this software and associated documentation files (the ""Software""),  *",9
14927,int alt_timestamp_start(void),64
14928,alt_timestamp_type alt_timestamp(void),100
14929,alt_u32 alt_timestamp_freq(void),138
14930,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
14931,"* copy of this software and associated documentation files (the ""Software""),  *",9
14932,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14933,"* copy of this software and associated documentation files (the ""Software""),  *",9
14934,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
14935,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
14936,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
14937,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14938,"* copy of this software and associated documentation files (the ""Software""),  *",9
14939,void alt_vic_irq_init (alt_vic_dev* pdev),45
14940,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14941,"* copy of this software and associated documentation files (the ""Software""),  *",9
14942,"int alt_ic_isr_register(alt_u32 ic_id,",59
14943,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14944,"* copy of this software and associated documentation files (the ""Software""),  *",9
14945,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
14946,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
14947,"* copy of this software and associated documentation files (the ""Software""),  *",9
14948,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
14949,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
14950,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
14951,void altera_nios2_gen2_irq_init(void) ,34
14952,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
14953,"* copy of this software and associated documentation files (the ""Software""),  *",9
14954,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
14955,unsigned int alt_busy_sleep (unsigned int us),52
14956,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14957,"* copy of this software and associated documentation files (the ""Software""),  *",9
14958,int ALT_CLOSE (int fildes),42
14959,int ALT_CLOSE (int fildes),64
14960,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
14961,"* copy of this software and associated documentation files (the ""Software""),  *",9
14962,"void alt_dcache_flush (void* start, alt_u32 len)",46
14963,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
14964,"* copy of this software and associated documentation files (the ""Software""),  *",9
14965,void alt_dcache_flush_all (void),41
14966,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
14967,"* copy of this software and associated documentation files (the ""Software""),  *",9
14968,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
14969,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14970,"* copy of this software and associated documentation files (the ""Software""),  *",9
14971,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
14972,ALT_SEM(alt_fd_list_lock),109
14973,int alt_dev_reg (alt_dev* dev),151
14974,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14975,"* copy of this software and associated documentation files (the ""Software""),  *",9
14976,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
14977,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14978,"* copy of this software and associated documentation files (the ""Software""),  *",9
14979,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
14980,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14981,"* copy of this software and associated documentation files (the ""Software""),  *",9
14982,alt_dma_txchan alt_dma_txchan_open (const char* name),51
14983,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14984,"* copy of this software and associated documentation files (the ""Software""),  *",9
14985,void _do_ctors(void),58
14986,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14987,"* copy of this software and associated documentation files (the ""Software""),  *",9
14988,void _do_dtors(void),58
14989,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
14990,"* copy of this software and associated documentation files (the ""Software""),  *",9
14991,alt_ecc_fatal_exception_register(alt_u32 handler),66
14992,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14993,"* copy of this software and associated documentation files (the ""Software""),  *",9
14994,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14995,"* copy of this software and associated documentation files (the ""Software""),  *",9
14996,void __env_lock ( struct _reent *_r ),43
14997,void __env_unlock ( struct _reent *_r ),51
14998,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
14999,"* copy of this software and associated documentation files (the ""Software""),  *",9
15000,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15001,"* copy of this software and associated documentation files (the ""Software""),  *",9
15002,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
15003,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15004,"* copy of this software and associated documentation files (the ""Software""),  *",9
15005,void ALT_EXIT (int exit_code),52
15006,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15007,"* copy of this software and associated documentation files (the ""Software""),  *",9
15008,"int ALT_FCNTL (int file, int cmd, ...)",66
15009,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15010,"* copy of this software and associated documentation files (the ""Software""),  *",9
15011,int alt_fd_lock (alt_fd* fd),54
15012,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15013,"* copy of this software and associated documentation files (the ""Software""),  *",9
15014,int alt_fd_unlock (alt_fd* fd),52
15015,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15016,"* copy of this software and associated documentation files (the ""Software""),  *",9
15017,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
15018,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15019,"* copy of this software and associated documentation files (the ""Software""),  *",9
15020,alt_dev* alt_find_file (const char* name),54
15021,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15022,"* copy of this software and associated documentation files (the ""Software""),  *",9
15023,alt_flash_fd* alt_flash_open_dev(const char* name),49
15024,void alt_flash_close_dev(alt_flash_fd* fd),61
15025,int alt_flash_device_register( alt_flash_fd* fd),70
15026,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15027,"* copy of this software and associated documentation files (the ""Software""),  *",9
15028,int ALT_FORK (void),45
15029,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15030,"* copy of this software and associated documentation files (the ""Software""),  *",9
15031,"int ALT_FSTAT (int file, struct stat *st)",63
15032,"int ALT_FSTAT (int file, struct stat *st)",93
15033,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15034,"* copy of this software and associated documentation files (the ""Software""),  *",9
15035,int alt_fs_reg (alt_dev* dev),57
15036,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15037,"* copy of this software and associated documentation files (the ""Software""),  *",9
15038,alt_getchar(void),51
15039,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15040,"* copy of this software and associated documentation files (the ""Software""),  *",9
15041,int ALT_GETPID (void),43
15042,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15043,"* copy of this software and associated documentation files (the ""Software""),  *",9
15044,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
15045,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
15046,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15047,"* copy of this software and associated documentation files (the ""Software""),  *",9
15048,int alt_get_fd (alt_dev* dev),54
15049,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15050,"* copy of this software and associated documentation files (the ""Software""),  *",9
15051,/* The compiler inserts calls to mcount() at the start of,48
15052,static __inline__ void * mcount_allocate(unsigned int size),133
15053,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
15054,static int nios2_pcsample_init(void),218
15055,static alt_u32 nios2_pcsample(void* context),250
15056,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15057,"* copy of this software and associated documentation files (the ""Software""),  *",9
15058,"void alt_icache_flush (void* start, alt_u32 len)",42
15059,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15060,"* copy of this software and associated documentation files (the ""Software""),  *",9
15061,void alt_icache_flush_all (void),41
15062,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15063,"* copy of this software and associated documentation files (the ""Software""),  *",9
15064,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
15065,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
15066,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
15067,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
15068,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15069,"* copy of this software and associated documentation files (the ""Software""),  *",9
15070,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
15071,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
15072,"* copy of this software and associated documentation files (the ""Software""),  *",9
15073,alt_exception_result (*alt_instruction_exception_handler),49
15074,int alt_instruction_exception_entry (alt_u32 exception_pc),53
15075,alt_instruction_exception_entry (alt_u32 exception_pc),68
15076,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
15077,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
15078,"* copy of this software and associated documentation files (the ""Software""),  *",9
15079,void alt_instruction_exception_register (,73
15080,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15081,"* copy of this software and associated documentation files (the ""Software""),  *",9
15082,"int ALT_IOCTL (int file, int req, void* arg)",68
15083,"int ALT_IOCTL (int file, int req, void* arg)",106
15084,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15085,"* copy of this software and associated documentation files (the ""Software""),  *",9
15086,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
15087,"void alt_io_redirect(const char* stdout_dev, ",85
15088,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15089,"* copy of this software and associated documentation files (the ""Software""),  *",9
15090,void alt_irq_handler (void),80
15091,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15092,"* copy of this software and associated documentation files (the ""Software""),  *",9
15093,"int alt_irq_register (alt_u32 id, ",75
15094,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15095,"* copy of this software and associated documentation files (the ""Software""),  *",9
15096,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15097,"* copy of this software and associated documentation files (the ""Software""),  *",9
15098,int ALT_ISATTY (int file),50
15099,int ALT_ISATTY (int file),84
15100,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15101,"* copy of this software and associated documentation files (the ""Software""),  *",9
15102,"int ALT_KILL (int pid, int sig)",49
15103,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15104,"* copy of this software and associated documentation files (the ""Software""),  *",9
15105,"int ALT_LINK ( char *existing, char *new)",45
15106,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
15107,"* copy of this software and associated documentation files (the ""Software""),  *",9
15108,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
15109,void alt_load (void),67
15110,"void alt_log_txchar(int c,char *base)",95
15111,"void alt_log_repchar(char c,int r,int base)",106
15112,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
15113,"int alt_log_printf_proc(const char *fmt, ... )",344
15114,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
15115,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
15116,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
15117,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
15118,"void alt_log_write(const void *ptr, size_t len)",440
15119,void alt_log_system_clock(),474
15120,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
15121,"* copy of this software and associated documentation files (the ""Software""),  *",9
15122,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
15123,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
15124,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
15125,"* copy of this software and associated documentation files (the ""Software""),  *",9
15126,void alt_main (void),82
15127,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15128,"* copy of this software and associated documentation files (the ""Software""),  *",9
15129,void __malloc_lock ( struct _reent *_r ),42
15130,void __malloc_unlock ( struct _reent *_r ),50
15131,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15132,"* copy of this software and associated documentation files (the ""Software""),  *",9
15133,"int ALT_OPEN (const char* file, int flags, int mode)",41
15134,static int alt_file_locked (alt_fd* fd),64
15135,"int ALT_OPEN (const char* file, int flags, int mode)",105
15136,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15137,"* copy of this software and associated documentation files (the ""Software""),  *",9
15138,"alt_printf(const char* fmt, ... )",51
15139,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15140,"* copy of this software and associated documentation files (the ""Software""),  *",9
15141,alt_putchar(int c),50
15142,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15143,"* copy of this software and associated documentation files (the ""Software""),  *",9
15144,alt_putcharbuf(int c),58
15145,alt_putbufflush(),73
15146,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15147,"* copy of this software and associated documentation files (the ""Software""),  *",9
15148,alt_putstr(const char* str),52
15149,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15150,"* copy of this software and associated documentation files (the ""Software""),  *",9
15151,"int ALT_READ (int file, void *ptr, size_t len)",58
15152,"int ALT_READ (int file, void *ptr, size_t len)",82
15153,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15154,"* copy of this software and associated documentation files (the ""Software""),  *",9
15155,void alt_release_fd (int fd),44
15156,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15157,"* copy of this software and associated documentation files (the ""Software""),  *",9
15158,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
15159,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15160,"* copy of this software and associated documentation files (the ""Software""),  *",9
15161,"alt_remap_uncached(void* ptr, alt_u32 len)",49
15162,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15163,"* copy of this software and associated documentation files (the ""Software""),  *",9
15164,"int ALT_RENAME (char *existing, char *new)",45
15165,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15166,"* copy of this software and associated documentation files (the ""Software""),  *",9
15167,caddr_t ALT_SBRK (int incr),68
15168,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15169,"* copy of this software and associated documentation files (the ""Software""),  *",9
15170,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
15171,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15172,"* copy of this software and associated documentation files (the ""Software""),  *",9
15173,"int ALT_STAT (const char *file, struct stat *st)",49
15174,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15175,"* copy of this software and associated documentation files (the ""Software""),  *",9
15176,void alt_alarm_stop (alt_alarm* alarm),66
15177,void alt_tick (void),87
15178,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15179,"* copy of this software and associated documentation files (the ""Software""),  *",9
15180,clock_t ALT_TIMES (struct tms *buf),51
15181,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15182,"* copy of this software and associated documentation files (the ""Software""),  *",9
15183,alt_uncached_free(volatile void* ptr),40
15184,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15185,"* copy of this software and associated documentation files (the ""Software""),  *",9
15186,alt_uncached_malloc(size_t size),42
15187,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15188,"* copy of this software and associated documentation files (the ""Software""),  *",9
15189,int ALT_UNLINK (char *name),45
15190,int ALT_USLEEP (useconds_t us),46
15191,unsigned int ALT_USLEEP (unsigned int us),48
15192,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15193,"* copy of this software and associated documentation files (the ""Software""),  *",9
15194,int ALT_WAIT (int *status),44
15195,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15196,"* copy of this software and associated documentation files (the ""Software""),  *",9
15197,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
15198,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
15199,void alt_irq_init ( const void* base ),82
15200,void alt_sys_init( void ),93
15201,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15202,"* copy of this software and associated documentation files (the ""Software""),  *",9
15203,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
15204,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
15205,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
15206,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
15207,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
15208,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
15209,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
15210,int alt_avalon_dma_space (alt_dma_txchan dma),355
15211,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
15212,static void alt_avalon_dma_irq (void* context),446
15213,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
15214,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
15215,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15216,"* copy of this software and associated documentation files (the ""Software""),  *",9
15217,static void alt_avalon_timer_sc_irq (void* base),54
15218,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
15219,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
15220,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15221,"* copy of this software and associated documentation files (the ""Software""),  *",9
15222,int alt_timestamp_start(void),64
15223,alt_timestamp_type alt_timestamp(void),100
15224,alt_u32 alt_timestamp_freq(void),138
15225,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15226,"* copy of this software and associated documentation files (the ""Software""),  *",9
15227,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15228,"* copy of this software and associated documentation files (the ""Software""),  *",9
15229,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
15230,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
15231,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
15232,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15233,"* copy of this software and associated documentation files (the ""Software""),  *",9
15234,void alt_vic_irq_init (alt_vic_dev* pdev),45
15235,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15236,"* copy of this software and associated documentation files (the ""Software""),  *",9
15237,"int alt_ic_isr_register(alt_u32 ic_id,",59
15238,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15239,"* copy of this software and associated documentation files (the ""Software""),  *",9
15240,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
15241,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15242,"* copy of this software and associated documentation files (the ""Software""),  *",9
15243,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
15244,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
15245,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
15246,void altera_nios2_gen2_irq_init(void) ,34
15247,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15248,"* copy of this software and associated documentation files (the ""Software""),  *",9
15249,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
15250,unsigned int alt_busy_sleep (unsigned int us),52
15251,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15252,"* copy of this software and associated documentation files (the ""Software""),  *",9
15253,int ALT_CLOSE (int fildes),42
15254,int ALT_CLOSE (int fildes),64
15255,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15256,"* copy of this software and associated documentation files (the ""Software""),  *",9
15257,"void alt_dcache_flush (void* start, alt_u32 len)",46
15258,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15259,"* copy of this software and associated documentation files (the ""Software""),  *",9
15260,void alt_dcache_flush_all (void),41
15261,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
15262,"* copy of this software and associated documentation files (the ""Software""),  *",9
15263,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
15264,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15265,"* copy of this software and associated documentation files (the ""Software""),  *",9
15266,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
15267,ALT_SEM(alt_fd_list_lock),109
15268,int alt_dev_reg (alt_dev* dev),151
15269,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15270,"* copy of this software and associated documentation files (the ""Software""),  *",9
15271,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
15272,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15273,"* copy of this software and associated documentation files (the ""Software""),  *",9
15274,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
15275,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15276,"* copy of this software and associated documentation files (the ""Software""),  *",9
15277,alt_dma_txchan alt_dma_txchan_open (const char* name),51
15278,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15279,"* copy of this software and associated documentation files (the ""Software""),  *",9
15280,void _do_ctors(void),58
15281,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15282,"* copy of this software and associated documentation files (the ""Software""),  *",9
15283,void _do_dtors(void),58
15284,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
15285,"* copy of this software and associated documentation files (the ""Software""),  *",9
15286,alt_ecc_fatal_exception_register(alt_u32 handler),66
15287,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15288,"* copy of this software and associated documentation files (the ""Software""),  *",9
15289,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15290,"* copy of this software and associated documentation files (the ""Software""),  *",9
15291,void __env_lock ( struct _reent *_r ),43
15292,void __env_unlock ( struct _reent *_r ),51
15293,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15294,"* copy of this software and associated documentation files (the ""Software""),  *",9
15295,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15296,"* copy of this software and associated documentation files (the ""Software""),  *",9
15297,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
15298,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15299,"* copy of this software and associated documentation files (the ""Software""),  *",9
15300,void ALT_EXIT (int exit_code),52
15301,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15302,"* copy of this software and associated documentation files (the ""Software""),  *",9
15303,"int ALT_FCNTL (int file, int cmd, ...)",66
15304,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15305,"* copy of this software and associated documentation files (the ""Software""),  *",9
15306,int alt_fd_lock (alt_fd* fd),54
15307,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15308,"* copy of this software and associated documentation files (the ""Software""),  *",9
15309,int alt_fd_unlock (alt_fd* fd),52
15310,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15311,"* copy of this software and associated documentation files (the ""Software""),  *",9
15312,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
15313,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15314,"* copy of this software and associated documentation files (the ""Software""),  *",9
15315,alt_dev* alt_find_file (const char* name),54
15316,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15317,"* copy of this software and associated documentation files (the ""Software""),  *",9
15318,alt_flash_fd* alt_flash_open_dev(const char* name),49
15319,void alt_flash_close_dev(alt_flash_fd* fd),61
15320,int alt_flash_device_register( alt_flash_fd* fd),70
15321,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15322,"* copy of this software and associated documentation files (the ""Software""),  *",9
15323,int ALT_FORK (void),45
15324,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15325,"* copy of this software and associated documentation files (the ""Software""),  *",9
15326,"int ALT_FSTAT (int file, struct stat *st)",63
15327,"int ALT_FSTAT (int file, struct stat *st)",93
15328,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15329,"* copy of this software and associated documentation files (the ""Software""),  *",9
15330,int alt_fs_reg (alt_dev* dev),57
15331,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15332,"* copy of this software and associated documentation files (the ""Software""),  *",9
15333,alt_getchar(void),51
15334,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15335,"* copy of this software and associated documentation files (the ""Software""),  *",9
15336,int ALT_GETPID (void),43
15337,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15338,"* copy of this software and associated documentation files (the ""Software""),  *",9
15339,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
15340,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
15341,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15342,"* copy of this software and associated documentation files (the ""Software""),  *",9
15343,int alt_get_fd (alt_dev* dev),54
15344,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15345,"* copy of this software and associated documentation files (the ""Software""),  *",9
15346,/* The compiler inserts calls to mcount() at the start of,48
15347,static __inline__ void * mcount_allocate(unsigned int size),133
15348,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
15349,static int nios2_pcsample_init(void),218
15350,static alt_u32 nios2_pcsample(void* context),250
15351,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15352,"* copy of this software and associated documentation files (the ""Software""),  *",9
15353,"void alt_icache_flush (void* start, alt_u32 len)",42
15354,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15355,"* copy of this software and associated documentation files (the ""Software""),  *",9
15356,void alt_icache_flush_all (void),41
15357,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15358,"* copy of this software and associated documentation files (the ""Software""),  *",9
15359,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
15360,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
15361,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
15362,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
15363,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15364,"* copy of this software and associated documentation files (the ""Software""),  *",9
15365,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
15366,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
15367,"* copy of this software and associated documentation files (the ""Software""),  *",9
15368,alt_exception_result (*alt_instruction_exception_handler),49
15369,int alt_instruction_exception_entry (alt_u32 exception_pc),53
15370,alt_instruction_exception_entry (alt_u32 exception_pc),68
15371,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
15372,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
15373,"* copy of this software and associated documentation files (the ""Software""),  *",9
15374,void alt_instruction_exception_register (,73
15375,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15376,"* copy of this software and associated documentation files (the ""Software""),  *",9
15377,"int ALT_IOCTL (int file, int req, void* arg)",68
15378,"int ALT_IOCTL (int file, int req, void* arg)",106
15379,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15380,"* copy of this software and associated documentation files (the ""Software""),  *",9
15381,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
15382,"void alt_io_redirect(const char* stdout_dev, ",85
15383,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15384,"* copy of this software and associated documentation files (the ""Software""),  *",9
15385,void alt_irq_handler (void),80
15386,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15387,"* copy of this software and associated documentation files (the ""Software""),  *",9
15388,"int alt_irq_register (alt_u32 id, ",75
15389,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15390,"* copy of this software and associated documentation files (the ""Software""),  *",9
15391,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15392,"* copy of this software and associated documentation files (the ""Software""),  *",9
15393,int ALT_ISATTY (int file),50
15394,int ALT_ISATTY (int file),84
15395,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15396,"* copy of this software and associated documentation files (the ""Software""),  *",9
15397,"int ALT_KILL (int pid, int sig)",49
15398,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15399,"* copy of this software and associated documentation files (the ""Software""),  *",9
15400,"int ALT_LINK ( char *existing, char *new)",45
15401,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
15402,"* copy of this software and associated documentation files (the ""Software""),  *",9
15403,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
15404,void alt_load (void),67
15405,"void alt_log_txchar(int c,char *base)",95
15406,"void alt_log_repchar(char c,int r,int base)",106
15407,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
15408,"int alt_log_printf_proc(const char *fmt, ... )",344
15409,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
15410,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
15411,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
15412,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
15413,"void alt_log_write(const void *ptr, size_t len)",440
15414,void alt_log_system_clock(),474
15415,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
15416,"* copy of this software and associated documentation files (the ""Software""),  *",9
15417,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
15418,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
15419,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
15420,"* copy of this software and associated documentation files (the ""Software""),  *",9
15421,void alt_main (void),82
15422,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15423,"* copy of this software and associated documentation files (the ""Software""),  *",9
15424,void __malloc_lock ( struct _reent *_r ),42
15425,void __malloc_unlock ( struct _reent *_r ),50
15426,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15427,"* copy of this software and associated documentation files (the ""Software""),  *",9
15428,"int ALT_OPEN (const char* file, int flags, int mode)",41
15429,static int alt_file_locked (alt_fd* fd),64
15430,"int ALT_OPEN (const char* file, int flags, int mode)",105
15431,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15432,"* copy of this software and associated documentation files (the ""Software""),  *",9
15433,"alt_printf(const char* fmt, ... )",51
15434,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15435,"* copy of this software and associated documentation files (the ""Software""),  *",9
15436,alt_putchar(int c),50
15437,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15438,"* copy of this software and associated documentation files (the ""Software""),  *",9
15439,alt_putcharbuf(int c),58
15440,alt_putbufflush(),73
15441,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15442,"* copy of this software and associated documentation files (the ""Software""),  *",9
15443,alt_putstr(const char* str),52
15444,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15445,"* copy of this software and associated documentation files (the ""Software""),  *",9
15446,"int ALT_READ (int file, void *ptr, size_t len)",58
15447,"int ALT_READ (int file, void *ptr, size_t len)",82
15448,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15449,"* copy of this software and associated documentation files (the ""Software""),  *",9
15450,void alt_release_fd (int fd),44
15451,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15452,"* copy of this software and associated documentation files (the ""Software""),  *",9
15453,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
15454,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15455,"* copy of this software and associated documentation files (the ""Software""),  *",9
15456,"alt_remap_uncached(void* ptr, alt_u32 len)",49
15457,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15458,"* copy of this software and associated documentation files (the ""Software""),  *",9
15459,"int ALT_RENAME (char *existing, char *new)",45
15460,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15461,"* copy of this software and associated documentation files (the ""Software""),  *",9
15462,caddr_t ALT_SBRK (int incr),68
15463,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15464,"* copy of this software and associated documentation files (the ""Software""),  *",9
15465,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
15466,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15467,"* copy of this software and associated documentation files (the ""Software""),  *",9
15468,"int ALT_STAT (const char *file, struct stat *st)",49
15469,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15470,"* copy of this software and associated documentation files (the ""Software""),  *",9
15471,void alt_alarm_stop (alt_alarm* alarm),66
15472,void alt_tick (void),87
15473,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15474,"* copy of this software and associated documentation files (the ""Software""),  *",9
15475,clock_t ALT_TIMES (struct tms *buf),51
15476,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15477,"* copy of this software and associated documentation files (the ""Software""),  *",9
15478,alt_uncached_free(volatile void* ptr),40
15479,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15480,"* copy of this software and associated documentation files (the ""Software""),  *",9
15481,alt_uncached_malloc(size_t size),42
15482,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15483,"* copy of this software and associated documentation files (the ""Software""),  *",9
15484,int ALT_UNLINK (char *name),45
15485,int ALT_USLEEP (useconds_t us),46
15486,unsigned int ALT_USLEEP (unsigned int us),48
15487,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15488,"* copy of this software and associated documentation files (the ""Software""),  *",9
15489,int ALT_WAIT (int *status),44
15490,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15491,"* copy of this software and associated documentation files (the ""Software""),  *",9
15492,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
15493,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
15494,Copyright (2015-19) Intel Corporation,3
15495,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
15496,void process_crete_dfx_function(),91
15497,"void process_cjtag_command(uint32_t cjtag_opcode, uint32_t cjtag_databit_length, alt_u32 * cjtag_data)",122
15498,void clear_cjtag_command_and_databit(),362
15499,"uint32_t prepare_bridge_data_unload(uint32_t number_channel, uint32_t data_size)",383
15500,"void prepare_bridge_data_load(uint32_t number_channel, uint32_t data_size)",422
15501,void iocsr_freeze(uint32_t ssm),460
15502,void iocsr_unfreeze(uint32_t ssm),478
15503,"void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet, uint32_t *dest_addr)",498
15504,"void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet, uint32_t *dest_addr)",513
15505,"void iossm_cnoc_return(uint32_t *start_addr, uint32_t num_of_words)",550
15506,void IOSSM_IO_Freeze(),600
15507,void IOSSM_IO_Unfreeze(),612
15508,Copyright (2015-19) Intel Corporation,3
15509,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
15510,static inline void clear_intr() {,47
15511,status_code_t cnoc_rx_init(),57
15512,void cnoc_rx_isr(void* context),113
15513,void supervisory_control_loop(void),253
15514,Copyright (2015-19) Intel Corporation,3
15515,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
15516,static void set_oct_clk(void) {,61
15517,static void wait_oct_en(void) {,80
15518,static void wait_oct_cal(void) {,91
15519,static void power_up_init() {,98
15520,static void power_down_cleanup(void) {,115
15521,"status_code_t hps_csr_enable(const uint32_t* cmd_packet, uint32_t payload_words)",128
15522,"status_code_t hps_csr_disable(const uint32_t* cmd_packet, uint32_t payload_words)",150
15523,"status_code_t hps_io_unfrz(const uint32_t* cmd_packet, uint32_t payload_words)",167
15524,"status_code_t hps_io_refrz(const uint32_t* cmd_packet, uint32_t payload_words)",178
15525,"status_code_t hps_enter_user_mode(const uint32_t* cmd_packet, uint32_t payload_words)",189
15526,"status_code_t hps_exit_user_mode(const uint32_t* cmd_packet, uint32_t payload_words)",213
15527,"status_code_t hps_io_tristate_disable(const uint32_t* cmd_packet, uint32_t payload_words)",236
15528,"status_code_t hps_io_tristate_enable(const uint32_t* cmd_packet, uint32_t payload_words)",256
15529,"status_code_t hps_power_up(const uint32_t* cmd_packet, uint32_t payload_words)",272
15530,"status_code_t hps_power_down(const uint32_t* cmd_packet, uint32_t payload_words)",293
15531,"status_code_t csr_enable(const uint32_t* cmd_packet, uint32_t payload_words)",307
15532,"status_code_t csr_disable(const uint32_t* cmd_packet, uint32_t payload_words)",331
15533,"status_code_t io_unfrz(const uint32_t* cmd_packet, uint32_t payload_words)",350
15534,"status_code_t io_refrz(const uint32_t* cmd_packet, uint32_t payload_words)",361
15535,"status_code_t enter_user_mode(const uint32_t* cmd_packet, uint32_t payload_words)",372
15536,"status_code_t exit_user_mode(const uint32_t* cmd_packet, uint32_t payload_words)",391
15537,"status_code_t io_tristate_disable(const uint32_t* cmd_packet, uint32_t payload_words)",409
15538,"status_code_t io_tristate_enable(const uint32_t* cmd_packet, uint32_t payload_words)",428
15539,void return_status(void) {,453
15540,void warm_reset_warning(void) {,462
15541,uint32_t cnoc_rx_cmd_init(void),534
15542,uint32_t cnoc_rx_cmd_get_next_buf(uint32_t addr),559
15543,static void fake_powerup_sequence(void) {,616
15544,status_code_t cnoc_rx_cmd_loop(void),753
15545,Copyright (2015-19) Intel Corporation,3
15546,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
15547,static status_code_t process_param_data(uint32_t idx) {,54
15548,uint32_t cnoc_rx_param_init(void),63
15549,"uint32_t cnoc_rx_param_get_next_buf(uint32_t addr, uint32_t pkt_size_in_words)",78
15550,status_code_t cnoc_rx_param_loop(void),98
15551,Copyright (2015-19) Intel Corporation,3
15552,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
15553,uint32_t cnoc_rx_ssm_init(void),31
15554,"uint32_t cnoc_rx_ssm_get_next_buf(uint32_t addr, uint32_t pkt_size_in_words)",50
15555,status_code_t cnoc_rx_ssm_loop(void),66
15556,Copyright (2015-19) Intel Corporation,3
15557,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
15558,"void io_cnoc_tx_send_packet(uint32_t size_in_words, uint32_t *data) {",53
15559,void io_cnoc_tx_init() {,68
15560,void io_cnoc_tx_irq_assert() {,72
15561,void io_cnoc_tx_irq_deassert() {,76
15562,Copyright (2015-19) Intel Corporation,3
15563,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
15564,"void csr_receive_pkt(uint32_t addr, uint32_t pkt_size_in_words)",50
15565,uint32_t csr_init(void),64
15566,void check_csr_en(void),81
15567,status_code_t csr_loop(void),112
15568,Copyright (2015-19) Intel Corporation,3
15569,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
15570,static void log_entry(void) {,48
15571,static void log_exit(void) {,55
15572,void io_fail(ENUM_IOSSM_ERR_CODE err_code) {,62
15573,void cnt_busy(bool busy),69
15574,static void iossm_init(void),83
15575,static void clear_flags(ENUM_IOSSM_TASK task_flags) {,118
15576,void iossm_task_loop(void) {,123
15577,void wait_ns(uint32_t delay_ns) {,245
15578,int seq_main(void),250
15579,int main(void),252
15580,void alt_irq_init ( const void* base ),77
15581,void alt_sys_init( void ),88
15582,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15583,"* copy of this software and associated documentation files (the ""Software""),  *",9
15584,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
15585,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
15586,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
15587,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15588,"* copy of this software and associated documentation files (the ""Software""),  *",9
15589,void alt_vic_irq_init (alt_vic_dev* pdev),45
15590,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15591,"* copy of this software and associated documentation files (the ""Software""),  *",9
15592,"int alt_ic_isr_register(alt_u32 ic_id,",59
15593,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15594,"* copy of this software and associated documentation files (the ""Software""),  *",9
15595,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
15596,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15597,"* copy of this software and associated documentation files (the ""Software""),  *",9
15598,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
15599,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
15600,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
15601,void altera_nios2_gen2_irq_init(void) ,34
15602,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15603,"* copy of this software and associated documentation files (the ""Software""),  *",9
15604,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
15605,unsigned int alt_busy_sleep (unsigned int us),52
15606,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15607,"* copy of this software and associated documentation files (the ""Software""),  *",9
15608,int ALT_CLOSE (int fildes),42
15609,int ALT_CLOSE (int fildes),64
15610,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15611,"* copy of this software and associated documentation files (the ""Software""),  *",9
15612,"void alt_dcache_flush (void* start, alt_u32 len)",46
15613,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15614,"* copy of this software and associated documentation files (the ""Software""),  *",9
15615,void alt_dcache_flush_all (void),41
15616,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
15617,"* copy of this software and associated documentation files (the ""Software""),  *",9
15618,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
15619,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15620,"* copy of this software and associated documentation files (the ""Software""),  *",9
15621,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
15622,ALT_SEM(alt_fd_list_lock),109
15623,int alt_dev_reg (alt_dev* dev),151
15624,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15625,"* copy of this software and associated documentation files (the ""Software""),  *",9
15626,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
15627,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15628,"* copy of this software and associated documentation files (the ""Software""),  *",9
15629,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
15630,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15631,"* copy of this software and associated documentation files (the ""Software""),  *",9
15632,alt_dma_txchan alt_dma_txchan_open (const char* name),51
15633,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15634,"* copy of this software and associated documentation files (the ""Software""),  *",9
15635,void _do_ctors(void),58
15636,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15637,"* copy of this software and associated documentation files (the ""Software""),  *",9
15638,void _do_dtors(void),58
15639,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
15640,"* copy of this software and associated documentation files (the ""Software""),  *",9
15641,alt_ecc_fatal_exception_register(alt_u32 handler),66
15642,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15643,"* copy of this software and associated documentation files (the ""Software""),  *",9
15644,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15645,"* copy of this software and associated documentation files (the ""Software""),  *",9
15646,void __env_lock ( struct _reent *_r ),43
15647,void __env_unlock ( struct _reent *_r ),51
15648,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15649,"* copy of this software and associated documentation files (the ""Software""),  *",9
15650,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15651,"* copy of this software and associated documentation files (the ""Software""),  *",9
15652,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
15653,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15654,"* copy of this software and associated documentation files (the ""Software""),  *",9
15655,void ALT_EXIT (int exit_code),52
15656,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15657,"* copy of this software and associated documentation files (the ""Software""),  *",9
15658,"int ALT_FCNTL (int file, int cmd, ...)",66
15659,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15660,"* copy of this software and associated documentation files (the ""Software""),  *",9
15661,int alt_fd_lock (alt_fd* fd),54
15662,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15663,"* copy of this software and associated documentation files (the ""Software""),  *",9
15664,int alt_fd_unlock (alt_fd* fd),52
15665,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15666,"* copy of this software and associated documentation files (the ""Software""),  *",9
15667,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
15668,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15669,"* copy of this software and associated documentation files (the ""Software""),  *",9
15670,alt_dev* alt_find_file (const char* name),54
15671,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15672,"* copy of this software and associated documentation files (the ""Software""),  *",9
15673,alt_flash_fd* alt_flash_open_dev(const char* name),49
15674,void alt_flash_close_dev(alt_flash_fd* fd),61
15675,int alt_flash_device_register( alt_flash_fd* fd),70
15676,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15677,"* copy of this software and associated documentation files (the ""Software""),  *",9
15678,int ALT_FORK (void),45
15679,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15680,"* copy of this software and associated documentation files (the ""Software""),  *",9
15681,"int ALT_FSTAT (int file, struct stat *st)",63
15682,"int ALT_FSTAT (int file, struct stat *st)",93
15683,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15684,"* copy of this software and associated documentation files (the ""Software""),  *",9
15685,int alt_fs_reg (alt_dev* dev),57
15686,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15687,"* copy of this software and associated documentation files (the ""Software""),  *",9
15688,alt_getchar(void),51
15689,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15690,"* copy of this software and associated documentation files (the ""Software""),  *",9
15691,int ALT_GETPID (void),43
15692,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15693,"* copy of this software and associated documentation files (the ""Software""),  *",9
15694,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
15695,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
15696,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15697,"* copy of this software and associated documentation files (the ""Software""),  *",9
15698,int alt_get_fd (alt_dev* dev),54
15699,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15700,"* copy of this software and associated documentation files (the ""Software""),  *",9
15701,/* The compiler inserts calls to mcount() at the start of,48
15702,static __inline__ void * mcount_allocate(unsigned int size),133
15703,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
15704,static int nios2_pcsample_init(void),218
15705,static alt_u32 nios2_pcsample(void* context),250
15706,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15707,"* copy of this software and associated documentation files (the ""Software""),  *",9
15708,"void alt_icache_flush (void* start, alt_u32 len)",42
15709,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15710,"* copy of this software and associated documentation files (the ""Software""),  *",9
15711,void alt_icache_flush_all (void),41
15712,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15713,"* copy of this software and associated documentation files (the ""Software""),  *",9
15714,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
15715,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
15716,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
15717,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
15718,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15719,"* copy of this software and associated documentation files (the ""Software""),  *",9
15720,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
15721,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
15722,"* copy of this software and associated documentation files (the ""Software""),  *",9
15723,alt_exception_result (*alt_instruction_exception_handler),49
15724,int alt_instruction_exception_entry (alt_u32 exception_pc),53
15725,alt_instruction_exception_entry (alt_u32 exception_pc),68
15726,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
15727,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
15728,"* copy of this software and associated documentation files (the ""Software""),  *",9
15729,void alt_instruction_exception_register (,73
15730,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15731,"* copy of this software and associated documentation files (the ""Software""),  *",9
15732,"int ALT_IOCTL (int file, int req, void* arg)",68
15733,"int ALT_IOCTL (int file, int req, void* arg)",106
15734,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15735,"* copy of this software and associated documentation files (the ""Software""),  *",9
15736,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
15737,"void alt_io_redirect(const char* stdout_dev, ",85
15738,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15739,"* copy of this software and associated documentation files (the ""Software""),  *",9
15740,void alt_irq_handler (void),80
15741,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
15742,"* copy of this software and associated documentation files (the ""Software""),  *",9
15743,"int alt_irq_register (alt_u32 id, ",75
15744,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15745,"* copy of this software and associated documentation files (the ""Software""),  *",9
15746,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15747,"* copy of this software and associated documentation files (the ""Software""),  *",9
15748,int ALT_ISATTY (int file),50
15749,int ALT_ISATTY (int file),84
15750,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15751,"* copy of this software and associated documentation files (the ""Software""),  *",9
15752,"int ALT_KILL (int pid, int sig)",49
15753,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15754,"* copy of this software and associated documentation files (the ""Software""),  *",9
15755,"int ALT_LINK ( char *existing, char *new)",45
15756,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
15757,"* copy of this software and associated documentation files (the ""Software""),  *",9
15758,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
15759,void alt_load (void),67
15760,"void alt_log_txchar(int c,char *base)",95
15761,"void alt_log_repchar(char c,int r,int base)",106
15762,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
15763,"int alt_log_printf_proc(const char *fmt, ... )",344
15764,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
15765,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
15766,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
15767,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
15768,"void alt_log_write(const void *ptr, size_t len)",440
15769,void alt_log_system_clock(),474
15770,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
15771,"* copy of this software and associated documentation files (the ""Software""),  *",9
15772,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
15773,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
15774,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
15775,"* copy of this software and associated documentation files (the ""Software""),  *",9
15776,void alt_main (void),82
15777,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15778,"* copy of this software and associated documentation files (the ""Software""),  *",9
15779,void __malloc_lock ( struct _reent *_r ),42
15780,void __malloc_unlock ( struct _reent *_r ),50
15781,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15782,"* copy of this software and associated documentation files (the ""Software""),  *",9
15783,"int ALT_OPEN (const char* file, int flags, int mode)",41
15784,static int alt_file_locked (alt_fd* fd),64
15785,"int ALT_OPEN (const char* file, int flags, int mode)",105
15786,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15787,"* copy of this software and associated documentation files (the ""Software""),  *",9
15788,"alt_printf(const char* fmt, ... )",51
15789,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15790,"* copy of this software and associated documentation files (the ""Software""),  *",9
15791,alt_putchar(int c),50
15792,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15793,"* copy of this software and associated documentation files (the ""Software""),  *",9
15794,alt_putcharbuf(int c),58
15795,alt_putbufflush(),73
15796,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15797,"* copy of this software and associated documentation files (the ""Software""),  *",9
15798,alt_putstr(const char* str),52
15799,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15800,"* copy of this software and associated documentation files (the ""Software""),  *",9
15801,"int ALT_READ (int file, void *ptr, size_t len)",58
15802,"int ALT_READ (int file, void *ptr, size_t len)",82
15803,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15804,"* copy of this software and associated documentation files (the ""Software""),  *",9
15805,void alt_release_fd (int fd),44
15806,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15807,"* copy of this software and associated documentation files (the ""Software""),  *",9
15808,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
15809,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15810,"* copy of this software and associated documentation files (the ""Software""),  *",9
15811,"alt_remap_uncached(void* ptr, alt_u32 len)",49
15812,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15813,"* copy of this software and associated documentation files (the ""Software""),  *",9
15814,"int ALT_RENAME (char *existing, char *new)",45
15815,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15816,"* copy of this software and associated documentation files (the ""Software""),  *",9
15817,caddr_t ALT_SBRK (int incr),68
15818,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15819,"* copy of this software and associated documentation files (the ""Software""),  *",9
15820,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
15821,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15822,"* copy of this software and associated documentation files (the ""Software""),  *",9
15823,"int ALT_STAT (const char *file, struct stat *st)",49
15824,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15825,"* copy of this software and associated documentation files (the ""Software""),  *",9
15826,void alt_alarm_stop (alt_alarm* alarm),66
15827,void alt_tick (void),87
15828,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15829,"* copy of this software and associated documentation files (the ""Software""),  *",9
15830,clock_t ALT_TIMES (struct tms *buf),51
15831,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15832,"* copy of this software and associated documentation files (the ""Software""),  *",9
15833,alt_uncached_free(volatile void* ptr),40
15834,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
15835,"* copy of this software and associated documentation files (the ""Software""),  *",9
15836,alt_uncached_malloc(size_t size),42
15837,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15838,"* copy of this software and associated documentation files (the ""Software""),  *",9
15839,int ALT_UNLINK (char *name),45
15840,int ALT_USLEEP (useconds_t us),46
15841,unsigned int ALT_USLEEP (unsigned int us),48
15842,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15843,"* copy of this software and associated documentation files (the ""Software""),  *",9
15844,int ALT_WAIT (int *status),44
15845,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15846,"* copy of this software and associated documentation files (the ""Software""),  *",9
15847,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
15848,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
15849,int close (int fd),31
15850,void __attribute__ ((noreturn)) semihost_exit (int code),24
15851,void __attribute__ ((noreturn)) _exit (int code),35
15852,"int fstat (int fd, struct stat *buf)",34
15853,__hosted_to_gdb_mode_t (mode_t m),23
15854,__hosted_to_gdb_open_flags (int f),52
15855,__hosted_to_gdb_lseek_flags (int f),73
15856,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
15857,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
15858,__hosted_from_gdb_errno (int32_t err),111
15859,"int gettimeofday (struct timeval *tv, void *tzvp)",31
15860,void semihost_init_sim (),24
15861,int isatty (int fd),31
15862,"off_t lseek (int fd, off_t offset, int whence)",36
15863,"int open (const char *fname, int flags, ...)",38
15864,"ssize_t read (int fd, void *buf, size_t count)",33
15865,"int _rename (const char *oldpath, const char *newpath)",35
15866,"int stat (const char *filename, struct stat *buf)",37
15867,int _system (const char *command),34
15868,time_t time (time_t *t),31
15869,int unlink (const char *path),33
15870,"ssize_t write (int fd, const void *buf, size_t count)",33
15871,void alt_irq_init ( const void* base ),77
15872,void alt_sys_init( void ),88
15873,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15874,"* copy of this software and associated documentation files (the ""Software""),  *",9
15875,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
15876,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
15877,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
15878,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15879,"* copy of this software and associated documentation files (the ""Software""),  *",9
15880,void alt_vic_irq_init (alt_vic_dev* pdev),45
15881,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15882,"* copy of this software and associated documentation files (the ""Software""),  *",9
15883,"int alt_ic_isr_register(alt_u32 ic_id,",59
15884,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15885,"* copy of this software and associated documentation files (the ""Software""),  *",9
15886,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
15887,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
15888,"* copy of this software and associated documentation files (the ""Software""),  *",9
15889,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
15890,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
15891,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
15892,void altera_nios2_gen2_irq_init(void) ,34
15893,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15894,"* copy of this software and associated documentation files (the ""Software""),  *",9
15895,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
15896,unsigned int alt_busy_sleep (unsigned int us),52
15897,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15898,"* copy of this software and associated documentation files (the ""Software""),  *",9
15899,int ALT_CLOSE (int fildes),42
15900,int ALT_CLOSE (int fildes),64
15901,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15902,"* copy of this software and associated documentation files (the ""Software""),  *",9
15903,"void alt_dcache_flush (void* start, alt_u32 len)",46
15904,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15905,"* copy of this software and associated documentation files (the ""Software""),  *",9
15906,void alt_dcache_flush_all (void),41
15907,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
15908,"* copy of this software and associated documentation files (the ""Software""),  *",9
15909,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
15910,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15911,"* copy of this software and associated documentation files (the ""Software""),  *",9
15912,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
15913,ALT_SEM(alt_fd_list_lock),109
15914,int alt_dev_reg (alt_dev* dev),151
15915,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15916,"* copy of this software and associated documentation files (the ""Software""),  *",9
15917,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
15918,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15919,"* copy of this software and associated documentation files (the ""Software""),  *",9
15920,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
15921,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15922,"* copy of this software and associated documentation files (the ""Software""),  *",9
15923,alt_dma_txchan alt_dma_txchan_open (const char* name),51
15924,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15925,"* copy of this software and associated documentation files (the ""Software""),  *",9
15926,void _do_ctors(void),58
15927,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15928,"* copy of this software and associated documentation files (the ""Software""),  *",9
15929,void _do_dtors(void),58
15930,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
15931,"* copy of this software and associated documentation files (the ""Software""),  *",9
15932,alt_ecc_fatal_exception_register(alt_u32 handler),66
15933,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15934,"* copy of this software and associated documentation files (the ""Software""),  *",9
15935,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15936,"* copy of this software and associated documentation files (the ""Software""),  *",9
15937,void __env_lock ( struct _reent *_r ),43
15938,void __env_unlock ( struct _reent *_r ),51
15939,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15940,"* copy of this software and associated documentation files (the ""Software""),  *",9
15941,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15942,"* copy of this software and associated documentation files (the ""Software""),  *",9
15943,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
15944,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15945,"* copy of this software and associated documentation files (the ""Software""),  *",9
15946,void ALT_EXIT (int exit_code),52
15947,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15948,"* copy of this software and associated documentation files (the ""Software""),  *",9
15949,"int ALT_FCNTL (int file, int cmd, ...)",66
15950,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15951,"* copy of this software and associated documentation files (the ""Software""),  *",9
15952,int alt_fd_lock (alt_fd* fd),54
15953,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15954,"* copy of this software and associated documentation files (the ""Software""),  *",9
15955,int alt_fd_unlock (alt_fd* fd),52
15956,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15957,"* copy of this software and associated documentation files (the ""Software""),  *",9
15958,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
15959,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15960,"* copy of this software and associated documentation files (the ""Software""),  *",9
15961,alt_dev* alt_find_file (const char* name),54
15962,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15963,"* copy of this software and associated documentation files (the ""Software""),  *",9
15964,alt_flash_fd* alt_flash_open_dev(const char* name),49
15965,void alt_flash_close_dev(alt_flash_fd* fd),61
15966,int alt_flash_device_register( alt_flash_fd* fd),70
15967,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15968,"* copy of this software and associated documentation files (the ""Software""),  *",9
15969,int ALT_FORK (void),45
15970,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
15971,"* copy of this software and associated documentation files (the ""Software""),  *",9
15972,"int ALT_FSTAT (int file, struct stat *st)",63
15973,"int ALT_FSTAT (int file, struct stat *st)",93
15974,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15975,"* copy of this software and associated documentation files (the ""Software""),  *",9
15976,int alt_fs_reg (alt_dev* dev),57
15977,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
15978,"* copy of this software and associated documentation files (the ""Software""),  *",9
15979,alt_getchar(void),51
15980,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15981,"* copy of this software and associated documentation files (the ""Software""),  *",9
15982,int ALT_GETPID (void),43
15983,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
15984,"* copy of this software and associated documentation files (the ""Software""),  *",9
15985,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
15986,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
15987,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
15988,"* copy of this software and associated documentation files (the ""Software""),  *",9
15989,int alt_get_fd (alt_dev* dev),54
15990,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
15991,"* copy of this software and associated documentation files (the ""Software""),  *",9
15992,/* The compiler inserts calls to mcount() at the start of,48
15993,static __inline__ void * mcount_allocate(unsigned int size),133
15994,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
15995,static int nios2_pcsample_init(void),218
15996,static alt_u32 nios2_pcsample(void* context),250
15997,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
15998,"* copy of this software and associated documentation files (the ""Software""),  *",9
15999,"void alt_icache_flush (void* start, alt_u32 len)",42
16000,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16001,"* copy of this software and associated documentation files (the ""Software""),  *",9
16002,void alt_icache_flush_all (void),41
16003,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16004,"* copy of this software and associated documentation files (the ""Software""),  *",9
16005,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
16006,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
16007,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
16008,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
16009,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16010,"* copy of this software and associated documentation files (the ""Software""),  *",9
16011,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
16012,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
16013,"* copy of this software and associated documentation files (the ""Software""),  *",9
16014,alt_exception_result (*alt_instruction_exception_handler),49
16015,int alt_instruction_exception_entry (alt_u32 exception_pc),53
16016,alt_instruction_exception_entry (alt_u32 exception_pc),68
16017,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
16018,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
16019,"* copy of this software and associated documentation files (the ""Software""),  *",9
16020,void alt_instruction_exception_register (,73
16021,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16022,"* copy of this software and associated documentation files (the ""Software""),  *",9
16023,"int ALT_IOCTL (int file, int req, void* arg)",68
16024,"int ALT_IOCTL (int file, int req, void* arg)",106
16025,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16026,"* copy of this software and associated documentation files (the ""Software""),  *",9
16027,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
16028,"void alt_io_redirect(const char* stdout_dev, ",85
16029,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16030,"* copy of this software and associated documentation files (the ""Software""),  *",9
16031,void alt_irq_handler (void),80
16032,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16033,"* copy of this software and associated documentation files (the ""Software""),  *",9
16034,"int alt_irq_register (alt_u32 id, ",75
16035,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16036,"* copy of this software and associated documentation files (the ""Software""),  *",9
16037,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16038,"* copy of this software and associated documentation files (the ""Software""),  *",9
16039,int ALT_ISATTY (int file),50
16040,int ALT_ISATTY (int file),84
16041,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16042,"* copy of this software and associated documentation files (the ""Software""),  *",9
16043,"int ALT_KILL (int pid, int sig)",49
16044,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16045,"* copy of this software and associated documentation files (the ""Software""),  *",9
16046,"int ALT_LINK ( char *existing, char *new)",45
16047,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
16048,"* copy of this software and associated documentation files (the ""Software""),  *",9
16049,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
16050,void alt_load (void),67
16051,"void alt_log_txchar(int c,char *base)",95
16052,"void alt_log_repchar(char c,int r,int base)",106
16053,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
16054,"int alt_log_printf_proc(const char *fmt, ... )",344
16055,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
16056,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
16057,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
16058,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
16059,"void alt_log_write(const void *ptr, size_t len)",440
16060,void alt_log_system_clock(),474
16061,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
16062,"* copy of this software and associated documentation files (the ""Software""),  *",9
16063,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
16064,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
16065,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
16066,"* copy of this software and associated documentation files (the ""Software""),  *",9
16067,void alt_main (void),82
16068,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16069,"* copy of this software and associated documentation files (the ""Software""),  *",9
16070,void __malloc_lock ( struct _reent *_r ),42
16071,void __malloc_unlock ( struct _reent *_r ),50
16072,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16073,"* copy of this software and associated documentation files (the ""Software""),  *",9
16074,"int ALT_OPEN (const char* file, int flags, int mode)",41
16075,static int alt_file_locked (alt_fd* fd),64
16076,"int ALT_OPEN (const char* file, int flags, int mode)",105
16077,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16078,"* copy of this software and associated documentation files (the ""Software""),  *",9
16079,"alt_printf(const char* fmt, ... )",51
16080,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16081,"* copy of this software and associated documentation files (the ""Software""),  *",9
16082,alt_putchar(int c),50
16083,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16084,"* copy of this software and associated documentation files (the ""Software""),  *",9
16085,alt_putcharbuf(int c),58
16086,alt_putbufflush(),73
16087,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16088,"* copy of this software and associated documentation files (the ""Software""),  *",9
16089,alt_putstr(const char* str),52
16090,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16091,"* copy of this software and associated documentation files (the ""Software""),  *",9
16092,"int ALT_READ (int file, void *ptr, size_t len)",58
16093,"int ALT_READ (int file, void *ptr, size_t len)",82
16094,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16095,"* copy of this software and associated documentation files (the ""Software""),  *",9
16096,void alt_release_fd (int fd),44
16097,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16098,"* copy of this software and associated documentation files (the ""Software""),  *",9
16099,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
16100,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16101,"* copy of this software and associated documentation files (the ""Software""),  *",9
16102,"alt_remap_uncached(void* ptr, alt_u32 len)",49
16103,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16104,"* copy of this software and associated documentation files (the ""Software""),  *",9
16105,"int ALT_RENAME (char *existing, char *new)",45
16106,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16107,"* copy of this software and associated documentation files (the ""Software""),  *",9
16108,caddr_t ALT_SBRK (int incr),68
16109,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16110,"* copy of this software and associated documentation files (the ""Software""),  *",9
16111,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
16112,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16113,"* copy of this software and associated documentation files (the ""Software""),  *",9
16114,"int ALT_STAT (const char *file, struct stat *st)",49
16115,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16116,"* copy of this software and associated documentation files (the ""Software""),  *",9
16117,void alt_alarm_stop (alt_alarm* alarm),66
16118,void alt_tick (void),87
16119,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16120,"* copy of this software and associated documentation files (the ""Software""),  *",9
16121,clock_t ALT_TIMES (struct tms *buf),51
16122,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16123,"* copy of this software and associated documentation files (the ""Software""),  *",9
16124,alt_uncached_free(volatile void* ptr),40
16125,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16126,"* copy of this software and associated documentation files (the ""Software""),  *",9
16127,alt_uncached_malloc(size_t size),42
16128,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16129,"* copy of this software and associated documentation files (the ""Software""),  *",9
16130,int ALT_UNLINK (char *name),45
16131,int ALT_USLEEP (useconds_t us),46
16132,unsigned int ALT_USLEEP (unsigned int us),48
16133,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16134,"* copy of this software and associated documentation files (the ""Software""),  *",9
16135,int ALT_WAIT (int *status),44
16136,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16137,"* copy of this software and associated documentation files (the ""Software""),  *",9
16138,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
16139,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
16140,int close (int fd),31
16141,void __attribute__ ((noreturn)) semihost_exit (int code),24
16142,void __attribute__ ((noreturn)) _exit (int code),35
16143,"int fstat (int fd, struct stat *buf)",34
16144,__hosted_to_gdb_mode_t (mode_t m),23
16145,__hosted_to_gdb_open_flags (int f),52
16146,__hosted_to_gdb_lseek_flags (int f),73
16147,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
16148,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
16149,__hosted_from_gdb_errno (int32_t err),111
16150,"int gettimeofday (struct timeval *tv, void *tzvp)",31
16151,void semihost_init_sim (),24
16152,int isatty (int fd),31
16153,"off_t lseek (int fd, off_t offset, int whence)",36
16154,"int open (const char *fname, int flags, ...)",38
16155,"ssize_t read (int fd, void *buf, size_t count)",33
16156,"int _rename (const char *oldpath, const char *newpath)",35
16157,"int stat (const char *filename, struct stat *buf)",37
16158,int _system (const char *command),34
16159,time_t time (time_t *t),31
16160,int unlink (const char *path),33
16161,"ssize_t write (int fd, const void *buf, size_t count)",33
16162,void alt_irq_init ( const void* base ),77
16163,void alt_sys_init( void ),88
16164,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16165,"* copy of this software and associated documentation files (the ""Software""),  *",9
16166,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
16167,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
16168,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
16169,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16170,"* copy of this software and associated documentation files (the ""Software""),  *",9
16171,void alt_vic_irq_init (alt_vic_dev* pdev),45
16172,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16173,"* copy of this software and associated documentation files (the ""Software""),  *",9
16174,"int alt_ic_isr_register(alt_u32 ic_id,",59
16175,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16176,"* copy of this software and associated documentation files (the ""Software""),  *",9
16177,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
16178,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16179,"* copy of this software and associated documentation files (the ""Software""),  *",9
16180,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
16181,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
16182,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
16183,void altera_nios2_gen2_irq_init(void) ,34
16184,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16185,"* copy of this software and associated documentation files (the ""Software""),  *",9
16186,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
16187,unsigned int alt_busy_sleep (unsigned int us),52
16188,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16189,"* copy of this software and associated documentation files (the ""Software""),  *",9
16190,int ALT_CLOSE (int fildes),42
16191,int ALT_CLOSE (int fildes),64
16192,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16193,"* copy of this software and associated documentation files (the ""Software""),  *",9
16194,"void alt_dcache_flush (void* start, alt_u32 len)",46
16195,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16196,"* copy of this software and associated documentation files (the ""Software""),  *",9
16197,void alt_dcache_flush_all (void),41
16198,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
16199,"* copy of this software and associated documentation files (the ""Software""),  *",9
16200,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
16201,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16202,"* copy of this software and associated documentation files (the ""Software""),  *",9
16203,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
16204,ALT_SEM(alt_fd_list_lock),109
16205,int alt_dev_reg (alt_dev* dev),151
16206,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16207,"* copy of this software and associated documentation files (the ""Software""),  *",9
16208,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
16209,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16210,"* copy of this software and associated documentation files (the ""Software""),  *",9
16211,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
16212,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16213,"* copy of this software and associated documentation files (the ""Software""),  *",9
16214,alt_dma_txchan alt_dma_txchan_open (const char* name),51
16215,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16216,"* copy of this software and associated documentation files (the ""Software""),  *",9
16217,void _do_ctors(void),58
16218,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16219,"* copy of this software and associated documentation files (the ""Software""),  *",9
16220,void _do_dtors(void),58
16221,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
16222,"* copy of this software and associated documentation files (the ""Software""),  *",9
16223,alt_ecc_fatal_exception_register(alt_u32 handler),66
16224,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16225,"* copy of this software and associated documentation files (the ""Software""),  *",9
16226,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16227,"* copy of this software and associated documentation files (the ""Software""),  *",9
16228,void __env_lock ( struct _reent *_r ),43
16229,void __env_unlock ( struct _reent *_r ),51
16230,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16231,"* copy of this software and associated documentation files (the ""Software""),  *",9
16232,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16233,"* copy of this software and associated documentation files (the ""Software""),  *",9
16234,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
16235,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16236,"* copy of this software and associated documentation files (the ""Software""),  *",9
16237,void ALT_EXIT (int exit_code),52
16238,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16239,"* copy of this software and associated documentation files (the ""Software""),  *",9
16240,"int ALT_FCNTL (int file, int cmd, ...)",66
16241,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16242,"* copy of this software and associated documentation files (the ""Software""),  *",9
16243,int alt_fd_lock (alt_fd* fd),54
16244,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16245,"* copy of this software and associated documentation files (the ""Software""),  *",9
16246,int alt_fd_unlock (alt_fd* fd),52
16247,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16248,"* copy of this software and associated documentation files (the ""Software""),  *",9
16249,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
16250,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16251,"* copy of this software and associated documentation files (the ""Software""),  *",9
16252,alt_dev* alt_find_file (const char* name),54
16253,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16254,"* copy of this software and associated documentation files (the ""Software""),  *",9
16255,alt_flash_fd* alt_flash_open_dev(const char* name),49
16256,void alt_flash_close_dev(alt_flash_fd* fd),61
16257,int alt_flash_device_register( alt_flash_fd* fd),70
16258,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16259,"* copy of this software and associated documentation files (the ""Software""),  *",9
16260,int ALT_FORK (void),45
16261,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16262,"* copy of this software and associated documentation files (the ""Software""),  *",9
16263,"int ALT_FSTAT (int file, struct stat *st)",63
16264,"int ALT_FSTAT (int file, struct stat *st)",93
16265,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16266,"* copy of this software and associated documentation files (the ""Software""),  *",9
16267,int alt_fs_reg (alt_dev* dev),57
16268,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16269,"* copy of this software and associated documentation files (the ""Software""),  *",9
16270,alt_getchar(void),51
16271,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16272,"* copy of this software and associated documentation files (the ""Software""),  *",9
16273,int ALT_GETPID (void),43
16274,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16275,"* copy of this software and associated documentation files (the ""Software""),  *",9
16276,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
16277,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
16278,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16279,"* copy of this software and associated documentation files (the ""Software""),  *",9
16280,int alt_get_fd (alt_dev* dev),54
16281,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16282,"* copy of this software and associated documentation files (the ""Software""),  *",9
16283,/* The compiler inserts calls to mcount() at the start of,48
16284,static __inline__ void * mcount_allocate(unsigned int size),133
16285,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
16286,static int nios2_pcsample_init(void),218
16287,static alt_u32 nios2_pcsample(void* context),250
16288,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16289,"* copy of this software and associated documentation files (the ""Software""),  *",9
16290,"void alt_icache_flush (void* start, alt_u32 len)",42
16291,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16292,"* copy of this software and associated documentation files (the ""Software""),  *",9
16293,void alt_icache_flush_all (void),41
16294,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16295,"* copy of this software and associated documentation files (the ""Software""),  *",9
16296,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
16297,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
16298,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
16299,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
16300,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16301,"* copy of this software and associated documentation files (the ""Software""),  *",9
16302,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
16303,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
16304,"* copy of this software and associated documentation files (the ""Software""),  *",9
16305,alt_exception_result (*alt_instruction_exception_handler),49
16306,int alt_instruction_exception_entry (alt_u32 exception_pc),53
16307,alt_instruction_exception_entry (alt_u32 exception_pc),68
16308,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
16309,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
16310,"* copy of this software and associated documentation files (the ""Software""),  *",9
16311,void alt_instruction_exception_register (,73
16312,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16313,"* copy of this software and associated documentation files (the ""Software""),  *",9
16314,"int ALT_IOCTL (int file, int req, void* arg)",68
16315,"int ALT_IOCTL (int file, int req, void* arg)",106
16316,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16317,"* copy of this software and associated documentation files (the ""Software""),  *",9
16318,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
16319,"void alt_io_redirect(const char* stdout_dev, ",85
16320,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16321,"* copy of this software and associated documentation files (the ""Software""),  *",9
16322,void alt_irq_handler (void),80
16323,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16324,"* copy of this software and associated documentation files (the ""Software""),  *",9
16325,"int alt_irq_register (alt_u32 id, ",75
16326,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16327,"* copy of this software and associated documentation files (the ""Software""),  *",9
16328,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16329,"* copy of this software and associated documentation files (the ""Software""),  *",9
16330,int ALT_ISATTY (int file),50
16331,int ALT_ISATTY (int file),84
16332,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16333,"* copy of this software and associated documentation files (the ""Software""),  *",9
16334,"int ALT_KILL (int pid, int sig)",49
16335,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16336,"* copy of this software and associated documentation files (the ""Software""),  *",9
16337,"int ALT_LINK ( char *existing, char *new)",45
16338,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
16339,"* copy of this software and associated documentation files (the ""Software""),  *",9
16340,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
16341,void alt_load (void),67
16342,"void alt_log_txchar(int c,char *base)",95
16343,"void alt_log_repchar(char c,int r,int base)",106
16344,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
16345,"int alt_log_printf_proc(const char *fmt, ... )",344
16346,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
16347,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
16348,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
16349,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
16350,"void alt_log_write(const void *ptr, size_t len)",440
16351,void alt_log_system_clock(),474
16352,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
16353,"* copy of this software and associated documentation files (the ""Software""),  *",9
16354,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
16355,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
16356,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
16357,"* copy of this software and associated documentation files (the ""Software""),  *",9
16358,void alt_main (void),82
16359,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16360,"* copy of this software and associated documentation files (the ""Software""),  *",9
16361,void __malloc_lock ( struct _reent *_r ),42
16362,void __malloc_unlock ( struct _reent *_r ),50
16363,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16364,"* copy of this software and associated documentation files (the ""Software""),  *",9
16365,"int ALT_OPEN (const char* file, int flags, int mode)",41
16366,static int alt_file_locked (alt_fd* fd),64
16367,"int ALT_OPEN (const char* file, int flags, int mode)",105
16368,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16369,"* copy of this software and associated documentation files (the ""Software""),  *",9
16370,"alt_printf(const char* fmt, ... )",51
16371,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16372,"* copy of this software and associated documentation files (the ""Software""),  *",9
16373,alt_putchar(int c),50
16374,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16375,"* copy of this software and associated documentation files (the ""Software""),  *",9
16376,alt_putcharbuf(int c),58
16377,alt_putbufflush(),73
16378,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16379,"* copy of this software and associated documentation files (the ""Software""),  *",9
16380,alt_putstr(const char* str),52
16381,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16382,"* copy of this software and associated documentation files (the ""Software""),  *",9
16383,"int ALT_READ (int file, void *ptr, size_t len)",58
16384,"int ALT_READ (int file, void *ptr, size_t len)",82
16385,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16386,"* copy of this software and associated documentation files (the ""Software""),  *",9
16387,void alt_release_fd (int fd),44
16388,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16389,"* copy of this software and associated documentation files (the ""Software""),  *",9
16390,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
16391,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16392,"* copy of this software and associated documentation files (the ""Software""),  *",9
16393,"alt_remap_uncached(void* ptr, alt_u32 len)",49
16394,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16395,"* copy of this software and associated documentation files (the ""Software""),  *",9
16396,"int ALT_RENAME (char *existing, char *new)",45
16397,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16398,"* copy of this software and associated documentation files (the ""Software""),  *",9
16399,caddr_t ALT_SBRK (int incr),68
16400,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16401,"* copy of this software and associated documentation files (the ""Software""),  *",9
16402,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
16403,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16404,"* copy of this software and associated documentation files (the ""Software""),  *",9
16405,"int ALT_STAT (const char *file, struct stat *st)",49
16406,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16407,"* copy of this software and associated documentation files (the ""Software""),  *",9
16408,void alt_alarm_stop (alt_alarm* alarm),66
16409,void alt_tick (void),87
16410,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16411,"* copy of this software and associated documentation files (the ""Software""),  *",9
16412,clock_t ALT_TIMES (struct tms *buf),51
16413,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16414,"* copy of this software and associated documentation files (the ""Software""),  *",9
16415,alt_uncached_free(volatile void* ptr),40
16416,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16417,"* copy of this software and associated documentation files (the ""Software""),  *",9
16418,alt_uncached_malloc(size_t size),42
16419,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16420,"* copy of this software and associated documentation files (the ""Software""),  *",9
16421,int ALT_UNLINK (char *name),45
16422,int ALT_USLEEP (useconds_t us),46
16423,unsigned int ALT_USLEEP (unsigned int us),48
16424,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16425,"* copy of this software and associated documentation files (the ""Software""),  *",9
16426,int ALT_WAIT (int *status),44
16427,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16428,"* copy of this software and associated documentation files (the ""Software""),  *",9
16429,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
16430,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
16431,int close (int fd),31
16432,void __attribute__ ((noreturn)) semihost_exit (int code),24
16433,void __attribute__ ((noreturn)) _exit (int code),35
16434,"int fstat (int fd, struct stat *buf)",34
16435,__hosted_to_gdb_mode_t (mode_t m),23
16436,__hosted_to_gdb_open_flags (int f),52
16437,__hosted_to_gdb_lseek_flags (int f),73
16438,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
16439,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
16440,__hosted_from_gdb_errno (int32_t err),111
16441,"int gettimeofday (struct timeval *tv, void *tzvp)",31
16442,void semihost_init_sim (),24
16443,int isatty (int fd),31
16444,"off_t lseek (int fd, off_t offset, int whence)",36
16445,"int open (const char *fname, int flags, ...)",38
16446,"ssize_t read (int fd, void *buf, size_t count)",33
16447,"int _rename (const char *oldpath, const char *newpath)",35
16448,"int stat (const char *filename, struct stat *buf)",37
16449,int _system (const char *command),34
16450,time_t time (time_t *t),31
16451,int unlink (const char *path),33
16452,"ssize_t write (int fd, const void *buf, size_t count)",33
16453,void alt_irq_init ( const void* base ),77
16454,void alt_sys_init( void ),88
16455,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16456,"* copy of this software and associated documentation files (the ""Software""),  *",9
16457,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
16458,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
16459,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
16460,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16461,"* copy of this software and associated documentation files (the ""Software""),  *",9
16462,void alt_vic_irq_init (alt_vic_dev* pdev),45
16463,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16464,"* copy of this software and associated documentation files (the ""Software""),  *",9
16465,"int alt_ic_isr_register(alt_u32 ic_id,",59
16466,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16467,"* copy of this software and associated documentation files (the ""Software""),  *",9
16468,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
16469,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16470,"* copy of this software and associated documentation files (the ""Software""),  *",9
16471,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
16472,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
16473,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
16474,void altera_nios2_gen2_irq_init(void) ,34
16475,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16476,"* copy of this software and associated documentation files (the ""Software""),  *",9
16477,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
16478,unsigned int alt_busy_sleep (unsigned int us),52
16479,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16480,"* copy of this software and associated documentation files (the ""Software""),  *",9
16481,int ALT_CLOSE (int fildes),42
16482,int ALT_CLOSE (int fildes),64
16483,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16484,"* copy of this software and associated documentation files (the ""Software""),  *",9
16485,"void alt_dcache_flush (void* start, alt_u32 len)",46
16486,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16487,"* copy of this software and associated documentation files (the ""Software""),  *",9
16488,void alt_dcache_flush_all (void),41
16489,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
16490,"* copy of this software and associated documentation files (the ""Software""),  *",9
16491,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
16492,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16493,"* copy of this software and associated documentation files (the ""Software""),  *",9
16494,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
16495,ALT_SEM(alt_fd_list_lock),109
16496,int alt_dev_reg (alt_dev* dev),151
16497,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16498,"* copy of this software and associated documentation files (the ""Software""),  *",9
16499,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
16500,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16501,"* copy of this software and associated documentation files (the ""Software""),  *",9
16502,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
16503,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16504,"* copy of this software and associated documentation files (the ""Software""),  *",9
16505,alt_dma_txchan alt_dma_txchan_open (const char* name),51
16506,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16507,"* copy of this software and associated documentation files (the ""Software""),  *",9
16508,void _do_ctors(void),58
16509,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16510,"* copy of this software and associated documentation files (the ""Software""),  *",9
16511,void _do_dtors(void),58
16512,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
16513,"* copy of this software and associated documentation files (the ""Software""),  *",9
16514,alt_ecc_fatal_exception_register(alt_u32 handler),66
16515,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16516,"* copy of this software and associated documentation files (the ""Software""),  *",9
16517,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16518,"* copy of this software and associated documentation files (the ""Software""),  *",9
16519,void __env_lock ( struct _reent *_r ),43
16520,void __env_unlock ( struct _reent *_r ),51
16521,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16522,"* copy of this software and associated documentation files (the ""Software""),  *",9
16523,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16524,"* copy of this software and associated documentation files (the ""Software""),  *",9
16525,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
16526,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16527,"* copy of this software and associated documentation files (the ""Software""),  *",9
16528,void ALT_EXIT (int exit_code),52
16529,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16530,"* copy of this software and associated documentation files (the ""Software""),  *",9
16531,"int ALT_FCNTL (int file, int cmd, ...)",66
16532,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16533,"* copy of this software and associated documentation files (the ""Software""),  *",9
16534,int alt_fd_lock (alt_fd* fd),54
16535,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16536,"* copy of this software and associated documentation files (the ""Software""),  *",9
16537,int alt_fd_unlock (alt_fd* fd),52
16538,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16539,"* copy of this software and associated documentation files (the ""Software""),  *",9
16540,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
16541,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16542,"* copy of this software and associated documentation files (the ""Software""),  *",9
16543,alt_dev* alt_find_file (const char* name),54
16544,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16545,"* copy of this software and associated documentation files (the ""Software""),  *",9
16546,alt_flash_fd* alt_flash_open_dev(const char* name),49
16547,void alt_flash_close_dev(alt_flash_fd* fd),61
16548,int alt_flash_device_register( alt_flash_fd* fd),70
16549,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16550,"* copy of this software and associated documentation files (the ""Software""),  *",9
16551,int ALT_FORK (void),45
16552,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16553,"* copy of this software and associated documentation files (the ""Software""),  *",9
16554,"int ALT_FSTAT (int file, struct stat *st)",63
16555,"int ALT_FSTAT (int file, struct stat *st)",93
16556,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16557,"* copy of this software and associated documentation files (the ""Software""),  *",9
16558,int alt_fs_reg (alt_dev* dev),57
16559,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16560,"* copy of this software and associated documentation files (the ""Software""),  *",9
16561,alt_getchar(void),51
16562,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16563,"* copy of this software and associated documentation files (the ""Software""),  *",9
16564,int ALT_GETPID (void),43
16565,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16566,"* copy of this software and associated documentation files (the ""Software""),  *",9
16567,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
16568,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
16569,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16570,"* copy of this software and associated documentation files (the ""Software""),  *",9
16571,int alt_get_fd (alt_dev* dev),54
16572,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16573,"* copy of this software and associated documentation files (the ""Software""),  *",9
16574,/* The compiler inserts calls to mcount() at the start of,48
16575,static __inline__ void * mcount_allocate(unsigned int size),133
16576,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
16577,static int nios2_pcsample_init(void),218
16578,static alt_u32 nios2_pcsample(void* context),250
16579,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16580,"* copy of this software and associated documentation files (the ""Software""),  *",9
16581,"void alt_icache_flush (void* start, alt_u32 len)",42
16582,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16583,"* copy of this software and associated documentation files (the ""Software""),  *",9
16584,void alt_icache_flush_all (void),41
16585,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16586,"* copy of this software and associated documentation files (the ""Software""),  *",9
16587,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
16588,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
16589,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
16590,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
16591,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16592,"* copy of this software and associated documentation files (the ""Software""),  *",9
16593,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
16594,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
16595,"* copy of this software and associated documentation files (the ""Software""),  *",9
16596,alt_exception_result (*alt_instruction_exception_handler),49
16597,int alt_instruction_exception_entry (alt_u32 exception_pc),53
16598,alt_instruction_exception_entry (alt_u32 exception_pc),68
16599,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
16600,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
16601,"* copy of this software and associated documentation files (the ""Software""),  *",9
16602,void alt_instruction_exception_register (,73
16603,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16604,"* copy of this software and associated documentation files (the ""Software""),  *",9
16605,"int ALT_IOCTL (int file, int req, void* arg)",68
16606,"int ALT_IOCTL (int file, int req, void* arg)",106
16607,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16608,"* copy of this software and associated documentation files (the ""Software""),  *",9
16609,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
16610,"void alt_io_redirect(const char* stdout_dev, ",85
16611,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16612,"* copy of this software and associated documentation files (the ""Software""),  *",9
16613,void alt_irq_handler (void),80
16614,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16615,"* copy of this software and associated documentation files (the ""Software""),  *",9
16616,"int alt_irq_register (alt_u32 id, ",75
16617,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16618,"* copy of this software and associated documentation files (the ""Software""),  *",9
16619,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16620,"* copy of this software and associated documentation files (the ""Software""),  *",9
16621,int ALT_ISATTY (int file),50
16622,int ALT_ISATTY (int file),84
16623,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16624,"* copy of this software and associated documentation files (the ""Software""),  *",9
16625,"int ALT_KILL (int pid, int sig)",49
16626,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16627,"* copy of this software and associated documentation files (the ""Software""),  *",9
16628,"int ALT_LINK ( char *existing, char *new)",45
16629,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
16630,"* copy of this software and associated documentation files (the ""Software""),  *",9
16631,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
16632,void alt_load (void),67
16633,"void alt_log_txchar(int c,char *base)",95
16634,"void alt_log_repchar(char c,int r,int base)",106
16635,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
16636,"int alt_log_printf_proc(const char *fmt, ... )",344
16637,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
16638,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
16639,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
16640,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
16641,"void alt_log_write(const void *ptr, size_t len)",440
16642,void alt_log_system_clock(),474
16643,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
16644,"* copy of this software and associated documentation files (the ""Software""),  *",9
16645,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
16646,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
16647,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
16648,"* copy of this software and associated documentation files (the ""Software""),  *",9
16649,void alt_main (void),82
16650,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16651,"* copy of this software and associated documentation files (the ""Software""),  *",9
16652,void __malloc_lock ( struct _reent *_r ),42
16653,void __malloc_unlock ( struct _reent *_r ),50
16654,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16655,"* copy of this software and associated documentation files (the ""Software""),  *",9
16656,"int ALT_OPEN (const char* file, int flags, int mode)",41
16657,static int alt_file_locked (alt_fd* fd),64
16658,"int ALT_OPEN (const char* file, int flags, int mode)",105
16659,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16660,"* copy of this software and associated documentation files (the ""Software""),  *",9
16661,"alt_printf(const char* fmt, ... )",51
16662,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16663,"* copy of this software and associated documentation files (the ""Software""),  *",9
16664,alt_putchar(int c),50
16665,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16666,"* copy of this software and associated documentation files (the ""Software""),  *",9
16667,alt_putcharbuf(int c),58
16668,alt_putbufflush(),73
16669,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16670,"* copy of this software and associated documentation files (the ""Software""),  *",9
16671,alt_putstr(const char* str),52
16672,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16673,"* copy of this software and associated documentation files (the ""Software""),  *",9
16674,"int ALT_READ (int file, void *ptr, size_t len)",58
16675,"int ALT_READ (int file, void *ptr, size_t len)",82
16676,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16677,"* copy of this software and associated documentation files (the ""Software""),  *",9
16678,void alt_release_fd (int fd),44
16679,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16680,"* copy of this software and associated documentation files (the ""Software""),  *",9
16681,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
16682,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16683,"* copy of this software and associated documentation files (the ""Software""),  *",9
16684,"alt_remap_uncached(void* ptr, alt_u32 len)",49
16685,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16686,"* copy of this software and associated documentation files (the ""Software""),  *",9
16687,"int ALT_RENAME (char *existing, char *new)",45
16688,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16689,"* copy of this software and associated documentation files (the ""Software""),  *",9
16690,caddr_t ALT_SBRK (int incr),68
16691,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16692,"* copy of this software and associated documentation files (the ""Software""),  *",9
16693,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
16694,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16695,"* copy of this software and associated documentation files (the ""Software""),  *",9
16696,"int ALT_STAT (const char *file, struct stat *st)",49
16697,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16698,"* copy of this software and associated documentation files (the ""Software""),  *",9
16699,void alt_alarm_stop (alt_alarm* alarm),66
16700,void alt_tick (void),87
16701,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16702,"* copy of this software and associated documentation files (the ""Software""),  *",9
16703,clock_t ALT_TIMES (struct tms *buf),51
16704,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16705,"* copy of this software and associated documentation files (the ""Software""),  *",9
16706,alt_uncached_free(volatile void* ptr),40
16707,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16708,"* copy of this software and associated documentation files (the ""Software""),  *",9
16709,alt_uncached_malloc(size_t size),42
16710,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16711,"* copy of this software and associated documentation files (the ""Software""),  *",9
16712,int ALT_UNLINK (char *name),45
16713,int ALT_USLEEP (useconds_t us),46
16714,unsigned int ALT_USLEEP (unsigned int us),48
16715,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16716,"* copy of this software and associated documentation files (the ""Software""),  *",9
16717,int ALT_WAIT (int *status),44
16718,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16719,"* copy of this software and associated documentation files (the ""Software""),  *",9
16720,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
16721,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
16722,int close (int fd),31
16723,void __attribute__ ((noreturn)) semihost_exit (int code),24
16724,void __attribute__ ((noreturn)) _exit (int code),35
16725,"int fstat (int fd, struct stat *buf)",34
16726,__hosted_to_gdb_mode_t (mode_t m),23
16727,__hosted_to_gdb_open_flags (int f),52
16728,__hosted_to_gdb_lseek_flags (int f),73
16729,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
16730,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
16731,__hosted_from_gdb_errno (int32_t err),111
16732,"int gettimeofday (struct timeval *tv, void *tzvp)",31
16733,void semihost_init_sim (),24
16734,int isatty (int fd),31
16735,"off_t lseek (int fd, off_t offset, int whence)",36
16736,"int open (const char *fname, int flags, ...)",38
16737,"ssize_t read (int fd, void *buf, size_t count)",33
16738,"int _rename (const char *oldpath, const char *newpath)",35
16739,"int stat (const char *filename, struct stat *buf)",37
16740,int _system (const char *command),34
16741,time_t time (time_t *t),31
16742,int unlink (const char *path),33
16743,"ssize_t write (int fd, const void *buf, size_t count)",33
16744,void alt_irq_init ( const void* base ),77
16745,void alt_sys_init( void ),88
16746,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16747,"* copy of this software and associated documentation files (the ""Software""),  *",9
16748,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
16749,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
16750,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
16751,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16752,"* copy of this software and associated documentation files (the ""Software""),  *",9
16753,void alt_vic_irq_init (alt_vic_dev* pdev),45
16754,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16755,"* copy of this software and associated documentation files (the ""Software""),  *",9
16756,"int alt_ic_isr_register(alt_u32 ic_id,",59
16757,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16758,"* copy of this software and associated documentation files (the ""Software""),  *",9
16759,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
16760,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16761,"* copy of this software and associated documentation files (the ""Software""),  *",9
16762,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
16763,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
16764,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
16765,void altera_nios2_gen2_irq_init(void) ,34
16766,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16767,"* copy of this software and associated documentation files (the ""Software""),  *",9
16768,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
16769,unsigned int alt_busy_sleep (unsigned int us),52
16770,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16771,"* copy of this software and associated documentation files (the ""Software""),  *",9
16772,int ALT_CLOSE (int fildes),42
16773,int ALT_CLOSE (int fildes),64
16774,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16775,"* copy of this software and associated documentation files (the ""Software""),  *",9
16776,"void alt_dcache_flush (void* start, alt_u32 len)",46
16777,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16778,"* copy of this software and associated documentation files (the ""Software""),  *",9
16779,void alt_dcache_flush_all (void),41
16780,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
16781,"* copy of this software and associated documentation files (the ""Software""),  *",9
16782,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
16783,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16784,"* copy of this software and associated documentation files (the ""Software""),  *",9
16785,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
16786,ALT_SEM(alt_fd_list_lock),109
16787,int alt_dev_reg (alt_dev* dev),151
16788,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16789,"* copy of this software and associated documentation files (the ""Software""),  *",9
16790,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
16791,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16792,"* copy of this software and associated documentation files (the ""Software""),  *",9
16793,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
16794,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16795,"* copy of this software and associated documentation files (the ""Software""),  *",9
16796,alt_dma_txchan alt_dma_txchan_open (const char* name),51
16797,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16798,"* copy of this software and associated documentation files (the ""Software""),  *",9
16799,void _do_ctors(void),58
16800,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16801,"* copy of this software and associated documentation files (the ""Software""),  *",9
16802,void _do_dtors(void),58
16803,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
16804,"* copy of this software and associated documentation files (the ""Software""),  *",9
16805,alt_ecc_fatal_exception_register(alt_u32 handler),66
16806,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16807,"* copy of this software and associated documentation files (the ""Software""),  *",9
16808,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16809,"* copy of this software and associated documentation files (the ""Software""),  *",9
16810,void __env_lock ( struct _reent *_r ),43
16811,void __env_unlock ( struct _reent *_r ),51
16812,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16813,"* copy of this software and associated documentation files (the ""Software""),  *",9
16814,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16815,"* copy of this software and associated documentation files (the ""Software""),  *",9
16816,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
16817,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16818,"* copy of this software and associated documentation files (the ""Software""),  *",9
16819,void ALT_EXIT (int exit_code),52
16820,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16821,"* copy of this software and associated documentation files (the ""Software""),  *",9
16822,"int ALT_FCNTL (int file, int cmd, ...)",66
16823,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16824,"* copy of this software and associated documentation files (the ""Software""),  *",9
16825,int alt_fd_lock (alt_fd* fd),54
16826,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16827,"* copy of this software and associated documentation files (the ""Software""),  *",9
16828,int alt_fd_unlock (alt_fd* fd),52
16829,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16830,"* copy of this software and associated documentation files (the ""Software""),  *",9
16831,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
16832,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16833,"* copy of this software and associated documentation files (the ""Software""),  *",9
16834,alt_dev* alt_find_file (const char* name),54
16835,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16836,"* copy of this software and associated documentation files (the ""Software""),  *",9
16837,alt_flash_fd* alt_flash_open_dev(const char* name),49
16838,void alt_flash_close_dev(alt_flash_fd* fd),61
16839,int alt_flash_device_register( alt_flash_fd* fd),70
16840,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16841,"* copy of this software and associated documentation files (the ""Software""),  *",9
16842,int ALT_FORK (void),45
16843,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16844,"* copy of this software and associated documentation files (the ""Software""),  *",9
16845,"int ALT_FSTAT (int file, struct stat *st)",63
16846,"int ALT_FSTAT (int file, struct stat *st)",93
16847,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16848,"* copy of this software and associated documentation files (the ""Software""),  *",9
16849,int alt_fs_reg (alt_dev* dev),57
16850,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16851,"* copy of this software and associated documentation files (the ""Software""),  *",9
16852,alt_getchar(void),51
16853,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16854,"* copy of this software and associated documentation files (the ""Software""),  *",9
16855,int ALT_GETPID (void),43
16856,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16857,"* copy of this software and associated documentation files (the ""Software""),  *",9
16858,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
16859,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
16860,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16861,"* copy of this software and associated documentation files (the ""Software""),  *",9
16862,int alt_get_fd (alt_dev* dev),54
16863,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
16864,"* copy of this software and associated documentation files (the ""Software""),  *",9
16865,/* The compiler inserts calls to mcount() at the start of,48
16866,static __inline__ void * mcount_allocate(unsigned int size),133
16867,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
16868,static int nios2_pcsample_init(void),218
16869,static alt_u32 nios2_pcsample(void* context),250
16870,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16871,"* copy of this software and associated documentation files (the ""Software""),  *",9
16872,"void alt_icache_flush (void* start, alt_u32 len)",42
16873,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16874,"* copy of this software and associated documentation files (the ""Software""),  *",9
16875,void alt_icache_flush_all (void),41
16876,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
16877,"* copy of this software and associated documentation files (the ""Software""),  *",9
16878,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
16879,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
16880,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
16881,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
16882,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16883,"* copy of this software and associated documentation files (the ""Software""),  *",9
16884,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
16885,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
16886,"* copy of this software and associated documentation files (the ""Software""),  *",9
16887,alt_exception_result (*alt_instruction_exception_handler),49
16888,int alt_instruction_exception_entry (alt_u32 exception_pc),53
16889,alt_instruction_exception_entry (alt_u32 exception_pc),68
16890,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
16891,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
16892,"* copy of this software and associated documentation files (the ""Software""),  *",9
16893,void alt_instruction_exception_register (,73
16894,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16895,"* copy of this software and associated documentation files (the ""Software""),  *",9
16896,"int ALT_IOCTL (int file, int req, void* arg)",68
16897,"int ALT_IOCTL (int file, int req, void* arg)",106
16898,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16899,"* copy of this software and associated documentation files (the ""Software""),  *",9
16900,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
16901,"void alt_io_redirect(const char* stdout_dev, ",85
16902,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16903,"* copy of this software and associated documentation files (the ""Software""),  *",9
16904,void alt_irq_handler (void),80
16905,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
16906,"* copy of this software and associated documentation files (the ""Software""),  *",9
16907,"int alt_irq_register (alt_u32 id, ",75
16908,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
16909,"* copy of this software and associated documentation files (the ""Software""),  *",9
16910,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16911,"* copy of this software and associated documentation files (the ""Software""),  *",9
16912,int ALT_ISATTY (int file),50
16913,int ALT_ISATTY (int file),84
16914,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16915,"* copy of this software and associated documentation files (the ""Software""),  *",9
16916,"int ALT_KILL (int pid, int sig)",49
16917,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16918,"* copy of this software and associated documentation files (the ""Software""),  *",9
16919,"int ALT_LINK ( char *existing, char *new)",45
16920,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
16921,"* copy of this software and associated documentation files (the ""Software""),  *",9
16922,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
16923,void alt_load (void),67
16924,"void alt_log_txchar(int c,char *base)",95
16925,"void alt_log_repchar(char c,int r,int base)",106
16926,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
16927,"int alt_log_printf_proc(const char *fmt, ... )",344
16928,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
16929,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
16930,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
16931,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
16932,"void alt_log_write(const void *ptr, size_t len)",440
16933,void alt_log_system_clock(),474
16934,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
16935,"* copy of this software and associated documentation files (the ""Software""),  *",9
16936,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
16937,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
16938,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
16939,"* copy of this software and associated documentation files (the ""Software""),  *",9
16940,void alt_main (void),82
16941,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16942,"* copy of this software and associated documentation files (the ""Software""),  *",9
16943,void __malloc_lock ( struct _reent *_r ),42
16944,void __malloc_unlock ( struct _reent *_r ),50
16945,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16946,"* copy of this software and associated documentation files (the ""Software""),  *",9
16947,"int ALT_OPEN (const char* file, int flags, int mode)",41
16948,static int alt_file_locked (alt_fd* fd),64
16949,"int ALT_OPEN (const char* file, int flags, int mode)",105
16950,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16951,"* copy of this software and associated documentation files (the ""Software""),  *",9
16952,"alt_printf(const char* fmt, ... )",51
16953,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16954,"* copy of this software and associated documentation files (the ""Software""),  *",9
16955,alt_putchar(int c),50
16956,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16957,"* copy of this software and associated documentation files (the ""Software""),  *",9
16958,alt_putcharbuf(int c),58
16959,alt_putbufflush(),73
16960,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
16961,"* copy of this software and associated documentation files (the ""Software""),  *",9
16962,alt_putstr(const char* str),52
16963,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
16964,"* copy of this software and associated documentation files (the ""Software""),  *",9
16965,"int ALT_READ (int file, void *ptr, size_t len)",58
16966,"int ALT_READ (int file, void *ptr, size_t len)",82
16967,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16968,"* copy of this software and associated documentation files (the ""Software""),  *",9
16969,void alt_release_fd (int fd),44
16970,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16971,"* copy of this software and associated documentation files (the ""Software""),  *",9
16972,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
16973,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16974,"* copy of this software and associated documentation files (the ""Software""),  *",9
16975,"alt_remap_uncached(void* ptr, alt_u32 len)",49
16976,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16977,"* copy of this software and associated documentation files (the ""Software""),  *",9
16978,"int ALT_RENAME (char *existing, char *new)",45
16979,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16980,"* copy of this software and associated documentation files (the ""Software""),  *",9
16981,caddr_t ALT_SBRK (int incr),68
16982,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16983,"* copy of this software and associated documentation files (the ""Software""),  *",9
16984,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
16985,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16986,"* copy of this software and associated documentation files (the ""Software""),  *",9
16987,"int ALT_STAT (const char *file, struct stat *st)",49
16988,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
16989,"* copy of this software and associated documentation files (the ""Software""),  *",9
16990,void alt_alarm_stop (alt_alarm* alarm),66
16991,void alt_tick (void),87
16992,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
16993,"* copy of this software and associated documentation files (the ""Software""),  *",9
16994,clock_t ALT_TIMES (struct tms *buf),51
16995,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16996,"* copy of this software and associated documentation files (the ""Software""),  *",9
16997,alt_uncached_free(volatile void* ptr),40
16998,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
16999,"* copy of this software and associated documentation files (the ""Software""),  *",9
17000,alt_uncached_malloc(size_t size),42
17001,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17002,"* copy of this software and associated documentation files (the ""Software""),  *",9
17003,int ALT_UNLINK (char *name),45
17004,int ALT_USLEEP (useconds_t us),46
17005,unsigned int ALT_USLEEP (unsigned int us),48
17006,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17007,"* copy of this software and associated documentation files (the ""Software""),  *",9
17008,int ALT_WAIT (int *status),44
17009,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17010,"* copy of this software and associated documentation files (the ""Software""),  *",9
17011,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
17012,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
17013,int close (int fd),31
17014,void __attribute__ ((noreturn)) semihost_exit (int code),24
17015,void __attribute__ ((noreturn)) _exit (int code),35
17016,"int fstat (int fd, struct stat *buf)",34
17017,__hosted_to_gdb_mode_t (mode_t m),23
17018,__hosted_to_gdb_open_flags (int f),52
17019,__hosted_to_gdb_lseek_flags (int f),73
17020,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
17021,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
17022,__hosted_from_gdb_errno (int32_t err),111
17023,"int gettimeofday (struct timeval *tv, void *tzvp)",31
17024,void semihost_init_sim (),24
17025,int isatty (int fd),31
17026,"off_t lseek (int fd, off_t offset, int whence)",36
17027,"int open (const char *fname, int flags, ...)",38
17028,"ssize_t read (int fd, void *buf, size_t count)",33
17029,"int _rename (const char *oldpath, const char *newpath)",35
17030,"int stat (const char *filename, struct stat *buf)",37
17031,int _system (const char *command),34
17032,time_t time (time_t *t),31
17033,int unlink (const char *path),33
17034,"ssize_t write (int fd, const void *buf, size_t count)",33
17035,void alt_irq_init ( const void* base ),77
17036,void alt_sys_init( void ),88
17037,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17038,"* copy of this software and associated documentation files (the ""Software""),  *",9
17039,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
17040,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
17041,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
17042,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17043,"* copy of this software and associated documentation files (the ""Software""),  *",9
17044,void alt_vic_irq_init (alt_vic_dev* pdev),45
17045,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17046,"* copy of this software and associated documentation files (the ""Software""),  *",9
17047,"int alt_ic_isr_register(alt_u32 ic_id,",59
17048,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17049,"* copy of this software and associated documentation files (the ""Software""),  *",9
17050,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
17051,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17052,"* copy of this software and associated documentation files (the ""Software""),  *",9
17053,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
17054,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
17055,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
17056,void altera_nios2_gen2_irq_init(void) ,34
17057,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17058,"* copy of this software and associated documentation files (the ""Software""),  *",9
17059,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
17060,unsigned int alt_busy_sleep (unsigned int us),52
17061,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17062,"* copy of this software and associated documentation files (the ""Software""),  *",9
17063,int ALT_CLOSE (int fildes),42
17064,int ALT_CLOSE (int fildes),64
17065,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17066,"* copy of this software and associated documentation files (the ""Software""),  *",9
17067,"void alt_dcache_flush (void* start, alt_u32 len)",46
17068,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17069,"* copy of this software and associated documentation files (the ""Software""),  *",9
17070,void alt_dcache_flush_all (void),41
17071,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
17072,"* copy of this software and associated documentation files (the ""Software""),  *",9
17073,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
17074,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17075,"* copy of this software and associated documentation files (the ""Software""),  *",9
17076,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
17077,ALT_SEM(alt_fd_list_lock),109
17078,int alt_dev_reg (alt_dev* dev),151
17079,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17080,"* copy of this software and associated documentation files (the ""Software""),  *",9
17081,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
17082,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17083,"* copy of this software and associated documentation files (the ""Software""),  *",9
17084,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
17085,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17086,"* copy of this software and associated documentation files (the ""Software""),  *",9
17087,alt_dma_txchan alt_dma_txchan_open (const char* name),51
17088,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17089,"* copy of this software and associated documentation files (the ""Software""),  *",9
17090,void _do_ctors(void),58
17091,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17092,"* copy of this software and associated documentation files (the ""Software""),  *",9
17093,void _do_dtors(void),58
17094,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
17095,"* copy of this software and associated documentation files (the ""Software""),  *",9
17096,alt_ecc_fatal_exception_register(alt_u32 handler),66
17097,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17098,"* copy of this software and associated documentation files (the ""Software""),  *",9
17099,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17100,"* copy of this software and associated documentation files (the ""Software""),  *",9
17101,void __env_lock ( struct _reent *_r ),43
17102,void __env_unlock ( struct _reent *_r ),51
17103,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17104,"* copy of this software and associated documentation files (the ""Software""),  *",9
17105,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17106,"* copy of this software and associated documentation files (the ""Software""),  *",9
17107,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
17108,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17109,"* copy of this software and associated documentation files (the ""Software""),  *",9
17110,void ALT_EXIT (int exit_code),52
17111,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17112,"* copy of this software and associated documentation files (the ""Software""),  *",9
17113,"int ALT_FCNTL (int file, int cmd, ...)",66
17114,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17115,"* copy of this software and associated documentation files (the ""Software""),  *",9
17116,int alt_fd_lock (alt_fd* fd),54
17117,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17118,"* copy of this software and associated documentation files (the ""Software""),  *",9
17119,int alt_fd_unlock (alt_fd* fd),52
17120,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17121,"* copy of this software and associated documentation files (the ""Software""),  *",9
17122,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
17123,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17124,"* copy of this software and associated documentation files (the ""Software""),  *",9
17125,alt_dev* alt_find_file (const char* name),54
17126,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17127,"* copy of this software and associated documentation files (the ""Software""),  *",9
17128,alt_flash_fd* alt_flash_open_dev(const char* name),49
17129,void alt_flash_close_dev(alt_flash_fd* fd),61
17130,int alt_flash_device_register( alt_flash_fd* fd),70
17131,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17132,"* copy of this software and associated documentation files (the ""Software""),  *",9
17133,int ALT_FORK (void),45
17134,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17135,"* copy of this software and associated documentation files (the ""Software""),  *",9
17136,"int ALT_FSTAT (int file, struct stat *st)",63
17137,"int ALT_FSTAT (int file, struct stat *st)",93
17138,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17139,"* copy of this software and associated documentation files (the ""Software""),  *",9
17140,int alt_fs_reg (alt_dev* dev),57
17141,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17142,"* copy of this software and associated documentation files (the ""Software""),  *",9
17143,alt_getchar(void),51
17144,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17145,"* copy of this software and associated documentation files (the ""Software""),  *",9
17146,int ALT_GETPID (void),43
17147,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17148,"* copy of this software and associated documentation files (the ""Software""),  *",9
17149,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
17150,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
17151,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17152,"* copy of this software and associated documentation files (the ""Software""),  *",9
17153,int alt_get_fd (alt_dev* dev),54
17154,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17155,"* copy of this software and associated documentation files (the ""Software""),  *",9
17156,/* The compiler inserts calls to mcount() at the start of,48
17157,static __inline__ void * mcount_allocate(unsigned int size),133
17158,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
17159,static int nios2_pcsample_init(void),218
17160,static alt_u32 nios2_pcsample(void* context),250
17161,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17162,"* copy of this software and associated documentation files (the ""Software""),  *",9
17163,"void alt_icache_flush (void* start, alt_u32 len)",42
17164,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17165,"* copy of this software and associated documentation files (the ""Software""),  *",9
17166,void alt_icache_flush_all (void),41
17167,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17168,"* copy of this software and associated documentation files (the ""Software""),  *",9
17169,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
17170,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
17171,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
17172,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
17173,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17174,"* copy of this software and associated documentation files (the ""Software""),  *",9
17175,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
17176,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
17177,"* copy of this software and associated documentation files (the ""Software""),  *",9
17178,alt_exception_result (*alt_instruction_exception_handler),49
17179,int alt_instruction_exception_entry (alt_u32 exception_pc),53
17180,alt_instruction_exception_entry (alt_u32 exception_pc),68
17181,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
17182,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
17183,"* copy of this software and associated documentation files (the ""Software""),  *",9
17184,void alt_instruction_exception_register (,73
17185,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17186,"* copy of this software and associated documentation files (the ""Software""),  *",9
17187,"int ALT_IOCTL (int file, int req, void* arg)",68
17188,"int ALT_IOCTL (int file, int req, void* arg)",106
17189,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17190,"* copy of this software and associated documentation files (the ""Software""),  *",9
17191,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
17192,"void alt_io_redirect(const char* stdout_dev, ",85
17193,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17194,"* copy of this software and associated documentation files (the ""Software""),  *",9
17195,void alt_irq_handler (void),80
17196,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17197,"* copy of this software and associated documentation files (the ""Software""),  *",9
17198,"int alt_irq_register (alt_u32 id, ",75
17199,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17200,"* copy of this software and associated documentation files (the ""Software""),  *",9
17201,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17202,"* copy of this software and associated documentation files (the ""Software""),  *",9
17203,int ALT_ISATTY (int file),50
17204,int ALT_ISATTY (int file),84
17205,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17206,"* copy of this software and associated documentation files (the ""Software""),  *",9
17207,"int ALT_KILL (int pid, int sig)",49
17208,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17209,"* copy of this software and associated documentation files (the ""Software""),  *",9
17210,"int ALT_LINK ( char *existing, char *new)",45
17211,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
17212,"* copy of this software and associated documentation files (the ""Software""),  *",9
17213,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
17214,void alt_load (void),67
17215,"void alt_log_txchar(int c,char *base)",95
17216,"void alt_log_repchar(char c,int r,int base)",106
17217,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
17218,"int alt_log_printf_proc(const char *fmt, ... )",344
17219,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
17220,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
17221,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
17222,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
17223,"void alt_log_write(const void *ptr, size_t len)",440
17224,void alt_log_system_clock(),474
17225,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
17226,"* copy of this software and associated documentation files (the ""Software""),  *",9
17227,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
17228,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
17229,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
17230,"* copy of this software and associated documentation files (the ""Software""),  *",9
17231,void alt_main (void),82
17232,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17233,"* copy of this software and associated documentation files (the ""Software""),  *",9
17234,void __malloc_lock ( struct _reent *_r ),42
17235,void __malloc_unlock ( struct _reent *_r ),50
17236,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17237,"* copy of this software and associated documentation files (the ""Software""),  *",9
17238,"int ALT_OPEN (const char* file, int flags, int mode)",41
17239,static int alt_file_locked (alt_fd* fd),64
17240,"int ALT_OPEN (const char* file, int flags, int mode)",105
17241,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17242,"* copy of this software and associated documentation files (the ""Software""),  *",9
17243,"alt_printf(const char* fmt, ... )",51
17244,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17245,"* copy of this software and associated documentation files (the ""Software""),  *",9
17246,alt_putchar(int c),50
17247,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17248,"* copy of this software and associated documentation files (the ""Software""),  *",9
17249,alt_putcharbuf(int c),58
17250,alt_putbufflush(),73
17251,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17252,"* copy of this software and associated documentation files (the ""Software""),  *",9
17253,alt_putstr(const char* str),52
17254,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17255,"* copy of this software and associated documentation files (the ""Software""),  *",9
17256,"int ALT_READ (int file, void *ptr, size_t len)",58
17257,"int ALT_READ (int file, void *ptr, size_t len)",82
17258,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17259,"* copy of this software and associated documentation files (the ""Software""),  *",9
17260,void alt_release_fd (int fd),44
17261,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17262,"* copy of this software and associated documentation files (the ""Software""),  *",9
17263,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
17264,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17265,"* copy of this software and associated documentation files (the ""Software""),  *",9
17266,"alt_remap_uncached(void* ptr, alt_u32 len)",49
17267,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17268,"* copy of this software and associated documentation files (the ""Software""),  *",9
17269,"int ALT_RENAME (char *existing, char *new)",45
17270,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17271,"* copy of this software and associated documentation files (the ""Software""),  *",9
17272,caddr_t ALT_SBRK (int incr),68
17273,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17274,"* copy of this software and associated documentation files (the ""Software""),  *",9
17275,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
17276,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17277,"* copy of this software and associated documentation files (the ""Software""),  *",9
17278,"int ALT_STAT (const char *file, struct stat *st)",49
17279,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17280,"* copy of this software and associated documentation files (the ""Software""),  *",9
17281,void alt_alarm_stop (alt_alarm* alarm),66
17282,void alt_tick (void),87
17283,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17284,"* copy of this software and associated documentation files (the ""Software""),  *",9
17285,clock_t ALT_TIMES (struct tms *buf),51
17286,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17287,"* copy of this software and associated documentation files (the ""Software""),  *",9
17288,alt_uncached_free(volatile void* ptr),40
17289,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17290,"* copy of this software and associated documentation files (the ""Software""),  *",9
17291,alt_uncached_malloc(size_t size),42
17292,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17293,"* copy of this software and associated documentation files (the ""Software""),  *",9
17294,int ALT_UNLINK (char *name),45
17295,int ALT_USLEEP (useconds_t us),46
17296,unsigned int ALT_USLEEP (unsigned int us),48
17297,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17298,"* copy of this software and associated documentation files (the ""Software""),  *",9
17299,int ALT_WAIT (int *status),44
17300,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17301,"* copy of this software and associated documentation files (the ""Software""),  *",9
17302,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
17303,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
17304,int close (int fd),31
17305,void __attribute__ ((noreturn)) semihost_exit (int code),24
17306,void __attribute__ ((noreturn)) _exit (int code),35
17307,"int fstat (int fd, struct stat *buf)",34
17308,__hosted_to_gdb_mode_t (mode_t m),23
17309,__hosted_to_gdb_open_flags (int f),52
17310,__hosted_to_gdb_lseek_flags (int f),73
17311,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
17312,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
17313,__hosted_from_gdb_errno (int32_t err),111
17314,"int gettimeofday (struct timeval *tv, void *tzvp)",31
17315,void semihost_init_sim (),24
17316,int isatty (int fd),31
17317,"off_t lseek (int fd, off_t offset, int whence)",36
17318,"int open (const char *fname, int flags, ...)",38
17319,"ssize_t read (int fd, void *buf, size_t count)",33
17320,"int _rename (const char *oldpath, const char *newpath)",35
17321,"int stat (const char *filename, struct stat *buf)",37
17322,int _system (const char *command),34
17323,time_t time (time_t *t),31
17324,int unlink (const char *path),33
17325,"ssize_t write (int fd, const void *buf, size_t count)",33
17326,void alt_irq_init ( const void* base ),77
17327,void alt_sys_init( void ),88
17328,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17329,"* copy of this software and associated documentation files (the ""Software""),  *",9
17330,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
17331,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
17332,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
17333,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17334,"* copy of this software and associated documentation files (the ""Software""),  *",9
17335,void alt_vic_irq_init (alt_vic_dev* pdev),45
17336,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17337,"* copy of this software and associated documentation files (the ""Software""),  *",9
17338,"int alt_ic_isr_register(alt_u32 ic_id,",59
17339,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17340,"* copy of this software and associated documentation files (the ""Software""),  *",9
17341,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
17342,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17343,"* copy of this software and associated documentation files (the ""Software""),  *",9
17344,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
17345,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
17346,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
17347,void altera_nios2_gen2_irq_init(void) ,34
17348,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17349,"* copy of this software and associated documentation files (the ""Software""),  *",9
17350,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
17351,unsigned int alt_busy_sleep (unsigned int us),52
17352,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17353,"* copy of this software and associated documentation files (the ""Software""),  *",9
17354,int ALT_CLOSE (int fildes),42
17355,int ALT_CLOSE (int fildes),64
17356,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17357,"* copy of this software and associated documentation files (the ""Software""),  *",9
17358,"void alt_dcache_flush (void* start, alt_u32 len)",46
17359,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17360,"* copy of this software and associated documentation files (the ""Software""),  *",9
17361,void alt_dcache_flush_all (void),41
17362,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
17363,"* copy of this software and associated documentation files (the ""Software""),  *",9
17364,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
17365,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17366,"* copy of this software and associated documentation files (the ""Software""),  *",9
17367,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
17368,ALT_SEM(alt_fd_list_lock),109
17369,int alt_dev_reg (alt_dev* dev),151
17370,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17371,"* copy of this software and associated documentation files (the ""Software""),  *",9
17372,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
17373,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17374,"* copy of this software and associated documentation files (the ""Software""),  *",9
17375,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
17376,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17377,"* copy of this software and associated documentation files (the ""Software""),  *",9
17378,alt_dma_txchan alt_dma_txchan_open (const char* name),51
17379,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17380,"* copy of this software and associated documentation files (the ""Software""),  *",9
17381,void _do_ctors(void),58
17382,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17383,"* copy of this software and associated documentation files (the ""Software""),  *",9
17384,void _do_dtors(void),58
17385,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
17386,"* copy of this software and associated documentation files (the ""Software""),  *",9
17387,alt_ecc_fatal_exception_register(alt_u32 handler),66
17388,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17389,"* copy of this software and associated documentation files (the ""Software""),  *",9
17390,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17391,"* copy of this software and associated documentation files (the ""Software""),  *",9
17392,void __env_lock ( struct _reent *_r ),43
17393,void __env_unlock ( struct _reent *_r ),51
17394,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17395,"* copy of this software and associated documentation files (the ""Software""),  *",9
17396,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17397,"* copy of this software and associated documentation files (the ""Software""),  *",9
17398,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
17399,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17400,"* copy of this software and associated documentation files (the ""Software""),  *",9
17401,void ALT_EXIT (int exit_code),52
17402,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17403,"* copy of this software and associated documentation files (the ""Software""),  *",9
17404,"int ALT_FCNTL (int file, int cmd, ...)",66
17405,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17406,"* copy of this software and associated documentation files (the ""Software""),  *",9
17407,int alt_fd_lock (alt_fd* fd),54
17408,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17409,"* copy of this software and associated documentation files (the ""Software""),  *",9
17410,int alt_fd_unlock (alt_fd* fd),52
17411,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17412,"* copy of this software and associated documentation files (the ""Software""),  *",9
17413,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
17414,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17415,"* copy of this software and associated documentation files (the ""Software""),  *",9
17416,alt_dev* alt_find_file (const char* name),54
17417,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17418,"* copy of this software and associated documentation files (the ""Software""),  *",9
17419,alt_flash_fd* alt_flash_open_dev(const char* name),49
17420,void alt_flash_close_dev(alt_flash_fd* fd),61
17421,int alt_flash_device_register( alt_flash_fd* fd),70
17422,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17423,"* copy of this software and associated documentation files (the ""Software""),  *",9
17424,int ALT_FORK (void),45
17425,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17426,"* copy of this software and associated documentation files (the ""Software""),  *",9
17427,"int ALT_FSTAT (int file, struct stat *st)",63
17428,"int ALT_FSTAT (int file, struct stat *st)",93
17429,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17430,"* copy of this software and associated documentation files (the ""Software""),  *",9
17431,int alt_fs_reg (alt_dev* dev),57
17432,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17433,"* copy of this software and associated documentation files (the ""Software""),  *",9
17434,alt_getchar(void),51
17435,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17436,"* copy of this software and associated documentation files (the ""Software""),  *",9
17437,int ALT_GETPID (void),43
17438,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17439,"* copy of this software and associated documentation files (the ""Software""),  *",9
17440,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
17441,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
17442,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17443,"* copy of this software and associated documentation files (the ""Software""),  *",9
17444,int alt_get_fd (alt_dev* dev),54
17445,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17446,"* copy of this software and associated documentation files (the ""Software""),  *",9
17447,/* The compiler inserts calls to mcount() at the start of,48
17448,static __inline__ void * mcount_allocate(unsigned int size),133
17449,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
17450,static int nios2_pcsample_init(void),218
17451,static alt_u32 nios2_pcsample(void* context),250
17452,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17453,"* copy of this software and associated documentation files (the ""Software""),  *",9
17454,"void alt_icache_flush (void* start, alt_u32 len)",42
17455,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17456,"* copy of this software and associated documentation files (the ""Software""),  *",9
17457,void alt_icache_flush_all (void),41
17458,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17459,"* copy of this software and associated documentation files (the ""Software""),  *",9
17460,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
17461,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
17462,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
17463,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
17464,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17465,"* copy of this software and associated documentation files (the ""Software""),  *",9
17466,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
17467,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
17468,"* copy of this software and associated documentation files (the ""Software""),  *",9
17469,alt_exception_result (*alt_instruction_exception_handler),49
17470,int alt_instruction_exception_entry (alt_u32 exception_pc),53
17471,alt_instruction_exception_entry (alt_u32 exception_pc),68
17472,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
17473,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
17474,"* copy of this software and associated documentation files (the ""Software""),  *",9
17475,void alt_instruction_exception_register (,73
17476,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17477,"* copy of this software and associated documentation files (the ""Software""),  *",9
17478,"int ALT_IOCTL (int file, int req, void* arg)",68
17479,"int ALT_IOCTL (int file, int req, void* arg)",106
17480,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17481,"* copy of this software and associated documentation files (the ""Software""),  *",9
17482,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
17483,"void alt_io_redirect(const char* stdout_dev, ",85
17484,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17485,"* copy of this software and associated documentation files (the ""Software""),  *",9
17486,void alt_irq_handler (void),80
17487,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17488,"* copy of this software and associated documentation files (the ""Software""),  *",9
17489,"int alt_irq_register (alt_u32 id, ",75
17490,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17491,"* copy of this software and associated documentation files (the ""Software""),  *",9
17492,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17493,"* copy of this software and associated documentation files (the ""Software""),  *",9
17494,int ALT_ISATTY (int file),50
17495,int ALT_ISATTY (int file),84
17496,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17497,"* copy of this software and associated documentation files (the ""Software""),  *",9
17498,"int ALT_KILL (int pid, int sig)",49
17499,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17500,"* copy of this software and associated documentation files (the ""Software""),  *",9
17501,"int ALT_LINK ( char *existing, char *new)",45
17502,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
17503,"* copy of this software and associated documentation files (the ""Software""),  *",9
17504,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
17505,void alt_load (void),67
17506,"void alt_log_txchar(int c,char *base)",95
17507,"void alt_log_repchar(char c,int r,int base)",106
17508,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
17509,"int alt_log_printf_proc(const char *fmt, ... )",344
17510,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
17511,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
17512,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
17513,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
17514,"void alt_log_write(const void *ptr, size_t len)",440
17515,void alt_log_system_clock(),474
17516,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
17517,"* copy of this software and associated documentation files (the ""Software""),  *",9
17518,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
17519,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
17520,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
17521,"* copy of this software and associated documentation files (the ""Software""),  *",9
17522,void alt_main (void),82
17523,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17524,"* copy of this software and associated documentation files (the ""Software""),  *",9
17525,void __malloc_lock ( struct _reent *_r ),42
17526,void __malloc_unlock ( struct _reent *_r ),50
17527,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17528,"* copy of this software and associated documentation files (the ""Software""),  *",9
17529,"int ALT_OPEN (const char* file, int flags, int mode)",41
17530,static int alt_file_locked (alt_fd* fd),64
17531,"int ALT_OPEN (const char* file, int flags, int mode)",105
17532,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17533,"* copy of this software and associated documentation files (the ""Software""),  *",9
17534,"alt_printf(const char* fmt, ... )",51
17535,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17536,"* copy of this software and associated documentation files (the ""Software""),  *",9
17537,alt_putchar(int c),50
17538,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17539,"* copy of this software and associated documentation files (the ""Software""),  *",9
17540,alt_putcharbuf(int c),58
17541,alt_putbufflush(),73
17542,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17543,"* copy of this software and associated documentation files (the ""Software""),  *",9
17544,alt_putstr(const char* str),52
17545,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17546,"* copy of this software and associated documentation files (the ""Software""),  *",9
17547,"int ALT_READ (int file, void *ptr, size_t len)",58
17548,"int ALT_READ (int file, void *ptr, size_t len)",82
17549,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17550,"* copy of this software and associated documentation files (the ""Software""),  *",9
17551,void alt_release_fd (int fd),44
17552,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17553,"* copy of this software and associated documentation files (the ""Software""),  *",9
17554,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
17555,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17556,"* copy of this software and associated documentation files (the ""Software""),  *",9
17557,"alt_remap_uncached(void* ptr, alt_u32 len)",49
17558,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17559,"* copy of this software and associated documentation files (the ""Software""),  *",9
17560,"int ALT_RENAME (char *existing, char *new)",45
17561,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17562,"* copy of this software and associated documentation files (the ""Software""),  *",9
17563,caddr_t ALT_SBRK (int incr),68
17564,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17565,"* copy of this software and associated documentation files (the ""Software""),  *",9
17566,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
17567,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17568,"* copy of this software and associated documentation files (the ""Software""),  *",9
17569,"int ALT_STAT (const char *file, struct stat *st)",49
17570,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17571,"* copy of this software and associated documentation files (the ""Software""),  *",9
17572,void alt_alarm_stop (alt_alarm* alarm),66
17573,void alt_tick (void),87
17574,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17575,"* copy of this software and associated documentation files (the ""Software""),  *",9
17576,clock_t ALT_TIMES (struct tms *buf),51
17577,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17578,"* copy of this software and associated documentation files (the ""Software""),  *",9
17579,alt_uncached_free(volatile void* ptr),40
17580,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17581,"* copy of this software and associated documentation files (the ""Software""),  *",9
17582,alt_uncached_malloc(size_t size),42
17583,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17584,"* copy of this software and associated documentation files (the ""Software""),  *",9
17585,int ALT_UNLINK (char *name),45
17586,int ALT_USLEEP (useconds_t us),46
17587,unsigned int ALT_USLEEP (unsigned int us),48
17588,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17589,"* copy of this software and associated documentation files (the ""Software""),  *",9
17590,int ALT_WAIT (int *status),44
17591,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17592,"* copy of this software and associated documentation files (the ""Software""),  *",9
17593,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
17594,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
17595,int close (int fd),31
17596,void __attribute__ ((noreturn)) semihost_exit (int code),24
17597,void __attribute__ ((noreturn)) _exit (int code),35
17598,"int fstat (int fd, struct stat *buf)",34
17599,__hosted_to_gdb_mode_t (mode_t m),23
17600,__hosted_to_gdb_open_flags (int f),52
17601,__hosted_to_gdb_lseek_flags (int f),73
17602,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
17603,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
17604,__hosted_from_gdb_errno (int32_t err),111
17605,"int gettimeofday (struct timeval *tv, void *tzvp)",31
17606,void semihost_init_sim (),24
17607,int isatty (int fd),31
17608,"off_t lseek (int fd, off_t offset, int whence)",36
17609,"int open (const char *fname, int flags, ...)",38
17610,"ssize_t read (int fd, void *buf, size_t count)",33
17611,"int _rename (const char *oldpath, const char *newpath)",35
17612,"int stat (const char *filename, struct stat *buf)",37
17613,int _system (const char *command),34
17614,time_t time (time_t *t),31
17615,int unlink (const char *path),33
17616,"ssize_t write (int fd, const void *buf, size_t count)",33
17617,void alt_irq_init ( const void* base ),77
17618,void alt_sys_init( void ),88
17619,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17620,"* copy of this software and associated documentation files (the ""Software""),  *",9
17621,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
17622,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
17623,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
17624,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17625,"* copy of this software and associated documentation files (the ""Software""),  *",9
17626,void alt_vic_irq_init (alt_vic_dev* pdev),45
17627,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17628,"* copy of this software and associated documentation files (the ""Software""),  *",9
17629,"int alt_ic_isr_register(alt_u32 ic_id,",59
17630,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17631,"* copy of this software and associated documentation files (the ""Software""),  *",9
17632,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
17633,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17634,"* copy of this software and associated documentation files (the ""Software""),  *",9
17635,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
17636,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
17637,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
17638,void altera_nios2_gen2_irq_init(void) ,34
17639,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17640,"* copy of this software and associated documentation files (the ""Software""),  *",9
17641,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
17642,unsigned int alt_busy_sleep (unsigned int us),52
17643,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17644,"* copy of this software and associated documentation files (the ""Software""),  *",9
17645,int ALT_CLOSE (int fildes),42
17646,int ALT_CLOSE (int fildes),64
17647,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17648,"* copy of this software and associated documentation files (the ""Software""),  *",9
17649,"void alt_dcache_flush (void* start, alt_u32 len)",46
17650,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17651,"* copy of this software and associated documentation files (the ""Software""),  *",9
17652,void alt_dcache_flush_all (void),41
17653,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
17654,"* copy of this software and associated documentation files (the ""Software""),  *",9
17655,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
17656,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17657,"* copy of this software and associated documentation files (the ""Software""),  *",9
17658,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
17659,ALT_SEM(alt_fd_list_lock),109
17660,int alt_dev_reg (alt_dev* dev),151
17661,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17662,"* copy of this software and associated documentation files (the ""Software""),  *",9
17663,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
17664,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17665,"* copy of this software and associated documentation files (the ""Software""),  *",9
17666,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
17667,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17668,"* copy of this software and associated documentation files (the ""Software""),  *",9
17669,alt_dma_txchan alt_dma_txchan_open (const char* name),51
17670,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17671,"* copy of this software and associated documentation files (the ""Software""),  *",9
17672,void _do_ctors(void),58
17673,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17674,"* copy of this software and associated documentation files (the ""Software""),  *",9
17675,void _do_dtors(void),58
17676,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
17677,"* copy of this software and associated documentation files (the ""Software""),  *",9
17678,alt_ecc_fatal_exception_register(alt_u32 handler),66
17679,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17680,"* copy of this software and associated documentation files (the ""Software""),  *",9
17681,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17682,"* copy of this software and associated documentation files (the ""Software""),  *",9
17683,void __env_lock ( struct _reent *_r ),43
17684,void __env_unlock ( struct _reent *_r ),51
17685,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17686,"* copy of this software and associated documentation files (the ""Software""),  *",9
17687,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17688,"* copy of this software and associated documentation files (the ""Software""),  *",9
17689,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
17690,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17691,"* copy of this software and associated documentation files (the ""Software""),  *",9
17692,void ALT_EXIT (int exit_code),52
17693,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17694,"* copy of this software and associated documentation files (the ""Software""),  *",9
17695,"int ALT_FCNTL (int file, int cmd, ...)",66
17696,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17697,"* copy of this software and associated documentation files (the ""Software""),  *",9
17698,int alt_fd_lock (alt_fd* fd),54
17699,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17700,"* copy of this software and associated documentation files (the ""Software""),  *",9
17701,int alt_fd_unlock (alt_fd* fd),52
17702,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17703,"* copy of this software and associated documentation files (the ""Software""),  *",9
17704,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
17705,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17706,"* copy of this software and associated documentation files (the ""Software""),  *",9
17707,alt_dev* alt_find_file (const char* name),54
17708,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17709,"* copy of this software and associated documentation files (the ""Software""),  *",9
17710,alt_flash_fd* alt_flash_open_dev(const char* name),49
17711,void alt_flash_close_dev(alt_flash_fd* fd),61
17712,int alt_flash_device_register( alt_flash_fd* fd),70
17713,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17714,"* copy of this software and associated documentation files (the ""Software""),  *",9
17715,int ALT_FORK (void),45
17716,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17717,"* copy of this software and associated documentation files (the ""Software""),  *",9
17718,"int ALT_FSTAT (int file, struct stat *st)",63
17719,"int ALT_FSTAT (int file, struct stat *st)",93
17720,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17721,"* copy of this software and associated documentation files (the ""Software""),  *",9
17722,int alt_fs_reg (alt_dev* dev),57
17723,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17724,"* copy of this software and associated documentation files (the ""Software""),  *",9
17725,alt_getchar(void),51
17726,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17727,"* copy of this software and associated documentation files (the ""Software""),  *",9
17728,int ALT_GETPID (void),43
17729,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17730,"* copy of this software and associated documentation files (the ""Software""),  *",9
17731,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
17732,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
17733,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17734,"* copy of this software and associated documentation files (the ""Software""),  *",9
17735,int alt_get_fd (alt_dev* dev),54
17736,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17737,"* copy of this software and associated documentation files (the ""Software""),  *",9
17738,/* The compiler inserts calls to mcount() at the start of,48
17739,static __inline__ void * mcount_allocate(unsigned int size),133
17740,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
17741,static int nios2_pcsample_init(void),218
17742,static alt_u32 nios2_pcsample(void* context),250
17743,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17744,"* copy of this software and associated documentation files (the ""Software""),  *",9
17745,"void alt_icache_flush (void* start, alt_u32 len)",42
17746,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17747,"* copy of this software and associated documentation files (the ""Software""),  *",9
17748,void alt_icache_flush_all (void),41
17749,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17750,"* copy of this software and associated documentation files (the ""Software""),  *",9
17751,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
17752,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
17753,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
17754,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
17755,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17756,"* copy of this software and associated documentation files (the ""Software""),  *",9
17757,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
17758,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
17759,"* copy of this software and associated documentation files (the ""Software""),  *",9
17760,alt_exception_result (*alt_instruction_exception_handler),49
17761,int alt_instruction_exception_entry (alt_u32 exception_pc),53
17762,alt_instruction_exception_entry (alt_u32 exception_pc),68
17763,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
17764,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
17765,"* copy of this software and associated documentation files (the ""Software""),  *",9
17766,void alt_instruction_exception_register (,73
17767,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17768,"* copy of this software and associated documentation files (the ""Software""),  *",9
17769,"int ALT_IOCTL (int file, int req, void* arg)",68
17770,"int ALT_IOCTL (int file, int req, void* arg)",106
17771,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17772,"* copy of this software and associated documentation files (the ""Software""),  *",9
17773,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
17774,"void alt_io_redirect(const char* stdout_dev, ",85
17775,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17776,"* copy of this software and associated documentation files (the ""Software""),  *",9
17777,void alt_irq_handler (void),80
17778,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
17779,"* copy of this software and associated documentation files (the ""Software""),  *",9
17780,"int alt_irq_register (alt_u32 id, ",75
17781,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
17782,"* copy of this software and associated documentation files (the ""Software""),  *",9
17783,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17784,"* copy of this software and associated documentation files (the ""Software""),  *",9
17785,int ALT_ISATTY (int file),50
17786,int ALT_ISATTY (int file),84
17787,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17788,"* copy of this software and associated documentation files (the ""Software""),  *",9
17789,"int ALT_KILL (int pid, int sig)",49
17790,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17791,"* copy of this software and associated documentation files (the ""Software""),  *",9
17792,"int ALT_LINK ( char *existing, char *new)",45
17793,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
17794,"* copy of this software and associated documentation files (the ""Software""),  *",9
17795,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
17796,void alt_load (void),67
17797,"void alt_log_txchar(int c,char *base)",95
17798,"void alt_log_repchar(char c,int r,int base)",106
17799,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
17800,"int alt_log_printf_proc(const char *fmt, ... )",344
17801,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
17802,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
17803,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
17804,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
17805,"void alt_log_write(const void *ptr, size_t len)",440
17806,void alt_log_system_clock(),474
17807,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
17808,"* copy of this software and associated documentation files (the ""Software""),  *",9
17809,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
17810,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
17811,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
17812,"* copy of this software and associated documentation files (the ""Software""),  *",9
17813,void alt_main (void),82
17814,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17815,"* copy of this software and associated documentation files (the ""Software""),  *",9
17816,void __malloc_lock ( struct _reent *_r ),42
17817,void __malloc_unlock ( struct _reent *_r ),50
17818,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17819,"* copy of this software and associated documentation files (the ""Software""),  *",9
17820,"int ALT_OPEN (const char* file, int flags, int mode)",41
17821,static int alt_file_locked (alt_fd* fd),64
17822,"int ALT_OPEN (const char* file, int flags, int mode)",105
17823,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17824,"* copy of this software and associated documentation files (the ""Software""),  *",9
17825,"alt_printf(const char* fmt, ... )",51
17826,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17827,"* copy of this software and associated documentation files (the ""Software""),  *",9
17828,alt_putchar(int c),50
17829,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17830,"* copy of this software and associated documentation files (the ""Software""),  *",9
17831,alt_putcharbuf(int c),58
17832,alt_putbufflush(),73
17833,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
17834,"* copy of this software and associated documentation files (the ""Software""),  *",9
17835,alt_putstr(const char* str),52
17836,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17837,"* copy of this software and associated documentation files (the ""Software""),  *",9
17838,"int ALT_READ (int file, void *ptr, size_t len)",58
17839,"int ALT_READ (int file, void *ptr, size_t len)",82
17840,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17841,"* copy of this software and associated documentation files (the ""Software""),  *",9
17842,void alt_release_fd (int fd),44
17843,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17844,"* copy of this software and associated documentation files (the ""Software""),  *",9
17845,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
17846,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17847,"* copy of this software and associated documentation files (the ""Software""),  *",9
17848,"alt_remap_uncached(void* ptr, alt_u32 len)",49
17849,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17850,"* copy of this software and associated documentation files (the ""Software""),  *",9
17851,"int ALT_RENAME (char *existing, char *new)",45
17852,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17853,"* copy of this software and associated documentation files (the ""Software""),  *",9
17854,caddr_t ALT_SBRK (int incr),68
17855,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17856,"* copy of this software and associated documentation files (the ""Software""),  *",9
17857,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
17858,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17859,"* copy of this software and associated documentation files (the ""Software""),  *",9
17860,"int ALT_STAT (const char *file, struct stat *st)",49
17861,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17862,"* copy of this software and associated documentation files (the ""Software""),  *",9
17863,void alt_alarm_stop (alt_alarm* alarm),66
17864,void alt_tick (void),87
17865,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17866,"* copy of this software and associated documentation files (the ""Software""),  *",9
17867,clock_t ALT_TIMES (struct tms *buf),51
17868,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17869,"* copy of this software and associated documentation files (the ""Software""),  *",9
17870,alt_uncached_free(volatile void* ptr),40
17871,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
17872,"* copy of this software and associated documentation files (the ""Software""),  *",9
17873,alt_uncached_malloc(size_t size),42
17874,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17875,"* copy of this software and associated documentation files (the ""Software""),  *",9
17876,int ALT_UNLINK (char *name),45
17877,int ALT_USLEEP (useconds_t us),46
17878,unsigned int ALT_USLEEP (unsigned int us),48
17879,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17880,"* copy of this software and associated documentation files (the ""Software""),  *",9
17881,int ALT_WAIT (int *status),44
17882,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
17883,"* copy of this software and associated documentation files (the ""Software""),  *",9
17884,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
17885,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
17886,int close (int fd),31
17887,void __attribute__ ((noreturn)) semihost_exit (int code),24
17888,void __attribute__ ((noreturn)) _exit (int code),35
17889,"int fstat (int fd, struct stat *buf)",34
17890,__hosted_to_gdb_mode_t (mode_t m),23
17891,__hosted_to_gdb_open_flags (int f),52
17892,__hosted_to_gdb_lseek_flags (int f),73
17893,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
17894,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
17895,__hosted_from_gdb_errno (int32_t err),111
17896,"int gettimeofday (struct timeval *tv, void *tzvp)",31
17897,void semihost_init_sim (),24
17898,int isatty (int fd),31
17899,"off_t lseek (int fd, off_t offset, int whence)",36
17900,"int open (const char *fname, int flags, ...)",38
17901,"ssize_t read (int fd, void *buf, size_t count)",33
17902,"int _rename (const char *oldpath, const char *newpath)",35
17903,"int stat (const char *filename, struct stat *buf)",37
17904,int _system (const char *command),34
17905,time_t time (time_t *t),31
17906,int unlink (const char *path),33
17907,"ssize_t write (int fd, const void *buf, size_t count)",33
17908,void alt_irq_init ( const void* base ),77
17909,void alt_sys_init( void ),88
17910,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17911,"* copy of this software and associated documentation files (the ""Software""),  *",9
17912,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
17913,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
17914,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
17915,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17916,"* copy of this software and associated documentation files (the ""Software""),  *",9
17917,void alt_vic_irq_init (alt_vic_dev* pdev),45
17918,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17919,"* copy of this software and associated documentation files (the ""Software""),  *",9
17920,"int alt_ic_isr_register(alt_u32 ic_id,",59
17921,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17922,"* copy of this software and associated documentation files (the ""Software""),  *",9
17923,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
17924,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
17925,"* copy of this software and associated documentation files (the ""Software""),  *",9
17926,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
17927,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
17928,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
17929,void altera_nios2_gen2_irq_init(void) ,34
17930,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
17931,"* copy of this software and associated documentation files (the ""Software""),  *",9
17932,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
17933,unsigned int alt_busy_sleep (unsigned int us),52
17934,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17935,"* copy of this software and associated documentation files (the ""Software""),  *",9
17936,int ALT_CLOSE (int fildes),42
17937,int ALT_CLOSE (int fildes),64
17938,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17939,"* copy of this software and associated documentation files (the ""Software""),  *",9
17940,"void alt_dcache_flush (void* start, alt_u32 len)",46
17941,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
17942,"* copy of this software and associated documentation files (the ""Software""),  *",9
17943,void alt_dcache_flush_all (void),41
17944,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
17945,"* copy of this software and associated documentation files (the ""Software""),  *",9
17946,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
17947,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17948,"* copy of this software and associated documentation files (the ""Software""),  *",9
17949,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
17950,ALT_SEM(alt_fd_list_lock),109
17951,int alt_dev_reg (alt_dev* dev),151
17952,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17953,"* copy of this software and associated documentation files (the ""Software""),  *",9
17954,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
17955,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17956,"* copy of this software and associated documentation files (the ""Software""),  *",9
17957,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
17958,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17959,"* copy of this software and associated documentation files (the ""Software""),  *",9
17960,alt_dma_txchan alt_dma_txchan_open (const char* name),51
17961,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17962,"* copy of this software and associated documentation files (the ""Software""),  *",9
17963,void _do_ctors(void),58
17964,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17965,"* copy of this software and associated documentation files (the ""Software""),  *",9
17966,void _do_dtors(void),58
17967,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
17968,"* copy of this software and associated documentation files (the ""Software""),  *",9
17969,alt_ecc_fatal_exception_register(alt_u32 handler),66
17970,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17971,"* copy of this software and associated documentation files (the ""Software""),  *",9
17972,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17973,"* copy of this software and associated documentation files (the ""Software""),  *",9
17974,void __env_lock ( struct _reent *_r ),43
17975,void __env_unlock ( struct _reent *_r ),51
17976,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17977,"* copy of this software and associated documentation files (the ""Software""),  *",9
17978,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17979,"* copy of this software and associated documentation files (the ""Software""),  *",9
17980,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
17981,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17982,"* copy of this software and associated documentation files (the ""Software""),  *",9
17983,void ALT_EXIT (int exit_code),52
17984,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17985,"* copy of this software and associated documentation files (the ""Software""),  *",9
17986,"int ALT_FCNTL (int file, int cmd, ...)",66
17987,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17988,"* copy of this software and associated documentation files (the ""Software""),  *",9
17989,int alt_fd_lock (alt_fd* fd),54
17990,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17991,"* copy of this software and associated documentation files (the ""Software""),  *",9
17992,int alt_fd_unlock (alt_fd* fd),52
17993,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17994,"* copy of this software and associated documentation files (the ""Software""),  *",9
17995,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
17996,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
17997,"* copy of this software and associated documentation files (the ""Software""),  *",9
17998,alt_dev* alt_find_file (const char* name),54
17999,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18000,"* copy of this software and associated documentation files (the ""Software""),  *",9
18001,alt_flash_fd* alt_flash_open_dev(const char* name),49
18002,void alt_flash_close_dev(alt_flash_fd* fd),61
18003,int alt_flash_device_register( alt_flash_fd* fd),70
18004,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18005,"* copy of this software and associated documentation files (the ""Software""),  *",9
18006,int ALT_FORK (void),45
18007,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
18008,"* copy of this software and associated documentation files (the ""Software""),  *",9
18009,"int ALT_FSTAT (int file, struct stat *st)",63
18010,"int ALT_FSTAT (int file, struct stat *st)",93
18011,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18012,"* copy of this software and associated documentation files (the ""Software""),  *",9
18013,int alt_fs_reg (alt_dev* dev),57
18014,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18015,"* copy of this software and associated documentation files (the ""Software""),  *",9
18016,alt_getchar(void),51
18017,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18018,"* copy of this software and associated documentation files (the ""Software""),  *",9
18019,int ALT_GETPID (void),43
18020,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18021,"* copy of this software and associated documentation files (the ""Software""),  *",9
18022,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
18023,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
18024,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18025,"* copy of this software and associated documentation files (the ""Software""),  *",9
18026,int alt_get_fd (alt_dev* dev),54
18027,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18028,"* copy of this software and associated documentation files (the ""Software""),  *",9
18029,/* The compiler inserts calls to mcount() at the start of,48
18030,static __inline__ void * mcount_allocate(unsigned int size),133
18031,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
18032,static int nios2_pcsample_init(void),218
18033,static alt_u32 nios2_pcsample(void* context),250
18034,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18035,"* copy of this software and associated documentation files (the ""Software""),  *",9
18036,"void alt_icache_flush (void* start, alt_u32 len)",42
18037,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18038,"* copy of this software and associated documentation files (the ""Software""),  *",9
18039,void alt_icache_flush_all (void),41
18040,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18041,"* copy of this software and associated documentation files (the ""Software""),  *",9
18042,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
18043,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
18044,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
18045,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
18046,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18047,"* copy of this software and associated documentation files (the ""Software""),  *",9
18048,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
18049,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
18050,"* copy of this software and associated documentation files (the ""Software""),  *",9
18051,alt_exception_result (*alt_instruction_exception_handler),49
18052,int alt_instruction_exception_entry (alt_u32 exception_pc),53
18053,alt_instruction_exception_entry (alt_u32 exception_pc),68
18054,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
18055,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
18056,"* copy of this software and associated documentation files (the ""Software""),  *",9
18057,void alt_instruction_exception_register (,73
18058,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
18059,"* copy of this software and associated documentation files (the ""Software""),  *",9
18060,"int ALT_IOCTL (int file, int req, void* arg)",68
18061,"int ALT_IOCTL (int file, int req, void* arg)",106
18062,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18063,"* copy of this software and associated documentation files (the ""Software""),  *",9
18064,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
18065,"void alt_io_redirect(const char* stdout_dev, ",85
18066,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18067,"* copy of this software and associated documentation files (the ""Software""),  *",9
18068,void alt_irq_handler (void),80
18069,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18070,"* copy of this software and associated documentation files (the ""Software""),  *",9
18071,"int alt_irq_register (alt_u32 id, ",75
18072,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18073,"* copy of this software and associated documentation files (the ""Software""),  *",9
18074,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
18075,"* copy of this software and associated documentation files (the ""Software""),  *",9
18076,int ALT_ISATTY (int file),50
18077,int ALT_ISATTY (int file),84
18078,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18079,"* copy of this software and associated documentation files (the ""Software""),  *",9
18080,"int ALT_KILL (int pid, int sig)",49
18081,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18082,"* copy of this software and associated documentation files (the ""Software""),  *",9
18083,"int ALT_LINK ( char *existing, char *new)",45
18084,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
18085,"* copy of this software and associated documentation files (the ""Software""),  *",9
18086,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
18087,void alt_load (void),67
18088,"void alt_log_txchar(int c,char *base)",95
18089,"void alt_log_repchar(char c,int r,int base)",106
18090,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
18091,"int alt_log_printf_proc(const char *fmt, ... )",344
18092,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
18093,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
18094,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
18095,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
18096,"void alt_log_write(const void *ptr, size_t len)",440
18097,void alt_log_system_clock(),474
18098,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
18099,"* copy of this software and associated documentation files (the ""Software""),  *",9
18100,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
18101,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
18102,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
18103,"* copy of this software and associated documentation files (the ""Software""),  *",9
18104,void alt_main (void),82
18105,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18106,"* copy of this software and associated documentation files (the ""Software""),  *",9
18107,void __malloc_lock ( struct _reent *_r ),42
18108,void __malloc_unlock ( struct _reent *_r ),50
18109,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18110,"* copy of this software and associated documentation files (the ""Software""),  *",9
18111,"int ALT_OPEN (const char* file, int flags, int mode)",41
18112,static int alt_file_locked (alt_fd* fd),64
18113,"int ALT_OPEN (const char* file, int flags, int mode)",105
18114,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18115,"* copy of this software and associated documentation files (the ""Software""),  *",9
18116,"alt_printf(const char* fmt, ... )",51
18117,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18118,"* copy of this software and associated documentation files (the ""Software""),  *",9
18119,alt_putchar(int c),50
18120,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18121,"* copy of this software and associated documentation files (the ""Software""),  *",9
18122,alt_putcharbuf(int c),58
18123,alt_putbufflush(),73
18124,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18125,"* copy of this software and associated documentation files (the ""Software""),  *",9
18126,alt_putstr(const char* str),52
18127,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
18128,"* copy of this software and associated documentation files (the ""Software""),  *",9
18129,"int ALT_READ (int file, void *ptr, size_t len)",58
18130,"int ALT_READ (int file, void *ptr, size_t len)",82
18131,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18132,"* copy of this software and associated documentation files (the ""Software""),  *",9
18133,void alt_release_fd (int fd),44
18134,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18135,"* copy of this software and associated documentation files (the ""Software""),  *",9
18136,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
18137,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18138,"* copy of this software and associated documentation files (the ""Software""),  *",9
18139,"alt_remap_uncached(void* ptr, alt_u32 len)",49
18140,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18141,"* copy of this software and associated documentation files (the ""Software""),  *",9
18142,"int ALT_RENAME (char *existing, char *new)",45
18143,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18144,"* copy of this software and associated documentation files (the ""Software""),  *",9
18145,caddr_t ALT_SBRK (int incr),68
18146,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18147,"* copy of this software and associated documentation files (the ""Software""),  *",9
18148,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
18149,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18150,"* copy of this software and associated documentation files (the ""Software""),  *",9
18151,"int ALT_STAT (const char *file, struct stat *st)",49
18152,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18153,"* copy of this software and associated documentation files (the ""Software""),  *",9
18154,void alt_alarm_stop (alt_alarm* alarm),66
18155,void alt_tick (void),87
18156,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18157,"* copy of this software and associated documentation files (the ""Software""),  *",9
18158,clock_t ALT_TIMES (struct tms *buf),51
18159,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18160,"* copy of this software and associated documentation files (the ""Software""),  *",9
18161,alt_uncached_free(volatile void* ptr),40
18162,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18163,"* copy of this software and associated documentation files (the ""Software""),  *",9
18164,alt_uncached_malloc(size_t size),42
18165,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18166,"* copy of this software and associated documentation files (the ""Software""),  *",9
18167,int ALT_UNLINK (char *name),45
18168,int ALT_USLEEP (useconds_t us),46
18169,unsigned int ALT_USLEEP (unsigned int us),48
18170,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18171,"* copy of this software and associated documentation files (the ""Software""),  *",9
18172,int ALT_WAIT (int *status),44
18173,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
18174,"* copy of this software and associated documentation files (the ""Software""),  *",9
18175,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
18176,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
18177,int close (int fd),31
18178,void __attribute__ ((noreturn)) semihost_exit (int code),24
18179,void __attribute__ ((noreturn)) _exit (int code),35
18180,"int fstat (int fd, struct stat *buf)",34
18181,__hosted_to_gdb_mode_t (mode_t m),23
18182,__hosted_to_gdb_open_flags (int f),52
18183,__hosted_to_gdb_lseek_flags (int f),73
18184,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
18185,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
18186,__hosted_from_gdb_errno (int32_t err),111
18187,"int gettimeofday (struct timeval *tv, void *tzvp)",31
18188,void semihost_init_sim (),24
18189,int isatty (int fd),31
18190,"off_t lseek (int fd, off_t offset, int whence)",36
18191,"int open (const char *fname, int flags, ...)",38
18192,"ssize_t read (int fd, void *buf, size_t count)",33
18193,"int _rename (const char *oldpath, const char *newpath)",35
18194,"int stat (const char *filename, struct stat *buf)",37
18195,int _system (const char *command),34
18196,time_t time (time_t *t),31
18197,int unlink (const char *path),33
18198,"ssize_t write (int fd, const void *buf, size_t count)",33
18199,void alt_irq_init ( const void* base ),77
18200,void alt_sys_init( void ),88
18201,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18202,"* copy of this software and associated documentation files (the ""Software""),  *",9
18203,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
18204,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
18205,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
18206,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18207,"* copy of this software and associated documentation files (the ""Software""),  *",9
18208,void alt_vic_irq_init (alt_vic_dev* pdev),45
18209,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18210,"* copy of this software and associated documentation files (the ""Software""),  *",9
18211,"int alt_ic_isr_register(alt_u32 ic_id,",59
18212,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18213,"* copy of this software and associated documentation files (the ""Software""),  *",9
18214,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
18215,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18216,"* copy of this software and associated documentation files (the ""Software""),  *",9
18217,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
18218,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
18219,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
18220,void altera_nios2_gen2_irq_init(void) ,34
18221,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18222,"* copy of this software and associated documentation files (the ""Software""),  *",9
18223,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
18224,unsigned int alt_busy_sleep (unsigned int us),52
18225,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18226,"* copy of this software and associated documentation files (the ""Software""),  *",9
18227,"void alt_dcache_flush (void* start, alt_u32 len)",46
18228,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18229,"* copy of this software and associated documentation files (the ""Software""),  *",9
18230,void alt_dcache_flush_all (void),41
18231,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
18232,"* copy of this software and associated documentation files (the ""Software""),  *",9
18233,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
18234,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18235,"* copy of this software and associated documentation files (the ""Software""),  *",9
18236,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
18237,ALT_SEM(alt_fd_list_lock),109
18238,int alt_dev_reg (alt_dev* dev),151
18239,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18240,"* copy of this software and associated documentation files (the ""Software""),  *",9
18241,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
18242,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18243,"* copy of this software and associated documentation files (the ""Software""),  *",9
18244,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
18245,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18246,"* copy of this software and associated documentation files (the ""Software""),  *",9
18247,alt_dma_txchan alt_dma_txchan_open (const char* name),51
18248,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18249,"* copy of this software and associated documentation files (the ""Software""),  *",9
18250,void _do_ctors(void),58
18251,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18252,"* copy of this software and associated documentation files (the ""Software""),  *",9
18253,void _do_dtors(void),58
18254,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
18255,"* copy of this software and associated documentation files (the ""Software""),  *",9
18256,alt_ecc_fatal_exception_register(alt_u32 handler),66
18257,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18258,"* copy of this software and associated documentation files (the ""Software""),  *",9
18259,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18260,"* copy of this software and associated documentation files (the ""Software""),  *",9
18261,void __env_lock ( struct _reent *_r ),43
18262,void __env_unlock ( struct _reent *_r ),51
18263,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18264,"* copy of this software and associated documentation files (the ""Software""),  *",9
18265,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18266,"* copy of this software and associated documentation files (the ""Software""),  *",9
18267,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
18268,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18269,"* copy of this software and associated documentation files (the ""Software""),  *",9
18270,void ALT_EXIT (int exit_code),52
18271,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18272,"* copy of this software and associated documentation files (the ""Software""),  *",9
18273,"int ALT_FCNTL (int file, int cmd, ...)",66
18274,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18275,"* copy of this software and associated documentation files (the ""Software""),  *",9
18276,int alt_fd_lock (alt_fd* fd),54
18277,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18278,"* copy of this software and associated documentation files (the ""Software""),  *",9
18279,int alt_fd_unlock (alt_fd* fd),52
18280,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18281,"* copy of this software and associated documentation files (the ""Software""),  *",9
18282,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
18283,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18284,"* copy of this software and associated documentation files (the ""Software""),  *",9
18285,alt_dev* alt_find_file (const char* name),54
18286,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18287,"* copy of this software and associated documentation files (the ""Software""),  *",9
18288,alt_flash_fd* alt_flash_open_dev(const char* name),49
18289,void alt_flash_close_dev(alt_flash_fd* fd),61
18290,int alt_flash_device_register( alt_flash_fd* fd),70
18291,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18292,"* copy of this software and associated documentation files (the ""Software""),  *",9
18293,int ALT_FORK (void),45
18294,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18295,"* copy of this software and associated documentation files (the ""Software""),  *",9
18296,int alt_fs_reg (alt_dev* dev),57
18297,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18298,"* copy of this software and associated documentation files (the ""Software""),  *",9
18299,alt_getchar(void),51
18300,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18301,"* copy of this software and associated documentation files (the ""Software""),  *",9
18302,int ALT_GETPID (void),43
18303,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18304,"* copy of this software and associated documentation files (the ""Software""),  *",9
18305,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
18306,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
18307,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18308,"* copy of this software and associated documentation files (the ""Software""),  *",9
18309,int alt_get_fd (alt_dev* dev),54
18310,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18311,"* copy of this software and associated documentation files (the ""Software""),  *",9
18312,/* The compiler inserts calls to mcount() at the start of,48
18313,static __inline__ void * mcount_allocate(unsigned int size),133
18314,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
18315,static int nios2_pcsample_init(void),218
18316,static alt_u32 nios2_pcsample(void* context),250
18317,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18318,"* copy of this software and associated documentation files (the ""Software""),  *",9
18319,"void alt_icache_flush (void* start, alt_u32 len)",42
18320,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18321,"* copy of this software and associated documentation files (the ""Software""),  *",9
18322,void alt_icache_flush_all (void),41
18323,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18324,"* copy of this software and associated documentation files (the ""Software""),  *",9
18325,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
18326,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
18327,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
18328,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
18329,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18330,"* copy of this software and associated documentation files (the ""Software""),  *",9
18331,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
18332,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
18333,"* copy of this software and associated documentation files (the ""Software""),  *",9
18334,alt_exception_result (*alt_instruction_exception_handler),49
18335,int alt_instruction_exception_entry (alt_u32 exception_pc),53
18336,alt_instruction_exception_entry (alt_u32 exception_pc),68
18337,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
18338,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
18339,"* copy of this software and associated documentation files (the ""Software""),  *",9
18340,void alt_instruction_exception_register (,73
18341,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
18342,"* copy of this software and associated documentation files (the ""Software""),  *",9
18343,"int ALT_IOCTL (int file, int req, void* arg)",68
18344,"int ALT_IOCTL (int file, int req, void* arg)",106
18345,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18346,"* copy of this software and associated documentation files (the ""Software""),  *",9
18347,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
18348,"void alt_io_redirect(const char* stdout_dev, ",85
18349,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18350,"* copy of this software and associated documentation files (the ""Software""),  *",9
18351,void alt_irq_handler (void),80
18352,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18353,"* copy of this software and associated documentation files (the ""Software""),  *",9
18354,"int alt_irq_register (alt_u32 id, ",75
18355,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18356,"* copy of this software and associated documentation files (the ""Software""),  *",9
18357,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18358,"* copy of this software and associated documentation files (the ""Software""),  *",9
18359,"int ALT_KILL (int pid, int sig)",49
18360,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18361,"* copy of this software and associated documentation files (the ""Software""),  *",9
18362,"int ALT_LINK ( char *existing, char *new)",45
18363,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
18364,"* copy of this software and associated documentation files (the ""Software""),  *",9
18365,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
18366,void alt_load (void),67
18367,"void alt_log_txchar(int c,char *base)",95
18368,"void alt_log_repchar(char c,int r,int base)",106
18369,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
18370,"int alt_log_printf_proc(const char *fmt, ... )",344
18371,alt_u32 altera_avalon_jtag_uart_report_log(void * context),364
18372,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",380
18373,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",415
18374,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",425
18375,"void alt_log_write(const void *ptr, size_t len)",441
18376,void alt_log_system_clock(),475
18377,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
18378,"* copy of this software and associated documentation files (the ""Software""),  *",9
18379,void alt_main (void),82
18380,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18381,"* copy of this software and associated documentation files (the ""Software""),  *",9
18382,void __malloc_lock ( struct _reent *_r ),42
18383,void __malloc_unlock ( struct _reent *_r ),50
18384,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18385,"* copy of this software and associated documentation files (the ""Software""),  *",9
18386,"alt_printf(const char* fmt, ... )",51
18387,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18388,"* copy of this software and associated documentation files (the ""Software""),  *",9
18389,alt_putchar(int c),50
18390,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18391,"* copy of this software and associated documentation files (the ""Software""),  *",9
18392,alt_putcharbuf(int c),58
18393,alt_putbufflush(),73
18394,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18395,"* copy of this software and associated documentation files (the ""Software""),  *",9
18396,alt_putstr(const char* str),52
18397,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18398,"* copy of this software and associated documentation files (the ""Software""),  *",9
18399,void alt_release_fd (int fd),44
18400,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18401,"* copy of this software and associated documentation files (the ""Software""),  *",9
18402,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
18403,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18404,"* copy of this software and associated documentation files (the ""Software""),  *",9
18405,"alt_remap_uncached(void* ptr, alt_u32 len)",49
18406,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18407,"* copy of this software and associated documentation files (the ""Software""),  *",9
18408,caddr_t ALT_SBRK (int incr),68
18409,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18410,"* copy of this software and associated documentation files (the ""Software""),  *",9
18411,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
18412,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18413,"* copy of this software and associated documentation files (the ""Software""),  *",9
18414,void alt_alarm_stop (alt_alarm* alarm),66
18415,void alt_tick (void),87
18416,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18417,"* copy of this software and associated documentation files (the ""Software""),  *",9
18418,clock_t ALT_TIMES (struct tms *buf),51
18419,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18420,"* copy of this software and associated documentation files (the ""Software""),  *",9
18421,alt_uncached_free(volatile void* ptr),40
18422,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18423,"* copy of this software and associated documentation files (the ""Software""),  *",9
18424,alt_uncached_malloc(size_t size),42
18425,int ALT_USLEEP (useconds_t us),46
18426,unsigned int ALT_USLEEP (unsigned int us),48
18427,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18428,"* copy of this software and associated documentation files (the ""Software""),  *",9
18429,int ALT_WAIT (int *status),44
18430,int close (int fd),31
18431,void __attribute__ ((noreturn)) semihost_exit (int code),24
18432,void __attribute__ ((noreturn)) _exit (int code),35
18433,"int fstat (int fd, struct stat *buf)",34
18434,__hosted_to_gdb_mode_t (mode_t m),23
18435,__hosted_to_gdb_open_flags (int f),52
18436,__hosted_to_gdb_lseek_flags (int f),73
18437,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
18438,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
18439,__hosted_from_gdb_errno (int32_t err),111
18440,"int gettimeofday (struct timeval *tv, void *tzvp)",31
18441,void semihost_init_sim (),24
18442,int isatty (int fd),31
18443,"off_t lseek (int fd, off_t offset, int whence)",36
18444,"int open (const char *fname, int flags, ...)",38
18445,"ssize_t read (int fd, void *buf, size_t count)",33
18446,"int _rename (const char *oldpath, const char *newpath)",35
18447,"int stat (const char *filename, struct stat *buf)",37
18448,int _system (const char *command),34
18449,time_t time (time_t *t),31
18450,int unlink (const char *path),33
18451,"ssize_t write (int fd, const void *buf, size_t count)",33
18452,void alt_irq_init ( const void* base ),77
18453,void alt_sys_init( void ),88
18454,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18455,"* copy of this software and associated documentation files (the ""Software""),  *",9
18456,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
18457,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
18458,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
18459,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18460,"* copy of this software and associated documentation files (the ""Software""),  *",9
18461,void alt_vic_irq_init (alt_vic_dev* pdev),45
18462,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18463,"* copy of this software and associated documentation files (the ""Software""),  *",9
18464,"int alt_ic_isr_register(alt_u32 ic_id,",59
18465,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18466,"* copy of this software and associated documentation files (the ""Software""),  *",9
18467,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
18468,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18469,"* copy of this software and associated documentation files (the ""Software""),  *",9
18470,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
18471,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
18472,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
18473,void altera_nios2_gen2_irq_init(void) ,34
18474,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18475,"* copy of this software and associated documentation files (the ""Software""),  *",9
18476,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
18477,unsigned int alt_busy_sleep (unsigned int us),52
18478,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18479,"* copy of this software and associated documentation files (the ""Software""),  *",9
18480,"void alt_dcache_flush (void* start, alt_u32 len)",46
18481,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18482,"* copy of this software and associated documentation files (the ""Software""),  *",9
18483,void alt_dcache_flush_all (void),41
18484,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
18485,"* copy of this software and associated documentation files (the ""Software""),  *",9
18486,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
18487,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18488,"* copy of this software and associated documentation files (the ""Software""),  *",9
18489,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
18490,ALT_SEM(alt_fd_list_lock),109
18491,int alt_dev_reg (alt_dev* dev),151
18492,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18493,"* copy of this software and associated documentation files (the ""Software""),  *",9
18494,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
18495,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18496,"* copy of this software and associated documentation files (the ""Software""),  *",9
18497,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
18498,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18499,"* copy of this software and associated documentation files (the ""Software""),  *",9
18500,alt_dma_txchan alt_dma_txchan_open (const char* name),51
18501,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18502,"* copy of this software and associated documentation files (the ""Software""),  *",9
18503,void _do_ctors(void),58
18504,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18505,"* copy of this software and associated documentation files (the ""Software""),  *",9
18506,void _do_dtors(void),58
18507,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
18508,"* copy of this software and associated documentation files (the ""Software""),  *",9
18509,alt_ecc_fatal_exception_register(alt_u32 handler),66
18510,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18511,"* copy of this software and associated documentation files (the ""Software""),  *",9
18512,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18513,"* copy of this software and associated documentation files (the ""Software""),  *",9
18514,void __env_lock ( struct _reent *_r ),43
18515,void __env_unlock ( struct _reent *_r ),51
18516,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18517,"* copy of this software and associated documentation files (the ""Software""),  *",9
18518,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18519,"* copy of this software and associated documentation files (the ""Software""),  *",9
18520,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
18521,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18522,"* copy of this software and associated documentation files (the ""Software""),  *",9
18523,void ALT_EXIT (int exit_code),52
18524,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18525,"* copy of this software and associated documentation files (the ""Software""),  *",9
18526,"int ALT_FCNTL (int file, int cmd, ...)",66
18527,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18528,"* copy of this software and associated documentation files (the ""Software""),  *",9
18529,int alt_fd_lock (alt_fd* fd),54
18530,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18531,"* copy of this software and associated documentation files (the ""Software""),  *",9
18532,int alt_fd_unlock (alt_fd* fd),52
18533,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18534,"* copy of this software and associated documentation files (the ""Software""),  *",9
18535,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
18536,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18537,"* copy of this software and associated documentation files (the ""Software""),  *",9
18538,alt_dev* alt_find_file (const char* name),54
18539,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18540,"* copy of this software and associated documentation files (the ""Software""),  *",9
18541,alt_flash_fd* alt_flash_open_dev(const char* name),49
18542,void alt_flash_close_dev(alt_flash_fd* fd),61
18543,int alt_flash_device_register( alt_flash_fd* fd),70
18544,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18545,"* copy of this software and associated documentation files (the ""Software""),  *",9
18546,int ALT_FORK (void),45
18547,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18548,"* copy of this software and associated documentation files (the ""Software""),  *",9
18549,int alt_fs_reg (alt_dev* dev),57
18550,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18551,"* copy of this software and associated documentation files (the ""Software""),  *",9
18552,alt_getchar(void),51
18553,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18554,"* copy of this software and associated documentation files (the ""Software""),  *",9
18555,int ALT_GETPID (void),43
18556,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18557,"* copy of this software and associated documentation files (the ""Software""),  *",9
18558,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
18559,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
18560,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18561,"* copy of this software and associated documentation files (the ""Software""),  *",9
18562,int alt_get_fd (alt_dev* dev),54
18563,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18564,"* copy of this software and associated documentation files (the ""Software""),  *",9
18565,/* The compiler inserts calls to mcount() at the start of,48
18566,static __inline__ void * mcount_allocate(unsigned int size),133
18567,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
18568,static int nios2_pcsample_init(void),218
18569,static alt_u32 nios2_pcsample(void* context),250
18570,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18571,"* copy of this software and associated documentation files (the ""Software""),  *",9
18572,"void alt_icache_flush (void* start, alt_u32 len)",42
18573,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18574,"* copy of this software and associated documentation files (the ""Software""),  *",9
18575,void alt_icache_flush_all (void),41
18576,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18577,"* copy of this software and associated documentation files (the ""Software""),  *",9
18578,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
18579,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
18580,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
18581,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
18582,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18583,"* copy of this software and associated documentation files (the ""Software""),  *",9
18584,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
18585,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
18586,"* copy of this software and associated documentation files (the ""Software""),  *",9
18587,alt_exception_result (*alt_instruction_exception_handler),49
18588,int alt_instruction_exception_entry (alt_u32 exception_pc),53
18589,alt_instruction_exception_entry (alt_u32 exception_pc),68
18590,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
18591,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
18592,"* copy of this software and associated documentation files (the ""Software""),  *",9
18593,void alt_instruction_exception_register (,73
18594,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
18595,"* copy of this software and associated documentation files (the ""Software""),  *",9
18596,"int ALT_IOCTL (int file, int req, void* arg)",68
18597,"int ALT_IOCTL (int file, int req, void* arg)",106
18598,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18599,"* copy of this software and associated documentation files (the ""Software""),  *",9
18600,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
18601,"void alt_io_redirect(const char* stdout_dev, ",85
18602,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18603,"* copy of this software and associated documentation files (the ""Software""),  *",9
18604,void alt_irq_handler (void),80
18605,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18606,"* copy of this software and associated documentation files (the ""Software""),  *",9
18607,"int alt_irq_register (alt_u32 id, ",75
18608,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18609,"* copy of this software and associated documentation files (the ""Software""),  *",9
18610,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18611,"* copy of this software and associated documentation files (the ""Software""),  *",9
18612,"int ALT_KILL (int pid, int sig)",49
18613,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18614,"* copy of this software and associated documentation files (the ""Software""),  *",9
18615,"int ALT_LINK ( char *existing, char *new)",45
18616,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
18617,"* copy of this software and associated documentation files (the ""Software""),  *",9
18618,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
18619,void alt_load (void),67
18620,"void alt_log_txchar(int c,char *base)",95
18621,"void alt_log_repchar(char c,int r,int base)",106
18622,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
18623,"int alt_log_printf_proc(const char *fmt, ... )",344
18624,alt_u32 altera_avalon_jtag_uart_report_log(void * context),364
18625,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",380
18626,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",415
18627,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",425
18628,"void alt_log_write(const void *ptr, size_t len)",441
18629,void alt_log_system_clock(),475
18630,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
18631,"* copy of this software and associated documentation files (the ""Software""),  *",9
18632,void alt_main (void),82
18633,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18634,"* copy of this software and associated documentation files (the ""Software""),  *",9
18635,void __malloc_lock ( struct _reent *_r ),42
18636,void __malloc_unlock ( struct _reent *_r ),50
18637,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18638,"* copy of this software and associated documentation files (the ""Software""),  *",9
18639,"alt_printf(const char* fmt, ... )",51
18640,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18641,"* copy of this software and associated documentation files (the ""Software""),  *",9
18642,alt_putchar(int c),50
18643,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18644,"* copy of this software and associated documentation files (the ""Software""),  *",9
18645,alt_putcharbuf(int c),58
18646,alt_putbufflush(),73
18647,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18648,"* copy of this software and associated documentation files (the ""Software""),  *",9
18649,alt_putstr(const char* str),52
18650,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18651,"* copy of this software and associated documentation files (the ""Software""),  *",9
18652,void alt_release_fd (int fd),44
18653,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18654,"* copy of this software and associated documentation files (the ""Software""),  *",9
18655,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
18656,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18657,"* copy of this software and associated documentation files (the ""Software""),  *",9
18658,"alt_remap_uncached(void* ptr, alt_u32 len)",49
18659,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18660,"* copy of this software and associated documentation files (the ""Software""),  *",9
18661,caddr_t ALT_SBRK (int incr),68
18662,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18663,"* copy of this software and associated documentation files (the ""Software""),  *",9
18664,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
18665,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18666,"* copy of this software and associated documentation files (the ""Software""),  *",9
18667,void alt_alarm_stop (alt_alarm* alarm),66
18668,void alt_tick (void),87
18669,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18670,"* copy of this software and associated documentation files (the ""Software""),  *",9
18671,clock_t ALT_TIMES (struct tms *buf),51
18672,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18673,"* copy of this software and associated documentation files (the ""Software""),  *",9
18674,alt_uncached_free(volatile void* ptr),40
18675,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18676,"* copy of this software and associated documentation files (the ""Software""),  *",9
18677,alt_uncached_malloc(size_t size),42
18678,int ALT_USLEEP (useconds_t us),46
18679,unsigned int ALT_USLEEP (unsigned int us),48
18680,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18681,"* copy of this software and associated documentation files (the ""Software""),  *",9
18682,int ALT_WAIT (int *status),44
18683,int close (int fd),31
18684,void __attribute__ ((noreturn)) semihost_exit (int code),24
18685,void __attribute__ ((noreturn)) _exit (int code),35
18686,"int fstat (int fd, struct stat *buf)",34
18687,__hosted_to_gdb_mode_t (mode_t m),23
18688,__hosted_to_gdb_open_flags (int f),52
18689,__hosted_to_gdb_lseek_flags (int f),73
18690,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
18691,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
18692,__hosted_from_gdb_errno (int32_t err),111
18693,"int gettimeofday (struct timeval *tv, void *tzvp)",31
18694,void semihost_init_sim (),24
18695,int isatty (int fd),31
18696,"off_t lseek (int fd, off_t offset, int whence)",36
18697,"int open (const char *fname, int flags, ...)",38
18698,"ssize_t read (int fd, void *buf, size_t count)",33
18699,"int _rename (const char *oldpath, const char *newpath)",35
18700,"int stat (const char *filename, struct stat *buf)",37
18701,int _system (const char *command),34
18702,time_t time (time_t *t),31
18703,int unlink (const char *path),33
18704,"ssize_t write (int fd, const void *buf, size_t count)",33
18705,void alt_irq_init ( const void* base ),77
18706,void alt_sys_init( void ),88
18707,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18708,"* copy of this software and associated documentation files (the ""Software""),  *",9
18709,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
18710,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
18711,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
18712,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18713,"* copy of this software and associated documentation files (the ""Software""),  *",9
18714,void alt_vic_irq_init (alt_vic_dev* pdev),45
18715,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18716,"* copy of this software and associated documentation files (the ""Software""),  *",9
18717,"int alt_ic_isr_register(alt_u32 ic_id,",59
18718,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18719,"* copy of this software and associated documentation files (the ""Software""),  *",9
18720,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
18721,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18722,"* copy of this software and associated documentation files (the ""Software""),  *",9
18723,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
18724,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
18725,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
18726,void altera_nios2_gen2_irq_init(void) ,34
18727,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18728,"* copy of this software and associated documentation files (the ""Software""),  *",9
18729,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
18730,unsigned int alt_busy_sleep (unsigned int us),52
18731,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18732,"* copy of this software and associated documentation files (the ""Software""),  *",9
18733,"void alt_dcache_flush (void* start, alt_u32 len)",46
18734,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18735,"* copy of this software and associated documentation files (the ""Software""),  *",9
18736,void alt_dcache_flush_all (void),41
18737,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
18738,"* copy of this software and associated documentation files (the ""Software""),  *",9
18739,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
18740,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18741,"* copy of this software and associated documentation files (the ""Software""),  *",9
18742,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
18743,ALT_SEM(alt_fd_list_lock),109
18744,int alt_dev_reg (alt_dev* dev),151
18745,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18746,"* copy of this software and associated documentation files (the ""Software""),  *",9
18747,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
18748,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18749,"* copy of this software and associated documentation files (the ""Software""),  *",9
18750,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
18751,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18752,"* copy of this software and associated documentation files (the ""Software""),  *",9
18753,alt_dma_txchan alt_dma_txchan_open (const char* name),51
18754,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18755,"* copy of this software and associated documentation files (the ""Software""),  *",9
18756,void _do_ctors(void),58
18757,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18758,"* copy of this software and associated documentation files (the ""Software""),  *",9
18759,void _do_dtors(void),58
18760,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
18761,"* copy of this software and associated documentation files (the ""Software""),  *",9
18762,alt_ecc_fatal_exception_register(alt_u32 handler),66
18763,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18764,"* copy of this software and associated documentation files (the ""Software""),  *",9
18765,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18766,"* copy of this software and associated documentation files (the ""Software""),  *",9
18767,void __env_lock ( struct _reent *_r ),43
18768,void __env_unlock ( struct _reent *_r ),51
18769,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18770,"* copy of this software and associated documentation files (the ""Software""),  *",9
18771,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18772,"* copy of this software and associated documentation files (the ""Software""),  *",9
18773,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
18774,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18775,"* copy of this software and associated documentation files (the ""Software""),  *",9
18776,void ALT_EXIT (int exit_code),52
18777,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18778,"* copy of this software and associated documentation files (the ""Software""),  *",9
18779,"int ALT_FCNTL (int file, int cmd, ...)",66
18780,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18781,"* copy of this software and associated documentation files (the ""Software""),  *",9
18782,int alt_fd_lock (alt_fd* fd),54
18783,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18784,"* copy of this software and associated documentation files (the ""Software""),  *",9
18785,int alt_fd_unlock (alt_fd* fd),52
18786,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18787,"* copy of this software and associated documentation files (the ""Software""),  *",9
18788,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
18789,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18790,"* copy of this software and associated documentation files (the ""Software""),  *",9
18791,alt_dev* alt_find_file (const char* name),54
18792,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18793,"* copy of this software and associated documentation files (the ""Software""),  *",9
18794,alt_flash_fd* alt_flash_open_dev(const char* name),49
18795,void alt_flash_close_dev(alt_flash_fd* fd),61
18796,int alt_flash_device_register( alt_flash_fd* fd),70
18797,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18798,"* copy of this software and associated documentation files (the ""Software""),  *",9
18799,int ALT_FORK (void),45
18800,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18801,"* copy of this software and associated documentation files (the ""Software""),  *",9
18802,int alt_fs_reg (alt_dev* dev),57
18803,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18804,"* copy of this software and associated documentation files (the ""Software""),  *",9
18805,alt_getchar(void),51
18806,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18807,"* copy of this software and associated documentation files (the ""Software""),  *",9
18808,int ALT_GETPID (void),43
18809,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18810,"* copy of this software and associated documentation files (the ""Software""),  *",9
18811,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
18812,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
18813,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18814,"* copy of this software and associated documentation files (the ""Software""),  *",9
18815,int alt_get_fd (alt_dev* dev),54
18816,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18817,"* copy of this software and associated documentation files (the ""Software""),  *",9
18818,/* The compiler inserts calls to mcount() at the start of,48
18819,static __inline__ void * mcount_allocate(unsigned int size),133
18820,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
18821,static int nios2_pcsample_init(void),218
18822,static alt_u32 nios2_pcsample(void* context),250
18823,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18824,"* copy of this software and associated documentation files (the ""Software""),  *",9
18825,"void alt_icache_flush (void* start, alt_u32 len)",42
18826,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18827,"* copy of this software and associated documentation files (the ""Software""),  *",9
18828,void alt_icache_flush_all (void),41
18829,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18830,"* copy of this software and associated documentation files (the ""Software""),  *",9
18831,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
18832,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
18833,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
18834,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
18835,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18836,"* copy of this software and associated documentation files (the ""Software""),  *",9
18837,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
18838,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
18839,"* copy of this software and associated documentation files (the ""Software""),  *",9
18840,alt_exception_result (*alt_instruction_exception_handler),49
18841,int alt_instruction_exception_entry (alt_u32 exception_pc),53
18842,alt_instruction_exception_entry (alt_u32 exception_pc),68
18843,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
18844,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
18845,"* copy of this software and associated documentation files (the ""Software""),  *",9
18846,void alt_instruction_exception_register (,73
18847,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
18848,"* copy of this software and associated documentation files (the ""Software""),  *",9
18849,"int ALT_IOCTL (int file, int req, void* arg)",68
18850,"int ALT_IOCTL (int file, int req, void* arg)",106
18851,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18852,"* copy of this software and associated documentation files (the ""Software""),  *",9
18853,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
18854,"void alt_io_redirect(const char* stdout_dev, ",85
18855,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18856,"* copy of this software and associated documentation files (the ""Software""),  *",9
18857,void alt_irq_handler (void),80
18858,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
18859,"* copy of this software and associated documentation files (the ""Software""),  *",9
18860,"int alt_irq_register (alt_u32 id, ",75
18861,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
18862,"* copy of this software and associated documentation files (the ""Software""),  *",9
18863,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18864,"* copy of this software and associated documentation files (the ""Software""),  *",9
18865,"int ALT_KILL (int pid, int sig)",49
18866,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18867,"* copy of this software and associated documentation files (the ""Software""),  *",9
18868,"int ALT_LINK ( char *existing, char *new)",45
18869,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
18870,"* copy of this software and associated documentation files (the ""Software""),  *",9
18871,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
18872,void alt_load (void),67
18873,"void alt_log_txchar(int c,char *base)",95
18874,"void alt_log_repchar(char c,int r,int base)",106
18875,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
18876,"int alt_log_printf_proc(const char *fmt, ... )",344
18877,alt_u32 altera_avalon_jtag_uart_report_log(void * context),364
18878,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",380
18879,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",415
18880,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",425
18881,"void alt_log_write(const void *ptr, size_t len)",441
18882,void alt_log_system_clock(),475
18883,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
18884,"* copy of this software and associated documentation files (the ""Software""),  *",9
18885,void alt_main (void),82
18886,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18887,"* copy of this software and associated documentation files (the ""Software""),  *",9
18888,void __malloc_lock ( struct _reent *_r ),42
18889,void __malloc_unlock ( struct _reent *_r ),50
18890,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18891,"* copy of this software and associated documentation files (the ""Software""),  *",9
18892,"alt_printf(const char* fmt, ... )",51
18893,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18894,"* copy of this software and associated documentation files (the ""Software""),  *",9
18895,alt_putchar(int c),50
18896,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18897,"* copy of this software and associated documentation files (the ""Software""),  *",9
18898,alt_putcharbuf(int c),58
18899,alt_putbufflush(),73
18900,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
18901,"* copy of this software and associated documentation files (the ""Software""),  *",9
18902,alt_putstr(const char* str),52
18903,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18904,"* copy of this software and associated documentation files (the ""Software""),  *",9
18905,void alt_release_fd (int fd),44
18906,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18907,"* copy of this software and associated documentation files (the ""Software""),  *",9
18908,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
18909,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18910,"* copy of this software and associated documentation files (the ""Software""),  *",9
18911,"alt_remap_uncached(void* ptr, alt_u32 len)",49
18912,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18913,"* copy of this software and associated documentation files (the ""Software""),  *",9
18914,caddr_t ALT_SBRK (int incr),68
18915,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18916,"* copy of this software and associated documentation files (the ""Software""),  *",9
18917,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
18918,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18919,"* copy of this software and associated documentation files (the ""Software""),  *",9
18920,void alt_alarm_stop (alt_alarm* alarm),66
18921,void alt_tick (void),87
18922,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18923,"* copy of this software and associated documentation files (the ""Software""),  *",9
18924,clock_t ALT_TIMES (struct tms *buf),51
18925,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18926,"* copy of this software and associated documentation files (the ""Software""),  *",9
18927,alt_uncached_free(volatile void* ptr),40
18928,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
18929,"* copy of this software and associated documentation files (the ""Software""),  *",9
18930,alt_uncached_malloc(size_t size),42
18931,int ALT_USLEEP (useconds_t us),46
18932,unsigned int ALT_USLEEP (unsigned int us),48
18933,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18934,"* copy of this software and associated documentation files (the ""Software""),  *",9
18935,int ALT_WAIT (int *status),44
18936,int close (int fd),31
18937,void __attribute__ ((noreturn)) semihost_exit (int code),24
18938,void __attribute__ ((noreturn)) _exit (int code),35
18939,"int fstat (int fd, struct stat *buf)",34
18940,__hosted_to_gdb_mode_t (mode_t m),23
18941,__hosted_to_gdb_open_flags (int f),52
18942,__hosted_to_gdb_lseek_flags (int f),73
18943,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
18944,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
18945,__hosted_from_gdb_errno (int32_t err),111
18946,"int gettimeofday (struct timeval *tv, void *tzvp)",31
18947,void semihost_init_sim (),24
18948,int isatty (int fd),31
18949,"off_t lseek (int fd, off_t offset, int whence)",36
18950,"int open (const char *fname, int flags, ...)",38
18951,"ssize_t read (int fd, void *buf, size_t count)",33
18952,"int _rename (const char *oldpath, const char *newpath)",35
18953,"int stat (const char *filename, struct stat *buf)",37
18954,int _system (const char *command),34
18955,time_t time (time_t *t),31
18956,int unlink (const char *path),33
18957,"ssize_t write (int fd, const void *buf, size_t count)",33
18958,void alt_irq_init ( const void* base ),77
18959,void alt_sys_init( void ),88
18960,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18961,"* copy of this software and associated documentation files (the ""Software""),  *",9
18962,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
18963,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
18964,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
18965,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18966,"* copy of this software and associated documentation files (the ""Software""),  *",9
18967,void alt_vic_irq_init (alt_vic_dev* pdev),45
18968,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18969,"* copy of this software and associated documentation files (the ""Software""),  *",9
18970,"int alt_ic_isr_register(alt_u32 ic_id,",59
18971,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18972,"* copy of this software and associated documentation files (the ""Software""),  *",9
18973,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
18974,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
18975,"* copy of this software and associated documentation files (the ""Software""),  *",9
18976,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
18977,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
18978,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
18979,void altera_nios2_gen2_irq_init(void) ,34
18980,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
18981,"* copy of this software and associated documentation files (the ""Software""),  *",9
18982,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
18983,unsigned int alt_busy_sleep (unsigned int us),52
18984,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18985,"* copy of this software and associated documentation files (the ""Software""),  *",9
18986,"void alt_dcache_flush (void* start, alt_u32 len)",46
18987,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
18988,"* copy of this software and associated documentation files (the ""Software""),  *",9
18989,void alt_dcache_flush_all (void),41
18990,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
18991,"* copy of this software and associated documentation files (the ""Software""),  *",9
18992,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
18993,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18994,"* copy of this software and associated documentation files (the ""Software""),  *",9
18995,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
18996,ALT_SEM(alt_fd_list_lock),109
18997,int alt_dev_reg (alt_dev* dev),151
18998,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
18999,"* copy of this software and associated documentation files (the ""Software""),  *",9
19000,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
19001,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19002,"* copy of this software and associated documentation files (the ""Software""),  *",9
19003,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
19004,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19005,"* copy of this software and associated documentation files (the ""Software""),  *",9
19006,alt_dma_txchan alt_dma_txchan_open (const char* name),51
19007,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19008,"* copy of this software and associated documentation files (the ""Software""),  *",9
19009,void _do_ctors(void),58
19010,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19011,"* copy of this software and associated documentation files (the ""Software""),  *",9
19012,void _do_dtors(void),58
19013,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
19014,"* copy of this software and associated documentation files (the ""Software""),  *",9
19015,alt_ecc_fatal_exception_register(alt_u32 handler),66
19016,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19017,"* copy of this software and associated documentation files (the ""Software""),  *",9
19018,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19019,"* copy of this software and associated documentation files (the ""Software""),  *",9
19020,void __env_lock ( struct _reent *_r ),43
19021,void __env_unlock ( struct _reent *_r ),51
19022,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19023,"* copy of this software and associated documentation files (the ""Software""),  *",9
19024,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19025,"* copy of this software and associated documentation files (the ""Software""),  *",9
19026,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
19027,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19028,"* copy of this software and associated documentation files (the ""Software""),  *",9
19029,void ALT_EXIT (int exit_code),52
19030,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19031,"* copy of this software and associated documentation files (the ""Software""),  *",9
19032,"int ALT_FCNTL (int file, int cmd, ...)",66
19033,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19034,"* copy of this software and associated documentation files (the ""Software""),  *",9
19035,int alt_fd_lock (alt_fd* fd),54
19036,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19037,"* copy of this software and associated documentation files (the ""Software""),  *",9
19038,int alt_fd_unlock (alt_fd* fd),52
19039,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19040,"* copy of this software and associated documentation files (the ""Software""),  *",9
19041,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
19042,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19043,"* copy of this software and associated documentation files (the ""Software""),  *",9
19044,alt_dev* alt_find_file (const char* name),54
19045,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19046,"* copy of this software and associated documentation files (the ""Software""),  *",9
19047,alt_flash_fd* alt_flash_open_dev(const char* name),49
19048,void alt_flash_close_dev(alt_flash_fd* fd),61
19049,int alt_flash_device_register( alt_flash_fd* fd),70
19050,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19051,"* copy of this software and associated documentation files (the ""Software""),  *",9
19052,int ALT_FORK (void),45
19053,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19054,"* copy of this software and associated documentation files (the ""Software""),  *",9
19055,int alt_fs_reg (alt_dev* dev),57
19056,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19057,"* copy of this software and associated documentation files (the ""Software""),  *",9
19058,alt_getchar(void),51
19059,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19060,"* copy of this software and associated documentation files (the ""Software""),  *",9
19061,int ALT_GETPID (void),43
19062,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19063,"* copy of this software and associated documentation files (the ""Software""),  *",9
19064,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
19065,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
19066,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19067,"* copy of this software and associated documentation files (the ""Software""),  *",9
19068,int alt_get_fd (alt_dev* dev),54
19069,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19070,"* copy of this software and associated documentation files (the ""Software""),  *",9
19071,/* The compiler inserts calls to mcount() at the start of,48
19072,static __inline__ void * mcount_allocate(unsigned int size),133
19073,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
19074,static int nios2_pcsample_init(void),218
19075,static alt_u32 nios2_pcsample(void* context),250
19076,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19077,"* copy of this software and associated documentation files (the ""Software""),  *",9
19078,"void alt_icache_flush (void* start, alt_u32 len)",42
19079,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19080,"* copy of this software and associated documentation files (the ""Software""),  *",9
19081,void alt_icache_flush_all (void),41
19082,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19083,"* copy of this software and associated documentation files (the ""Software""),  *",9
19084,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
19085,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
19086,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
19087,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
19088,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19089,"* copy of this software and associated documentation files (the ""Software""),  *",9
19090,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
19091,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
19092,"* copy of this software and associated documentation files (the ""Software""),  *",9
19093,alt_exception_result (*alt_instruction_exception_handler),49
19094,int alt_instruction_exception_entry (alt_u32 exception_pc),53
19095,alt_instruction_exception_entry (alt_u32 exception_pc),68
19096,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
19097,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
19098,"* copy of this software and associated documentation files (the ""Software""),  *",9
19099,void alt_instruction_exception_register (,73
19100,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
19101,"* copy of this software and associated documentation files (the ""Software""),  *",9
19102,"int ALT_IOCTL (int file, int req, void* arg)",68
19103,"int ALT_IOCTL (int file, int req, void* arg)",106
19104,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19105,"* copy of this software and associated documentation files (the ""Software""),  *",9
19106,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
19107,"void alt_io_redirect(const char* stdout_dev, ",85
19108,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19109,"* copy of this software and associated documentation files (the ""Software""),  *",9
19110,void alt_irq_handler (void),80
19111,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19112,"* copy of this software and associated documentation files (the ""Software""),  *",9
19113,"int alt_irq_register (alt_u32 id, ",75
19114,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19115,"* copy of this software and associated documentation files (the ""Software""),  *",9
19116,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19117,"* copy of this software and associated documentation files (the ""Software""),  *",9
19118,"int ALT_KILL (int pid, int sig)",49
19119,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19120,"* copy of this software and associated documentation files (the ""Software""),  *",9
19121,"int ALT_LINK ( char *existing, char *new)",45
19122,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
19123,"* copy of this software and associated documentation files (the ""Software""),  *",9
19124,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
19125,void alt_load (void),67
19126,"void alt_log_txchar(int c,char *base)",95
19127,"void alt_log_repchar(char c,int r,int base)",106
19128,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
19129,"int alt_log_printf_proc(const char *fmt, ... )",344
19130,alt_u32 altera_avalon_jtag_uart_report_log(void * context),364
19131,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",380
19132,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",415
19133,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",425
19134,"void alt_log_write(const void *ptr, size_t len)",441
19135,void alt_log_system_clock(),475
19136,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
19137,"* copy of this software and associated documentation files (the ""Software""),  *",9
19138,void alt_main (void),82
19139,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19140,"* copy of this software and associated documentation files (the ""Software""),  *",9
19141,void __malloc_lock ( struct _reent *_r ),42
19142,void __malloc_unlock ( struct _reent *_r ),50
19143,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19144,"* copy of this software and associated documentation files (the ""Software""),  *",9
19145,"alt_printf(const char* fmt, ... )",51
19146,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19147,"* copy of this software and associated documentation files (the ""Software""),  *",9
19148,alt_putchar(int c),50
19149,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19150,"* copy of this software and associated documentation files (the ""Software""),  *",9
19151,alt_putcharbuf(int c),58
19152,alt_putbufflush(),73
19153,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19154,"* copy of this software and associated documentation files (the ""Software""),  *",9
19155,alt_putstr(const char* str),52
19156,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19157,"* copy of this software and associated documentation files (the ""Software""),  *",9
19158,void alt_release_fd (int fd),44
19159,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19160,"* copy of this software and associated documentation files (the ""Software""),  *",9
19161,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
19162,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19163,"* copy of this software and associated documentation files (the ""Software""),  *",9
19164,"alt_remap_uncached(void* ptr, alt_u32 len)",49
19165,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19166,"* copy of this software and associated documentation files (the ""Software""),  *",9
19167,caddr_t ALT_SBRK (int incr),68
19168,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19169,"* copy of this software and associated documentation files (the ""Software""),  *",9
19170,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
19171,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19172,"* copy of this software and associated documentation files (the ""Software""),  *",9
19173,void alt_alarm_stop (alt_alarm* alarm),66
19174,void alt_tick (void),87
19175,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19176,"* copy of this software and associated documentation files (the ""Software""),  *",9
19177,clock_t ALT_TIMES (struct tms *buf),51
19178,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19179,"* copy of this software and associated documentation files (the ""Software""),  *",9
19180,alt_uncached_free(volatile void* ptr),40
19181,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19182,"* copy of this software and associated documentation files (the ""Software""),  *",9
19183,alt_uncached_malloc(size_t size),42
19184,int ALT_USLEEP (useconds_t us),46
19185,unsigned int ALT_USLEEP (unsigned int us),48
19186,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19187,"* copy of this software and associated documentation files (the ""Software""),  *",9
19188,int ALT_WAIT (int *status),44
19189,int close (int fd),31
19190,void __attribute__ ((noreturn)) semihost_exit (int code),24
19191,void __attribute__ ((noreturn)) _exit (int code),35
19192,"int fstat (int fd, struct stat *buf)",34
19193,__hosted_to_gdb_mode_t (mode_t m),23
19194,__hosted_to_gdb_open_flags (int f),52
19195,__hosted_to_gdb_lseek_flags (int f),73
19196,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
19197,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
19198,__hosted_from_gdb_errno (int32_t err),111
19199,"int gettimeofday (struct timeval *tv, void *tzvp)",31
19200,void semihost_init_sim (),24
19201,int isatty (int fd),31
19202,"off_t lseek (int fd, off_t offset, int whence)",36
19203,"int open (const char *fname, int flags, ...)",38
19204,"ssize_t read (int fd, void *buf, size_t count)",33
19205,"int _rename (const char *oldpath, const char *newpath)",35
19206,"int stat (const char *filename, struct stat *buf)",37
19207,int _system (const char *command),34
19208,time_t time (time_t *t),31
19209,int unlink (const char *path),33
19210,"ssize_t write (int fd, const void *buf, size_t count)",33
19211,void alt_irq_init ( const void* base ),77
19212,void alt_sys_init( void ),88
19213,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19214,"* copy of this software and associated documentation files (the ""Software""),  *",9
19215,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
19216,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
19217,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
19218,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19219,"* copy of this software and associated documentation files (the ""Software""),  *",9
19220,void alt_vic_irq_init (alt_vic_dev* pdev),45
19221,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19222,"* copy of this software and associated documentation files (the ""Software""),  *",9
19223,"int alt_ic_isr_register(alt_u32 ic_id,",59
19224,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19225,"* copy of this software and associated documentation files (the ""Software""),  *",9
19226,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
19227,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19228,"* copy of this software and associated documentation files (the ""Software""),  *",9
19229,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
19230,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
19231,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
19232,void altera_nios2_gen2_irq_init(void) ,34
19233,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19234,"* copy of this software and associated documentation files (the ""Software""),  *",9
19235,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
19236,unsigned int alt_busy_sleep (unsigned int us),52
19237,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19238,"* copy of this software and associated documentation files (the ""Software""),  *",9
19239,"void alt_dcache_flush (void* start, alt_u32 len)",46
19240,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19241,"* copy of this software and associated documentation files (the ""Software""),  *",9
19242,void alt_dcache_flush_all (void),41
19243,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
19244,"* copy of this software and associated documentation files (the ""Software""),  *",9
19245,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
19246,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19247,"* copy of this software and associated documentation files (the ""Software""),  *",9
19248,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
19249,ALT_SEM(alt_fd_list_lock),109
19250,int alt_dev_reg (alt_dev* dev),151
19251,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19252,"* copy of this software and associated documentation files (the ""Software""),  *",9
19253,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
19254,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19255,"* copy of this software and associated documentation files (the ""Software""),  *",9
19256,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
19257,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19258,"* copy of this software and associated documentation files (the ""Software""),  *",9
19259,alt_dma_txchan alt_dma_txchan_open (const char* name),51
19260,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19261,"* copy of this software and associated documentation files (the ""Software""),  *",9
19262,void _do_ctors(void),58
19263,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19264,"* copy of this software and associated documentation files (the ""Software""),  *",9
19265,void _do_dtors(void),58
19266,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
19267,"* copy of this software and associated documentation files (the ""Software""),  *",9
19268,alt_ecc_fatal_exception_register(alt_u32 handler),66
19269,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19270,"* copy of this software and associated documentation files (the ""Software""),  *",9
19271,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19272,"* copy of this software and associated documentation files (the ""Software""),  *",9
19273,void __env_lock ( struct _reent *_r ),43
19274,void __env_unlock ( struct _reent *_r ),51
19275,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19276,"* copy of this software and associated documentation files (the ""Software""),  *",9
19277,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19278,"* copy of this software and associated documentation files (the ""Software""),  *",9
19279,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
19280,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19281,"* copy of this software and associated documentation files (the ""Software""),  *",9
19282,void ALT_EXIT (int exit_code),52
19283,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19284,"* copy of this software and associated documentation files (the ""Software""),  *",9
19285,"int ALT_FCNTL (int file, int cmd, ...)",66
19286,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19287,"* copy of this software and associated documentation files (the ""Software""),  *",9
19288,int alt_fd_lock (alt_fd* fd),54
19289,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19290,"* copy of this software and associated documentation files (the ""Software""),  *",9
19291,int alt_fd_unlock (alt_fd* fd),52
19292,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19293,"* copy of this software and associated documentation files (the ""Software""),  *",9
19294,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
19295,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19296,"* copy of this software and associated documentation files (the ""Software""),  *",9
19297,alt_dev* alt_find_file (const char* name),54
19298,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19299,"* copy of this software and associated documentation files (the ""Software""),  *",9
19300,alt_flash_fd* alt_flash_open_dev(const char* name),49
19301,void alt_flash_close_dev(alt_flash_fd* fd),61
19302,int alt_flash_device_register( alt_flash_fd* fd),70
19303,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19304,"* copy of this software and associated documentation files (the ""Software""),  *",9
19305,int ALT_FORK (void),45
19306,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19307,"* copy of this software and associated documentation files (the ""Software""),  *",9
19308,int alt_fs_reg (alt_dev* dev),57
19309,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19310,"* copy of this software and associated documentation files (the ""Software""),  *",9
19311,alt_getchar(void),51
19312,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19313,"* copy of this software and associated documentation files (the ""Software""),  *",9
19314,int ALT_GETPID (void),43
19315,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19316,"* copy of this software and associated documentation files (the ""Software""),  *",9
19317,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
19318,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
19319,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19320,"* copy of this software and associated documentation files (the ""Software""),  *",9
19321,int alt_get_fd (alt_dev* dev),54
19322,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19323,"* copy of this software and associated documentation files (the ""Software""),  *",9
19324,/* The compiler inserts calls to mcount() at the start of,48
19325,static __inline__ void * mcount_allocate(unsigned int size),133
19326,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
19327,static int nios2_pcsample_init(void),218
19328,static alt_u32 nios2_pcsample(void* context),250
19329,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19330,"* copy of this software and associated documentation files (the ""Software""),  *",9
19331,"void alt_icache_flush (void* start, alt_u32 len)",42
19332,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19333,"* copy of this software and associated documentation files (the ""Software""),  *",9
19334,void alt_icache_flush_all (void),41
19335,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19336,"* copy of this software and associated documentation files (the ""Software""),  *",9
19337,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
19338,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
19339,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
19340,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
19341,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19342,"* copy of this software and associated documentation files (the ""Software""),  *",9
19343,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
19344,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
19345,"* copy of this software and associated documentation files (the ""Software""),  *",9
19346,alt_exception_result (*alt_instruction_exception_handler),49
19347,int alt_instruction_exception_entry (alt_u32 exception_pc),53
19348,alt_instruction_exception_entry (alt_u32 exception_pc),68
19349,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
19350,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
19351,"* copy of this software and associated documentation files (the ""Software""),  *",9
19352,void alt_instruction_exception_register (,73
19353,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
19354,"* copy of this software and associated documentation files (the ""Software""),  *",9
19355,"int ALT_IOCTL (int file, int req, void* arg)",68
19356,"int ALT_IOCTL (int file, int req, void* arg)",106
19357,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19358,"* copy of this software and associated documentation files (the ""Software""),  *",9
19359,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
19360,"void alt_io_redirect(const char* stdout_dev, ",85
19361,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19362,"* copy of this software and associated documentation files (the ""Software""),  *",9
19363,void alt_irq_handler (void),80
19364,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19365,"* copy of this software and associated documentation files (the ""Software""),  *",9
19366,"int alt_irq_register (alt_u32 id, ",75
19367,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19368,"* copy of this software and associated documentation files (the ""Software""),  *",9
19369,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19370,"* copy of this software and associated documentation files (the ""Software""),  *",9
19371,"int ALT_KILL (int pid, int sig)",49
19372,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19373,"* copy of this software and associated documentation files (the ""Software""),  *",9
19374,"int ALT_LINK ( char *existing, char *new)",45
19375,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
19376,"* copy of this software and associated documentation files (the ""Software""),  *",9
19377,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
19378,void alt_load (void),67
19379,"void alt_log_txchar(int c,char *base)",95
19380,"void alt_log_repchar(char c,int r,int base)",106
19381,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
19382,"int alt_log_printf_proc(const char *fmt, ... )",344
19383,alt_u32 altera_avalon_jtag_uart_report_log(void * context),364
19384,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",380
19385,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",415
19386,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",425
19387,"void alt_log_write(const void *ptr, size_t len)",441
19388,void alt_log_system_clock(),475
19389,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
19390,"* copy of this software and associated documentation files (the ""Software""),  *",9
19391,void alt_main (void),82
19392,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19393,"* copy of this software and associated documentation files (the ""Software""),  *",9
19394,void __malloc_lock ( struct _reent *_r ),42
19395,void __malloc_unlock ( struct _reent *_r ),50
19396,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19397,"* copy of this software and associated documentation files (the ""Software""),  *",9
19398,"alt_printf(const char* fmt, ... )",51
19399,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19400,"* copy of this software and associated documentation files (the ""Software""),  *",9
19401,alt_putchar(int c),50
19402,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19403,"* copy of this software and associated documentation files (the ""Software""),  *",9
19404,alt_putcharbuf(int c),58
19405,alt_putbufflush(),73
19406,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19407,"* copy of this software and associated documentation files (the ""Software""),  *",9
19408,alt_putstr(const char* str),52
19409,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19410,"* copy of this software and associated documentation files (the ""Software""),  *",9
19411,void alt_release_fd (int fd),44
19412,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19413,"* copy of this software and associated documentation files (the ""Software""),  *",9
19414,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
19415,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19416,"* copy of this software and associated documentation files (the ""Software""),  *",9
19417,"alt_remap_uncached(void* ptr, alt_u32 len)",49
19418,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19419,"* copy of this software and associated documentation files (the ""Software""),  *",9
19420,caddr_t ALT_SBRK (int incr),68
19421,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19422,"* copy of this software and associated documentation files (the ""Software""),  *",9
19423,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
19424,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19425,"* copy of this software and associated documentation files (the ""Software""),  *",9
19426,void alt_alarm_stop (alt_alarm* alarm),66
19427,void alt_tick (void),87
19428,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19429,"* copy of this software and associated documentation files (the ""Software""),  *",9
19430,clock_t ALT_TIMES (struct tms *buf),51
19431,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19432,"* copy of this software and associated documentation files (the ""Software""),  *",9
19433,alt_uncached_free(volatile void* ptr),40
19434,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19435,"* copy of this software and associated documentation files (the ""Software""),  *",9
19436,alt_uncached_malloc(size_t size),42
19437,int ALT_USLEEP (useconds_t us),46
19438,unsigned int ALT_USLEEP (unsigned int us),48
19439,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19440,"* copy of this software and associated documentation files (the ""Software""),  *",9
19441,int ALT_WAIT (int *status),44
19442,int close (int fd),31
19443,void __attribute__ ((noreturn)) semihost_exit (int code),24
19444,void __attribute__ ((noreturn)) _exit (int code),35
19445,"int fstat (int fd, struct stat *buf)",34
19446,__hosted_to_gdb_mode_t (mode_t m),23
19447,__hosted_to_gdb_open_flags (int f),52
19448,__hosted_to_gdb_lseek_flags (int f),73
19449,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
19450,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
19451,__hosted_from_gdb_errno (int32_t err),111
19452,"int gettimeofday (struct timeval *tv, void *tzvp)",31
19453,void semihost_init_sim (),24
19454,int isatty (int fd),31
19455,"off_t lseek (int fd, off_t offset, int whence)",36
19456,"int open (const char *fname, int flags, ...)",38
19457,"ssize_t read (int fd, void *buf, size_t count)",33
19458,"int _rename (const char *oldpath, const char *newpath)",35
19459,"int stat (const char *filename, struct stat *buf)",37
19460,int _system (const char *command),34
19461,time_t time (time_t *t),31
19462,int unlink (const char *path),33
19463,"ssize_t write (int fd, const void *buf, size_t count)",33
19464,void alt_irq_init ( const void* base ),77
19465,void alt_sys_init( void ),88
19466,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19467,"* copy of this software and associated documentation files (the ""Software""),  *",9
19468,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
19469,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
19470,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
19471,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19472,"* copy of this software and associated documentation files (the ""Software""),  *",9
19473,void alt_vic_irq_init (alt_vic_dev* pdev),45
19474,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19475,"* copy of this software and associated documentation files (the ""Software""),  *",9
19476,"int alt_ic_isr_register(alt_u32 ic_id,",59
19477,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19478,"* copy of this software and associated documentation files (the ""Software""),  *",9
19479,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
19480,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19481,"* copy of this software and associated documentation files (the ""Software""),  *",9
19482,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
19483,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
19484,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
19485,void altera_nios2_gen2_irq_init(void) ,34
19486,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19487,"* copy of this software and associated documentation files (the ""Software""),  *",9
19488,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
19489,unsigned int alt_busy_sleep (unsigned int us),52
19490,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19491,"* copy of this software and associated documentation files (the ""Software""),  *",9
19492,"void alt_dcache_flush (void* start, alt_u32 len)",46
19493,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19494,"* copy of this software and associated documentation files (the ""Software""),  *",9
19495,void alt_dcache_flush_all (void),41
19496,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
19497,"* copy of this software and associated documentation files (the ""Software""),  *",9
19498,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
19499,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19500,"* copy of this software and associated documentation files (the ""Software""),  *",9
19501,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
19502,ALT_SEM(alt_fd_list_lock),109
19503,int alt_dev_reg (alt_dev* dev),151
19504,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19505,"* copy of this software and associated documentation files (the ""Software""),  *",9
19506,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
19507,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19508,"* copy of this software and associated documentation files (the ""Software""),  *",9
19509,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
19510,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19511,"* copy of this software and associated documentation files (the ""Software""),  *",9
19512,alt_dma_txchan alt_dma_txchan_open (const char* name),51
19513,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19514,"* copy of this software and associated documentation files (the ""Software""),  *",9
19515,void _do_ctors(void),58
19516,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19517,"* copy of this software and associated documentation files (the ""Software""),  *",9
19518,void _do_dtors(void),58
19519,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
19520,"* copy of this software and associated documentation files (the ""Software""),  *",9
19521,alt_ecc_fatal_exception_register(alt_u32 handler),66
19522,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19523,"* copy of this software and associated documentation files (the ""Software""),  *",9
19524,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19525,"* copy of this software and associated documentation files (the ""Software""),  *",9
19526,void __env_lock ( struct _reent *_r ),43
19527,void __env_unlock ( struct _reent *_r ),51
19528,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19529,"* copy of this software and associated documentation files (the ""Software""),  *",9
19530,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19531,"* copy of this software and associated documentation files (the ""Software""),  *",9
19532,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
19533,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19534,"* copy of this software and associated documentation files (the ""Software""),  *",9
19535,void ALT_EXIT (int exit_code),52
19536,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19537,"* copy of this software and associated documentation files (the ""Software""),  *",9
19538,"int ALT_FCNTL (int file, int cmd, ...)",66
19539,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19540,"* copy of this software and associated documentation files (the ""Software""),  *",9
19541,int alt_fd_lock (alt_fd* fd),54
19542,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19543,"* copy of this software and associated documentation files (the ""Software""),  *",9
19544,int alt_fd_unlock (alt_fd* fd),52
19545,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19546,"* copy of this software and associated documentation files (the ""Software""),  *",9
19547,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
19548,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19549,"* copy of this software and associated documentation files (the ""Software""),  *",9
19550,alt_dev* alt_find_file (const char* name),54
19551,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19552,"* copy of this software and associated documentation files (the ""Software""),  *",9
19553,alt_flash_fd* alt_flash_open_dev(const char* name),49
19554,void alt_flash_close_dev(alt_flash_fd* fd),61
19555,int alt_flash_device_register( alt_flash_fd* fd),70
19556,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19557,"* copy of this software and associated documentation files (the ""Software""),  *",9
19558,int ALT_FORK (void),45
19559,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19560,"* copy of this software and associated documentation files (the ""Software""),  *",9
19561,int alt_fs_reg (alt_dev* dev),57
19562,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19563,"* copy of this software and associated documentation files (the ""Software""),  *",9
19564,alt_getchar(void),51
19565,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19566,"* copy of this software and associated documentation files (the ""Software""),  *",9
19567,int ALT_GETPID (void),43
19568,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19569,"* copy of this software and associated documentation files (the ""Software""),  *",9
19570,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
19571,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
19572,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19573,"* copy of this software and associated documentation files (the ""Software""),  *",9
19574,int alt_get_fd (alt_dev* dev),54
19575,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19576,"* copy of this software and associated documentation files (the ""Software""),  *",9
19577,/* The compiler inserts calls to mcount() at the start of,48
19578,static __inline__ void * mcount_allocate(unsigned int size),133
19579,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
19580,static int nios2_pcsample_init(void),218
19581,static alt_u32 nios2_pcsample(void* context),250
19582,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19583,"* copy of this software and associated documentation files (the ""Software""),  *",9
19584,"void alt_icache_flush (void* start, alt_u32 len)",42
19585,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19586,"* copy of this software and associated documentation files (the ""Software""),  *",9
19587,void alt_icache_flush_all (void),41
19588,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19589,"* copy of this software and associated documentation files (the ""Software""),  *",9
19590,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
19591,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
19592,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
19593,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
19594,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19595,"* copy of this software and associated documentation files (the ""Software""),  *",9
19596,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
19597,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
19598,"* copy of this software and associated documentation files (the ""Software""),  *",9
19599,alt_exception_result (*alt_instruction_exception_handler),49
19600,int alt_instruction_exception_entry (alt_u32 exception_pc),53
19601,alt_instruction_exception_entry (alt_u32 exception_pc),68
19602,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
19603,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
19604,"* copy of this software and associated documentation files (the ""Software""),  *",9
19605,void alt_instruction_exception_register (,73
19606,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
19607,"* copy of this software and associated documentation files (the ""Software""),  *",9
19608,"int ALT_IOCTL (int file, int req, void* arg)",68
19609,"int ALT_IOCTL (int file, int req, void* arg)",106
19610,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19611,"* copy of this software and associated documentation files (the ""Software""),  *",9
19612,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
19613,"void alt_io_redirect(const char* stdout_dev, ",85
19614,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19615,"* copy of this software and associated documentation files (the ""Software""),  *",9
19616,void alt_irq_handler (void),80
19617,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19618,"* copy of this software and associated documentation files (the ""Software""),  *",9
19619,"int alt_irq_register (alt_u32 id, ",75
19620,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19621,"* copy of this software and associated documentation files (the ""Software""),  *",9
19622,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19623,"* copy of this software and associated documentation files (the ""Software""),  *",9
19624,"int ALT_KILL (int pid, int sig)",49
19625,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19626,"* copy of this software and associated documentation files (the ""Software""),  *",9
19627,"int ALT_LINK ( char *existing, char *new)",45
19628,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
19629,"* copy of this software and associated documentation files (the ""Software""),  *",9
19630,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
19631,void alt_load (void),67
19632,"void alt_log_txchar(int c,char *base)",95
19633,"void alt_log_repchar(char c,int r,int base)",106
19634,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
19635,"int alt_log_printf_proc(const char *fmt, ... )",344
19636,alt_u32 altera_avalon_jtag_uart_report_log(void * context),364
19637,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",380
19638,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",415
19639,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",425
19640,"void alt_log_write(const void *ptr, size_t len)",441
19641,void alt_log_system_clock(),475
19642,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
19643,"* copy of this software and associated documentation files (the ""Software""),  *",9
19644,void alt_main (void),82
19645,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19646,"* copy of this software and associated documentation files (the ""Software""),  *",9
19647,void __malloc_lock ( struct _reent *_r ),42
19648,void __malloc_unlock ( struct _reent *_r ),50
19649,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19650,"* copy of this software and associated documentation files (the ""Software""),  *",9
19651,"alt_printf(const char* fmt, ... )",51
19652,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19653,"* copy of this software and associated documentation files (the ""Software""),  *",9
19654,alt_putchar(int c),50
19655,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19656,"* copy of this software and associated documentation files (the ""Software""),  *",9
19657,alt_putcharbuf(int c),58
19658,alt_putbufflush(),73
19659,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19660,"* copy of this software and associated documentation files (the ""Software""),  *",9
19661,alt_putstr(const char* str),52
19662,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19663,"* copy of this software and associated documentation files (the ""Software""),  *",9
19664,void alt_release_fd (int fd),44
19665,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19666,"* copy of this software and associated documentation files (the ""Software""),  *",9
19667,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
19668,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19669,"* copy of this software and associated documentation files (the ""Software""),  *",9
19670,"alt_remap_uncached(void* ptr, alt_u32 len)",49
19671,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19672,"* copy of this software and associated documentation files (the ""Software""),  *",9
19673,caddr_t ALT_SBRK (int incr),68
19674,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19675,"* copy of this software and associated documentation files (the ""Software""),  *",9
19676,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
19677,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19678,"* copy of this software and associated documentation files (the ""Software""),  *",9
19679,void alt_alarm_stop (alt_alarm* alarm),66
19680,void alt_tick (void),87
19681,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19682,"* copy of this software and associated documentation files (the ""Software""),  *",9
19683,clock_t ALT_TIMES (struct tms *buf),51
19684,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19685,"* copy of this software and associated documentation files (the ""Software""),  *",9
19686,alt_uncached_free(volatile void* ptr),40
19687,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19688,"* copy of this software and associated documentation files (the ""Software""),  *",9
19689,alt_uncached_malloc(size_t size),42
19690,int ALT_USLEEP (useconds_t us),46
19691,unsigned int ALT_USLEEP (unsigned int us),48
19692,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19693,"* copy of this software and associated documentation files (the ""Software""),  *",9
19694,int ALT_WAIT (int *status),44
19695,int close (int fd),31
19696,void __attribute__ ((noreturn)) semihost_exit (int code),24
19697,void __attribute__ ((noreturn)) _exit (int code),35
19698,"int fstat (int fd, struct stat *buf)",34
19699,__hosted_to_gdb_mode_t (mode_t m),23
19700,__hosted_to_gdb_open_flags (int f),52
19701,__hosted_to_gdb_lseek_flags (int f),73
19702,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
19703,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
19704,__hosted_from_gdb_errno (int32_t err),111
19705,"int gettimeofday (struct timeval *tv, void *tzvp)",31
19706,void semihost_init_sim (),24
19707,int isatty (int fd),31
19708,"off_t lseek (int fd, off_t offset, int whence)",36
19709,"int open (const char *fname, int flags, ...)",38
19710,"ssize_t read (int fd, void *buf, size_t count)",33
19711,"int _rename (const char *oldpath, const char *newpath)",35
19712,"int stat (const char *filename, struct stat *buf)",37
19713,int _system (const char *command),34
19714,time_t time (time_t *t),31
19715,int unlink (const char *path),33
19716,"ssize_t write (int fd, const void *buf, size_t count)",33
19717,void alt_irq_init ( const void* base ),77
19718,void alt_sys_init( void ),88
19719,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19720,"* copy of this software and associated documentation files (the ""Software""),  *",9
19721,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
19722,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
19723,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
19724,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19725,"* copy of this software and associated documentation files (the ""Software""),  *",9
19726,void alt_vic_irq_init (alt_vic_dev* pdev),45
19727,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19728,"* copy of this software and associated documentation files (the ""Software""),  *",9
19729,"int alt_ic_isr_register(alt_u32 ic_id,",59
19730,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19731,"* copy of this software and associated documentation files (the ""Software""),  *",9
19732,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
19733,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19734,"* copy of this software and associated documentation files (the ""Software""),  *",9
19735,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
19736,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
19737,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
19738,void altera_nios2_gen2_irq_init(void) ,34
19739,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19740,"* copy of this software and associated documentation files (the ""Software""),  *",9
19741,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
19742,unsigned int alt_busy_sleep (unsigned int us),52
19743,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19744,"* copy of this software and associated documentation files (the ""Software""),  *",9
19745,"void alt_dcache_flush (void* start, alt_u32 len)",46
19746,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19747,"* copy of this software and associated documentation files (the ""Software""),  *",9
19748,void alt_dcache_flush_all (void),41
19749,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
19750,"* copy of this software and associated documentation files (the ""Software""),  *",9
19751,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
19752,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19753,"* copy of this software and associated documentation files (the ""Software""),  *",9
19754,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
19755,ALT_SEM(alt_fd_list_lock),109
19756,int alt_dev_reg (alt_dev* dev),151
19757,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19758,"* copy of this software and associated documentation files (the ""Software""),  *",9
19759,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
19760,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19761,"* copy of this software and associated documentation files (the ""Software""),  *",9
19762,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
19763,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19764,"* copy of this software and associated documentation files (the ""Software""),  *",9
19765,alt_dma_txchan alt_dma_txchan_open (const char* name),51
19766,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19767,"* copy of this software and associated documentation files (the ""Software""),  *",9
19768,void _do_ctors(void),58
19769,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19770,"* copy of this software and associated documentation files (the ""Software""),  *",9
19771,void _do_dtors(void),58
19772,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
19773,"* copy of this software and associated documentation files (the ""Software""),  *",9
19774,alt_ecc_fatal_exception_register(alt_u32 handler),66
19775,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19776,"* copy of this software and associated documentation files (the ""Software""),  *",9
19777,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19778,"* copy of this software and associated documentation files (the ""Software""),  *",9
19779,void __env_lock ( struct _reent *_r ),43
19780,void __env_unlock ( struct _reent *_r ),51
19781,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19782,"* copy of this software and associated documentation files (the ""Software""),  *",9
19783,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19784,"* copy of this software and associated documentation files (the ""Software""),  *",9
19785,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
19786,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19787,"* copy of this software and associated documentation files (the ""Software""),  *",9
19788,void ALT_EXIT (int exit_code),52
19789,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19790,"* copy of this software and associated documentation files (the ""Software""),  *",9
19791,"int ALT_FCNTL (int file, int cmd, ...)",66
19792,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19793,"* copy of this software and associated documentation files (the ""Software""),  *",9
19794,int alt_fd_lock (alt_fd* fd),54
19795,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19796,"* copy of this software and associated documentation files (the ""Software""),  *",9
19797,int alt_fd_unlock (alt_fd* fd),52
19798,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19799,"* copy of this software and associated documentation files (the ""Software""),  *",9
19800,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
19801,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19802,"* copy of this software and associated documentation files (the ""Software""),  *",9
19803,alt_dev* alt_find_file (const char* name),54
19804,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19805,"* copy of this software and associated documentation files (the ""Software""),  *",9
19806,alt_flash_fd* alt_flash_open_dev(const char* name),49
19807,void alt_flash_close_dev(alt_flash_fd* fd),61
19808,int alt_flash_device_register( alt_flash_fd* fd),70
19809,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19810,"* copy of this software and associated documentation files (the ""Software""),  *",9
19811,int ALT_FORK (void),45
19812,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19813,"* copy of this software and associated documentation files (the ""Software""),  *",9
19814,int alt_fs_reg (alt_dev* dev),57
19815,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19816,"* copy of this software and associated documentation files (the ""Software""),  *",9
19817,alt_getchar(void),51
19818,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19819,"* copy of this software and associated documentation files (the ""Software""),  *",9
19820,int ALT_GETPID (void),43
19821,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19822,"* copy of this software and associated documentation files (the ""Software""),  *",9
19823,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
19824,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
19825,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19826,"* copy of this software and associated documentation files (the ""Software""),  *",9
19827,int alt_get_fd (alt_dev* dev),54
19828,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19829,"* copy of this software and associated documentation files (the ""Software""),  *",9
19830,/* The compiler inserts calls to mcount() at the start of,48
19831,static __inline__ void * mcount_allocate(unsigned int size),133
19832,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
19833,static int nios2_pcsample_init(void),218
19834,static alt_u32 nios2_pcsample(void* context),250
19835,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19836,"* copy of this software and associated documentation files (the ""Software""),  *",9
19837,"void alt_icache_flush (void* start, alt_u32 len)",42
19838,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19839,"* copy of this software and associated documentation files (the ""Software""),  *",9
19840,void alt_icache_flush_all (void),41
19841,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19842,"* copy of this software and associated documentation files (the ""Software""),  *",9
19843,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
19844,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
19845,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
19846,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
19847,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19848,"* copy of this software and associated documentation files (the ""Software""),  *",9
19849,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
19850,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
19851,"* copy of this software and associated documentation files (the ""Software""),  *",9
19852,alt_exception_result (*alt_instruction_exception_handler),49
19853,int alt_instruction_exception_entry (alt_u32 exception_pc),53
19854,alt_instruction_exception_entry (alt_u32 exception_pc),68
19855,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
19856,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
19857,"* copy of this software and associated documentation files (the ""Software""),  *",9
19858,void alt_instruction_exception_register (,73
19859,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
19860,"* copy of this software and associated documentation files (the ""Software""),  *",9
19861,"int ALT_IOCTL (int file, int req, void* arg)",68
19862,"int ALT_IOCTL (int file, int req, void* arg)",106
19863,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19864,"* copy of this software and associated documentation files (the ""Software""),  *",9
19865,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
19866,"void alt_io_redirect(const char* stdout_dev, ",85
19867,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19868,"* copy of this software and associated documentation files (the ""Software""),  *",9
19869,void alt_irq_handler (void),80
19870,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
19871,"* copy of this software and associated documentation files (the ""Software""),  *",9
19872,"int alt_irq_register (alt_u32 id, ",75
19873,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
19874,"* copy of this software and associated documentation files (the ""Software""),  *",9
19875,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19876,"* copy of this software and associated documentation files (the ""Software""),  *",9
19877,"int ALT_KILL (int pid, int sig)",49
19878,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19879,"* copy of this software and associated documentation files (the ""Software""),  *",9
19880,"int ALT_LINK ( char *existing, char *new)",45
19881,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
19882,"* copy of this software and associated documentation files (the ""Software""),  *",9
19883,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
19884,void alt_load (void),67
19885,"void alt_log_txchar(int c,char *base)",95
19886,"void alt_log_repchar(char c,int r,int base)",106
19887,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
19888,"int alt_log_printf_proc(const char *fmt, ... )",344
19889,alt_u32 altera_avalon_jtag_uart_report_log(void * context),364
19890,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",380
19891,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",415
19892,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",425
19893,"void alt_log_write(const void *ptr, size_t len)",441
19894,void alt_log_system_clock(),475
19895,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
19896,"* copy of this software and associated documentation files (the ""Software""),  *",9
19897,void alt_main (void),82
19898,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19899,"* copy of this software and associated documentation files (the ""Software""),  *",9
19900,void __malloc_lock ( struct _reent *_r ),42
19901,void __malloc_unlock ( struct _reent *_r ),50
19902,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19903,"* copy of this software and associated documentation files (the ""Software""),  *",9
19904,"alt_printf(const char* fmt, ... )",51
19905,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19906,"* copy of this software and associated documentation files (the ""Software""),  *",9
19907,alt_putchar(int c),50
19908,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19909,"* copy of this software and associated documentation files (the ""Software""),  *",9
19910,alt_putcharbuf(int c),58
19911,alt_putbufflush(),73
19912,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
19913,"* copy of this software and associated documentation files (the ""Software""),  *",9
19914,alt_putstr(const char* str),52
19915,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19916,"* copy of this software and associated documentation files (the ""Software""),  *",9
19917,void alt_release_fd (int fd),44
19918,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19919,"* copy of this software and associated documentation files (the ""Software""),  *",9
19920,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
19921,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19922,"* copy of this software and associated documentation files (the ""Software""),  *",9
19923,"alt_remap_uncached(void* ptr, alt_u32 len)",49
19924,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19925,"* copy of this software and associated documentation files (the ""Software""),  *",9
19926,caddr_t ALT_SBRK (int incr),68
19927,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19928,"* copy of this software and associated documentation files (the ""Software""),  *",9
19929,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
19930,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19931,"* copy of this software and associated documentation files (the ""Software""),  *",9
19932,void alt_alarm_stop (alt_alarm* alarm),66
19933,void alt_tick (void),87
19934,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19935,"* copy of this software and associated documentation files (the ""Software""),  *",9
19936,clock_t ALT_TIMES (struct tms *buf),51
19937,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19938,"* copy of this software and associated documentation files (the ""Software""),  *",9
19939,alt_uncached_free(volatile void* ptr),40
19940,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
19941,"* copy of this software and associated documentation files (the ""Software""),  *",9
19942,alt_uncached_malloc(size_t size),42
19943,int ALT_USLEEP (useconds_t us),46
19944,unsigned int ALT_USLEEP (unsigned int us),48
19945,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
19946,"* copy of this software and associated documentation files (the ""Software""),  *",9
19947,int ALT_WAIT (int *status),44
19948,int close (int fd),31
19949,void __attribute__ ((noreturn)) semihost_exit (int code),24
19950,void __attribute__ ((noreturn)) _exit (int code),35
19951,"int fstat (int fd, struct stat *buf)",34
19952,__hosted_to_gdb_mode_t (mode_t m),23
19953,__hosted_to_gdb_open_flags (int f),52
19954,__hosted_to_gdb_lseek_flags (int f),73
19955,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
19956,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
19957,__hosted_from_gdb_errno (int32_t err),111
19958,"int gettimeofday (struct timeval *tv, void *tzvp)",31
19959,void semihost_init_sim (),24
19960,int isatty (int fd),31
19961,"off_t lseek (int fd, off_t offset, int whence)",36
19962,"int open (const char *fname, int flags, ...)",38
19963,"ssize_t read (int fd, void *buf, size_t count)",33
19964,"int _rename (const char *oldpath, const char *newpath)",35
19965,"int stat (const char *filename, struct stat *buf)",37
19966,int _system (const char *command),34
19967,time_t time (time_t *t),31
19968,int unlink (const char *path),33
19969,"ssize_t write (int fd, const void *buf, size_t count)",33
19970,void alt_irq_init ( const void* base ),77
19971,void alt_sys_init( void ),88
19972,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19973,"* copy of this software and associated documentation files (the ""Software""),  *",9
19974,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
19975,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
19976,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
19977,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19978,"* copy of this software and associated documentation files (the ""Software""),  *",9
19979,void alt_vic_irq_init (alt_vic_dev* pdev),45
19980,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19981,"* copy of this software and associated documentation files (the ""Software""),  *",9
19982,"int alt_ic_isr_register(alt_u32 ic_id,",59
19983,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19984,"* copy of this software and associated documentation files (the ""Software""),  *",9
19985,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
19986,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
19987,"* copy of this software and associated documentation files (the ""Software""),  *",9
19988,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
19989,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
19990,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
19991,void altera_nios2_gen2_irq_init(void) ,34
19992,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
19993,"* copy of this software and associated documentation files (the ""Software""),  *",9
19994,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
19995,unsigned int alt_busy_sleep (unsigned int us),52
19996,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
19997,"* copy of this software and associated documentation files (the ""Software""),  *",9
19998,"void alt_dcache_flush (void* start, alt_u32 len)",46
19999,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
20000,"* copy of this software and associated documentation files (the ""Software""),  *",9
20001,void alt_dcache_flush_all (void),41
20002,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
20003,"* copy of this software and associated documentation files (the ""Software""),  *",9
20004,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
20005,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20006,"* copy of this software and associated documentation files (the ""Software""),  *",9
20007,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
20008,ALT_SEM(alt_fd_list_lock),109
20009,int alt_dev_reg (alt_dev* dev),151
20010,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20011,"* copy of this software and associated documentation files (the ""Software""),  *",9
20012,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
20013,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20014,"* copy of this software and associated documentation files (the ""Software""),  *",9
20015,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
20016,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20017,"* copy of this software and associated documentation files (the ""Software""),  *",9
20018,alt_dma_txchan alt_dma_txchan_open (const char* name),51
20019,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20020,"* copy of this software and associated documentation files (the ""Software""),  *",9
20021,void _do_ctors(void),58
20022,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20023,"* copy of this software and associated documentation files (the ""Software""),  *",9
20024,void _do_dtors(void),58
20025,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
20026,"* copy of this software and associated documentation files (the ""Software""),  *",9
20027,alt_ecc_fatal_exception_register(alt_u32 handler),66
20028,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20029,"* copy of this software and associated documentation files (the ""Software""),  *",9
20030,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20031,"* copy of this software and associated documentation files (the ""Software""),  *",9
20032,void __env_lock ( struct _reent *_r ),43
20033,void __env_unlock ( struct _reent *_r ),51
20034,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20035,"* copy of this software and associated documentation files (the ""Software""),  *",9
20036,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20037,"* copy of this software and associated documentation files (the ""Software""),  *",9
20038,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
20039,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20040,"* copy of this software and associated documentation files (the ""Software""),  *",9
20041,void ALT_EXIT (int exit_code),52
20042,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20043,"* copy of this software and associated documentation files (the ""Software""),  *",9
20044,"int ALT_FCNTL (int file, int cmd, ...)",66
20045,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20046,"* copy of this software and associated documentation files (the ""Software""),  *",9
20047,int alt_fd_lock (alt_fd* fd),54
20048,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20049,"* copy of this software and associated documentation files (the ""Software""),  *",9
20050,int alt_fd_unlock (alt_fd* fd),52
20051,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20052,"* copy of this software and associated documentation files (the ""Software""),  *",9
20053,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
20054,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20055,"* copy of this software and associated documentation files (the ""Software""),  *",9
20056,alt_dev* alt_find_file (const char* name),54
20057,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20058,"* copy of this software and associated documentation files (the ""Software""),  *",9
20059,alt_flash_fd* alt_flash_open_dev(const char* name),49
20060,void alt_flash_close_dev(alt_flash_fd* fd),61
20061,int alt_flash_device_register( alt_flash_fd* fd),70
20062,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20063,"* copy of this software and associated documentation files (the ""Software""),  *",9
20064,int ALT_FORK (void),45
20065,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20066,"* copy of this software and associated documentation files (the ""Software""),  *",9
20067,int alt_fs_reg (alt_dev* dev),57
20068,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20069,"* copy of this software and associated documentation files (the ""Software""),  *",9
20070,alt_getchar(void),51
20071,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20072,"* copy of this software and associated documentation files (the ""Software""),  *",9
20073,int ALT_GETPID (void),43
20074,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
20075,"* copy of this software and associated documentation files (the ""Software""),  *",9
20076,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
20077,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
20078,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20079,"* copy of this software and associated documentation files (the ""Software""),  *",9
20080,int alt_get_fd (alt_dev* dev),54
20081,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
20082,"* copy of this software and associated documentation files (the ""Software""),  *",9
20083,/* The compiler inserts calls to mcount() at the start of,48
20084,static __inline__ void * mcount_allocate(unsigned int size),133
20085,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
20086,static int nios2_pcsample_init(void),218
20087,static alt_u32 nios2_pcsample(void* context),250
20088,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20089,"* copy of this software and associated documentation files (the ""Software""),  *",9
20090,"void alt_icache_flush (void* start, alt_u32 len)",42
20091,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20092,"* copy of this software and associated documentation files (the ""Software""),  *",9
20093,void alt_icache_flush_all (void),41
20094,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
20095,"* copy of this software and associated documentation files (the ""Software""),  *",9
20096,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
20097,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
20098,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
20099,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
20100,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
20101,"* copy of this software and associated documentation files (the ""Software""),  *",9
20102,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
20103,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
20104,"* copy of this software and associated documentation files (the ""Software""),  *",9
20105,alt_exception_result (*alt_instruction_exception_handler),49
20106,int alt_instruction_exception_entry (alt_u32 exception_pc),53
20107,alt_instruction_exception_entry (alt_u32 exception_pc),68
20108,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
20109,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
20110,"* copy of this software and associated documentation files (the ""Software""),  *",9
20111,void alt_instruction_exception_register (,73
20112,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
20113,"* copy of this software and associated documentation files (the ""Software""),  *",9
20114,"int ALT_IOCTL (int file, int req, void* arg)",68
20115,"int ALT_IOCTL (int file, int req, void* arg)",106
20116,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20117,"* copy of this software and associated documentation files (the ""Software""),  *",9
20118,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
20119,"void alt_io_redirect(const char* stdout_dev, ",85
20120,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
20121,"* copy of this software and associated documentation files (the ""Software""),  *",9
20122,void alt_irq_handler (void),80
20123,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
20124,"* copy of this software and associated documentation files (the ""Software""),  *",9
20125,"int alt_irq_register (alt_u32 id, ",75
20126,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20127,"* copy of this software and associated documentation files (the ""Software""),  *",9
20128,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20129,"* copy of this software and associated documentation files (the ""Software""),  *",9
20130,"int ALT_KILL (int pid, int sig)",49
20131,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20132,"* copy of this software and associated documentation files (the ""Software""),  *",9
20133,"int ALT_LINK ( char *existing, char *new)",45
20134,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
20135,"* copy of this software and associated documentation files (the ""Software""),  *",9
20136,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
20137,void alt_load (void),67
20138,"void alt_log_txchar(int c,char *base)",95
20139,"void alt_log_repchar(char c,int r,int base)",106
20140,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
20141,"int alt_log_printf_proc(const char *fmt, ... )",344
20142,alt_u32 altera_avalon_jtag_uart_report_log(void * context),364
20143,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",380
20144,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",415
20145,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",425
20146,"void alt_log_write(const void *ptr, size_t len)",441
20147,void alt_log_system_clock(),475
20148,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
20149,"* copy of this software and associated documentation files (the ""Software""),  *",9
20150,void alt_main (void),82
20151,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20152,"* copy of this software and associated documentation files (the ""Software""),  *",9
20153,void __malloc_lock ( struct _reent *_r ),42
20154,void __malloc_unlock ( struct _reent *_r ),50
20155,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20156,"* copy of this software and associated documentation files (the ""Software""),  *",9
20157,"alt_printf(const char* fmt, ... )",51
20158,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20159,"* copy of this software and associated documentation files (the ""Software""),  *",9
20160,alt_putchar(int c),50
20161,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20162,"* copy of this software and associated documentation files (the ""Software""),  *",9
20163,alt_putcharbuf(int c),58
20164,alt_putbufflush(),73
20165,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20166,"* copy of this software and associated documentation files (the ""Software""),  *",9
20167,alt_putstr(const char* str),52
20168,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20169,"* copy of this software and associated documentation files (the ""Software""),  *",9
20170,void alt_release_fd (int fd),44
20171,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
20172,"* copy of this software and associated documentation files (the ""Software""),  *",9
20173,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
20174,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
20175,"* copy of this software and associated documentation files (the ""Software""),  *",9
20176,"alt_remap_uncached(void* ptr, alt_u32 len)",49
20177,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20178,"* copy of this software and associated documentation files (the ""Software""),  *",9
20179,caddr_t ALT_SBRK (int incr),68
20180,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
20181,"* copy of this software and associated documentation files (the ""Software""),  *",9
20182,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
20183,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
20184,"* copy of this software and associated documentation files (the ""Software""),  *",9
20185,void alt_alarm_stop (alt_alarm* alarm),66
20186,void alt_tick (void),87
20187,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20188,"* copy of this software and associated documentation files (the ""Software""),  *",9
20189,clock_t ALT_TIMES (struct tms *buf),51
20190,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
20191,"* copy of this software and associated documentation files (the ""Software""),  *",9
20192,alt_uncached_free(volatile void* ptr),40
20193,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
20194,"* copy of this software and associated documentation files (the ""Software""),  *",9
20195,alt_uncached_malloc(size_t size),42
20196,int ALT_USLEEP (useconds_t us),46
20197,unsigned int ALT_USLEEP (unsigned int us),48
20198,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20199,"* copy of this software and associated documentation files (the ""Software""),  *",9
20200,int ALT_WAIT (int *status),44
20201,int close (int fd),31
20202,void __attribute__ ((noreturn)) semihost_exit (int code),24
20203,void __attribute__ ((noreturn)) _exit (int code),35
20204,"int fstat (int fd, struct stat *buf)",34
20205,__hosted_to_gdb_mode_t (mode_t m),23
20206,__hosted_to_gdb_open_flags (int f),52
20207,__hosted_to_gdb_lseek_flags (int f),73
20208,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
20209,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
20210,__hosted_from_gdb_errno (int32_t err),111
20211,"int gettimeofday (struct timeval *tv, void *tzvp)",31
20212,void semihost_init_sim (),24
20213,int isatty (int fd),31
20214,"off_t lseek (int fd, off_t offset, int whence)",36
20215,"int open (const char *fname, int flags, ...)",38
20216,"ssize_t read (int fd, void *buf, size_t count)",33
20217,"int _rename (const char *oldpath, const char *newpath)",35
20218,"int stat (const char *filename, struct stat *buf)",37
20219,int _system (const char *command),34
20220,time_t time (time_t *t),31
20221,int unlink (const char *path),33
20222,"ssize_t write (int fd, const void *buf, size_t count)",33
20223,Copyright (2018) Intel Corporation,3
20224,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
20225,void asic_send_acknowledge(){,38
20226,void asic_set_lsm_reset(){,49
20227,void asic_clear_lsm_reset(){,56
20228,"void asic_load_c2f_to_ram(alt_u32 * res_buffer, alt_u32 words_to_load, bool wr_request_toggle_required)",67
20229,void asic_init(),96
20230,int main(void),15
20231,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20232,void bead_bus_clear(const bead_bus_dev_t* bb),11
20233,void bead_bus_update(const bead_bus_dev_t* bb),20
20234,"alt_u32 bead_bus_shift(const bead_bus_dev_t*  bb,",27
20235,alt_u32 bead_bus_is_busy(const bead_bus_dev_t* bb),36
20236,void bead_bus_sample(const bead_bus_dev_t* bb),41
20237,Copyright (2018) Intel Corporation,3
20238,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
20239,static void alt_lsm_cnoc_rx_isr(void* context),218
20240,void cnoc_rx_init(),403
20241,void change_vic_entry_rx(alt_irq_context* irq_context),448
20242,void restore_vic_entry_rx(const alt_irq_context irq_context),476
20243,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20244,void cnoc_tx_init(void),11
20245,"void cnoc_tx_send_packet(alt_u32 payload_in_words, alt_u32* payload_buffer, bool use_dma)",20
20246,void cnoc_tx_irq_assert(void),51
20247,void cnoc_tx_irq_deassert(void),59
20248,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20249,void cnoc_dma_init(alt_isr_func isr),9
20250,"void cnoc_dma_transfer(const void* p_tx_buffer, alt_u32 tx_words_length)",29
20251,void cnoc_dma_clear_status(void),43
20252,Copyright (2018) Intel Corporation,3
20253,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
20254,static inline void cram_write_new_row(),38
20255,void cram_set(),64
20256,void cram_switch_voltage(cram_voltage_sel_t vsel),197
20257,alt_u32 cram_zero_check(),228
20258,void cram_clear(),339
20259,"void cram_write_request(alt_u32* payload_addr, alt_u32 payload_words)",448
20260,void cram_write_partial(alt_u32 total_frame),472
20261,void cram_write(),487
20262,void test_cram_hv_write(),559
20263,"void cram_hv_write(alt_u32 row, alt_u32 frame)",601
20264,static void cnoc_tx_complete_handler(void* context),714
20265,void cram_read_setup(bool dma_init),725
20266,void cram_unload_initialization(),766
20267,void cram_lfsr_unload_rows(alt_u32 total_rows),790
20268,void cram_lfsr_unload_rows_odd_frames(alt_u32 total_rows),824
20269,"void cram_read_lfsr_request(alt_u32* payload_addr, alt_u32 payload_words)",860
20270,void cram_read_lfsr(alt_u32 total_num_row),866
20271,"void cram_read_request(alt_u32* payload_addr, alt_u32 payload_words)",878
20272,"void cram_read_single_frame_request(alt_u32* payload_addr, alt_u32 payload_words)",903
20273,void cram_read_single_frame(),921
20274,void cram_read_all_frames(),932
20275,alt_u32 cram_read(bool use_lfsr),952
20276,static void cram_read_frame(),1036
20277,"void test_cram_hv_write_request(alt_u32* payload_addr, alt_u32 payload_words)",1068
20278,void cram_hv_dr_b_to_cram(),1097
20279,Copyright (2021) Intel Corporation,3
20280,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
20281,const sparse_frame_t* select_local_compact_mask_config(alt_u32 local_mode_id),279
20282,bool write_local_dr_frame(const sparse_frame_t * const sparse_frame),398
20283,inline uint32_t timer_snapshot(),84
20284,uint32_t timer_snapshot_dft(),100
20285,"static void dfx_cram_pwrup_bead_bus_signal_set(int update_in, int capture_in, int clr_n_in)",116
20286,"static void dfx_clk_net_bead_bus_signal_set(int update_in, int capture_in, int clr_n_in)",124
20287,"static void dfx_bias_gen_bead_bus_signal_set(int update_in, int capture_in, int clr_n_in)",132
20288,"void test_lsm_write_res_buffer(alt_u32 payload_header, alt_u32* payload_words)",140
20289,"static void shift_in_dr_value(uint32_t dr_select, uint32_t dr_word_addr, uint32_t value)",161
20290,static uint32_t get_dr_select(uint32_t dl_bit_address),192
20291,"static uint32_t get_dr_word_address(uint32_t dr_select, uint32_t dl_bit_address)",200
20292,"static uint32_t get_dl_onehot_word(uint32_t dr_select, uint32_t dl_word_addr, uint32_t dl_bit_address)",219
20293,static void lya_clear_drs(void),239
20294,"static void set_dr_segment(uint32_t dr_select, uint32_t word_address, uint32_t value)",263
20295,void bead_bus_TDclear(const bead_bus_dev_t* bb),288
20296,void bead_bus_TDpreset(const bead_bus_dev_t* bb),299
20297,void lsm_set_regscan_properties(uint32_t sector_type),307
20298,void lsm_read_labrow (uint32_t labrow),348
20299,"void process_cjtag_command(uint32_t cjtag_opcode, uint32_t cjtag_databit_length, alt_u32 * cjtag_data)",369
20300,void clear_cjtag_command_and_databit(),1654
20301,"void get_bead_bus_info(bead_bus_dev_t *dev, alt_u32 ch)",1673
20302,void shift_reversed_data(alt_32 word),1691
20303,void process_lsm_dfx_function(),1704
20304,void setup_tpowermux_opbit(uint32_t value),1736
20305,void setup_test_unload_mode(uint32_t value),1742
20306,void setup_regscan_mode(uint32_t value),1748
20307,"void setup_dr_a_b_reg_op(uint32_t dr1_b_reg, uint32_t dr1_a_reg, uint32_t dr0_b_reg, uint32_t dr0_a_reg)",1754
20308,"void setup_dr_bitline_op(uint32_t bitline_op, uint32_t bitline_w_en)",1763
20309,void process_cram_unload(uint32_t total_num_row),1772
20310,void process_cram_unload_odd_frames(uint32_t total_num_row),1781
20311,uint32_t process_cram_unload_debug(),1790
20312,"void set_crglv_crghv(uint32_t crglv_wrt_n, uint32_t crghv_n) //set_crg_hv_n, FB 328012",1829
20313,void timeout_delay_dft(uint32_t expected),1872
20314,inline void timeout_delay(uint32_t expected),1900
20315,void lsm_to_user_mode(),1926
20316,void lsm_to_user_mode_phase1(),2020
20317,void lsm_to_user_mode_phase2(),2082
20318,"void grab_PIO_request(alt_u32* payload_addr, alt_u32 payload_words)",2158
20319,"void set_PIO_request(alt_u32* payload_addr, alt_u32 payload_words)",2251
20320,void lsm_out_of_user_mode(),2306
20321,void lsm_cnoc_return(uint32_t num_of_words),2448
20322,void write_hipi(alt_u32 hipi_value),2465
20323,void write_regb_to_lsm_ram(alt_u32 dr_word),2581
20324,"void dr_to_cram_write(uint32_t clear_ar, uint32_t row_sel)",2606
20325,void td_switch_to_lv(),2670
20326,"void test_enter_user_mode_request(alt_u32* payload_addr, alt_u32 payload_words)",2685
20327,"void test_enter_user_mode_phase1_request(alt_u32* payload_addr, alt_u32 payload_words)",2691
20328,"void test_enter_user_mode_phase2_request(alt_u32* payload_addr, alt_u32 payload_words)",2697
20329,"void test_exit_user_mode_request(alt_u32* payload_addr, alt_u32 payload_words)",2703
20330,"void test_config_nfrzdrv_request(alt_u32* payload_addr, alt_u32 payload_words)",2708
20331,void config_nfrzdrv(),2714
20332,"void test_config_frzlogic_request(alt_u32* payload_addr, alt_u32 payload_words)",2725
20333,"void test_cram_s4_swizzle(alt_u32* payload_addr, alt_u32 payload_words)",2739
20334,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20335,void dlb_write_to_read_transition(void),10
20336,void dlb_read_to_write_transition(void),55
20337,"void dlb_read_mode(alt_u32 dlb_row, alt_u32 row, alt_u32 radd)",93
20338,void dlb_reset_from_any_to_write(void),162
20339,static void cnoc_tx_complete_handler(void* context),54
20340,"void eram_fuse_load_request(alt_u32* payload_addr, alt_u32 payload_words)",66
20341,void eram_fuse_load(),100
20342,"void eram_read_jtag_id(alt_u32* payload_addr, alt_u32 payload_words)",192
20343,"void eram_fuse_load_request(alt_u32* payload_addr, alt_u32 payload_words)",207
20344,void eram_fuse_load(),214
20345,"void eram_abort_request(alt_u32* payload_addr, alt_u32 payload_words)",245
20346,alt_u32 eram_zero_check(),272
20347,void eram_clear(),382
20348,"void eram_write_request(alt_u32* payload_addr, alt_u32 payload_words)",443
20349,void eram_write(),471
20350,void asic_eram_read_request(),528
20351,void eram_read_setup(),534
20352,"alt_u32 eram_read_multi(alt_u32 eram_row_end_start,alt_u32 eram_column_end_start,alt_u32 num_frames_to_read)",562
20353,"alt_u32 eram_read_td(alt_u32 frame_count, alt_u32 eram_column, alt_u32 eram_frame, alt_u32 lab_row)",593
20354,void eram_read(),625
20355,"alt_u32 eram_read_column(alt_u32 eram_frame, alt_u32 frame_count)",645
20356,static void asic_eram_select_row(alt_u32 eram_row),723
20357,static void asic_eram_deselect_row(alt_u32 eram_row),741
20358,static void asic_eram_block_read(alt_u32 eram_column),753
20359,"static void asic_eram_read_row_col(alt_u32 eram_row, alt_u32 eram_column)",813
20360,void asic_eram_read(),820
20361,void asic_eram_selective_read(),839
20362,void asic_load_from_c2f_to_ram(alt_u32 words_to_load),854
20363,static void asic_eram_block_write(alt_u32 eram_column),871
20364,"static void asic_eram_write_row_col(alt_u32 eram_row, alt_u32 eram_column)",909
20365,void asic_eram_write_setup(),917
20366,void asic_eram_sector_write(),937
20367,void asic_eram_selective_write(),957
20368,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20369,void hipi_write_new_row(),12
20370,void hipi_write_frame(),26
20371,"void hipi_write_request(alt_u32* payload_addr, alt_u32 payload_words)",84
20372,void hipi_write(void),129
20373,Copyright (2018) Intel Corporation,3
20374,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
20375,static void asic_lutram_offload_thru_c2f(),42
20376,static void asic_lutram_extract_bytes_from_frame(bool labrow_start),60
20377,static void asic_lutram_read_frames(alt_u32 current_row),154
20378,static void asic_lutram_read_row(alt_u32 current_row),240
20379,static void asic_create_load_and_image(bool labrow_start),276
20380,static void asic_align_word_order(),365
20381,"static void asic_read_modify(alt_u32 current_row, alt_u32 frame_index)",417
20382,"static void asic_write_cram_from_dr_b(alt_u32 current_row, alt_u32 frame_index)",481
20383,static void asic_lutram_write_row(alt_u32 current_row),542
20384,static void asic_lutram_load_buffer(),584
20385,void asic_lutram_read_setup(),605
20386,void asic_lutram_read_all_rows(),644
20387,void asic_lutram_selective_read(),665
20388,void asic_lutram_write_setup(),689
20389,void asic_lutram_write_all_rows(),713
20390,void asic_lutram_selective_write(),733
20391,Copyright (2018) Intel Corporation,3
20392,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
20393,static void clear_bit_atomic(alt_u32 mask),75
20394,void log_event(const char* msg),93
20395,int main(void),115
20396,void lsm_sector_properties_init(uint32_t sector_type),5
20397,void lsm_sector_properties_init(uint32_t sector_type),396
20398,Copyright (2018) Intel Corporation,3
20399,"source code (""Material"") are owned by Intel Corporation or its suppliers or",5
20400,"static void bias_gen_bead_bus_signal_set(int update_in, int capture_in, int clr_n_in)",56
20401,void configure_biasgen_usermode_bit(alt_u32 bset),69
20402,@param payload_addr Address (pointer) of payload,120
20403,"void unfreeze_routing_request(alt_u32* payload_addr, alt_u32 payload_words)",123
20404,@param payload_addr Address (pointer) of payload,133
20405,"void unfreeze_routing(alt_u32* payload_addr, alt_u32 payload_words)",136
20406,@param payload_addr Address (pointer) of payload,152
20407,"void enter_user_mode_request(alt_u32* payload_addr, alt_u32 payload_words)",155
20408,@param payload_addr Address (pointer) of payload,165
20409,"void enter_user_mode_request_phase1(alt_u32* payload_addr, alt_u32 payload_words)",168
20410,@param payload_addr Address (pointer) of payload,177
20411,"void enter_user_mode_request_phase2(alt_u32* payload_addr, alt_u32 payload_words)",180
20412,void enter_user_mode(),193
20413,alt_u32 find_lsm_position(),220
20414,void enter_user_mode_phase1(),275
20415,void enter_user_mode_phase2(),333
20416,@param payload_addr Address (pointer) of payload,356
20417,"void gpo_setup_unfreeze_request(alt_u32* payload_addr, alt_u32 payload_words)",359
20418,@param payload_addr Address (pointer) of payload,385
20419,"void post_user_mode(alt_u32* payload_addr, alt_u32 payload_words)",388
20420,void sync_post_user_mode(),397
20421,@param payload_addr Address (pointer) of payload,442
20422,"void reg_unfrz_request(alt_u32* payload_addr, alt_u32 payload_words)",445
20423,void reg_unfrz(),455
20424,@param payload_addr Address (pointer) of payload,471
20425,"void nrpi_unfrz_request(alt_u32* payload_addr, alt_u32 payload_words)",474
20426,@param payload_addr Address (pointer) of payload,486
20427,"void set_biasgen_usermode(alt_u32* payload_addr, alt_u32 payload_words)",489
20428,@param payload_addr Address (pointer) of payload,500
20429,"void c2f_unfrz_request(alt_u32* payload_addr, alt_u32 payload_words)",503
20430,@param payload_addr Address (pointer) of payload,520
20431,"void exit_user_mode_request(alt_u32* payload_addr, alt_u32 payload_words)",523
20432,@param payload_addr Address (pointer) of payload,537
20433,"void config_ctrl_reset_request(alt_u32* payload_addr, alt_u32 payload_words)",540
20434,void eram_power_up(),583
20435,void hvqk_set(),605
20436,bool dsp_long_chain_set(),630
20437,bool dsp_long_chain_clear(),662
20438,@param payload_addr Address (pointer) of payload,695
20439,"void switch_to_lv(alt_u32* payload_addr, alt_u32 payload_words)",698
20440,"void clear_biasgen_usermode(alt_u32* payload_addr, alt_u32 payload_words)",712
20441,@param payload_addr Address (pointer) of payload,730
20442,"void nrpi_frz_request(alt_u32* payload_addr, alt_u32 payload_words)",733
20443,@param payload_addr Address (pointer) of payload,747
20444,"void logic_frz_request(alt_u32* payload_addr, alt_u32 payload_words)",750
20445,void logic_frz(void),755
20446,@param payload_addr Address (pointer) of payload,782
20447,"void drv_frz_request(alt_u32* payload_addr, alt_u32 payload_words)",785
20448,@param payload_addr Address (pointer) of payload,806
20449,"void reg_frz_request(alt_u32* payload_addr, alt_u32 payload_words)",809
20450,@param payload_addr Address (pointer) of payload,830
20451,"void hipi_write_one_request(alt_u32* payload_addr, alt_u32 payload_words)",833
20452,void sync_hipi_write_one(),856
20453,@param payload_addr Address (pointer) of payload,898
20454,"void c2f_frz_request(alt_u32* payload_addr, alt_u32 payload_words)",901
20455,"static void reset_always(alt_u32 * buffer, alt_u32 offset, alt_u32 length)",919
20456,"static alt_u32 get_word_mask(const alt_u32 current_word, const alt_u32 start_bit, const alt_u32 seed_mask)",959
20457,"static void reset_unless_all_1(alt_u32 * buffer, alt_u32 offset, alt_u32 length)",983
20458,static void apply_clock_network_phase_mask(alt_u32 rf),1046
20459,@param payload_addr Address (pointer) of payload,1106
20460,"void clock_network_freeze_request(alt_u32* payload_addr, alt_u32 payload_words)",1109
20461,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20462,/* INTEL CONFIDENTIAL Copyright (2018) Intel Corporation,1
20463,"The source code contained or described herein and all documents related to the source code (""Material"") are owned by Intel Corporation or its suppliers or licensors. Title to the Material remains with Intel Corporation or its ",3
20464,static void pr_read_modify() {,25
20465,static void pr_write() {,57
20466,"void cram_partial_reconfig_request(alt_u32* payload_addr, alt_u32 payload_words) {",66
20467,static void partial_reconfig_receive_frame() {,140
20468,bool cram_partial_reconfig() {,166
20469,"void eram_partial_reconfig_request(alt_u32* payload_addr, alt_u32 payload_words) {",227
20470,void eram_partial_reconfig() {,257
20471,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20472,static void cnoc_tx_complete_handler(void* context),30
20473,void regScan_init(void),64
20474,void regScan_int_init(alt_isr_func isr),69
20475,static void regScan_int_handler(void* context),76
20476,static void regScan_int_handler(void* context),184
20477,void init_regScan(int ret_path_sel_value),225
20478,"void init_regScan(int ret_path_sel_value, int cntr_sel_0_value, int cntr_sel_1_value, int dsp_type_input)",262
20479,void toggle_regScan(void),305
20480,void enter_emu_write(void),329
20481,void exit_emu_write(void),415
20482,void enter_emu_clear(void),477
20483,void enter_emu_sample(void),549
20484,void exit_emu(void),651
20485,void enter_regScan(uint32_t regScan_mode),691
20486,void enter_regScan_normal(void),833
20487,void enter_regScan_atpg(void),843
20488,void enter_regScan(void),852
20489,void debug_regScan(int size),961
20490,void copy_regScan(void),984
20491,void copy_regScan(void),1000
20492,void exit_regScan(void),1015
20493,void regScan_freezeLogic(unsigned int logic),1115
20494,void regScan_freezeLogic(unsigned int logic),1130
20495,"void smoke_test_regScan(unsigned int mask_data, unsigned int inverting_pattern, unsigned int count)",1143
20496,void regscan_redundancy_sel(uint32_t value),1170
20497,Copyright (2018) Intel Corporation,3
20498,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
20499,"static void cram_pwrup_bead_bus_signal_set(int update_in, int capture_in, int clr_n_in)",104
20500,void sector_sw_init(),116
20501,"void sector_deassert_force_vccl(alt_u32* payload_addr, alt_u32 payload_words)",167
20502,void sector_hw_pwrup(),175
20503,"void sector_startup(alt_u32* payload_addr, alt_u32 payload_words)",252
20504,"void sector_redundancy_request(alt_u32* payload_addr, alt_u32 payload_words)",267
20505,void sector_redundancy_load(),312
20506,"void sector_biasgen_load_request(alt_u32* payload_addr, alt_u32 payload_words)",333
20507,"void sector_test_options(alt_u32* payload_addr, alt_u32 payload_words)",346
20508,void sector_biasgen_load(),355
20509,void sync_sector_deassert_force_vccl(),376
20510,"void sector_skip_row(alt_u32* payload_addr, alt_u32 payload_words)",396
20511,"void sector_options_bits(alt_u32* payload_addr, alt_u32 payload_words)",410
20512,"void sector_select_delay_set(alt_u32* payload_addr, alt_u32 payload_words)",446
20513,alt_u32 sector_adjust_for_bad_row(alt_u32 row_addr),468
20514,alt_u32 sector_convert_for_bad_row(alt_u32 row_addr),482
20515,"void sector_status_inquiry(alt_u32* payload_addr, alt_u32 payload_words)",506
20516,"void sector_irq_mask(alt_u32* payload_addr, alt_u32 payload_words)",532
20517,"void sector_warm_reset_warning(alt_u32* payload_addr, alt_u32 payload_words)",544
20518,"void sector_interrupt_assert(alt_u32 mask, bool assert)",588
20519,"void sector_clear_request(alt_u32* payload_addr, alt_u32 payload_words)",606
20520,"void sector_zero_check_request(alt_u32* payload_addr, alt_u32 payload_words)",619
20521,"void sector_user_reg_clear_request(alt_u32* payload_addr, alt_u32 payload_words)",631
20522,"alt_u32 serial_ctrl_transfer(const serial_chan_dev_t*    chan,",4
20523,alt_u32 serial_ctrl_channel_is_busy(const serial_chan_dev_t* chan),97
20524,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20525,"static void clk_net_bead_bus_signal_set(int update_in, int capture_in, int clr_n_in)",18
20526,"static void bias_gen_bead_bus_signal_set(int update_in, int capture_in, int clr_n_in)",26
20527,"void clk_network_beadbus_shift_update(const alt_u32 bits_len, const alt_u32* p_buffer)",35
20528,"void serial_packet_handler(alt_u32* payload_addr, alt_u32 payload_words)",51
20529,void serial_packet_configure(void),56
20530,void serial_packet_biasgen_send(),83
20531,void serial_packet_clk_network_read(),101
20532,void serial_packet_clk_network_send(),117
20533,void serial_packet_clk_network_clear(),122
20534,"void serial_packet_clk_network_apply_request(alt_u32* payload_addr, alt_u32 payload_words)",130
20535,void serial_packet_clk_network_apply(),135
20536,Copyright (2019) Intel Corporation,3
20537,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
20538,"static void seu_trace(alt_u32 event, alt_u32 details)",78
20539,static void cnoc_tx_complete_handler(void* context),126
20540,static alt_u32 frame_mapping(alt_u32 frame),140
20541,static alt_u32 reverse32(alt_u32 v),163
20542,static void init_reverse_offsets(void),181
20543,"static void reverse_words(alt_u32 store_offset, alt_u32 *p_word, alt_u32 words_count)",249
20544,"static void seu_read_cram_frame(alt_u32 row, alt_u32 frame)",263
20545,static void seu_parity_reorder(alt_u32 sub_array),296
20546,static void seu_parity_store_to_ram(alt_u32 sub_array),326
20547,"static void find_error_bits(alt_u32 parity, alt_u32* error_bits, alt_u32* bit_err_offset_1st, alt_u32 *bit_err_offset_2nd,",401
20548,"static void find_error_bits(alt_u32 parity, alt_u32* error_bits, alt_u32* bit_err_offset_1st, alt_u32 *bit_err_offset_2nd)",441
20549,@param word_offset word_offset relative to CheckWDL_StartAdd. (need to convert to Store_StartAddOffset),468
20550,"static void seu_adjust_error_bit_offset(alt_u32 word_offset, alt_u32 check_offset, alt_u32 *bit_location)",472
20551,"static alt_u32 seu_locate_error(alt_u32 sub_array, DOUBLE_BIT_LOCATION_t *location_ptr)",513
20552,static void seu_locate_error(alt_u32 sub_array),641
20553,@brief This function finds the logical separation between two x coordinates (or frame offsets).,752
20554,"static bool seu_find_logical_separation_hdae(alt_u32 x1, alt_u32 x2)",758
20555,"static alt_u32 seu_is_valid_single_bit_error(alt_u32 index1, alt_u32 index2, DOUBLE_BIT_ERR_DESC_t* combi_ptr, alt_u32 sub_array)",789
20556,@brief This function checks if the double bit error is correctable(HDAE) or not,830
20557,"static bool seu_is_correctable_double_bit_error(alt_u32 xy_error_1, alt_u32 xy_error_2, alt_u32 sub_array)",836
20558,static bool seu_process_double_bit_error(alt_u32 sub_array),867
20559,"static void seu_map_to_row_frame(alt_u32 sub_array, alt_u32 error_x, alt_u32 error_y, alt_u32 *row, alt_u32 *frame)",927
20560,static void seu_correct_error(alt_u32 sub_array),974
20561,static void seu_correct_error(alt_u32 sub_array),1212
20562,static SEU_ERROR_t seu_detect_errors(alt_u32 sub_array),1427
20563,static SEU_ERROR_t seu_detect_errors(alt_u32 sub_array),1589
20564,static void seu_calc_sub_array_parity(alt_u32 sub_array),1707
20565,static void seu_detect_report_update(alt_u32 subarray),1788
20566,static void seu_correct_report_update(alt_u32 subarray),1823
20567,static void seu_generate_parity_sig(void),1836
20568,void seu_init(void),1903
20569,"void seu_init_request(alt_u32* payload_addr, alt_u32 payload_words)",1945
20570,"void seu_detect_request(alt_u32* payload_addr, alt_u32 payload_words)",1962
20571,"void seu_correct_request(alt_u32* payload_addr, alt_u32 payload_words)",1975
20572,void seu_detect(void),1985
20573,void seu_correct(void),2146
20574,"static alt_u32 copy_seu_detect_report(alt_u32 subarray, alt_u32 response_word_index)",2169
20575,"static alt_u32 copy_seu_correct_report(alt_u32 subarray, alt_u32 response_word_index)",2209
20576,bool seu_send_status(void),2236
20577,void seu_sync_timer(),2316
20578,"void seu_cram_bit_invert_request(alt_u32* payload_addr, alt_u32 payload_words)",2335
20579,void seu_cram_bit_invert(),2413
20580,bool seu_get_inject_err_flag(),2487
20581,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20582,static void alt_lsm_tmr0_isr(void* context),15
20583,void timer0_init(void),37
20584,void timer0_start(bool bstart),56
20585,void timer0_read(alt_u32 * timer),63
20586,void timer0_period(alt_u32 period),73
20587,static void alt_lsm_tmr1_isr(void* context),79
20588,void timer1_init(void),98
20589,void timer1_start(bool bstart),117
20590,void timer1_period(alt_u32 period),124
20591,Copyright (2018) Intel Corporation,3
20592,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
20593,static void user_register_zero_check_setup(),36
20594,static bool user_register_zero_check_read(),122
20595,static void user_register_zero_check_exit(),215
20596,static void user_register_clear_shift(),297
20597,bool user_register_clear_only(),316
20598,bool user_register_clear_and_zero_check(),344
20599,void asic_user_register_read_request(),377
20600,void asic_user_register_read(),486
20601,void asic_user_register_read_exit(),502
20602,void asic_user_register_write_request(),567
20603,void asic_user_register_write(),637
20604,void asic_user_register_write_exit(),714
20605,void alt_irq_init ( const void* base ),82
20606,void alt_sys_init( void ),93
20607,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
20608,"* copy of this software and associated documentation files (the ""Software""),  *",9
20609,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
20610,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
20611,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
20612,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
20613,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
20614,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
20615,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
20616,int alt_avalon_dma_space (alt_dma_txchan dma),355
20617,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
20618,static void alt_avalon_dma_irq (void* context),446
20619,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
20620,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
20621,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
20622,"* copy of this software and associated documentation files (the ""Software""),  *",9
20623,"int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,",39
20624,"int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)",65
20625,"int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)",70
20626,int altera_avalon_fifo_read_almostfull(alt_u32 address),76
20627,int altera_avalon_fifo_read_almostempty(alt_u32 address),81
20628,"int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)",86
20629,int altera_avalon_fifo_read_level(alt_u32 address),91
20630,"int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)",96
20631,"int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)",105
20632,"int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)",114
20633,"int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)",123
20634,"int altera_avalon_fifo_write_fifo(alt_u32 write_address,",132
20635,"int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)",147
20636,"int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)",161
20637,"int altera_avalon_fifo_write_other_info(alt_u32 write_address,",170
20638,int altera_avalon_fifo_read_other_info(alt_u32 read_address),185
20639,int altera_avalon_fifo_read_backpressure (alt_u32 read_address){,190
20640,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20641,"* copy of this software and associated documentation files (the ""Software""),  *",9
20642,static void alt_avalon_timer_sc_irq (void* base),54
20643,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
20644,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
20645,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20646,"* copy of this software and associated documentation files (the ""Software""),  *",9
20647,int alt_timestamp_start(void),64
20648,alt_timestamp_type alt_timestamp(void),100
20649,alt_u32 alt_timestamp_freq(void),138
20650,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20651,"* copy of this software and associated documentation files (the ""Software""),  *",9
20652,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
20653,"* copy of this software and associated documentation files (the ""Software""),  *",9
20654,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
20655,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
20656,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
20657,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
20658,"* copy of this software and associated documentation files (the ""Software""),  *",9
20659,void alt_vic_irq_init (alt_vic_dev* pdev),45
20660,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
20661,"* copy of this software and associated documentation files (the ""Software""),  *",9
20662,"int alt_ic_isr_register(alt_u32 ic_id,",59
20663,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
20664,"* copy of this software and associated documentation files (the ""Software""),  *",9
20665,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
20666,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
20667,"* copy of this software and associated documentation files (the ""Software""),  *",9
20668,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
20669,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
20670,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
20671,void altera_nios2_gen2_irq_init(void) ,34
20672,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
20673,"* copy of this software and associated documentation files (the ""Software""),  *",9
20674,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
20675,unsigned int alt_busy_sleep (unsigned int us),52
20676,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20677,"* copy of this software and associated documentation files (the ""Software""),  *",9
20678,int ALT_CLOSE (int fildes),42
20679,int ALT_CLOSE (int fildes),64
20680,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
20681,"* copy of this software and associated documentation files (the ""Software""),  *",9
20682,"void alt_dcache_flush (void* start, alt_u32 len)",46
20683,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
20684,"* copy of this software and associated documentation files (the ""Software""),  *",9
20685,void alt_dcache_flush_all (void),41
20686,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
20687,"* copy of this software and associated documentation files (the ""Software""),  *",9
20688,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
20689,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20690,"* copy of this software and associated documentation files (the ""Software""),  *",9
20691,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
20692,ALT_SEM(alt_fd_list_lock),109
20693,int alt_dev_reg (alt_dev* dev),151
20694,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20695,"* copy of this software and associated documentation files (the ""Software""),  *",9
20696,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
20697,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20698,"* copy of this software and associated documentation files (the ""Software""),  *",9
20699,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
20700,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20701,"* copy of this software and associated documentation files (the ""Software""),  *",9
20702,alt_dma_txchan alt_dma_txchan_open (const char* name),51
20703,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20704,"* copy of this software and associated documentation files (the ""Software""),  *",9
20705,void _do_ctors(void),58
20706,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20707,"* copy of this software and associated documentation files (the ""Software""),  *",9
20708,void _do_dtors(void),58
20709,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
20710,"* copy of this software and associated documentation files (the ""Software""),  *",9
20711,alt_ecc_fatal_exception_register(alt_u32 handler),66
20712,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20713,"* copy of this software and associated documentation files (the ""Software""),  *",9
20714,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20715,"* copy of this software and associated documentation files (the ""Software""),  *",9
20716,void __env_lock ( struct _reent *_r ),43
20717,void __env_unlock ( struct _reent *_r ),51
20718,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20719,"* copy of this software and associated documentation files (the ""Software""),  *",9
20720,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20721,"* copy of this software and associated documentation files (the ""Software""),  *",9
20722,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
20723,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20724,"* copy of this software and associated documentation files (the ""Software""),  *",9
20725,void ALT_EXIT (int exit_code),52
20726,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20727,"* copy of this software and associated documentation files (the ""Software""),  *",9
20728,"int ALT_FCNTL (int file, int cmd, ...)",66
20729,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20730,"* copy of this software and associated documentation files (the ""Software""),  *",9
20731,int alt_fd_lock (alt_fd* fd),54
20732,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20733,"* copy of this software and associated documentation files (the ""Software""),  *",9
20734,int alt_fd_unlock (alt_fd* fd),52
20735,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20736,"* copy of this software and associated documentation files (the ""Software""),  *",9
20737,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
20738,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20739,"* copy of this software and associated documentation files (the ""Software""),  *",9
20740,alt_dev* alt_find_file (const char* name),54
20741,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20742,"* copy of this software and associated documentation files (the ""Software""),  *",9
20743,alt_flash_fd* alt_flash_open_dev(const char* name),49
20744,void alt_flash_close_dev(alt_flash_fd* fd),61
20745,int alt_flash_device_register( alt_flash_fd* fd),70
20746,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20747,"* copy of this software and associated documentation files (the ""Software""),  *",9
20748,int ALT_FORK (void),45
20749,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
20750,"* copy of this software and associated documentation files (the ""Software""),  *",9
20751,"int ALT_FSTAT (int file, struct stat *st)",63
20752,"int ALT_FSTAT (int file, struct stat *st)",93
20753,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20754,"* copy of this software and associated documentation files (the ""Software""),  *",9
20755,int alt_fs_reg (alt_dev* dev),57
20756,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20757,"* copy of this software and associated documentation files (the ""Software""),  *",9
20758,alt_getchar(void),51
20759,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20760,"* copy of this software and associated documentation files (the ""Software""),  *",9
20761,int ALT_GETPID (void),43
20762,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
20763,"* copy of this software and associated documentation files (the ""Software""),  *",9
20764,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
20765,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
20766,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20767,"* copy of this software and associated documentation files (the ""Software""),  *",9
20768,int alt_get_fd (alt_dev* dev),54
20769,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
20770,"* copy of this software and associated documentation files (the ""Software""),  *",9
20771,/* The compiler inserts calls to mcount() at the start of,48
20772,static __inline__ void * mcount_allocate(unsigned int size),133
20773,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
20774,static int nios2_pcsample_init(void),218
20775,static alt_u32 nios2_pcsample(void* context),250
20776,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20777,"* copy of this software and associated documentation files (the ""Software""),  *",9
20778,"void alt_icache_flush (void* start, alt_u32 len)",42
20779,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20780,"* copy of this software and associated documentation files (the ""Software""),  *",9
20781,void alt_icache_flush_all (void),41
20782,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
20783,"* copy of this software and associated documentation files (the ""Software""),  *",9
20784,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
20785,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
20786,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
20787,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
20788,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
20789,"* copy of this software and associated documentation files (the ""Software""),  *",9
20790,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
20791,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
20792,"* copy of this software and associated documentation files (the ""Software""),  *",9
20793,alt_exception_result (*alt_instruction_exception_handler),49
20794,int alt_instruction_exception_entry (alt_u32 exception_pc),53
20795,alt_instruction_exception_entry (alt_u32 exception_pc),68
20796,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
20797,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
20798,"* copy of this software and associated documentation files (the ""Software""),  *",9
20799,void alt_instruction_exception_register (,73
20800,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
20801,"* copy of this software and associated documentation files (the ""Software""),  *",9
20802,"int ALT_IOCTL (int file, int req, void* arg)",68
20803,"int ALT_IOCTL (int file, int req, void* arg)",106
20804,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20805,"* copy of this software and associated documentation files (the ""Software""),  *",9
20806,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
20807,"void alt_io_redirect(const char* stdout_dev, ",85
20808,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
20809,"* copy of this software and associated documentation files (the ""Software""),  *",9
20810,void alt_irq_handler (void),80
20811,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
20812,"* copy of this software and associated documentation files (the ""Software""),  *",9
20813,"int alt_irq_register (alt_u32 id, ",75
20814,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
20815,"* copy of this software and associated documentation files (the ""Software""),  *",9
20816,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
20817,"* copy of this software and associated documentation files (the ""Software""),  *",9
20818,int ALT_ISATTY (int file),50
20819,int ALT_ISATTY (int file),84
20820,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20821,"* copy of this software and associated documentation files (the ""Software""),  *",9
20822,"int ALT_KILL (int pid, int sig)",49
20823,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20824,"* copy of this software and associated documentation files (the ""Software""),  *",9
20825,"int ALT_LINK ( char *existing, char *new)",45
20826,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
20827,"* copy of this software and associated documentation files (the ""Software""),  *",9
20828,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
20829,void alt_load (void),67
20830,"void alt_log_txchar(int c,char *base)",95
20831,"void alt_log_repchar(char c,int r,int base)",106
20832,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
20833,"int alt_log_printf_proc(const char *fmt, ... )",344
20834,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
20835,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
20836,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
20837,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
20838,"void alt_log_write(const void *ptr, size_t len)",440
20839,void alt_log_system_clock(),474
20840,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
20841,"* copy of this software and associated documentation files (the ""Software""),  *",9
20842,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
20843,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
20844,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
20845,"* copy of this software and associated documentation files (the ""Software""),  *",9
20846,void alt_main (void),82
20847,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20848,"* copy of this software and associated documentation files (the ""Software""),  *",9
20849,void __malloc_lock ( struct _reent *_r ),42
20850,void __malloc_unlock ( struct _reent *_r ),50
20851,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20852,"* copy of this software and associated documentation files (the ""Software""),  *",9
20853,"int ALT_OPEN (const char* file, int flags, int mode)",41
20854,static int alt_file_locked (alt_fd* fd),64
20855,"int ALT_OPEN (const char* file, int flags, int mode)",105
20856,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20857,"* copy of this software and associated documentation files (the ""Software""),  *",9
20858,"alt_printf(const char* fmt, ... )",51
20859,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20860,"* copy of this software and associated documentation files (the ""Software""),  *",9
20861,alt_putchar(int c),50
20862,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20863,"* copy of this software and associated documentation files (the ""Software""),  *",9
20864,alt_putcharbuf(int c),58
20865,alt_putbufflush(),73
20866,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
20867,"* copy of this software and associated documentation files (the ""Software""),  *",9
20868,alt_putstr(const char* str),52
20869,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
20870,"* copy of this software and associated documentation files (the ""Software""),  *",9
20871,"int ALT_READ (int file, void *ptr, size_t len)",58
20872,"int ALT_READ (int file, void *ptr, size_t len)",82
20873,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20874,"* copy of this software and associated documentation files (the ""Software""),  *",9
20875,void alt_release_fd (int fd),44
20876,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
20877,"* copy of this software and associated documentation files (the ""Software""),  *",9
20878,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
20879,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
20880,"* copy of this software and associated documentation files (the ""Software""),  *",9
20881,"alt_remap_uncached(void* ptr, alt_u32 len)",49
20882,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20883,"* copy of this software and associated documentation files (the ""Software""),  *",9
20884,"int ALT_RENAME (char *existing, char *new)",45
20885,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20886,"* copy of this software and associated documentation files (the ""Software""),  *",9
20887,caddr_t ALT_SBRK (int incr),68
20888,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
20889,"* copy of this software and associated documentation files (the ""Software""),  *",9
20890,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
20891,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20892,"* copy of this software and associated documentation files (the ""Software""),  *",9
20893,"int ALT_STAT (const char *file, struct stat *st)",49
20894,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
20895,"* copy of this software and associated documentation files (the ""Software""),  *",9
20896,void alt_alarm_stop (alt_alarm* alarm),66
20897,void alt_tick (void),87
20898,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20899,"* copy of this software and associated documentation files (the ""Software""),  *",9
20900,clock_t ALT_TIMES (struct tms *buf),51
20901,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
20902,"* copy of this software and associated documentation files (the ""Software""),  *",9
20903,alt_uncached_free(volatile void* ptr),40
20904,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
20905,"* copy of this software and associated documentation files (the ""Software""),  *",9
20906,alt_uncached_malloc(size_t size),42
20907,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20908,"* copy of this software and associated documentation files (the ""Software""),  *",9
20909,int ALT_UNLINK (char *name),45
20910,int ALT_USLEEP (useconds_t us),46
20911,unsigned int ALT_USLEEP (unsigned int us),48
20912,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
20913,"* copy of this software and associated documentation files (the ""Software""),  *",9
20914,int ALT_WAIT (int *status),44
20915,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
20916,"* copy of this software and associated documentation files (the ""Software""),  *",9
20917,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
20918,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
20919,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
20920,void process_crete_dfx_function(),74
20921,"void process_cjtag_command(uint32_t cjtag_opcode, uint32_t cjtag_databit_length, alt_u32 * cjtag_data)",96
20922,void clear_cjtag_command_and_databit(),214
20923,"uint32_t prepare_bridge_data_unload(uint32_t number_channel, uint32_t data_size)",233
20924,"void prepare_bridge_data_load(uint32_t number_channel, uint32_t data_size)",262
20925,void iocsr_freeze(uint32_t ssm),299
20926,void iocsr_unfreeze(uint32_t ssm),317
20927,"void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet, uint32_t *dest_addr)",337
20928,"void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet, uint32_t *dest_addr)",352
20929,"int read_efuse(alt_u32 row, alt_u32 col, alt_u32* efuse_data_hi, alt_u32* efuse_data_low)",403
20930,void crete_ssm_cnoc_return(uint32_t num_of_words),445
20931,void test_cnoc_return(),461
20932,void create_ssm_freeze(),475
20933,void create_ssm_unfreeze(),482
20934,void IOCSR_Write(),489
20935,*        Copyright (c) 2015 Altera Corporation,12
20936,void cr_cnoc_rx_init(void),63
20937,void cr_cnoc_rx_init(),71
20938,void cr_iocsr_areg6_init (),127
20939,void cr_iocsr_areg6_init(),135
20940,static void cr_cnoc_rx_isr(void* context),149
20941,static void cr_cnoc_rx_isr(void* context),157
20942,void supervisory_control_loop(void),314
20943,void supervisory_control_loop(void),322
20944,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",338
20945,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",347
20946,*        Copyright (c) 2015 Altera Corporation,12
20947,int main(void),61
20948,void check_chip_id(),115
20949,bool check_chip_id(crete_type_t* crete_type),119
20950,void notify_aib_crete_init(),161
20951,void notify_aib_crete_init(),165
20952,void cr_peripheral_init(),177
20953,void cr_peripheral_init(),181
20954,*        Copyright (c) 2015 Altera Corporation,12
20955,status_code_t cnoc_msi_cmd_req_handler_init(),141
20956,status_code_t cnoc_msi_cmd_req_handler_init(),150
20957,"status_code_t crete_calcode_lib_download(const uint32_t *cmd_packet, uint32_t payload_words)",164
20958,"static status_code_t internal_hip_avmm_write_handler(const uint32_t *cmd_packet, uint32_t payload_words)",190
20959,"static status_code_t internal_hip_avmm_write_handler(const uint32_t *cmd_packet, uint32_t payload_words)",195
20960,void internal_configure_crete_aux_osc  (uint8_t enable),234
20961,static void internal_configure_crete_aux_osc(uint8_t enable),240
20962,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",263
20963,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",268
20964,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",321
20965,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",326
20966,"status_code_t pio_release_cre_xcvr_handler(const uint32_t *cmd_packet, uint32_t payload_words)",361
20967,"status_code_t pio_release_cre_xcvr_handler(const uint32_t *cmd_packet, uint32_t payload_words)",366
20968,void do_calibration(),419
20969,void do_calibration(),423
20970,"status_code_t pio_release_cre_hip_handler(const uint32_t *cmd_packet, uint32_t payload_words)",438
20971,"status_code_t pio_release_cre_hip_handler(const uint32_t *cmd_packet, uint32_t payload_words)",443
20972,"status_code_t crete_iocsr_rdy_to_rdy_dly_deassert_delay(const uint32_t *cmd_packet, uint32_t payload_words)",463
20973,"status_code_t crete_iocsr_rdy_to_rdy_dly_deassert_delay(const uint32_t *cmd_packet, uint32_t payload_words)",468
20974,"status_code_t pio_assert_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",480
20975,"status_code_t pio_assert_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",486
20976,"status_code_t pio_release_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",522
20977,"status_code_t pio_clear_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",527
20978,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",552
20979,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",557
20980,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",575
20981,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",580
20982,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",602
20983,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",607
20984,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",626
20985,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",631
20986,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",668
20987,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",673
20988,"status_code_t register_get_handler(const uint32_t *cmd_packet, uint32_t payload_words)",697
20989,"status_code_t register_get_handler(const uint32_t *cmd_packet, uint32_t payload_words)",702
20990,"status_code_t register_set_handler(const uint32_t *cmd_packet, uint32_t payload_words)",727
20991,"status_code_t register_set_handler(const uint32_t *cmd_packet, uint32_t payload_words)",732
20992,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",755
20993,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",760
20994,"static status_code_t crete_conf_req(const uint32_t *cmd_packet, uint32_t payload_words)",798
20995,"static status_code_t crete_conf_req(const uint32_t *cmd_packet, uint32_t payload_words)",808
20996,static void prepare_calibration_clock_setting(),842
20997,static void prepare_calibration_clock_setting(),849
20998,"static status_code_t verify_hip_programming_handler(const uint32_t *cmd_packet, uint32_t payload_words)",900
20999,"static status_code_t verify_hip_programming_handler(const uint32_t *cmd_packet, uint32_t payload_words)",906
21000,"static status_code_t read_efuse_handler(const uint32_t *cmd_packet, uint32_t payload_words)",953
21001,"static status_code_t read_efuse_handler(const uint32_t *cmd_packet, uint32_t payload_words)",959
21002,"static status_code_t verify_iocsr_unload_chains(const uint32_t *cmd_packet, uint32_t payload_words)",1002
21003,"static status_code_t verify_iocsr_unload_chains(const uint32_t *cmd_packet, uint32_t payload_words)",1008
21004,*        Copyright (c) 2015 Altera Corporation,12
21005,((credits_transferred < credits_available) ? 1 : 0 ),64
21006,void hip2c_avalon_fifo_init(),130
21007,static void hip2c_avalon_fifo_init(),139
21008,uint8_t crete_cvp_data_available(),156
21009,static inline uint8_t crete_cvp_data_available(),164
21010,uint8_t crete_cvp_data_fifo_empty (),178
21011,static inline uint8_t crete_cvp_data_fifo_empty(),186
21012,uint8_t crete_cvp_last_credit (),198
21013,static inline uint8_t crete_cvp_last_credit(),206
21014,bool cvp_config_asserted(),215
21015,static inline bool cvp_config_asserted(),223
21016,static void hip2c_bridge_out_isr(),233
21017,static void hip2c_bridge_out_isr(void* context),241
21018,static void cvp_dma_isr(),272
21019,static void cvp_dma_isr(),280
21020,static (void) exe_state_to_pause (void),334
21021,static void exe_state_to_pause (),342
21022,static (void) exe_state_to_wait (void),374
21023,static void exe_state_to_wait (),382
21024,static (void) exe_state_to_start_transfer (void),399
21025,static void exe_state_to_start_transfer (),407
21026,static (void) exe_state_to_data_available (void),425
21027,static void exe_state_to_data_available (),433
21028,static (void) exe_state_init_to_wait (void),455
21029,static void exe_state_init_to_wait (),463
21030,static void dma_context_wiped (),488
21031,static void dma_context_wiped (),497
21032,static (void) exe_state_uninit to init(void),515
21033,static void exe_state_uninit_to_init(),523
21034,static (void) exe_state_host_terminate (void),568
21035,static void exe_state_host_terminate(),576
21036,static (void) exe_state_cleanup (void),595
21037,static void exe_state_cleanup(),603
21038,static void cvp_init(),690
21039,static void cvp_init(),698
21040,"static void cvp_start_transfer(uint32_t address, uint32_t payload)",732
21041,"static void cvp_start_transfer(uint32_t address, uint32_t payload)",743
21042,"status_code_t crete_cvp_version_handler(const uint32_t *cmd_packet, uint32_t payload_words)",809
21043,"status_code_t crete_cvp_version_handler(const uint32_t *cmd_packet, uint32_t payload_words)",813
21044,"status_code_t crete_cvp_assert_deassert_handler(const uint32_t *cmd_packet, uint32_t payload_words)",828
21045,"status_code_t crete_cvp_assert_deassert_handler(const uint32_t *cmd_packet, uint32_t payload_words)",832
21046,"status_code_t crete_cvp_aib_credits_handler(const uint32_t *cmd_packet, uint32_t payload_words)",847
21047,"status_code_t crete_cvp_aib_credits_handler(const uint32_t *cmd_packet, uint32_t payload_words)",851
21048,void crete_cvp_cre_credits_handler(uint32_t credits),882
21049,void  crete_cvp_cre_credits_handler(uint32_t credits),887
21050,void flush_cvp_buffer (),972
21051,static uint32_t flush_cvp_buffer (),980
21052,"status_code_t crete_cvp_done_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1028
21053,"status_code_t crete_cvp_done_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1032
21054,void cvp_context_restore (),1131
21055,void crete_cvp_context_restore(),1139
21056,uint8_t crete_cvp_context_restore_on_going(),1158
21057,uint8_t crete_cvp_context_restore_on_going(),1168
21058,"status_code_t crete_cvp_buf_org_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1187
21059,"status_code_t crete_cvp_buf_org_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1191
21060,"status_code_t crete_cvp_error_to_host_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1217
21061,"status_code_t crete_cvp_error_to_host_handler(const uint32_t *cmd_packet, uint32_t payload_words){",1221
21062,void crete_cvp_cnoc_tx_lock(),1234
21063,void crete_cvp_cnoc_tx_lock(),1240
21064,void crete_cvp_cnoc_tx_unlock(),1288
21065,void crete_cvp_cnoc_tx_unlock(),1293
21066,void cvp_state_machine(),1312
21067,void cvp_state_machine(),1328
21068,static inline void update_host_credit_count(uint32_t credits){,1372
21069,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",2
21070,void process_crete_dfx_function(),74
21071,"void process_cjtag_command(uint32_t cjtag_opcode, uint32_t cjtag_databit_length, alt_u32 * cjtag_data)",96
21072,void clear_cjtag_command_and_databit(),214
21073,"uint32_t prepare_bridge_data_unload(uint32_t number_channel, uint32_t data_size)",233
21074,"void prepare_bridge_data_load(uint32_t number_channel, uint32_t data_size)",262
21075,void iocsr_freeze(uint32_t ssm),299
21076,void iocsr_unfreeze(uint32_t ssm),317
21077,"void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet, uint32_t *dest_addr)",337
21078,"void iocsr_bridge_unload(iocsr_brdg_dev_t *iocsr_brdg_dev, uint32_t *iocsr_packet, uint32_t *dest_addr)",352
21079,void crete_ssm_cnoc_return(uint32_t num_of_words),405
21080,void test_cnoc_return(),421
21081,void create_ssm_freeze(),435
21082,void create_ssm_unfreeze(),442
21083,void IOCSR_Write(),449
21084,"int read_efuse(uint32_t row, uint32_t col, uint32_t* efuse_data_hi, uint32_t* efuse_data_low)",6
21085,*        Copyright (c) 2015 Altera Corporation,12
21086,void cal_init (),143
21087,void cal_init_calibrate (),212
21088,uint8_t cal_context_save (),232
21089,void cal_context_restore (),277
21090,static void cal_recalibrate (),314
21091,static void cal_calibrate (),340
21092,void cal_enter_user_mode (),364
21093,void cal_exit_user_mode (),393
21094,void fw_get_capabilities (fw_capabilities_t *caps),427
21095,uint8_t fw_watchdog_is_expired(),450
21096,void fw_watchdog_expired_action()	,460
21097,void fw_system_interrupts_disable(void** context),472
21098,void fw_system_interrupts_enable(void* context),491
21099,void fw_enable_temp_sensor(),512
21100,void fw_disable_temp_sensor(),529
21101,uint32_t fw_get_temp_reading(uint32_t *p_adc_value),546
21102,uint8_t fw_timer_is_expired(uint32_t *p_counter_value),559
21103,"uint32_t defer_to_calcode_yield(uint32_t new_yield_state, cnt_cmd_req_handler_t new_pause_function){",600
21104,static uint32_t fw_terminate(){,618
21105,static uint32_t fw_yield(){,625
21106,void cal_state_machine(),645
21107,void cal_state_machine(),654
21108,*        Copyright (c) 2015 Altera Corporation,12
21109,void cr_cnoc_rx_init(void),72
21110,void cr_cnoc_rx_init(),80
21111,void cr_iocsr_areg6_init (),146
21112,void cr_iocsr_areg6_init(),154
21113,static void cr_cnoc_rx_isr(void* context),168
21114,static void cr_cnoc_rx_isr(void* context),176
21115,void supervisory_control_loop(void),407
21116,void supervisory_control_loop(void),415
21117,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",431
21118,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",440
21119,bool is_main_ring_buf_empty(),471
21120,*        Copyright (c) 2015 Altera Corporation,12
21121,void cr_cnoc_tx_init(void),37
21122,void cr_cnoc_tx_init(),45
21123,"void cr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",71
21124,"void cr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",83
21125,"void send_msg_2_aib(const uint32_t *cmd_packet, uint32_t payload_words)",109
21126,"void send_msg_2_aib(uint32_t *cmd_packet, uint32_t payload_words)",117
21127,*        Copyright (c) 2015 Altera Corporation,12
21128,void cr_iocsr_bridge_write(),72
21129,void cr_iocsr_bridge_write(),80
21130,void cr_iocsr_redundancy_write(),119
21131,"void cr_iocsr_redundancy_write(uint32_t ch_num, uint32_t ubump_num)",127
21132,uint32_t verify_iocsr_packet_data(uint32_t *iocsr_packet),145
21133,uint32_t verify_iocsr_packet_data(uint32_t *iocsr_packet),160
21134,void cr_iocsr_bridge_master_data_unload (IOCSR_Master_Unload_t* context),218
21135,uint8_t cr_iocsr_bridge_master_data_unload (IOCSR_Master_Unload_t* context),226
21136,*        Copyright (c) 2015 Altera Corporation,12
21137,static int32_t convert_temp_adc_value_to_celsius24m8f(uint32_t adc_value) {,67
21138,"status_code_t crete_enable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",74
21139,"status_code_t crete_enable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",88
21140,"status_code_t crete_disable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",122
21141,"status_code_t crete_disable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",137
21142,void crete_enter_user_mode(),180
21143,void crete_exit_user_mode(),194
21144,uint8_t crete_get_user_mode_state(),207
21145,int32_t crete_temp_sensor_read(uint32_t *p_adc_value),218
21146,void cr_temp_sensor_state_machine(),264
21147,void cr_temp_sensor_state_machine(),272
21148,*        Copyright (c) 2015 Altera Corporation,12
21149,int main(void),71
21150,uint32_t get_chip_id(),147
21151,uint32_t get_chip_id(){,151
21152,void check_chip_id(),157
21153,bool check_chip_id(crete_type_t* crete_type),161
21154,void notify_aib_crete_init(),225
21155,void notify_aib_crete_init(),229
21156,void cr_peripheral_init(),241
21157,void cr_peripheral_init(),245
21158,void cal_aux_comp(void),16
21159,void cal_aux_fix(uint8_t ruc_vcc),7
21160,"static void set_cdr_vcobias(cdr_cal_type cal_type, alt_u8 vco_bias)",33
21161,"static alt_u8 cal_cdr(alt_u8 pcie_first_run, cdr_cal_type cal_type, alt_u8 ruc_vcc_parameter)",60
21162,"alt_u8 pm_uc_cdr(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",238
21163,static void skew_up_current(),32
21164,static void sweep_vref(),97
21165,"alt_u8 pm_uc_cp_cdr(alt_u8 addr_i, alt_u8 first_time, alt_u8 * cdr_cp_current_intent)",119
21166,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),142
21167,static alt_u8 read_sa_vout(alt_u8 samples),26
21168,static alt_u8 dcd_saoc_vref(void),57
21169,static void set_res(alt_u8 res_setting),85
21170,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",93
21171,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",126
21172,static alt_u8 precharge_wait_sample(channel_type active_aux),147
21173,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",165
21174,static void set_vref(alt_u8 setting),220
21175,static alt_u8 vref_cal(channel_type active_aux),235
21176,static alt_u8 dcd_cp_cal(void),269
21177,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",328
21178,static alt_16 sm6_to_tc16(alt_u8 in),341
21179,static alt_u8 tc16_to_sm6(alt_16 in),357
21180,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,372
21181,static alt_u8 mutate_dn_current(alt_u8 samples),394
21182,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),444
21183,static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples),508
21184,alt_u8 calc_mcgb_addr(alt_u8 addr_i),560
21185,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",593
21186,"void write_setting (alt_u8 read_index, alt_u8 sa_value)",23
21187,alt_u8 read_sa (alt_u8 read_index),44
21188,void cal_dfe_sa(void),66
21189,void pm_uc_dfe_odi(void),133
21190,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),144
21191,extern void dynamic_lcpll(uint8_t); // from cal_dynamic_pll.c,8
21192,extern void dynamic_lcpll_undo(uint8_t); // from cal_dynamic_pll.c,9
21193,extern void dynamic_fpll(uint8_t); // from cal_dynamic_pll.c,10
21194,extern void dynamic_fpll_undo(uint8_t); // from cal_dynamic_pll.c,11
21195,void dynamic_lcpll(alt_u8 addr_i),29
21196,void dynamic_lcpll_undo(alt_u8 addr_i),50
21197,void dynamic_fpll(alt_u8 addr_i),71
21198,void dynamic_fpll_undo(alt_u8 addr_i),92
21199,static void set_vctrl_reset_point(alt_u8 control_id),34
21200,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
21201,static alt_u8 check_fpll_counters(void),107
21202,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
21203,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
21204,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
21205,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
21206,"void pm_uc_vreg_lcvco(void) // now callable from ""do_cal_filtered()""",18
21207,static alt_u8 abs_alt8(alt_8 in),79
21208,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
21209,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
21210,"void write_attr(alt_u16 attr, alt_u8 data)",30
21211,alt_u8 read_attr(alt_u16 attr),35
21212,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",40
21213,"alt_u8 read_aux(channel_type x, alt_u16 attr)",45
21214,void timer_wait(alt_u32 wait_count)  ,52
21215,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",72
21216,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",79
21217,void init_ana_atb(channel_type target_aux),86
21218,void open_anaatb_atb0(void),108
21219,void close_anaatb_atb0(void),127
21220,void open_anaatb_atb1(void),143
21221,void close_anaatb_atb1(void),163
21222,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",180
21223,alt_u8 find_anaatb_vref(void),216
21224,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",262
21225,void pm_uc_vcm(alt_u8 ruc_vcc_parameter) ,24
21226,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",13
21227,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",58
21228,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",100
21229,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",130
21230,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",164
21231,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",213
21232,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",260
21233,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",299
21234,"static void write_addr(uint8_t addr_i, uint8_t offset, uint8_t data)",14
21235,"static uint8_t read_addr(uint8_t addr_i, uint8_t offset)",19
21236,static uint8_t mask_gen(uint16_t attr),24
21237,static uint8_t offset_gen(uint16_t attr),49
21238,static uint8_t shift_gen(uint16_t attr),57
21239,"void attr_wr(uint8_t addr_i, uint16_t attr, uint8_t data)",66
21240,"uint8_t attr_rd(uint8_t addr_i, uint16_t attr)",84
21241,"void write_pcs_base(uint8_t addr_i, uint8_t data)",102
21242,uint8_t read_pcs_base(uint8_t addr_i),112
21243,uint32_t slave_is_pcie(uint8_t addr_i),122
21244,*        Copyright (c) 2015 Altera Corporation,12
21245,static void arbiter_return(uint8_t x),69
21246,extern void cal_aux_fix(alt_u8); // cal_aux_fix.c,76
21247,extern void cal_aux_comp(void); // cal_aux_comp.c,77
21248,extern uint32_t uc_has_arbiter(uint8_t); // from misc.c,79
21249,extern void arbiter_return(uint8_t); // from misc.c,80
21250,extern void cal_busy_clear(uint8_t); // from misc.c,81
21251,extern void cal_busy_set(uint8_t); // from misc.c,82
21252,extern void util_aux_ssmclk(uint8_t); // util_aux_ssmclk.c,84
21253,extern void util_dfe_freeze(uint8_t); // util_dfe_freeze.c,86
21254,extern void dynamic_lcpll(uint8_t); // from cal_dynamic_pll.c,88
21255,extern void dynamic_lcpll_undo(uint8_t); // from cal_dynamic_pll.c,89
21256,extern void dynamic_fpll(uint8_t); // from cal_dynamic_pll.c,90
21257,extern void dynamic_fpll_undo(uint8_t); // from cal_dynamic_pll.c,91
21258,extern void pm_uc_vreg_lcvco(void); // cal_lcpll.c,107
21259,extern void pm_uc_vha(uint8_t); // util_vha.c,109
21260,"static	void    hssi_set_state (struct hssi_context *, const uint8_t *, uint8_t); ",134
21261,void update_rev_id(),149
21262,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",216
21263,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",233
21264,void hssi_get_capabilities (hssi_capabilities_t *capabilities),302
21265,"void hssi_get_capabilities (struct hssi_context* ptr_cc, hssi_capabilities_t *capabilities)",311
21266,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",332
21267,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",351
21268,void fw_debug_if_init (const hssi_crete_fw_debug_intf_t *interface),389
21269,"void fw_debug_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_debug_intf_t *interface)",402
21270,void hssi_interrupt_enable (struct hssi_context* ptr_cc),432
21271,void hssi_interrupt_enable (struct hssi_context* ptr_cc),441
21272,void hssi_interrupt_disable (struct hssi_context* ptr_cc),460
21273,void hssi_interrupt_disable (struct hssi_context* ptr_cc),469
21274,void fw_watchdog_running (struct hssi_context* ptr_cc),488
21275,void fw_watchdog_running (struct hssi_context* ptr_cc),498
21276,void fw_watchdog_stopped (struct hssi_context* ptr_cc),521
21277,void fw_watchdog_stopped (struct hssi_context* ptr_cc),530
21278,uint8_t hssi_get_version(struct hssi_context* ptr_cc),554
21279,uint8_t hssi_get_version(struct hssi_context* ptr_cc),564
21280,void hssi_enter_user_mode (struct hssi_context* ptr_cc),578
21281,void hssi_enter_user_mode (struct hssi_context* ptr_cc),587
21282,void hssi_exit_user_mode (struct hssi_context* ptr_cc),607
21283,void hssi_exit_user_mode (struct hssi_context* ptr_cc),616
21284,"const uint8_t * hssi_get_state(struct hssi_context *ptr_cc, uint8_t* context_bytes)",633
21285,"const uint8_t* hssi_get_state(struct hssi_context *ptr_cc, uint8_t *p_context_bytes) ",646
21286,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",685
21287,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",703
21288,void hssi_quit (struct hssi_context *ptr_cc),753
21289,void hssi_quit (struct hssi_context *ptr_cc),762
21290,uint8_t hssi_scan (struct hssi_context* ptr_cc),774
21291,"uint32_t compute_cr(struct hssi_context * p_cc, uint8_t addr_i)",789
21292,uint8_t hssi_scan(struct hssi_context * p_cc),921
21293,"uint8_t hssi_cal (struct hssi_context* ptr_cc, hssi_cal_param_t hssi_cal_param)",964
21294,static alt_u8 get_vcc_bits(void),990
21295,"static uint32_t cal_do_filtered(struct hssi_context * p_cc, uint32_t filter, uint32_t * mcgb_run_status, hssi_cal_param_t hssi_cal_param)",1007
21296,"static void clknet_calibration_backend(struct hssi_context * p_cc, uint32_t force)",1271
21297,static void clknet_calibration(struct hssi_context * p_cc),1310
21298,static void process_clknet_recal(struct hssi_context * p_cc),1315
21299,"uint8_t hssi_cal(struct hssi_context * p_cc, hssi_cal_param_t hssi_cal_param)",1320
21300,void timer_wait(uint32_t time) // accepts time in 0.01 us increments,1360
21301,alt_u32 uc_has_arbiter(alt_u8 addr_i),12
21302,void arbiter_return(alt_u8 addr_i),20
21303,void cal_busy_clear(alt_u8 addr_i),29
21304,void cal_busy_set(alt_u8 addr_i),38
21305,extern void util_aux_ssmclk(uint8_t); // util_aux_ssmclk.c,7
21306,void util_aux_ssmclk(uint8_t bit),15
21307,void util_dfe_freeze(uint8_t addr_i),15
21308,static uint16_t convert_format(uint8_t old[] ),13
21309,void pm_uc_vha(uint8_t addr_i),39
21310,void cal_aux_fix(uint8_t ruc_vcc),7
21311,"uint8_t write_NM_32b (uint32_t data_32b, int *NM_count)",40
21312,static uint32_t ckvco_cmpt_design_frequency(uint8_t addr_i),54
21313,static uint32_t ckvco_get_atb_voltage(void),115
21314,static uint32_t ckvco_sample_ctrl_voltage(uint8_t addr_i),134
21315,"static int32_t ckvco_measure_dist(uint32_t x, uint32_t y)",150
21316,"static uint32_t ckvco_cmpt_vco_frequency(uint32_t vco_count, uint32_t ref_count, uint32_t design_freq)",158
21317,"double ckvco_cmpt_target_df_flt(uint32_t f_cen, uint32_t vctrl_hi, uint32_t vctrl_lo)",186
21318,"int32_t ckvco_cmpt_target_df_fxp(uint32_t f_cen, uint32_t vctrl_hi, uint32_t vctrl_lo)",214
21319,"static uint32_t ckvco_check_one_dyn(uint8_t addr_i, uint8_t ruc_vcc, uint8_t dyn, uint32_t design_freq)",318
21320,"static uint8_t ckvco_recal_fix(uint8_t addr_i, uint32_t f_cen)",447
21321,"write_NM_32b(refcnt_12b,&NM_cnt);                           // 199-202 ",517
21322,"write_NM_32b(vcocnt_12b,&NM_cnt);                           // 203-206 ",518
21323,"write_NM_32b(delta_fix_cal,&NM_cnt);                        // 208-211 ",521
21324,"write_NM_32b(delta_fix_temp,&NM_cnt);                       // 212-215",522
21325,"void cal_kvco(uint8_t addr_i, uint8_t ruc_vcc)",538
21326,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual, alt_u8 first_run); // from misc.c",15
21327,"extern void cal_kvco(uint8_t addr_i, uint8_t ruc_vcc); // from cal_cdr_kvco.c",16
21328,uint8_t fix_read(uint8_t pcie_flag),18
21329,"void fix_write(uint8_t pcie_flag, uint8_t fix)",36
21330,uint8_t reset_counters(uint8_t first_run),50
21331,"static void read_counters_8b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",77
21332,"void read_counters_12b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",99
21333,"static uint32_t vco_too_fast(uint8_t pcie_flag, uint8_t fix, uint8_t first_run)",124
21334,"static uint32_t generic_binary(uint8_t init_hi, uint8_t init_lo, uint8_t flag_pcie, uint8_t first_run)",139
21335,"uint8_t cal_cdr(alt_u8 pcie_first_run, uint8_t pcie_flag, uint8_t first_run)",173
21336,"alt_u8 pm_uc_cdr_new(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter, alt_u8 first_run)",199
21337,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual, alt_u8 first_run); // from misc.c",8
21338,static void skew_up_current(),36
21339,static void sweep_vref(),106
21340,"alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent, alt_u8 *bSaveSettings, alt_u8 first_run)",134
21341,"int32_t read_oc_coef(alt_u8 addr_i, alt_u8 index)",34
21342,"int32_t pm_pudsbk_ucf_shift_with_rounding(int32_t d_in, uint32_t num_shf)",64
21343,"void pm_pudsbk_updatecoef_new_code_correction(uint32_t ratio_type, int32_t temp_0, int32_t temp_1, ",83
21344,"void pm_pudsbk_updatecoef_new_code_direct(uint32_t fuse_bkg_temp, int32_t temp_0, int32_t temp_i, ",108
21345,"uint32_t pm_pudsbk_ucf_extract_nbit_from_2_words(uint32_t d_lo, uint32_t d_hi, uint32_t pos, uint32_t nb)",186
21346,"void pm_pudsbk_addri_div_6(uint32_t addr_i, uint32_t *addr_d6_rmd, uint32_t *addr_d6_quo)",218
21347,"void pm_pudsbk_ucf_read_fuse_4_oc_info(alt_u8 addr_i, int32_t *oc_info) ",231
21348,"void pm_pudsbk_updatecoef_fuse(alt_u8 addr_i, int32_t temp_0, int32_t temp_1, int32_t *coef_in, ",318
21349,"void pm_pudsbk_ucf_read_6a6b6c_4_oc_info(alt_u8 addr_i, int32_t *oc_info) ",352
21350,"void pm_pudsbk_updatecoef_6a6b6c(alt_u8 addr_i, int32_t temp_0, int32_t temp_1, int32_t *coef_in, ",391
21351,uint32_t pm_pudsbk_is_gt_channel(alt_u8 addr_i),427
21352,"void pm_pudsbk_update_coef(alt_u8 crete_rev, alt_u8 fuse_oc_written, alt_u8 addr_i, int32_t temp_0, ",438
21353,"void pm_pudsbk_write_oc_coef_progress(alt_u8 addr_i, alt_u8 index, alt_8 coef_0, alt_8 coef_1)",481
21354,"void pm_updsbk_read_4data_sa_oc(alt_u8 addr_i, alt_u8 *oc_coef)",511
21355,uint32_t pm_pudsbk_chk_if_ctleonly_ctleh1(uint32_t addr_i),526
21356,"void pm_uc_data_sa_background(alt_u8 addr_i, alt_u8 first_run)",537
21357,"void pm_pudsbk_chk_if_update_temperature(struct hssi_context *p_cc, uint8_t *flag_update_temp)",605
21358,uint32_t pm_pudsbk_chk_if_only_background_or_odi(uint32_t cal_info),616
21359,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual, alt_u8 first_run); // from misc.c",12
21360,static alt_u16 abs_16(alt_16 x),43
21361,static alt_u8 read_sa_vout(alt_u8 samples),51
21362,alt_u8 dcd_saoc_vref(alt_u8 *cross_point),92
21363,static void set_res(alt_u8 res_setting),123
21364,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",131
21365,static alt_u8 precharge_wait_sample(channel_type active_aux),161
21366,"static alt_u8 check_flip(channel_type active_aux, alt_u8 is_downcurrent)",185
21367,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",193
21368,static void set_vref(alt_u8 setting),248
21369,alt_u8 dcd_cp_cal(void),262
21370,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,316
21371,static alt_u8 mutate_dn_current(alt_u8 samples),343
21372,alt_16 div4_roundup(alt_16 in)  // round-up in magnitude,392
21373,"alt_u8 dcd_screening(alt_16 code[], alt_u8 cal_error[], alt_u8 diff_thr)",408
21374,alt_u8 dcd_loop_binary(alt_u8 samples),460
21375,"alt_u8 dcd_loop_linear(alt_u8 samples, alt_u8 bPCIe)",542
21376,alt_u8 calc_mcgb_addr(alt_u8 addr_i),651
21377,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode, alt_u8 first_run)",684
21378,extern int32_t get_current_temp(uint32_t *temp_coef);             // from hssi_top.c,12
21379,extern uint32_t uc_has_arbiter(uint8_t);        // from misc.c,13
21380,extern void arbiter_return(uint8_t);            // from misc.c,14
21381,extern uint16_t pm_uc_vha(uint8_t addr_i);      // from util_vha.c,15
21382,"void caldbg_top(uint32_t addr_i, uint32_t call_id, uint32_t size)",29
21383,uint32_t caldbg_read_rqt(uint32_t addr_i),177
21384,void caldbg_clear_rqt(uint32_t addr_i) ,188
21385,uint32_t caldbg_read_cmd(uint32_t addr_i),199
21386,uint32_t caldbg_read_src(uint32_t addr_i),213
21387,void caldbg_write_nm_dprio_ip(uint32_t addr_i),230
21388,"void caldbg_write_nm_prob(uint32_t size, uint32_t idx_reset, uint32_t flag_ignore_limit) ",255
21389,void caldbg_write_fix_data(uint32_t type),282
21390,void caldbg_write_end_flag(),312
21391,void caldbg_update_nm_datasize(uint32_t size_in) {,330
21392,uint32_t caldbg_read_nm_datasize() {,338
21393,void caldbg_write_nm_datasize(uint32_t size) {,345
21394,uint32_t caldbg_detect_ip_type(uint32_t addr_i),351
21395,void caldbg_clear_niosmem(uint32_t flag_power_on) ,360
21396,"void caldbg_top(uint32_t addr_i, uint32_t call_id, uint32_t size) {",375
21397,void caldbg_clear_niosmem(uint32_t flag_power_on) ,382
21398,void caldbg_write_nm_crc() ,396
21399,void caldbg_write_nm_temperature() ,402
21400,void caldbg_write_cnt_acc(uint16_t cnt_acc) ,408
21401,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual, alt_u8 first_run); // from misc.c",24
21402,"extern alt_u8 read_fuse_octrim(alt_u8, alt_u8); // from misc.c",25
21403,"extern alt_16 sm_to_tc16(alt_u8 in, alt_u8 N); // from misc.c",26
21404,"extern alt_u8 tc16_to_sm(alt_16 in, alt_u8 N); // from misc.c",27
21405,Target Device: Crete ND (aka Crete2),35
21406,11/4/2016   TM  SA screening bit is set when OC exceeds MAX_SA_DFE_SCREEN (24) value excluding ODI SA,141
21407,"void write_oc_coef( alt_u8 addr_i, alt_u8 index, alt_8 coef)",212
21408,"alt_u8 read_oc ( alt_u8 addr_i, alt_u8 index, alt_u8 is_sign )",250
21409,"void read_sa(uint32_t type, uint32_t num_reads, uint32_t addr_i, uint32_t grp_idx, ",284
21410,"alt_u8 signmag6b_diff4b (alt_u8 j3, alt_u8 j2) {",360
21411,"alt_u8 signmag6b_diff5b (alt_u8 j3, alt_u8 j2) {",396
21412,"void cal_dfe_sa(alt_u8 addr_i, alt_u8 td_mode, alt_u8 flag_pcie, alt_u8 td_fast) ",430
21413,"void cal_dfe_sa_onetime_scan(alt_u8 addr_i, alt_u8 num_read, alt_u32 grp_type, alt_u32 dir_type)",468
21414,"void cal_dfe_sa_user(alt_u8 addr_i, alt_u8 flag_pcie)",519
21415,void cal_dfe_sa_td_fast(alt_u8 addr_i),532
21416,void cal_dfe_sa_td_slow(alt_u8 addr_i) {,539
21417,"int32_t caldfesa_intpl_dist(uint32_t d0, uint32_t d1, int32_t coef_0, int32_t coef_1) { ",720
21418,"void set_dasa_oc_coef_to_max(uint32_t addr_i, uint32_t grp_idx)",740
21419,"void cal_dfe_sa_onedir(uint32_t dir, uint32_t num_reads, alt_u8 addr_i, alt_16 *ar_oc_coef, ",771
21420,"alt_u8 RxAFE_OC_14G(alt_u8 oc_7, alt_u8 oc_15, alt_u8 oc_15diff, alt_u8 RL)",1052
21421,"alt_u8 RxAFE_OC_5G(alt_u8 oc_7, alt_u8 oc_15, alt_u8 oc_15diff, alt_u8 RL)",1090
21422,"alt_u8 calculate_oc (alt_u8 addr_i, alt_u8 live)",1130
21423,void pm_uc_tia_livetraffic(alt_u8 addr_i),1237
21424,"void pm_uc_dfe_odi(alt_u8 addr_i, alt_u8 td_mode, alt_u8 flag_pcie, alt_u8 td_fast, alt_u8 first_run)",1288
21425,extern void dynamic_lcpll(uint8_t); // from cal_dynamic_pll.c,9
21426,extern void dynamic_lcpll_undo(uint8_t); // from cal_dynamic_pll.c,10
21427,extern void dynamic_fpll(uint8_t); // from cal_dynamic_pll.c,11
21428,extern void dynamic_fpll_undo(uint8_t); // from cal_dynamic_pll.c,12
21429,extern void dynamic_cmu(uint8_t); // from cal_dynamic_pll.c,13
21430,extern void dynamic_cmu_undo(uint8_t); // from cal_dynamic_pll.c,14
21431,void dynamic_lcpll(alt_u8 addr_i),31
21432,void dynamic_lcpll_undo(alt_u8 addr_i),52
21433,void dynamic_fpll(alt_u8 addr_i),73
21434,void dynamic_fpll_undo(alt_u8 addr_i),94
21435,void dynamic_cmu(alt_u8 addr_i),115
21436,"void dynamic_cmu_undo(alt_u8 addr_i, alt_u32 cdr_clk_en_orig)",145
21437,static void set_vctrl_reset_point(alt_u8 control_id),36
21438,"static void write_fix(alt_u8 control_id, alt_u8 fix)",83
21439,static alt_u8 check_fpll_counters(void),108
21440,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",140
21441,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",169
21442,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",184
21443,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",244
21444,"void pm_uc_vreg_lcvco(void) // now callable from ""do_cal_filtered()""",28
21445,static alt_u8 abs_alt8(alt_8 in),88
21446,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",96
21447,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",117
21448,"void write_attr(alt_u16 attr, alt_u8 data)",22
21449,alt_u8 read_attr(alt_u16 attr),27
21450,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",32
21451,"alt_u8 read_aux(channel_type x, alt_u16 attr)",37
21452,void timer_wait(alt_u32 wait_count)  ,44
21453,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",64
21454,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",71
21455,void init_ana_atb(channel_type target_aux),78
21456,void open_anaatb_atb0(void),100
21457,void close_anaatb_atb0(void),129
21458,void open_anaatb_atb1(void),156
21459,void close_anaatb_atb1(void),186
21460,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",213
21461,alt_u8 find_anaatb_vref(void),249
21462,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",296
21463,alt_u8 get_pi_code( alt_u8 pi_phase ),42
21464,void pm_uc_odi_pi( alt_u8 addr_i ),71
21465,"static void set_ctle_dac_magn(alt_u8 addr_i, alt_u8 value)",21
21466,"static void set_ctle_dac_sign(alt_u8 addr_i, alt_u8 value)",27
21467,"void cal_tia(alt_u8 addr_i, alt_u8 td_ctle_mode)",33
21468,"void cal_dac_scan_onedir(uint32_t type, uint32_t dir, uint32_t num_reads, alt_u8 addr_i, alt_16 *ar_dac_coef, ",23
21469,"void read_sa(uint32_t type, uint32_t num_reads, uint32_t addr_i, uint32_t grp_idx, ",25
21470,"int32_t caldfesa_intpl_dist(uint32_t d0, uint32_t d1, int32_t coef_0, int32_t coef_1); ",27
21471,"void write_tia_dac_coef(alt_u8 addr_i, int32_t coef)",31
21472,void cal_tia_scan(alt_u8 addr_i) ,45
21473,"void cal_dac_scan_onedir(uint32_t type, uint32_t dir, uint32_t num_reads, alt_u8 addr_i, alt_16 *ar_dac_coef, ",161
21474,void pm_uc_vcm(alt_u8 ruc_vcc_parameter),44
21475,"void cal_dac_scan_onedir(uint32_t type, uint32_t dir, uint32_t num_reads, alt_u8 addr_i, alt_16 *ar_dac_coef, ",15
21476,"void read_sa(uint32_t type, uint32_t num_reads, uint32_t addr_i, uint32_t sa_index, ",18
21477,"int32_t caldfesa_intpl_dist(uint32_t d0, uint32_t d1, int32_t coef_0, int32_t coef_1); ",20
21478,void cal_vga(alt_u8 addr_i) ,30
21479,"void write_vga_dac_coef(alt_u8 addr_i, int32_t coef)",138
21480,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",16
21481,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",62
21482,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",115
21483,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",128
21484,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",162
21485,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",216
21486,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",264
21487,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",307
21488,"static void write_cdr_vreg( alt_u8 addr_i, alt_u8 vreg )",347
21489,"void pm_uc_vreg_cdr(alt_u8 addr_i, alt_u8 ruc_vcc)",354
21490,"static void write_addr(uint8_t addr_i, uint8_t offset, uint8_t data)",15
21491,"static uint8_t read_addr(uint8_t addr_i, uint8_t offset)",20
21492,static uint8_t mask_gen(uint16_t attr),25
21493,static uint8_t offset_gen(uint16_t attr),50
21494,static uint8_t shift_gen(uint16_t attr),58
21495,"void attr_wr(uint8_t addr_i, uint16_t attr, uint8_t data)",67
21496,"uint8_t attr_rd(uint8_t addr_i, uint16_t attr)",95
21497,"void write_pcs_base(uint8_t addr_i, uint8_t data)",113
21498,uint8_t read_pcs_base(uint8_t addr_i),123
21499,uint32_t slave_is_pcie(uint8_t addr_i),133
21500,extern void arbiter_return(uint8_t); // from misc.c,47
21501,extern void cal_aux_fix(alt_u8);            // cal_aux_fix.c,50
21502,extern void update_trim_pio();              // cal_aux_fix.c,51
21503,extern uint32_t uc_has_arbiter(uint8_t);    // from misc.c,53
21504,extern void cal_busy_clear(uint8_t);        // from misc.c,54
21505,extern void cal_busy_set(uint8_t);          // from misc.c,55
21506,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual, alt_u8 first_run); // from misc.c",58
21507,extern void util_aux_ssmclk(uint8_t);       // util_aux_ssmclk.c,60
21508,extern void dynamic_lcpll(uint8_t);         // from cal_dynamic_pll.c,62
21509,extern void dynamic_lcpll_undo(uint8_t);    // from cal_dynamic_pll.c,63
21510,extern void dynamic_fpll(uint8_t);          // from cal_dynamic_pll.c,64
21511,extern void dynamic_fpll_undo(uint8_t);     // from cal_dynamic_pll.c,65
21512,extern void dynamic_cmu(uint8_t);           // from cal_dynamic_pll.c,66
21513,"extern void dynamic_cmu_undo(uint8_t, alt_u32 cdr_clk_en0); // from cal_dynamic_pll.c",67
21514,"extern void read_fuse_cretever(alt_u8 *crete_type, alt_u8 *crete_rev);          ",70
21515,extern alt_u8 read_fuse_oc_written(); ,71
21516,extern alt_u8 read_fuse_ctle_rf(); ,72
21517,"extern alt_u8 pm_uc_cdr_new(alt_u8, alt_u8, alt_u8, alt_u8); // from cal_cdr_new.c",84
21518,extern void pm_uc_odi_pi(alt_u8);           // from cal_odi_pi.c,86
21519,extern void pm_uc_tia_livetraffic(alt_u8);  // from cal_odi_pi.c,87
21520,extern void pm_uc_vreg_lcvco(void); // cal_lcpll.c,95
21521,"extern void pm_uc_vreg_cdr(alt_u8, alt_u8); // cal_vreg.c",96
21522,extern void pm_uc_vha(uint8_t); // util_vha.c,97
21523,void set_odi_sa_code(uint32_t addr_i); // misc.c,102
21524,"void pm_uc_data_sa_background(alt_u8 addr_i, alt_u8 first_run); ",105
21525,"void            hssi_set_state (struct hssi_context *, const uint8_t *, uint8_t); ",139
21526,"static void     hssi_set_state (struct hssi_context *, const uint8_t *, uint8_t); ",155
21527,void update_cal_time(alt_u32 t),164
21528,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",249
21529,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",266
21530,void hssi_get_capabilities (hssi_capabilities_t *capabilities),341
21531,"void hssi_get_capabilities (struct hssi_context* ptr_cc, hssi_capabilities_t *capabilities)",350
21532,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",371
21533,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",390
21534,void fw_debug_if_init (const hssi_crete_fw_debug_intf_t *interface),437
21535,"void fw_debug_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_debug_intf_t *interface)",450
21536,void hssi_interrupt_enable (struct hssi_context* ptr_cc),480
21537,void hssi_interrupt_enable (struct hssi_context* ptr_cc),489
21538,void hssi_interrupt_disable (struct hssi_context* ptr_cc),508
21539,void hssi_interrupt_disable (struct hssi_context* ptr_cc),517
21540,void fw_watchdog_running (struct hssi_context* ptr_cc),536
21541,void fw_watchdog_running (struct hssi_context* ptr_cc),546
21542,void fw_watchdog_stopped (struct hssi_context* ptr_cc),569
21543,void fw_watchdog_stopped (struct hssi_context* ptr_cc),578
21544,uint8_t hssi_get_version(struct hssi_context* ptr_cc),602
21545,uint8_t hssi_get_version(struct hssi_context* ptr_cc),612
21546,void hssi_enter_user_mode (struct hssi_context* ptr_cc),626
21547,void hssi_enter_user_mode (struct hssi_context* ptr_cc),635
21548,void hssi_exit_user_mode (struct hssi_context* ptr_cc),655
21549,void hssi_exit_user_mode (struct hssi_context* ptr_cc),664
21550,"const uint8_t * hssi_get_state(struct hssi_context *ptr_cc, uint8_t* context_bytes)",681
21551,"const uint8_t* hssi_get_state(struct hssi_context *ptr_cc, uint8_t *p_context_bytes) ",694
21552,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",733
21553,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",751
21554,void hssi_quit (struct hssi_context *ptr_cc),804
21555,void hssi_quit (struct hssi_context *ptr_cc),813
21556,uint8_t hssi_scan (struct hssi_context* ptr_cc),825
21557,"uint32_t compute_cr(struct hssi_context * p_cc, uint8_t addr_i)",840
21558,uint8_t hssi_scan(struct hssi_context * p_cc),1015
21559,"uint8_t hssi_cal (struct hssi_context* ptr_cc, hssi_cal_param_t hssi_cal_param)",1058
21560,static alt_u8 get_vcc_bits(void),1084
21561,uint32_t caldofiltered_done(uint32_t rt_val),1101
21562,"static uint32_t cal_do_filtered(struct hssi_context * p_cc, uint32_t filter, uint32_t * mcgb_run_status, hssi_cal_param_t hssi_cal_param)",1109
21563,"static void clknet_calibration_backend(struct hssi_context * p_cc, uint32_t force)",1607
21564,static void clknet_calibration(struct hssi_context * p_cc),1646
21565,static void process_clknet_recal(struct hssi_context * p_cc),1651
21566,"uint8_t hssical_done(uint8_t rt_val, uint8_t *flag_update_temp)",1656
21567,"uint8_t hssi_cal(struct hssi_context * p_cc, hssi_cal_param_t hssi_cal_param)",1679
21568,void timer_wait(alt_u32 time) // accepts time in 0.01 us increments,1765
21569,int32_t get_current_temp(uint32_t *temp_coef),1776
21570,void timer_start_nb(uint32_t wait_count) ,1814
21571,uint32_t timer_read(),1836
21572,"void read_efuse(uint32_t row, uint32_t col, uint32_t *efuse_data_hi, uint32_t *efuse_data_low)",1860
21573,alt_u32 uc_has_arbiter(alt_u8 addr_i),39
21574,void arbiter_return(alt_u8 addr_i),47
21575,void cal_busy_clear(alt_u8 addr_i),56
21576,void cal_busy_set(alt_u8 addr_i),65
21577,void chk_term_res(),82
21578,void set_aux_term_res(),103
21579,void update_trim_pio(),119
21580,"void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bReset, alt_u8 bManual, alt_u8 first_run)",167
21581,"void CRSSM_trace(uint32_t key, uint32_t line)",195
21582,"void read_fuse_keyinfo(alt_u8 *crete_type, alt_u8 *crete_rev, alt_u8 *pofid, alt_u8 *ulvt_t2, alt_u8 *elvt_t2)",216
21583,alt_u8 read_fuse_oc_written(),247
21584,alt_u8 read_fuse_background_method(),262
21585,alt_u8 read_fuse_background_fuse_temp(),277
21586,"alt_u8 read_fuse_octrim(alt_u8 i, alt_u8 gain_block)",304
21587,void remap_rx_term(),370
21588,"alt_16 sm_to_tc16(alt_u8 in, alt_u8 N)",453
21589,"alt_u8 tc16_to_sm(alt_16 in, alt_u8 N)",469
21590,void set_odi_sa_code(uint32_t addr_i) ,484
21591,int32_t iabs_32b(int32_t x_in),552
21592,"int32_t hshift_round(int32_t x_in, int32_t num_shf) ",561
21593,alt_u8 read_fuse_ctle_rf(),590
21594,extern void util_aux_ssmclk(uint8_t); // util_aux_ssmclk.c,6
21595,void util_aux_ssmclk(uint8_t bit),14
21596,static uint16_t convert_format(uint8_t old[] ),23
21597,void pm_uc_vha(uint8_t addr_i),88
21598,void cal_aux_fix(uint8_t ruc_vcc),7
21599,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual); // from misc.c",13
21600,static uint8_t fix_read(uint8_t pcie_flag),15
21601,"static void fix_write(uint8_t pcie_flag, uint8_t fix)",33
21602,uint8_t reset_counters(void),47
21603,"static void read_counters_8b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",67
21604,"void read_counters_12b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",89
21605,"static uint32_t vco_too_fast(uint8_t pcie_flag, uint8_t fix)",110
21606,"static uint32_t generic_binary(uint8_t init_hi, uint8_t init_lo, uint8_t x, uint32_t (*result_too_high)(uint8_t, uint8_t) )",125
21607,"uint8_t cal_cdr(alt_u8 pcie_first_run, uint8_t pcie_flag)",153
21608,"alt_u8 pm_uc_cdr_new(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",179
21609,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual); // from misc.c",6
21610,static void skew_up_current(),34
21611,static void sweep_vref(),104
21612,"alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent, alt_u8 *bSaveSettings)",132
21613,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual); // from misc.c",8
21614,static alt_u16 abs_16(alt_16 x),48
21615,static alt_u8 read_sa_vout(alt_u8 samples),56
21616,static alt_u8 dcd_saoc_vref(alt_u8 *cross_point),91
21617,static void set_res(alt_u8 res_setting),122
21618,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",130
21619,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",161
21620,static alt_u8 precharge_wait_sample(channel_type active_aux),182
21621,"static alt_u8 check_flip(channel_type active_aux, alt_u8 is_downcurrent)",200
21622,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",208
21623,static void set_vref(alt_u8 setting),263
21624,static alt_u8 vref_cal(channel_type active_aux),279
21625,static alt_u8 dcd_cp_cal(void),313
21626,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",367
21627,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,380
21628,static alt_u8 mutate_dn_current(alt_u8 samples),407
21629,alt_16 div4_roundup(alt_16 in)  // round-up in magnitude,456
21630,"alt_u8 dcd_screening(alt_16 code[], alt_u8 cal_error[], alt_u8 diff_thr)",472
21631,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),505
21632,"static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples, alt_u8 bPCIe)",582
21633,alt_u8 calc_mcgb_addr(alt_u8 addr_i),683
21634,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",716
21635,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual); // from misc.c",18
21636,"extern alt_u8 read_fuse_octrim(alt_u8, alt_u8); // from misc.c",19
21637,"extern alt_16 sm_to_tc16(alt_u8 in, alt_u8 N); // from misc.c",20
21638,"extern alt_u8 tc16_to_sm(alt_16 in, alt_u8 N); // from misc.c",21
21639,"void cal_dfe_sa_onedir(uint32_t dir, uint32_t num_read, alt_u8 addr_i, alt_16 *ar_oc_coef, ",26
21640,Target Device: Crete ND (aka Crete2),42
21641,11/4/2016   TM  SA screening bit is set when OC exceeds MAX_SA_DFE_SCREEN (24) value excluding ODI SA,148
21642,"void write_oc( alt_u8 addr_i, alt_u8 index, alt_u8 is_sign, alt_u8 value)",208
21643,"void write_oc_coef( alt_u8 addr_i, alt_u8 index, alt_8 coef)",235
21644,"alt_u8 read_oc ( alt_u8 addr_i, alt_u8 index, alt_u8 is_sign )",273
21645,"void read_sa(uint32_t type, uint32_t num_reads, uint32_t addr_i, uint32_t sa_index, ",308
21646,"alt_u8 signmag6b_diff4b (alt_u8 j3, alt_u8 j2) {",390
21647,"alt_u8 signmag6b_diff5b (alt_u8 j3, alt_u8 j2) {",426
21648,"void cal_dfe_sa(alt_u8 addr_i, alt_u8 td_mode, alt_u8 flag_pcie, alt_u8 td_fast) {",460
21649,"alt_u8 read_sa_user ( alt_u8 addr_i, alt_u8 sa_index)",477
21650,"void cal_dfe_sa_common_numread(alt_u8 addr_i, alt_u32 num_read)",537
21651,"void cal_dfe_sa_user(alt_u8 addr_i, alt_u8 flag_pcie)",569
21652,void cal_dfe_sa_td_fast(alt_u8 addr_i),577
21653,void cal_dfe_sa_td_slow(alt_u8 addr_i) {,587
21654,"int32_t caldfesa_intpl_dist(uint32_t d0, uint32_t d1, int32_t coef_0, int32_t coef_1) { ",768
21655,"void cal_dfe_sa_onedir(uint32_t dir, uint32_t num_reads, alt_u8 addr_i, alt_16 *ar_oc_coef, ",792
21656,"alt_u8 RxAFE_OC_14G(alt_u8 oc_7, alt_u8 oc_15, alt_u8 oc_15diff, alt_u8 RL)",976
21657,"alt_u8 RxAFE_OC_5G(alt_u8 oc_7, alt_u8 oc_15, alt_u8 oc_15diff, alt_u8 RL)",1019
21658,"alt_u8 calculate_oc (alt_u8 addr_i, alt_u8 live)",1064
21659,void pm_uc_tia_livetraffic(alt_u8 addr_i),1171
21660,"void pm_uc_dfe_odi(alt_u8 addr_i, alt_u8 td_ctle_mode, alt_u8 flag_pcie, alt_u8 td_fast)",1221
21661,extern void dynamic_lcpll(uint8_t); // from cal_dynamic_pll.c,9
21662,extern void dynamic_lcpll_undo(uint8_t); // from cal_dynamic_pll.c,10
21663,extern void dynamic_fpll(uint8_t); // from cal_dynamic_pll.c,11
21664,extern void dynamic_fpll_undo(uint8_t); // from cal_dynamic_pll.c,12
21665,extern void dynamic_cmu(uint8_t); // from cal_dynamic_pll.c,13
21666,extern void dynamic_cmu_undo(uint8_t); // from cal_dynamic_pll.c,14
21667,void dynamic_lcpll(alt_u8 addr_i),31
21668,void dynamic_lcpll_undo(alt_u8 addr_i),52
21669,void dynamic_fpll(alt_u8 addr_i),73
21670,void dynamic_fpll_undo(alt_u8 addr_i),94
21671,void dynamic_cmu(alt_u8 addr_i),115
21672,"void dynamic_cmu_undo(alt_u8 addr_i, alt_u32 cdr_clk_en_orig)",145
21673,static void set_vctrl_reset_point(alt_u8 control_id),34
21674,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
21675,static alt_u8 check_fpll_counters(void),107
21676,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
21677,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
21678,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
21679,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
21680,"void pm_uc_vreg_lcvco(void) // now callable from ""do_cal_filtered()""",18
21681,static alt_u8 abs_alt8(alt_8 in),79
21682,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
21683,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
21684,"void write_attr(alt_u16 attr, alt_u8 data)",30
21685,alt_u8 read_attr(alt_u16 attr),35
21686,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",40
21687,"alt_u8 read_aux(channel_type x, alt_u16 attr)",45
21688,void timer_wait(alt_u32 wait_count)  ,52
21689,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",72
21690,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",79
21691,void init_ana_atb(channel_type target_aux),86
21692,void open_anaatb_atb0(void),108
21693,void close_anaatb_atb0(void),127
21694,void open_anaatb_atb1(void),143
21695,void close_anaatb_atb1(void),163
21696,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",180
21697,alt_u8 find_anaatb_vref(void),216
21698,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",262
21699,alt_u8 get_pi_code( alt_u8 pi_phase ),41
21700,void pm_uc_odi_pi( alt_u8 addr_i ),70
21701,"static void set_ctle_dac_magn(alt_u8 addr_i, alt_u8 value)",24
21702,"static void set_ctle_dac_sign(alt_u8 addr_i, alt_u8 value)",30
21703,static alt_u32 sample_slicer(alt_u8 addr_i),35
21704,static alt_u8 sample_4slicers(alt_u8 addr_i),56
21705,"void cal_tia(alt_u8 addr_i, alt_u8 td_ctle_mode)",86
21706,"void cal_dac_scan_onedir(uint32_t type, uint32_t dir, uint32_t num_reads, alt_u8 addr_i, alt_16 *ar_dac_coef, ",26
21707,"void read_sa(uint32_t type, uint32_t num_reads, uint32_t addr_i, uint32_t sa_index, ",28
21708,"int32_t caldfesa_intpl_dist(uint32_t d0, uint32_t d1, int32_t coef_0, int32_t coef_1); ",30
21709,"void write_tia_dac_coef(alt_u8 addr_i, int32_t coef)",38
21710,void cal_tia_scan(alt_u8 addr_i) ,52
21711,"void cal_dac_scan_onedir(uint32_t type, uint32_t dir, uint32_t num_reads, alt_u8 addr_i, alt_16 *ar_dac_coef, ",168
21712,void pm_uc_vcm(alt_u8 ruc_vcc_parameter),41
21713,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",16
21714,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",63
21715,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",116
21716,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",149
21717,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",183
21718,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",239
21719,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",286
21720,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",329
21721,"static void write_cdr_vreg( alt_u8 addr_i, alt_u8 vreg )",369
21722,"void pm_uc_vreg_cdr(alt_u8 addr_i, alt_u8 ruc_vcc)",376
21723,"static void write_addr(uint8_t addr_i, uint8_t offset, uint8_t data)",14
21724,"static uint8_t read_addr(uint8_t addr_i, uint8_t offset)",19
21725,static uint8_t mask_gen(uint16_t attr),24
21726,static uint8_t offset_gen(uint16_t attr),49
21727,static uint8_t shift_gen(uint16_t attr),57
21728,"void attr_wr(uint8_t addr_i, uint16_t attr, uint8_t data)",66
21729,"uint8_t attr_rd(uint8_t addr_i, uint16_t attr)",84
21730,"void write_pcs_base(uint8_t addr_i, uint8_t data)",102
21731,uint8_t read_pcs_base(uint8_t addr_i),112
21732,uint32_t slave_is_pcie(uint8_t addr_i),122
21733,static void arbiter_return(uint8_t x),45
21734,extern void arbiter_return(uint8_t); // from misc.c,50
21735,extern void cal_aux_fix(alt_u8);            // cal_aux_fix.c,54
21736,extern void update_trim_pio();              // cal_aux_fix.c,55
21737,extern uint32_t uc_has_arbiter(uint8_t);    // from misc.c,57
21738,extern void cal_busy_clear(uint8_t);        // from misc.c,58
21739,extern void cal_busy_set(uint8_t);          // from misc.c,59
21740,"extern void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bExit, alt_u8 bManual); // from misc.c",62
21741,extern void util_aux_ssmclk(uint8_t);       // util_aux_ssmclk.c,64
21742,extern void dynamic_lcpll(uint8_t);         // from cal_dynamic_pll.c,66
21743,extern void dynamic_lcpll_undo(uint8_t);    // from cal_dynamic_pll.c,67
21744,extern void dynamic_fpll(uint8_t);          // from cal_dynamic_pll.c,68
21745,extern void dynamic_fpll_undo(uint8_t);     // from cal_dynamic_pll.c,69
21746,extern void dynamic_cmu(uint8_t);           // from cal_dynamic_pll.c,70
21747,"extern void dynamic_cmu_undo(uint8_t, alt_u32 cdr_clk_en0); // from cal_dynamic_pll.c",71
21748,"extern void read_fuse_cretever(alt_u8 *crete_type, alt_u8 *crete_rev);	        // from misc.c - read Crete version from fuses",73
21749,extern alt_u8 read_fuse_oc_written();  // from misc.c - read fuse written bits from fuses,74
21750,extern alt_u8 read_fuse_oc_100deg();   // from misc.c - read fuse indicating 100 degree wafer sort,75
21751,"extern alt_u8 pm_uc_cdr_new(alt_u8, alt_u8, alt_u8); // from cal_cdr_new.c",86
21752,extern void pm_uc_odi_pi(alt_u8);           // from cal_odi_pi.c,88
21753,extern void pm_uc_tia_livetraffic(alt_u8);  // from cal_odi_pi.c,89
21754,extern void pm_uc_vreg_lcvco(void); // cal_lcpll.c,97
21755,"extern void pm_uc_vreg_cdr(alt_u8, alt_u8); // cal_vreg.c",98
21756,extern void pm_uc_vha(uint8_t); // util_vha.c,99
21757,"static	void    hssi_set_state (struct hssi_context *, const uint8_t *, uint8_t); ",129
21758,void update_cal_time(alt_u32 t),144
21759,uint32_t calc_set_busy(uint32_t cal_info),160
21760,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",225
21761,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",242
21762,void hssi_get_capabilities (hssi_capabilities_t *capabilities),319
21763,"void hssi_get_capabilities (struct hssi_context* ptr_cc, hssi_capabilities_t *capabilities)",328
21764,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",349
21765,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",368
21766,void fw_debug_if_init (const hssi_crete_fw_debug_intf_t *interface),413
21767,"void fw_debug_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_debug_intf_t *interface)",426
21768,void hssi_interrupt_enable (struct hssi_context* ptr_cc),456
21769,void hssi_interrupt_enable (struct hssi_context* ptr_cc),465
21770,void hssi_interrupt_disable (struct hssi_context* ptr_cc),484
21771,void hssi_interrupt_disable (struct hssi_context* ptr_cc),493
21772,void fw_watchdog_running (struct hssi_context* ptr_cc),512
21773,void fw_watchdog_running (struct hssi_context* ptr_cc),522
21774,void fw_watchdog_stopped (struct hssi_context* ptr_cc),545
21775,void fw_watchdog_stopped (struct hssi_context* ptr_cc),554
21776,uint8_t hssi_get_version(struct hssi_context* ptr_cc),578
21777,uint8_t hssi_get_version(struct hssi_context* ptr_cc),588
21778,void hssi_enter_user_mode (struct hssi_context* ptr_cc),602
21779,void hssi_enter_user_mode (struct hssi_context* ptr_cc),611
21780,void hssi_exit_user_mode (struct hssi_context* ptr_cc),631
21781,void hssi_exit_user_mode (struct hssi_context* ptr_cc),640
21782,"const uint8_t * hssi_get_state(struct hssi_context *ptr_cc, uint8_t* context_bytes)",657
21783,"const uint8_t* hssi_get_state(struct hssi_context *ptr_cc, uint8_t *p_context_bytes) ",670
21784,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",709
21785,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",727
21786,void hssi_quit (struct hssi_context *ptr_cc),780
21787,void hssi_quit (struct hssi_context *ptr_cc),789
21788,uint8_t hssi_scan (struct hssi_context* ptr_cc),801
21789,"uint32_t compute_cr(struct hssi_context * p_cc, uint8_t addr_i)",816
21790,uint8_t hssi_scan(struct hssi_context * p_cc),989
21791,"uint8_t hssi_cal (struct hssi_context* ptr_cc, hssi_cal_param_t hssi_cal_param)",1042
21792,static alt_u8 get_vcc_bits(void),1068
21793,"static uint32_t cal_do_filtered(struct hssi_context * p_cc, uint32_t filter, uint32_t * mcgb_run_status, hssi_cal_param_t hssi_cal_param)",1085
21794,"static void clknet_calibration_backend(struct hssi_context * p_cc, uint32_t force)",1507
21795,static void clknet_calibration(struct hssi_context * p_cc),1546
21796,static void process_clknet_recal(struct hssi_context * p_cc),1551
21797,"uint8_t hssi_cal(struct hssi_context * p_cc, hssi_cal_param_t hssi_cal_param)",1558
21798,void timer_wait(uint32_t time) // accepts time in 0.01 us increments,1624
21799,uint32_t get_current_temp(),1632
21800,void timer_start_nb(uint32_t wait_count) ,1649
21801,uint32_t timer_read(),1671
21802,"int read_efuse(alt_u32, alt_u32, alt_u32*, alt_u32*); // copied from crete_dfx.c",32
21803,alt_u32 uc_has_arbiter(alt_u8 addr_i),47
21804,void arbiter_return(alt_u8 addr_i),55
21805,void cal_busy_clear(alt_u8 addr_i),64
21806,void cal_busy_set(alt_u8 addr_i),73
21807,void chk_term_res(),90
21808,void set_aux_term_res(),111
21809,void update_trim_pio(),127
21810,"void bypass_reset_seq(alt_u8 bTxRx, alt_u8 bReset, alt_u8 bManual)",174
21811,"void CRSSM_trace(uint32_t key, uint32_t line)",204
21812,void int_trace_idx(),218
21813,"void read_fuse_cretever(alt_u8 *crete_type, alt_u8 *crete_rev)",231
21814,alt_u8 read_fuse_oc_written(),260
21815,alt_u8 read_fuse_oc_100deg(),276
21816,"alt_u8 read_fuse_octrim(alt_u8 i, alt_u8 gain_block)",303
21817,void remap_rx_term(),369
21818,"alt_16 sm_to_tc16(alt_u8 in, alt_u8 N)",444
21819,"alt_u8 tc16_to_sm(alt_16 in, alt_u8 N)",460
21820,"int read_efuse(alt_u32 row, alt_u32 col, alt_u32* efuse_data_hi, alt_u32* efuse_data_low)",512
21821,"int32_t hshift_round(int32_t x_in, int32_t num_shf) ",557
21822,extern void util_aux_ssmclk(uint8_t); // util_aux_ssmclk.c,6
21823,void util_aux_ssmclk(uint8_t bit),14
21824,static uint16_t convert_format(uint8_t old[] ),17
21825,void pm_uc_vha(uint8_t addr_i),82
21826,*        Copyright (c) 2015 Altera Corporation,12
21827,"static	void    hssi_set_state (struct hssi_context *, const uint8_t *, uint8_t); ",51
21828,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",105
21829,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",122
21830,void hssi_get_capabilities (hssi_capabilities_t *capabilities),196
21831,"void hssi_get_capabilities (struct hssi_context* ptr_cc, hssi_capabilities_t *capabilities)",205
21832,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",226
21833,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",245
21834,void fw_debug_if_init (const hssi_crete_fw_debug_intf_t *interface),283
21835,"void fw_debug_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_debug_intf_t *interface)",296
21836,void hssi_interrupt_enable (struct hssi_context* ptr_cc),326
21837,void hssi_interrupt_enable (struct hssi_context* ptr_cc),335
21838,void hssi_interrupt_disable (struct hssi_context* ptr_cc),354
21839,void hssi_interrupt_disable (struct hssi_context* ptr_cc),363
21840,void fw_watchdog_running (struct hssi_context* ptr_cc),382
21841,void fw_watchdog_running (struct hssi_context* ptr_cc),392
21842,void fw_watchdog_stopped (struct hssi_context* ptr_cc),414
21843,void fw_watchdog_stopped (struct hssi_context* ptr_cc),423
21844,uint8_t hssi_get_version(struct hssi_context* ptr_cc),447
21845,uint8_t hssi_get_version(struct hssi_context* ptr_cc),457
21846,void hssi_enter_user_mode (struct hssi_context* ptr_cc),471
21847,void hssi_enter_user_mode (struct hssi_context* ptr_cc),480
21848,void hssi_exit_user_mode (struct hssi_context* ptr_cc),500
21849,void hssi_exit_user_mode (struct hssi_context* ptr_cc),509
21850,uint8_t hssi_scan (struct hssi_context* ptr_cc),527
21851,uint8_t hssi_scan (struct hssi_context* ptr_cc),541
21852,"uint8_t hssi_cal (struct hssi_context* ptr_cc, hssi_cal_param_t hssi_cal_param)",603
21853,"uint8_t hssi_cal (struct hssi_context* ptr_cc, hssi_cal_param_t hssi_cal_param)",628
21854,"const uint8_t * hssi_get_state(struct hssi_context *ptr_cc, uint8_t* context_bytes)",694
21855,"const uint8_t* hssi_get_state(struct hssi_context *ptr_cc, uint8_t *p_context_bytes) ",707
21856,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",733
21857,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",751
21858,void hssi_quit (struct hssi_context *ptr_cc),784
21859,void hssi_quit (struct hssi_context *ptr_cc),793
21860,void hssi_dummy_channel_calibrate (),810
21861,void hssi_dummy_channel_calibrate (uint8_t channel),821
21862,static alt_u32 uc_has_arbiter(alt_u8 addr_i),14
21863,static void arbiter_return(alt_u8 addr_i),22
21864,static void cal_busy_clear(alt_u8 addr_i),31
21865,static void cal_busy_set(alt_u8 addr_i),40
21866,static alt_u32 slave_is_pcie(alt_u8 addr_i),49
21867,int main(void),60
21868,"static void write_addr(alt_u8 addr_i, alt_u8 offset, alt_u8 data)",13
21869,"static alt_u8 read_addr(alt_u8 addr_i, alt_u8 offset)",18
21870,static alt_u8 mask_gen(alt_u16 attr),23
21871,static alt_u8 offset_gen(alt_u16 attr),48
21872,static alt_u8 shift_gen(alt_u16 attr),56
21873,"void attr_wr(alt_u8 addr_i, alt_u16 attr, alt_u8 data)",65
21874,"alt_u8 attr_rd(alt_u8 addr_i, alt_u16 attr)",83
21875,"void write_pcs_base(alt_u8 addr_i, alt_u8 data)",101
21876,alt_u8 read_pcs_base(alt_u8 addr_i),111
21877,alt_u32 slave_is_pcie(alt_u8 addr_i),121
21878,"static void avmm_write(uint32_t addr, uint8_t data)",14
21879,static uint8_t avmm_read(uint32_t addr),48
21880,static void bridge_arbiter_return(void) // return arbiter to uC,89
21881,static void bridge_uc_has_arbiter(void) // check if uC has arbiter,98
21882,static alt_u32 uc_has_arbiter(alt_u8 addr_i) // normally used to check if the hard uC has the arbiter -- fake it,104
21883,static void arbiter_return(alt_u8 addr_i) // normally used to return the arbiter to the core -- do nothing,109
21884,"void attr_wr(alt_u8 index, alt_u16 attr, alt_u8 data)",114
21885,"uint8_t attr_rd(alt_u8 index, uint16_t attr)",130
21886,void cal_busy_clear(alt_u8 addr_i),147
21887,void cal_busy_set(alt_u8 addr_i),160
21888,alt_u32 slave_is_pcie(alt_u8 addr_i),173
21889,void cal_aux_comp(void),13
21890,void cal_aux_fix(alt_u8 ruc_vcc),7
21891,"static void set_cdr_vcobias(cdr_cal_type cal_type, alt_u8 vco_bias)",33
21892,"static alt_u8 cal_cdr(alt_u8 pcie_first_run, cdr_cal_type cal_type, alt_u8 ruc_vcc_parameter)",60
21893,"alt_u8 pm_uc_cdr(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",265
21894,static void skew_up_current(),32
21895,static void sweep_vref(),97
21896,alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent),125
21897,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),146
21898,static alt_u8 read_sa_vout(alt_u8 samples),25
21899,static alt_u8 dcd_saoc_vref(void),50
21900,static void set_res(alt_u8 res_setting),78
21901,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",86
21902,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",119
21903,static alt_u8 precharge_wait_sample(channel_type active_aux),140
21904,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",158
21905,static void set_vref(alt_u8 setting),213
21906,static alt_u8 vref_cal(channel_type active_aux),228
21907,static alt_u8 dcd_cp_cal(void),262
21908,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",321
21909,static alt_16 sm6_to_tc16(alt_u8 in),334
21910,static alt_u8 tc16_to_sm6(alt_16 in),350
21911,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,365
21912,static alt_u8 mutate_dn_current(alt_u8 samples),387
21913,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),413
21914,static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples),477
21915,alt_u8 calc_mcgb_addr(alt_u8 addr_i),529
21916,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",564
21917,"void write_setting (alt_u8 read_index, alt_u8 sa_value)",23
21918,alt_u8 read_sa (alt_u8 read_index),44
21919,void cal_dfe_sa(void),66
21920,void pm_uc_dfe_odi(void),133
21921,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),144
21922,static void set_vctrl_reset_point(alt_u8 control_id),34
21923,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
21924,static alt_u8 check_fpll_counters(void),107
21925,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
21926,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
21927,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
21928,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
21929,extern void cal_aux_fix(alt_u8); // cal_aux_fix.c,33
21930,extern void cal_aux_comp(void); // cal_aux_comp.c,34
21931,"alt_32 get_active_aux_offset(alt_u8, alt_32); //from cal_legacy.c",50
21932,void hssi_init(struct hssi_context** ptr_ptr_cc),60
21933,void hssi_enter_user_mode (struct hssi_context* ptr_cc),74
21934,void hssi_exit_user_mode (struct hssi_context* ptr_cc),79
21935,const uint8_t * hssi_get_state(struct hssi_context* p_cc),84
21936,"void hssi_set_state(struct hssi_context * p_cc, const uint8_t * state_tbl)",110
21937,static alt_u8 get_vcc_bits(void),136
21938,static alt_u32 uc_has_arbiter(alt_u8 addr_i),153
21939,static void arbiter_return(alt_u8 addr_i),161
21940,static void cal_busy_clear(alt_u8 addr_i),170
21941,static void cal_busy_set(alt_u8 addr_i),179
21942,"alt_u8 check_calibration_requests(alt_u8 addr_i, struct hssi_context * p_cc)",188
21943,alt_u8 hssi_scan(struct hssi_context * p_cc),284
21944,"static void cal_do_filtered(struct hssi_context * p_cc, alt_u32 filter, alt_u32 mcgb_run_status)",343
21945,"static void clknet_calibration_backend(struct hssi_context * p_cc, alt_u32 force)",465
21946,static void clknet_calibration(struct hssi_context * p_cc),482
21947,static void process_clknet_recal(struct hssi_context * p_cc),487
21948,void hssi_cal(struct hssi_context * p_cc),492
21949,static void pm_uc_vreg_lcvco(void),18
21950,static alt_u8 abs_alt8(alt_8 in),79
21951,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
21952,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
21953,"void write_attr(alt_u16 attr, alt_u8 data)",28
21954,alt_u8 read_attr(alt_u16 attr),33
21955,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",38
21956,"alt_u8 read_aux(channel_type x, alt_u16 attr)",43
21957,void timer_wait(alt_u32 wait_count)  ,50
21958,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",67
21959,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",74
21960,void init_ana_atb(channel_type target_aux),81
21961,void open_anaatb_atb0(void),103
21962,void close_anaatb_atb0(void),122
21963,void open_anaatb_atb1(void),138
21964,void close_anaatb_atb1(void),158
21965,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",175
21966,alt_u8 find_anaatb_vref(void),211
21967,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",257
21968,void pm_uc_vcm(alt_u8 ruc_vcc_parameter) ,24
21969,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",12
21970,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",57
21971,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",99
21972,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",129
21973,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",163
21974,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",212
21975,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",259
21976,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",298
21977,void cal_aux_comp(void),13
21978,void cal_aux_fix(alt_u8 ruc_vcc),7
21979,static uint32_t abs_32(int32_t in),17
21980,static uint32_t read_temperature(void),25
21981,static uint32_t get_frequency(uint8_t addr_i),48
21982,static uint32_t get_atb_voltage(void),94
21983,static uint32_t sample_vctrl_voltage(uint8_t addr_i),113
21984,"static int32_t measure_distance(uint32_t x, uint32_t y)",129
21985,"static uint32_t compute_vco_frequency(uint32_t vco_count, uint32_t ref_count, uint32_t design_freq)",159
21986,"static int32_t target_deltaf(uint32_t f_2, uint32_t delta_v)",181
21987,"static uint32_t check_dyn(uint8_t addr_i, uint8_t ruc_vcc, uint32_t dyn, uint32_t design_freq)",203
21988,"void kvco_cdr(uint8_t addr_i, uint8_t ruc_vcc)",284
21989,static uint8_t fix_read(uint8_t pcie_flag),13
21990,"static void fix_write(uint8_t pcie_flag, uint8_t fix)",31
21991,uint8_t reset_counters(void),45
21992,"static void read_counters_8b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",65
21993,"void read_counters_12b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",82
21994,"static uint32_t vco_too_fast(uint8_t pcie_flag, uint8_t fix)",103
21995,"static uint32_t generic_binary(uint8_t init_hi, uint8_t init_lo, uint8_t x, uint32_t (*result_too_high)(uint8_t, uint8_t) )",118
21996,"uint8_t cal_cdr(alt_u8 pcie_first_run, uint8_t pcie_flag)",146
21997,"alt_u8 pm_uc_cdr_new(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",172
21998,static uint8_t fix_read(uint8_t pcie_flag),14
21999,"static void fix_write(uint8_t pcie_flag, uint8_t fix)",37
22000,uint8_t reset_counters(void),56
22001,"static void read_counters_8b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",76
22002,"void read_counters_12b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",93
22003,"static uint32_t vco_too_fast(uint8_t pcie_flag, uint8_t fix)",114
22004,"static uint32_t generic_binary(uint8_t init_hi, uint8_t init_lo, uint8_t x, uint32_t (*result_too_high)(uint8_t, uint8_t) )",129
22005,"uint8_t cal_cdr(alt_u8 pcie_first_run, uint8_t pcie_flag)",157
22006,"alt_u8 pm_uc_cdr_new(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",184
22007,static void skew_up_current(),32
22008,static void sweep_vref(),97
22009,alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent),125
22010,if (read_attr(PMA_PM_CR2_CDR__CHGPMP_CURRENT_UP_TRIM__2TO0) ),146
22011,static alt_u8 read_sa_vout(alt_u8 samples),25
22012,static alt_u8 dcd_saoc_vref(void),50
22013,static void set_res(alt_u8 res_setting),78
22014,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",86
22015,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",117
22016,static alt_u8 precharge_wait_sample(channel_type active_aux),138
22017,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",156
22018,static void set_vref(alt_u8 setting),211
22019,static alt_u8 vref_cal(channel_type active_aux),226
22020,static alt_u8 dcd_cp_cal(void),260
22021,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",319
22022,static alt_16 sm6_to_tc16(alt_u8 in),332
22023,static alt_u8 tc16_to_sm6(alt_16 in),348
22024,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,363
22025,static alt_u8 mutate_dn_current(alt_u8 samples),385
22026,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),411
22027,static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples),475
22028,alt_u8 calc_mcgb_addr(alt_u8 addr_i),527
22029,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",562
22030,Target Device: Crete ND (aka Crete2),12
22031,"void write_oc (alt_u8 index, alt_u8 is_sign, alt_u8 value)",126
22032,alt_u8 read_sa (alt_u8 sa_index),215
22033,alt_u8 read_sa (alt_u8 sa_index),276
22034,void cal_dfe_sa(void),312
22035,void pm_uc_dfe_odi(void),495
22036,void dynamic_lcpll(alt_u8 addr_i),21
22037,void dynamic_lcpll_undo(alt_u8 addr_i),42
22038,void dynamic_fpll(alt_u8 addr_i),63
22039,void dynamic_fpll_undo(alt_u8 addr_i),84
22040,static void set_vctrl_reset_point(alt_u8 control_id),34
22041,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
22042,static alt_u8 check_fpll_counters(void),107
22043,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
22044,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
22045,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
22046,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
22047,extern void cal_aux_fix(alt_u8); // cal_aux_fix.c,13
22048,extern void cal_aux_comp(void); // cal_aux_comp.c,14
22049,"alt_32 get_active_aux_offset(alt_u8, alt_32); //from cal_legacy.c",37
22050,void hssi_init(struct hssi_context** ptr_ptr_cc),50
22051,void hssi_enter_user_mode (struct hssi_context* ptr_cc),66
22052,void hssi_exit_user_mode (struct hssi_context* ptr_cc),71
22053,const uint8_t * hssi_get_state(struct hssi_context* p_cc),76
22054,"void hssi_set_state(struct hssi_context * p_cc, const uint8_t * state_tbl)",102
22055,static alt_u8 get_vcc_bits(void),132
22056,static alt_u32 uc_has_arbiter(alt_u8 addr_i),149
22057,static void arbiter_return(alt_u8 addr_i),157
22058,static void cal_busy_clear(alt_u8 addr_i),166
22059,static void cal_busy_set(alt_u8 addr_i),175
22060,"alt_u8 check_calibration_requests(alt_u8 addr_i, struct hssi_context * p_cc)",184
22061,alt_u8 hssi_scan(struct hssi_context * p_cc),383
22062,"static void cal_do_filtered(struct hssi_context * p_cc, alt_u32 filter, alt_u32 mcgb_run_status)",442
22063,"static void clknet_calibration_backend(struct hssi_context * p_cc, alt_u32 force)",596
22064,static void clknet_calibration(struct hssi_context * p_cc),613
22065,static void process_clknet_recal(struct hssi_context * p_cc),618
22066,void hssi_cal(struct hssi_context * p_cc),623
22067,void skip_first_run( struct hssi_context* p_cc ),658
22068,"void set_ruc_vcc(  struct hssi_context* p_cc, alt_u32 blk_id, alt_u8 ruc_vcc )",663
22069,"void set_cal_request( struct hssi_context* p_cc, alt_u8 blk_id, alt_u32 flag )",669
22070,int main(),677
22071,void main() // VERIFICATION MAIN,729
22072,static void pm_uc_vreg_lcvco(void),18
22073,static alt_u8 abs_alt8(alt_8 in),79
22074,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
22075,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
22076,"void write_attr(alt_u16 attr, alt_u8 data)",28
22077,alt_u8 read_attr(alt_u16 attr),33
22078,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",38
22079,"alt_u8 read_aux(channel_type x, alt_u16 attr)",43
22080,void timer_wait(alt_u32 wait_count)  ,50
22081,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",67
22082,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",74
22083,void init_ana_atb(channel_type target_aux),81
22084,void open_anaatb_atb0(void),103
22085,void close_anaatb_atb0(void),122
22086,void open_anaatb_atb1(void),138
22087,void close_anaatb_atb1(void),158
22088,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",175
22089,alt_u8 find_anaatb_vref(void),211
22090,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",257
22091,alt_u8 get_pi_code( alt_u8 pi_phase ),34
22092,void pm_uc_odi_pi(void),63
22093,"static void set_ctle_dac_magn(alt_u8 addr_i, alt_u8 value)",12
22094,"static void set_ctle_dac_sign(alt_u8 addr_i, alt_u8 value)",17
22095,static alt_u32 sample_slicer(alt_u8 addr_i),22
22096,void cal_tia(addr_i),37
22097,void pm_uc_vcm(alt_u8 ruc_vcc_parameter),41
22098,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",15
22099,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",62
22100,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",104
22101,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",134
22102,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",168
22103,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",217
22104,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",264
22105,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",303
22106,"static void write_cdr_vreg( alt_u8 addr_i, alt_u8 vreg )",343
22107,"void pm_uc_vreg_cdr(alt_u8 addr_i, alt_u8 ruc_vcc)",350
22108,"alt_u8 IORD_8DIRECT(alt_u32 base, alt_u16 offset)",37
22109,"void   IOWR_8DIRECT(alt_u32 base, alt_u16 offset, alt_u8 data)",81
22110,"alt_u32 IORD_32DIRECT(alt_u32 BASE, alt_u16 OFFSET)",121
22111,"alt_u16 IORD_16DIRECT(alt_u32 BASE, alt_u16 OFFSET)",123
22112,"void    IOWR_32DIRECT(alt_u32 BASE, alt_u16 OFFSET, alt_u32 DATA)",125
22113,"void    IOWR_16DIRECT(alt_u32 BASE, alt_u16 OFFSET, alt_u16 DATA)",127
22114,"alt_u32 IORD(alt_u32 BASE, alt_u16 REGNUM)",129
22115,"void    IOWR(alt_u32 BASE, alt_u16 REGNUM, alt_u16 DATA)",131
22116,void init_stat(),135
22117,void get_stat(),141
22118,void createdir( char* path ),23
22119,"void cal_request( struct hssi_context* p_cc, alt_u8 blk_id, alt_u32 flag, char* msg)",32
22120,"void tb_dfe_odi(struct hssi_context* p_cc, alt_u8 blk_id, FILE *fp)",42
22121,"void tb_tia(struct hssi_context* p_cc, alt_u8 blk_id, FILE *fp)",84
22122,"void tb_odi_pi(struct hssi_context* p_cc, alt_u8 blk_id, FILE *fp)",114
22123,"void tb_vcm(struct hssi_context* p_cc, alt_u8 blk_id, FILE *fp)",150
22124,"void tb_vreg(struct hssi_context* p_cc, FILE *fp)",172
22125,int main(),211
22126,alt_u32 pcs_offset(alt_u32 addr),13
22127,"void write_generic(alt_u32 addr, alt_u16 attr, alt_u8 data)",19
22128,"void write_pma(alt_u8 pma_number, alt_u16 attr, alt_u8 data)",36
22129,"void write_lcpll(alt_u8 lcpll_number, alt_u16 attr, alt_u8 data)",43
22130,"void write_fpll(alt_u8 fpll_number, alt_u16 attr, alt_u8 data)",50
22131,"void write_aux(alt_u16 attr, alt_u8 data)",57
22132,"alt_u8 read_generic(alt_u32 addr, alt_u16 attr)",63
22133,"alt_u8 read_pma(alt_u8 pma_number, alt_u16 attr)",79
22134,"alt_u8 read_lcpll(alt_u8 lcpll_number, alt_u16 attr)",86
22135,"alt_u8 read_fpll(alt_u8 fpll_number, alt_u16 attr)",93
22136,alt_u8 read_aux(alt_u16 attr),100
22137,*        Copyright (c) 2015 Altera Corporation,12
22138,extern int hssi_dummy_run(void); //dummy code here ,21
22139,void hssi_init (struct hssi_context** ptr_ptr_cc),37
22140,void hssi_enter_user_mode (struct hssi_context* ptr_cc),44
22141,void hssi_exit_user_mode (struct hssi_context* ptr_cc),50
22142,uint8_t hssi_scan (struct hssi_context* ptr_cc),56
22143,void hssi_cal (struct hssi_context* ptr_cc),62
22144,static void pass_back_arbiter(alt_u32 addr),10
22145,static void set_cal_done(alt_u32 addr),22
22146,int hssi_dummy_run(void),33
22147,static alt_u8 test_byte(void),74
22148,static void wait_for_arbiter(alt_u32 addr),87
22149,static void flag_failure(void),101
22150,int hssi_dummy_run(void),106
22151,static alt_u32 uc_has_arbiter(alt_u8 addr_i),14
22152,static void arbiter_return(alt_u8 addr_i),22
22153,static void cal_busy_clear(alt_u8 addr_i),31
22154,static void cal_busy_set(alt_u8 addr_i),40
22155,static alt_u32 slave_is_pcie(alt_u8 addr_i),49
22156,int main(void),60
22157,"static void write_addr(alt_u8 addr_i, alt_u8 offset, alt_u8 data)",13
22158,"static alt_u8 read_addr(alt_u8 addr_i, alt_u8 offset)",18
22159,static alt_u8 mask_gen(alt_u16 attr),23
22160,static alt_u8 offset_gen(alt_u16 attr),48
22161,static alt_u8 shift_gen(alt_u16 attr),56
22162,"void attr_wr(alt_u8 addr_i, alt_u16 attr, alt_u8 data)",65
22163,"alt_u8 attr_rd(alt_u8 addr_i, alt_u16 attr)",83
22164,"void write_pcs_base(alt_u8 addr_i, alt_u8 data)",101
22165,alt_u8 read_pcs_base(alt_u8 addr_i),111
22166,alt_u32 slave_is_pcie(alt_u8 addr_i),121
22167,"static void avmm_write(uint32_t addr, uint8_t data)",14
22168,static uint8_t avmm_read(uint32_t addr),48
22169,static void bridge_arbiter_return(void) // return arbiter to uC,89
22170,static void bridge_uc_has_arbiter(void) // check if uC has arbiter,98
22171,static alt_u32 uc_has_arbiter(alt_u8 addr_i) // normally used to check if the hard uC has the arbiter -- fake it,104
22172,static void arbiter_return(alt_u8 addr_i) // normally used to return the arbiter to the core -- do nothing,109
22173,"void attr_wr(alt_u8 index, alt_u16 attr, alt_u8 data)",114
22174,"uint8_t attr_rd(alt_u8 index, uint16_t attr)",130
22175,void cal_busy_clear(alt_u8 addr_i),147
22176,void cal_busy_set(alt_u8 addr_i),160
22177,alt_u32 slave_is_pcie(alt_u8 addr_i),173
22178,void cal_aux_comp(void),13
22179,void cal_aux_fix(alt_u8 ruc_vcc),7
22180,"static void set_cdr_vcobias(cdr_cal_type cal_type, alt_u8 vco_bias)",33
22181,"static alt_u8 cal_cdr(alt_u8 pcie_first_run, cdr_cal_type cal_type, alt_u8 ruc_vcc_parameter)",60
22182,"alt_u8 pm_uc_cdr(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",265
22183,static void skew_up_current(),32
22184,static void sweep_vref(),97
22185,alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent),125
22186,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),146
22187,static alt_u8 read_sa_vout(alt_u8 samples),25
22188,static alt_u8 dcd_saoc_vref(void),50
22189,static void set_res(alt_u8 res_setting),78
22190,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",86
22191,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",119
22192,static alt_u8 precharge_wait_sample(channel_type active_aux),140
22193,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",158
22194,static void set_vref(alt_u8 setting),213
22195,static alt_u8 vref_cal(channel_type active_aux),228
22196,static alt_u8 dcd_cp_cal(void),262
22197,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",321
22198,static alt_16 sm6_to_tc16(alt_u8 in),334
22199,static alt_u8 tc16_to_sm6(alt_16 in),350
22200,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,365
22201,static alt_u8 mutate_dn_current(alt_u8 samples),387
22202,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),413
22203,static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples),477
22204,alt_u8 calc_mcgb_addr(alt_u8 addr_i),529
22205,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",564
22206,"void write_setting (alt_u8 read_index, alt_u8 sa_value)",23
22207,alt_u8 read_sa (alt_u8 read_index),44
22208,void cal_dfe_sa(void),66
22209,void pm_uc_dfe_odi(void),133
22210,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),144
22211,static void set_vctrl_reset_point(alt_u8 control_id),34
22212,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
22213,static alt_u8 check_fpll_counters(void),107
22214,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
22215,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
22216,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
22217,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
22218,extern void cal_aux_fix(alt_u8); // cal_aux_fix.c,33
22219,extern void cal_aux_comp(void); // cal_aux_comp.c,34
22220,"alt_32 get_active_aux_offset(alt_u8, alt_32); //from cal_legacy.c",50
22221,void hssi_init(struct hssi_context** ptr_ptr_cc),60
22222,void hssi_enter_user_mode (struct hssi_context* ptr_cc),74
22223,void hssi_exit_user_mode (struct hssi_context* ptr_cc),79
22224,const uint8_t * hssi_get_state(struct hssi_context* p_cc),84
22225,"void hssi_set_state(struct hssi_context * p_cc, const uint8_t * state_tbl)",110
22226,static alt_u8 get_vcc_bits(void),136
22227,static alt_u32 uc_has_arbiter(alt_u8 addr_i),153
22228,static void arbiter_return(alt_u8 addr_i),161
22229,static void cal_busy_clear(alt_u8 addr_i),170
22230,static void cal_busy_set(alt_u8 addr_i),179
22231,"alt_u8 check_calibration_requests(alt_u8 addr_i, struct hssi_context * p_cc)",188
22232,alt_u8 hssi_scan(struct hssi_context * p_cc),284
22233,"static void cal_do_filtered(struct hssi_context * p_cc, alt_u32 filter, alt_u32 mcgb_run_status)",343
22234,"static void clknet_calibration_backend(struct hssi_context * p_cc, alt_u32 force)",465
22235,static void clknet_calibration(struct hssi_context * p_cc),482
22236,static void process_clknet_recal(struct hssi_context * p_cc),487
22237,void hssi_cal(struct hssi_context * p_cc),492
22238,static void pm_uc_vreg_lcvco(void),18
22239,static alt_u8 abs_alt8(alt_8 in),79
22240,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
22241,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
22242,"void write_attr(alt_u16 attr, alt_u8 data)",28
22243,alt_u8 read_attr(alt_u16 attr),33
22244,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",38
22245,"alt_u8 read_aux(channel_type x, alt_u16 attr)",43
22246,void timer_wait(alt_u32 wait_count)  ,50
22247,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",67
22248,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",74
22249,void init_ana_atb(channel_type target_aux),81
22250,void open_anaatb_atb0(void),103
22251,void close_anaatb_atb0(void),122
22252,void open_anaatb_atb1(void),138
22253,void close_anaatb_atb1(void),158
22254,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",175
22255,alt_u8 find_anaatb_vref(void),211
22256,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",257
22257,void pm_uc_vcm(alt_u8 ruc_vcc_parameter) ,24
22258,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",12
22259,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",57
22260,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",99
22261,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",129
22262,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",163
22263,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",212
22264,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",259
22265,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",298
22266,void cal_aux_comp(void),13
22267,void cal_aux_fix(alt_u8 ruc_vcc),7
22268,static uint32_t abs_32(int32_t in),17
22269,static uint32_t read_temperature(void),25
22270,static uint32_t get_frequency(uint8_t addr_i),48
22271,static uint32_t get_atb_voltage(void),94
22272,static uint32_t sample_vctrl_voltage(uint8_t addr_i),113
22273,"static int32_t measure_distance(uint32_t x, uint32_t y)",129
22274,"static uint32_t compute_vco_frequency(uint32_t vco_count, uint32_t ref_count, uint32_t design_freq)",159
22275,"static int32_t target_deltaf(uint32_t f_2, uint32_t delta_v)",181
22276,"static uint32_t check_dyn(uint8_t addr_i, uint8_t ruc_vcc, uint32_t dyn, uint32_t design_freq)",203
22277,"void kvco_cdr(uint8_t addr_i, uint8_t ruc_vcc)",284
22278,static uint8_t fix_read(uint8_t pcie_flag),13
22279,"static void fix_write(uint8_t pcie_flag, uint8_t fix)",31
22280,uint8_t reset_counters(void),45
22281,"static void read_counters_8b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",65
22282,"void read_counters_12b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",82
22283,"static uint32_t vco_too_fast(uint8_t pcie_flag, uint8_t fix)",103
22284,"static uint32_t generic_binary(uint8_t init_hi, uint8_t init_lo, uint8_t x, uint32_t (*result_too_high)(uint8_t, uint8_t) )",118
22285,"uint8_t cal_cdr(alt_u8 pcie_first_run, uint8_t pcie_flag)",146
22286,"alt_u8 pm_uc_cdr_new(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",172
22287,static uint8_t fix_read(uint8_t pcie_flag),14
22288,"static void fix_write(uint8_t pcie_flag, uint8_t fix)",37
22289,uint8_t reset_counters(void),56
22290,"static void read_counters_8b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",76
22291,"void read_counters_12b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",93
22292,"static uint32_t vco_too_fast(uint8_t pcie_flag, uint8_t fix)",114
22293,"static uint32_t generic_binary(uint8_t init_hi, uint8_t init_lo, uint8_t x, uint32_t (*result_too_high)(uint8_t, uint8_t) )",129
22294,"uint8_t cal_cdr(alt_u8 pcie_first_run, uint8_t pcie_flag)",157
22295,"alt_u8 pm_uc_cdr_new(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",184
22296,static void skew_up_current(),32
22297,static void sweep_vref(),97
22298,alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent),125
22299,if (read_attr(PMA_PM_CR2_CDR__CHGPMP_CURRENT_UP_TRIM__2TO0) ),146
22300,static alt_u8 read_sa_vout(alt_u8 samples),25
22301,static alt_u8 dcd_saoc_vref(void),50
22302,static void set_res(alt_u8 res_setting),78
22303,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",86
22304,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",117
22305,static alt_u8 precharge_wait_sample(channel_type active_aux),138
22306,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",156
22307,static void set_vref(alt_u8 setting),211
22308,static alt_u8 vref_cal(channel_type active_aux),226
22309,static alt_u8 dcd_cp_cal(void),260
22310,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",319
22311,static alt_16 sm6_to_tc16(alt_u8 in),332
22312,static alt_u8 tc16_to_sm6(alt_16 in),348
22313,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,363
22314,static alt_u8 mutate_dn_current(alt_u8 samples),385
22315,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),411
22316,static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples),475
22317,alt_u8 calc_mcgb_addr(alt_u8 addr_i),527
22318,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",562
22319,Target Device: Crete ND (aka Crete2),12
22320,"void write_oc (alt_u8 index, alt_u8 is_sign, alt_u8 value)",178
22321,"alt_u8 read_oc ( alt_u8 index, alt_u8 is_sign )",208
22322,alt_u8 read_sa (alt_u8 sa_index),247
22323,alt_u8 read_sa (alt_u8 sa_index),308
22324,void cal_dfe_sa(void),344
22325,void pm_uc_dfe_odi(void),527
22326,void dynamic_lcpll(alt_u8 addr_i),21
22327,void dynamic_lcpll_undo(alt_u8 addr_i),42
22328,void dynamic_fpll(alt_u8 addr_i),63
22329,void dynamic_fpll_undo(alt_u8 addr_i),84
22330,static void set_vctrl_reset_point(alt_u8 control_id),34
22331,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
22332,static alt_u8 check_fpll_counters(void),107
22333,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
22334,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
22335,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
22336,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
22337,extern void cal_aux_fix(alt_u8); // cal_aux_fix.c,13
22338,extern void cal_aux_comp(void); // cal_aux_comp.c,14
22339,"alt_32 get_active_aux_offset(alt_u8, alt_32); //from cal_legacy.c",37
22340,void hssi_init(struct hssi_context** ptr_ptr_cc),50
22341,void hssi_enter_user_mode (struct hssi_context* ptr_cc),66
22342,void hssi_exit_user_mode (struct hssi_context* ptr_cc),71
22343,const uint8_t * hssi_get_state(struct hssi_context* p_cc),76
22344,"void hssi_set_state(struct hssi_context * p_cc, const uint8_t * state_tbl)",102
22345,static alt_u8 get_vcc_bits(void),132
22346,static alt_u32 uc_has_arbiter(alt_u8 addr_i),149
22347,static void arbiter_return(alt_u8 addr_i),157
22348,static void cal_busy_clear(alt_u8 addr_i),166
22349,static void cal_busy_set(alt_u8 addr_i),175
22350,"alt_u8 check_calibration_requests(alt_u8 addr_i, struct hssi_context * p_cc)",184
22351,alt_u8 hssi_scan(struct hssi_context * p_cc),383
22352,"static void cal_do_filtered(struct hssi_context * p_cc, alt_u32 filter, alt_u32 mcgb_run_status)",442
22353,"static void clknet_calibration_backend(struct hssi_context * p_cc, alt_u32 force)",598
22354,static void clknet_calibration(struct hssi_context * p_cc),615
22355,static void process_clknet_recal(struct hssi_context * p_cc),620
22356,void hssi_cal(struct hssi_context * p_cc),625
22357,void skip_first_run( struct hssi_context* p_cc ),660
22358,"void set_ruc_vcc(  struct hssi_context* p_cc, alt_u32 blk_id, alt_u8 ruc_vcc )",665
22359,"void set_cal_request( struct hssi_context* p_cc, alt_u8 blk_id, alt_u32 flag )",671
22360,"void get_cal_result( alt_u32 flag, alt_u8 a_buf[] )",691
22361,int main(),738
22362,void main() // VERIFICATION MAIN,790
22363,static void pm_uc_vreg_lcvco(void),18
22364,static alt_u8 abs_alt8(alt_8 in),79
22365,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
22366,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
22367,"void write_attr(alt_u16 attr, alt_u8 data)",28
22368,alt_u8 read_attr(alt_u16 attr),33
22369,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",38
22370,"alt_u8 read_aux(channel_type x, alt_u16 attr)",43
22371,void timer_wait(alt_u32 wait_count)  ,50
22372,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",67
22373,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",74
22374,void init_ana_atb(channel_type target_aux),81
22375,void open_anaatb_atb0(void),103
22376,void close_anaatb_atb0(void),122
22377,void open_anaatb_atb1(void),138
22378,void close_anaatb_atb1(void),158
22379,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",175
22380,alt_u8 find_anaatb_vref(void),211
22381,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",257
22382,alt_u8 get_pi_code( alt_u8 pi_phase ),34
22383,void pm_uc_odi_pi(void),63
22384,"static void set_ctle_dac_magn(alt_u8 addr_i, alt_u8 value)",12
22385,"static void set_ctle_dac_sign(alt_u8 addr_i, alt_u8 value)",17
22386,static alt_u32 sample_slicer(alt_u8 addr_i),22
22387,void cal_tia(addr_i),37
22388,void pm_uc_vcm(alt_u8 ruc_vcc_parameter),41
22389,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",15
22390,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",62
22391,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",104
22392,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",134
22393,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",168
22394,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",217
22395,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",264
22396,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",303
22397,"static void write_cdr_vreg( alt_u8 addr_i, alt_u8 vreg )",343
22398,"void pm_uc_vreg_cdr(alt_u8 addr_i, alt_u8 ruc_vcc)",350
22399,"alt_u8 IORD_8DIRECT(alt_u32 base, alt_u16 offset)",20
22400,"void   IOWR_8DIRECT(alt_u32 base, alt_u16 offset, alt_u8 data)",32
22401,"alt_u32 IORD_32DIRECT(alt_u32 BASE, alt_u16 OFFSET)",41
22402,"alt_u16 IORD_16DIRECT(alt_u32 BASE, alt_u16 OFFSET)",43
22403,"void    IOWR_32DIRECT(alt_u32 BASE, alt_u16 OFFSET, alt_u32 DATA)",45
22404,"void    IOWR_16DIRECT(alt_u32 BASE, alt_u16 OFFSET, alt_u16 DATA)",47
22405,"alt_u32 IORD(alt_u32 BASE, alt_u16 REGNUM)",49
22406,"void    IOWR(alt_u32 BASE, alt_u16 REGNUM, alt_u16 DATA)",51
22407,void init_stat(),55
22408,void get_stat(),61
22409,void createdir( char* path ),23
22410,"void cal_request( struct hssi_context* p_cc, alt_u8 blk_id, alt_u32 flag, char* msg)",32
22411,"void tb_dfe_odi(struct hssi_context* p_cc, alt_u8 blk_id, FILE *fp)",42
22412,"void tb_tia(struct hssi_context* p_cc, alt_u8 blk_id, FILE *fp)",84
22413,"void tb_odi_pi(struct hssi_context* p_cc, alt_u8 blk_id, FILE *fp)",114
22414,"void tb_vcm(struct hssi_context* p_cc, alt_u8 blk_id, FILE *fp)",150
22415,"void tb_vreg(struct hssi_context* p_cc, FILE *fp)",172
22416,int main(),211
22417,void cal_aux_comp(void),13
22418,void cal_aux_fix(alt_u8 ruc_vcc),7
22419,static uint32_t abs_32(int32_t in),17
22420,static uint32_t read_temperature(void),25
22421,static uint32_t get_frequency(uint8_t addr_i),48
22422,static uint32_t get_atb_voltage(void),94
22423,static uint32_t sample_vctrl_voltage(uint8_t addr_i),113
22424,"static int32_t measure_distance(uint32_t x, uint32_t y)",129
22425,"static uint32_t compute_vco_frequency(uint32_t vco_count, uint32_t ref_count, uint32_t design_freq)",159
22426,"static int32_t target_deltaf(uint32_t f_2, uint32_t delta_v)",181
22427,"static uint32_t check_dyn(uint8_t addr_i, uint8_t ruc_vcc, uint32_t dyn, uint32_t design_freq)",203
22428,"void kvco_cdr(uint8_t addr_i, uint8_t ruc_vcc)",284
22429,static uint8_t fix_read(uint8_t pcie_flag),13
22430,"static void fix_write(uint8_t pcie_flag, uint8_t fix)",31
22431,uint8_t reset_counters(void),45
22432,"static void read_counters_8b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",65
22433,"void read_counters_12b(uint32_t * refcnt_p, uint32_t * vcocnt_p)",82
22434,"static uint32_t vco_too_fast(uint8_t pcie_flag, uint8_t fix)",103
22435,"static uint32_t generic_binary(uint8_t init_hi, uint8_t init_lo, uint8_t x, uint32_t (*result_too_high)(uint8_t, uint8_t) )",118
22436,"uint8_t cal_cdr(alt_u8 pcie_first_run, uint8_t pcie_flag)",146
22437,"alt_u8 pm_uc_cdr_new(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",172
22438,static void skew_up_current(),32
22439,static void sweep_vref(),97
22440,alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent),125
22441,if (read_attr(PMA_PM_CR2_CDR__CHGPMP_CURRENT_UP_TRIM__2TO0) ),146
22442,static alt_u8 read_sa_vout(alt_u8 samples),25
22443,static alt_u8 dcd_saoc_vref(void),50
22444,static void set_res(alt_u8 res_setting),78
22445,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",86
22446,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",117
22447,static alt_u8 precharge_wait_sample(channel_type active_aux),138
22448,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",156
22449,static void set_vref(alt_u8 setting),211
22450,static alt_u8 vref_cal(channel_type active_aux),226
22451,static alt_u8 dcd_cp_cal(void),260
22452,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",319
22453,static alt_16 sm6_to_tc16(alt_u8 in),332
22454,static alt_u8 tc16_to_sm6(alt_16 in),348
22455,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,363
22456,static alt_u8 mutate_dn_current(alt_u8 samples),385
22457,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),411
22458,static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples),475
22459,alt_u8 calc_mcgb_addr(alt_u8 addr_i),527
22460,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",562
22461,Target Device: Crete ND (aka Crete2),12
22462,"void write_oc( alt_u8 addr_i, alt_u8 index, alt_u8 is_sign, alt_u8 value)",178
22463,"alt_u8 read_oc ( alt_u8 addr_i, alt_u8 index, alt_u8 is_sign )",207
22464,"alt_u8 read_sa ( alt_u8 addr_i, alt_u8 sa_index)",246
22465,"alt_u8 read_sa (alt_u8 addr_i, alt_u8 sa_index)",307
22466,void cal_dfe_sa( alt_u8 addr_i ),343
22467,void pm_uc_dfe_odi( alt_u8 addr_i ),526
22468,void dynamic_lcpll(alt_u8 addr_i),21
22469,void dynamic_lcpll_undo(alt_u8 addr_i),42
22470,void dynamic_fpll(alt_u8 addr_i),63
22471,void dynamic_fpll_undo(alt_u8 addr_i),84
22472,static void set_vctrl_reset_point(alt_u8 control_id),34
22473,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
22474,static alt_u8 check_fpll_counters(void),107
22475,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
22476,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
22477,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
22478,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
22479,extern void cal_aux_fix(alt_u8); // cal_aux_fix.c,13
22480,extern void cal_aux_comp(void); // cal_aux_comp.c,14
22481,"alt_32 get_active_aux_offset(alt_u8, alt_32); //from cal_legacy.c",37
22482,void hssi_init(struct hssi_context** ptr_ptr_cc),50
22483,void hssi_enter_user_mode (struct hssi_context* ptr_cc),66
22484,void hssi_exit_user_mode (struct hssi_context* ptr_cc),71
22485,const uint8_t * hssi_get_state(struct hssi_context* p_cc),76
22486,"void hssi_set_state(struct hssi_context * p_cc, const uint8_t * state_tbl)",102
22487,static alt_u8 get_vcc_bits(void),132
22488,static alt_u32 uc_has_arbiter(alt_u8 addr_i),149
22489,static void arbiter_return(alt_u8 addr_i),157
22490,static void cal_busy_clear(alt_u8 addr_i),166
22491,static void cal_busy_set(alt_u8 addr_i),175
22492,"alt_u8 check_calibration_requests(alt_u8 addr_i, struct hssi_context * p_cc)",184
22493,alt_u8 hssi_scan(struct hssi_context * p_cc),383
22494,"static void cal_do_filtered(struct hssi_context * p_cc, alt_u32 filter, alt_u32 mcgb_run_status)",442
22495,"static void clknet_calibration_backend(struct hssi_context * p_cc, alt_u32 force)",598
22496,static void clknet_calibration(struct hssi_context * p_cc),615
22497,static void process_clknet_recal(struct hssi_context * p_cc),620
22498,void hssi_cal(struct hssi_context * p_cc),625
22499,void skip_first_run( struct hssi_context* p_cc ),660
22500,"void set_ruc_vcc(  struct hssi_context* p_cc, alt_u32 blk_id, alt_u8 ruc_vcc )",665
22501,"void set_cal_request( struct hssi_context* p_cc, alt_u8 blk_id, alt_u32 flag )",671
22502,"void get_cal_result( alt_u8 addr_i, alt_u32 flag  )",691
22503,int main(),743
22504,void main() // VERIFICATION MAIN,795
22505,static void pm_uc_vreg_lcvco(void),18
22506,static alt_u8 abs_alt8(alt_8 in),79
22507,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
22508,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
22509,"void write_attr(alt_u16 attr, alt_u8 data)",28
22510,alt_u8 read_attr(alt_u16 attr),33
22511,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",38
22512,"alt_u8 read_aux(channel_type x, alt_u16 attr)",43
22513,void timer_wait(alt_u32 wait_count)  ,50
22514,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",67
22515,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",74
22516,void init_ana_atb(channel_type target_aux),81
22517,void open_anaatb_atb0(void),103
22518,void close_anaatb_atb0(void),122
22519,void open_anaatb_atb1(void),138
22520,void close_anaatb_atb1(void),158
22521,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",175
22522,alt_u8 find_anaatb_vref(void),211
22523,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",257
22524,alt_u8 get_pi_code( alt_u8 pi_phase ),39
22525,void pm_uc_odi_pi( alt_u8 addr_i ),68
22526,"static void set_ctle_dac_magn(alt_u8 addr_i, alt_u8 value)",12
22527,"static void set_ctle_dac_sign(alt_u8 addr_i, alt_u8 value)",17
22528,static alt_u32 sample_slicer(alt_u8 addr_i),22
22529,void cal_tia(addr_i),37
22530,void pm_uc_vcm(alt_u8 ruc_vcc_parameter),41
22531,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",15
22532,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",62
22533,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",104
22534,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",134
22535,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",168
22536,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",217
22537,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",264
22538,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",303
22539,"static void write_cdr_vreg( alt_u8 addr_i, alt_u8 vreg )",343
22540,"void pm_uc_vreg_cdr(alt_u8 addr_i, alt_u8 ruc_vcc)",350
22541,alt_u32 pcs_offset(alt_u32 addr),13
22542,"void write_generic(alt_u32 addr, alt_u16 attr, alt_u8 data)",19
22543,"void write_pma(alt_u8 pma_number, alt_u16 attr, alt_u8 data)",36
22544,"void write_lcpll(alt_u8 lcpll_number, alt_u16 attr, alt_u8 data)",43
22545,"void write_fpll(alt_u8 fpll_number, alt_u16 attr, alt_u8 data)",50
22546,"void write_aux(alt_u16 attr, alt_u8 data)",57
22547,"alt_u8 read_generic(alt_u32 addr, alt_u16 attr)",63
22548,"alt_u8 read_pma(alt_u8 pma_number, alt_u16 attr)",79
22549,"alt_u8 read_lcpll(alt_u8 lcpll_number, alt_u16 attr)",86
22550,"alt_u8 read_fpll(alt_u8 fpll_number, alt_u16 attr)",93
22551,alt_u8 read_aux(alt_u16 attr),100
22552,*        Copyright (c) 2015 Altera Corporation,12
22553,extern int hssi_dummy_run(void); //dummy code here ,21
22554,void hssi_init (struct hssi_context** ptr_ptr_cc),37
22555,void hssi_enter_user_mode (struct hssi_context* ptr_cc),44
22556,void hssi_exit_user_mode (struct hssi_context* ptr_cc),50
22557,uint8_t hssi_scan (struct hssi_context* ptr_cc),56
22558,void hssi_cal (struct hssi_context* ptr_cc),62
22559,static void pass_back_arbiter(alt_u32 addr),10
22560,static void set_cal_done(alt_u32 addr),22
22561,int hssi_dummy_run(void),33
22562,static alt_u8 test_byte(void),74
22563,static void wait_for_arbiter(alt_u32 addr),87
22564,static void flag_failure(void),101
22565,int hssi_dummy_run(void),106
22566,void cal_aux_comp(void),13
22567,void cal_aux_fix(alt_u8 ruc_vcc),7
22568,"static void set_cdr_vcobias(cdr_cal_type cal_type, alt_u8 vco_bias)",33
22569,"static alt_u8 cal_cdr(alt_u8 pcie_first_run, cdr_cal_type cal_type, alt_u8 ruc_vcc_parameter)",60
22570,"alt_u8 pm_uc_cdr(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",265
22571,static void skew_up_current(),32
22572,static void sweep_vref(),97
22573,alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent),125
22574,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),146
22575,static alt_u8 read_sa_vout(alt_u8 samples),25
22576,static alt_u8 dcd_saoc_vref(void),50
22577,static void set_res(alt_u8 res_setting),78
22578,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",86
22579,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",119
22580,static alt_u8 precharge_wait_sample(channel_type active_aux),140
22581,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",158
22582,static void set_vref(alt_u8 setting),213
22583,static alt_u8 vref_cal(channel_type active_aux),228
22584,static alt_u8 dcd_cp_cal(void),262
22585,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",321
22586,static alt_16 sm6_to_tc16(alt_u8 in),334
22587,static alt_u8 tc16_to_sm6(alt_16 in),350
22588,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,365
22589,static alt_u8 mutate_dn_current(alt_u8 samples),387
22590,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),413
22591,static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples),477
22592,alt_u8 calc_mcgb_addr(alt_u8 addr_i),529
22593,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",564
22594,"void write_setting (alt_u8 read_index, alt_u8 sa_value)",23
22595,alt_u8 read_sa (alt_u8 read_index),44
22596,void cal_dfe_sa(void),66
22597,void pm_uc_dfe_odi(void),133
22598,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),144
22599,static void set_vctrl_reset_point(alt_u8 control_id),34
22600,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
22601,static alt_u8 check_fpll_counters(void),107
22602,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
22603,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
22604,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
22605,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
22606,static void pm_uc_vreg_lcvco(void),18
22607,static alt_u8 abs_alt8(alt_8 in),79
22608,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
22609,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
22610,"void write_attr(alt_u16 attr, alt_u8 data)",28
22611,alt_u8 read_attr(alt_u16 attr),33
22612,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",38
22613,"alt_u8 read_aux(channel_type x, alt_u16 attr)",43
22614,void timer_wait(alt_u32 wait_count)  ,50
22615,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",67
22616,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",74
22617,void init_ana_atb(channel_type target_aux),81
22618,void open_anaatb_atb0(void),103
22619,void close_anaatb_atb0(void),122
22620,void open_anaatb_atb1(void),138
22621,void close_anaatb_atb1(void),158
22622,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",175
22623,alt_u8 find_anaatb_vref(void),211
22624,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",257
22625,void pm_uc_vcm(alt_u8 ruc_vcc_parameter) ,24
22626,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",12
22627,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",57
22628,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",99
22629,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",129
22630,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",163
22631,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",212
22632,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",259
22633,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",298
22634,extern void cal_aux_fix(alt_u8); // cal_aux_fix.c,33
22635,extern void cal_aux_comp(void); // cal_aux_comp.c,34
22636,"alt_32 get_active_aux_offset(alt_u8, alt_32); //from cal_legacy.c",50
22637,void hssi_init(struct hssi_context** ptr_ptr_cc),60
22638,void hssi_enter_user_mode (struct hssi_context* ptr_cc),74
22639,void hssi_exit_user_mode (struct hssi_context* ptr_cc),79
22640,alt_u8 * hssi_get_state(struct hssi_context* p_cc),84
22641,"void hssi_set_state(struct hssi_context * p_cc, alt_u8 * state_tbl)",110
22642,static alt_u8 get_vcc_bits(void),136
22643,static alt_u32 uc_has_arbiter(alt_u8 addr_i),153
22644,static void arbiter_return(alt_u8 addr_i),161
22645,static void cal_busy_clear(alt_u8 addr_i),170
22646,static void cal_busy_set(alt_u8 addr_i),179
22647,"alt_u8 check_calibration_requests(alt_u8 addr_i, struct hssi_context * p_cc)",188
22648,alt_u8 hssi_scan(struct hssi_context * p_cc),284
22649,"static void cal_do_filtered(struct hssi_context * p_cc, alt_u32 filter, alt_u32 mcgb_run_status)",343
22650,"static void clknet_calibration_backend(struct hssi_context * p_cc, alt_u32 force)",465
22651,static void clknet_calibration(struct hssi_context * p_cc),482
22652,static void process_clknet_recal(struct hssi_context * p_cc),487
22653,void hssi_cal(struct hssi_context * p_cc),492
22654,void cal_aux_comp(void),13
22655,void cal_aux_fix(alt_u8 ruc_vcc),7
22656,"static void set_cdr_vcobias(cdr_cal_type cal_type, alt_u8 vco_bias)",33
22657,"static alt_u8 cal_cdr(alt_u8 pcie_first_run, cdr_cal_type cal_type, alt_u8 ruc_vcc_parameter)",60
22658,"alt_u8 pm_uc_cdr(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",265
22659,static void skew_up_current(),32
22660,static void sweep_vref(),97
22661,alt_u8 pm_uc_cp_cdr(alt_u8 * cdr_cp_current_intent),125
22662,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),146
22663,static alt_u8 read_sa_vout(alt_u8 samples),25
22664,static alt_u8 dcd_saoc_vref(void),50
22665,static void set_res(alt_u8 res_setting),78
22666,"static void set_dcd_xcurrent(alt_u8 setting, alt_u8 is_downcurrent)",86
22667,"static void set_dcd_xtrim(alt_u8 setting, alt_u8 is_downcurrent)",119
22668,static alt_u8 precharge_wait_sample(channel_type active_aux),140
22669,"static alt_u8 cal_cp_dcd_ix(channel_type active_aux, alt_u8 is_downcurrent)",158
22670,static void set_vref(alt_u8 setting),213
22671,static alt_u8 vref_cal(channel_type active_aux),228
22672,static alt_u8 dcd_cp_cal(void),262
22673,"static void write_dc_tune(alt_u16 attr, alt_u8 dcc_code)",321
22674,static alt_16 sm6_to_tc16(alt_u8 in),334
22675,static alt_u8 tc16_to_sm6(alt_16 in),350
22676,static alt_u8 check_for_double_flip(alt_u8 samples) /* return 1 if dc_tune sweep flips twice */,365
22677,static alt_u8 mutate_dn_current(alt_u8 samples),387
22678,static __attribute__ ((noinline)) alt_u8 dcd_loop_binary(alt_u8 samples),413
22679,static __attribute__ ((noinline)) alt_u8 dcd_loop_linear(alt_u8 samples),477
22680,alt_u8 calc_mcgb_addr(alt_u8 addr_i),529
22681,"void pm_uc_dcd(alt_u8 addr_i, alt_u8 dcd_fast_mode)",564
22682,"void write_setting (alt_u8 read_index, alt_u8 sa_value)",23
22683,alt_u8 read_sa (alt_u8 read_index),44
22684,void cal_dfe_sa(void),66
22685,void pm_uc_dfe_odi(void),133
22686,if (read_attr(PMA_PM_CDR__CDR_POWERDOWN_MODE) ),144
22687,static void set_vctrl_reset_point(alt_u8 control_id),34
22688,"static void write_fix(alt_u8 control_id, alt_u8 fix)",82
22689,static alt_u8 check_fpll_counters(void),107
22690,"static void get_fpll_counters(alt_u16 * refclk_count_p, alt_u16 * vcoclk_count_p)",132
22691,"static alt_u8 vco_is_faster(alt_u8 control_id, alt_u8 fix_setting)",161
22692,"static alt_u8 cal_fpll(alt_u8 pcie_first_run, alt_u8 control_id)",176
22693,"void pm_uc_fpll(alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",237
22694,static void pm_uc_vreg_lcvco(void),18
22695,static alt_u8 abs_alt8(alt_8 in),79
22696,"static void select_lc_tank_voltage(alt_u8 addr_i, alt_u8 selection)",87
22697,"void pm_uc_lc_pll(alt_u8 addr_i, alt_u8 pcie_first_run, alt_u8 ruc_vcc_parameter)",108
22698,"void write_attr(alt_u16 attr, alt_u8 data)",28
22699,alt_u8 read_attr(alt_u16 attr),33
22700,"void write_aux(channel_type x, alt_u16 attr, alt_u8 data)",38
22701,"alt_u8 read_aux(channel_type x, alt_u16 attr)",43
22702,void timer_wait(alt_u32 wait_count)  ,50
22703,"alt_32 get_active_aux_offset(alt_u8 is_write, int new_offset)",67
22704,"channel_type get_active_aux(alt_u8 is_write, channel_type new_active_aux)",74
22705,void init_ana_atb(channel_type target_aux),81
22706,void open_anaatb_atb0(void),103
22707,void close_anaatb_atb0(void),122
22708,void open_anaatb_atb1(void),138
22709,void close_anaatb_atb1(void),158
22710,"alt_u8 set_aux_vref(alt_u8 vref_base, alt_u8 vref_boost)",175
22711,alt_u8 find_anaatb_vref(void),211
22712,"alt_u8 read_attr_multiple(int total_loop_count, alt_u16 attribute)           ",257
22713,void pm_uc_vcm(alt_u8 ruc_vcc_parameter) ,24
22714,"static alt_u8 cal_vreg(alt_u8 addr_i, alt_u16 attribute_hi, alt_u16 attribute_lo, alt_u8 flag)",12
22715,"void pm_uc_vreg_lcpll(alt_u8 addr_i, alt_u8 ruc_vcc)",57
22716,"alt_u8 pm_uc_vreg_mcgb(alt_u8 addr_i, alt_u8 ruc_vcc)",99
22717,"void pm_uc_vreg_fpll(alt_u8 addr_i, alt_u8 ruc_vcc)",129
22718,"void pm_uc_vreg_pma(alt_u8 addr_i, alt_u8 ruc_vcc)",163
22719,"void calibrate_clknet(alt_u8 ruc_vcc, alt_u8 filter_type)",212
22720,"void calibrate_clknet_custom(alt_u8 ruc_vcc, const alt_u8 custom[] )",259
22721,"alt_u32 calibrate_vreg(alt_u8 ruc_vcc, alt_u8 filter_type)",298
22722,extern void cal_aux_fix(alt_u8); // cal_aux_fix.c,33
22723,extern void cal_aux_comp(void); // cal_aux_comp.c,34
22724,"alt_32 get_active_aux_offset(alt_u8, alt_32); //from cal_legacy.c",50
22725,void hssi_init(struct hssi_context** ptr_ptr_cc),60
22726,void hssi_enter_user_mode (struct hssi_context* ptr_cc),74
22727,void hssi_exit_user_mode (struct hssi_context* ptr_cc),79
22728,alt_u8 * hssi_get_state(struct hssi_context* p_cc),84
22729,"void hssi_set_state(struct hssi_context * p_cc, alt_u8 * state_tbl)",110
22730,static alt_u8 get_vcc_bits(void),136
22731,static alt_u32 uc_has_arbiter(alt_u8 addr_i),153
22732,static void arbiter_return(alt_u8 addr_i),161
22733,static void cal_busy_clear(alt_u8 addr_i),170
22734,static void cal_busy_set(alt_u8 addr_i),179
22735,"alt_u8 check_calibration_requests(alt_u8 addr_i, struct hssi_context * p_cc)",188
22736,alt_u8 hssi_scan(struct hssi_context * p_cc),284
22737,"static void cal_do_filtered(struct hssi_context * p_cc, alt_u32 filter, alt_u32 mcgb_run_status)",343
22738,"static void clknet_calibration_backend(struct hssi_context * p_cc, alt_u32 force)",465
22739,static void clknet_calibration(struct hssi_context * p_cc),482
22740,static void process_clknet_recal(struct hssi_context * p_cc),487
22741,void hssi_cal(struct hssi_context * p_cc),492
22742,alt_u32 pcs_offset(alt_u32 addr),13
22743,"void write_generic(alt_u32 addr, alt_u16 attr, alt_u8 data)",19
22744,"void write_pma(alt_u8 pma_number, alt_u16 attr, alt_u8 data)",36
22745,"void write_lcpll(alt_u8 lcpll_number, alt_u16 attr, alt_u8 data)",43
22746,"void write_fpll(alt_u8 fpll_number, alt_u16 attr, alt_u8 data)",50
22747,"void write_aux(alt_u16 attr, alt_u8 data)",57
22748,"alt_u8 read_generic(alt_u32 addr, alt_u16 attr)",63
22749,"alt_u8 read_pma(alt_u8 pma_number, alt_u16 attr)",79
22750,"alt_u8 read_lcpll(alt_u8 lcpll_number, alt_u16 attr)",86
22751,"alt_u8 read_fpll(alt_u8 fpll_number, alt_u16 attr)",93
22752,alt_u8 read_aux(alt_u16 attr),100
22753,*        Copyright (c) 2015 Altera Corporation,12
22754,"static	void    hssi_set_state (struct hssi_context *, const uint8_t *, uint8_t); ",51
22755,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",98
22756,"uint8_t hssi_init (struct hssi_context** ptr_ptr_cc, crete_fw_hssi_intf_t *crete_fw_intf)",115
22757,void hssi_get_capabilities (hssi_capabilities_t *capabilities),187
22758,"void hssi_get_capabilities (struct hssi_context* ptr_cc, hssi_capabilities_t *capabilities)",196
22759,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",217
22760,"void fw_func_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_func_intf_t *interface)",236
22761,void fw_debug_if_init (const hssi_crete_fw_debug_intf_t *interface),274
22762,"void fw_debug_if_init (struct hssi_context* ptr_cc, const hssi_crete_fw_debug_intf_t *interface)",287
22763,void hssi_interrupt_enable (struct hssi_context* ptr_cc),317
22764,void hssi_interrupt_enable (struct hssi_context* ptr_cc),326
22765,void hssi_interrupt_disable (struct hssi_context* ptr_cc),345
22766,void hssi_interrupt_disable (struct hssi_context* ptr_cc),354
22767,void fw_watchdog_running (struct hssi_context* ptr_cc),373
22768,void fw_watchdog_running (struct hssi_context* ptr_cc),383
22769,void fw_watchdog_stopped (struct hssi_context* ptr_cc),406
22770,void fw_watchdog_stopped (struct hssi_context* ptr_cc),415
22771,uint8_t hssi_get_version(struct hssi_context* ptr_cc),439
22772,uint8_t hssi_get_version(struct hssi_context* ptr_cc),449
22773,void hssi_enter_user_mode (struct hssi_context* ptr_cc),463
22774,void hssi_enter_user_mode (struct hssi_context* ptr_cc),472
22775,void hssi_exit_user_mode (struct hssi_context* ptr_cc),492
22776,void hssi_exit_user_mode (struct hssi_context* ptr_cc),501
22777,uint8_t hssi_scan (struct hssi_context* ptr_cc),519
22778,uint8_t hssi_scan (struct hssi_context* ptr_cc),533
22779,"uint8_t hssi_cal (struct hssi_context* ptr_cc, hssi_cal_param_t hssi_cal_param)",557
22780,"uint8_t hssi_cal (struct hssi_context* ptr_cc, hssi_cal_param_t hssi_cal_param)",582
22781,"const uint8_t * hssi_get_state(struct hssi_context *ptr_cc, uint8_t* context_bytes)",601
22782,"const uint8_t* hssi_get_state(struct hssi_context *ptr_cc, uint8_t *p_context_bytes) ",614
22783,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",640
22784,"void hssi_set_state(struct hssi_context *ptr_cc, const uint8_t* p_context, uint8_t context_bytes)",658
22785,void hssi_quit (struct hssi_context *ptr_cc),691
22786,void hssi_quit (struct hssi_context *ptr_cc),700
22787,static void pass_back_arbiter(alt_u32 addr),10
22788,static alt_u8 test_byte(void),23
22789,static void wait_for_arbiter(alt_u32 addr),36
22790,static void flag_failure(void),50
22791,int hssi_dummy_run(void),55
22792,static void pass_back_arbiter(alt_u32 addr),10
22793,static alt_u8 test_byte(void),23
22794,static void wait_for_arbiter(alt_u32 addr),36
22795,static void flag_failure(void),50
22796,int hssi_dummy_run(void),55
22797,void alt_irq_init ( const void* base ),80
22798,void alt_sys_init( void ),91
22799,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
22800,"* copy of this software and associated documentation files (the ""Software""),  *",9
22801,static void alt_avalon_timer_sc_irq (void* base),54
22802,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
22803,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
22804,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
22805,"* copy of this software and associated documentation files (the ""Software""),  *",9
22806,int alt_timestamp_start(void),64
22807,alt_timestamp_type alt_timestamp(void),100
22808,alt_u32 alt_timestamp_freq(void),138
22809,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
22810,"* copy of this software and associated documentation files (the ""Software""),  *",9
22811,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
22812,"* copy of this software and associated documentation files (the ""Software""),  *",9
22813,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
22814,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
22815,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
22816,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
22817,"* copy of this software and associated documentation files (the ""Software""),  *",9
22818,void alt_vic_irq_init (alt_vic_dev* pdev),45
22819,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
22820,"* copy of this software and associated documentation files (the ""Software""),  *",9
22821,"int alt_ic_isr_register(alt_u32 ic_id,",59
22822,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
22823,"* copy of this software and associated documentation files (the ""Software""),  *",9
22824,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
22825,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
22826,"* copy of this software and associated documentation files (the ""Software""),  *",9
22827,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
22828,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
22829,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
22830,void altera_nios2_gen2_irq_init(void) ,34
22831,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
22832,"* copy of this software and associated documentation files (the ""Software""),  *",9
22833,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
22834,unsigned int alt_busy_sleep (unsigned int us),52
22835,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22836,"* copy of this software and associated documentation files (the ""Software""),  *",9
22837,int ALT_CLOSE (int fildes),42
22838,int ALT_CLOSE (int fildes),64
22839,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
22840,"* copy of this software and associated documentation files (the ""Software""),  *",9
22841,"void alt_dcache_flush (void* start, alt_u32 len)",46
22842,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
22843,"* copy of this software and associated documentation files (the ""Software""),  *",9
22844,void alt_dcache_flush_all (void),41
22845,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
22846,"* copy of this software and associated documentation files (the ""Software""),  *",9
22847,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
22848,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22849,"* copy of this software and associated documentation files (the ""Software""),  *",9
22850,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
22851,ALT_SEM(alt_fd_list_lock),109
22852,int alt_dev_reg (alt_dev* dev),151
22853,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22854,"* copy of this software and associated documentation files (the ""Software""),  *",9
22855,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
22856,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22857,"* copy of this software and associated documentation files (the ""Software""),  *",9
22858,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
22859,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22860,"* copy of this software and associated documentation files (the ""Software""),  *",9
22861,alt_dma_txchan alt_dma_txchan_open (const char* name),51
22862,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22863,"* copy of this software and associated documentation files (the ""Software""),  *",9
22864,void _do_ctors(void),58
22865,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22866,"* copy of this software and associated documentation files (the ""Software""),  *",9
22867,void _do_dtors(void),58
22868,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
22869,"* copy of this software and associated documentation files (the ""Software""),  *",9
22870,alt_ecc_fatal_exception_register(alt_u32 handler),66
22871,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22872,"* copy of this software and associated documentation files (the ""Software""),  *",9
22873,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22874,"* copy of this software and associated documentation files (the ""Software""),  *",9
22875,void __env_lock ( struct _reent *_r ),43
22876,void __env_unlock ( struct _reent *_r ),51
22877,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22878,"* copy of this software and associated documentation files (the ""Software""),  *",9
22879,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22880,"* copy of this software and associated documentation files (the ""Software""),  *",9
22881,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
22882,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22883,"* copy of this software and associated documentation files (the ""Software""),  *",9
22884,void ALT_EXIT (int exit_code),52
22885,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22886,"* copy of this software and associated documentation files (the ""Software""),  *",9
22887,"int ALT_FCNTL (int file, int cmd, ...)",66
22888,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22889,"* copy of this software and associated documentation files (the ""Software""),  *",9
22890,int alt_fd_lock (alt_fd* fd),54
22891,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22892,"* copy of this software and associated documentation files (the ""Software""),  *",9
22893,int alt_fd_unlock (alt_fd* fd),52
22894,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22895,"* copy of this software and associated documentation files (the ""Software""),  *",9
22896,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
22897,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22898,"* copy of this software and associated documentation files (the ""Software""),  *",9
22899,alt_dev* alt_find_file (const char* name),54
22900,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22901,"* copy of this software and associated documentation files (the ""Software""),  *",9
22902,alt_flash_fd* alt_flash_open_dev(const char* name),49
22903,void alt_flash_close_dev(alt_flash_fd* fd),61
22904,int alt_flash_device_register( alt_flash_fd* fd),70
22905,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22906,"* copy of this software and associated documentation files (the ""Software""),  *",9
22907,int ALT_FORK (void),45
22908,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
22909,"* copy of this software and associated documentation files (the ""Software""),  *",9
22910,"int ALT_FSTAT (int file, struct stat *st)",63
22911,"int ALT_FSTAT (int file, struct stat *st)",93
22912,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22913,"* copy of this software and associated documentation files (the ""Software""),  *",9
22914,int alt_fs_reg (alt_dev* dev),57
22915,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
22916,"* copy of this software and associated documentation files (the ""Software""),  *",9
22917,alt_getchar(void),51
22918,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22919,"* copy of this software and associated documentation files (the ""Software""),  *",9
22920,int ALT_GETPID (void),43
22921,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
22922,"* copy of this software and associated documentation files (the ""Software""),  *",9
22923,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
22924,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
22925,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22926,"* copy of this software and associated documentation files (the ""Software""),  *",9
22927,int alt_get_fd (alt_dev* dev),54
22928,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
22929,"* copy of this software and associated documentation files (the ""Software""),  *",9
22930,/* The compiler inserts calls to mcount() at the start of,48
22931,static __inline__ void * mcount_allocate(unsigned int size),133
22932,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
22933,static int nios2_pcsample_init(void),218
22934,static alt_u32 nios2_pcsample(void* context),250
22935,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
22936,"* copy of this software and associated documentation files (the ""Software""),  *",9
22937,"void alt_icache_flush (void* start, alt_u32 len)",42
22938,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
22939,"* copy of this software and associated documentation files (the ""Software""),  *",9
22940,void alt_icache_flush_all (void),41
22941,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
22942,"* copy of this software and associated documentation files (the ""Software""),  *",9
22943,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
22944,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
22945,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
22946,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
22947,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
22948,"* copy of this software and associated documentation files (the ""Software""),  *",9
22949,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
22950,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
22951,"* copy of this software and associated documentation files (the ""Software""),  *",9
22952,alt_exception_result (*alt_instruction_exception_handler),49
22953,int alt_instruction_exception_entry (alt_u32 exception_pc),53
22954,alt_instruction_exception_entry (alt_u32 exception_pc),68
22955,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
22956,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
22957,"* copy of this software and associated documentation files (the ""Software""),  *",9
22958,void alt_instruction_exception_register (,73
22959,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
22960,"* copy of this software and associated documentation files (the ""Software""),  *",9
22961,"int ALT_IOCTL (int file, int req, void* arg)",68
22962,"int ALT_IOCTL (int file, int req, void* arg)",106
22963,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22964,"* copy of this software and associated documentation files (the ""Software""),  *",9
22965,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
22966,"void alt_io_redirect(const char* stdout_dev, ",85
22967,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
22968,"* copy of this software and associated documentation files (the ""Software""),  *",9
22969,void alt_irq_handler (void),80
22970,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
22971,"* copy of this software and associated documentation files (the ""Software""),  *",9
22972,"int alt_irq_register (alt_u32 id, ",75
22973,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
22974,"* copy of this software and associated documentation files (the ""Software""),  *",9
22975,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
22976,"* copy of this software and associated documentation files (the ""Software""),  *",9
22977,int ALT_ISATTY (int file),50
22978,int ALT_ISATTY (int file),84
22979,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22980,"* copy of this software and associated documentation files (the ""Software""),  *",9
22981,"int ALT_KILL (int pid, int sig)",49
22982,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
22983,"* copy of this software and associated documentation files (the ""Software""),  *",9
22984,"int ALT_LINK ( char *existing, char *new)",45
22985,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
22986,"* copy of this software and associated documentation files (the ""Software""),  *",9
22987,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
22988,void alt_load (void),67
22989,"void alt_log_txchar(int c,char *base)",95
22990,"void alt_log_repchar(char c,int r,int base)",106
22991,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
22992,"int alt_log_printf_proc(const char *fmt, ... )",344
22993,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
22994,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
22995,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
22996,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
22997,"void alt_log_write(const void *ptr, size_t len)",440
22998,void alt_log_system_clock(),474
22999,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
23000,"* copy of this software and associated documentation files (the ""Software""),  *",9
23001,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
23002,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
23003,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
23004,"* copy of this software and associated documentation files (the ""Software""),  *",9
23005,void alt_main (void),82
23006,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23007,"* copy of this software and associated documentation files (the ""Software""),  *",9
23008,void __malloc_lock ( struct _reent *_r ),42
23009,void __malloc_unlock ( struct _reent *_r ),50
23010,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23011,"* copy of this software and associated documentation files (the ""Software""),  *",9
23012,"int ALT_OPEN (const char* file, int flags, int mode)",41
23013,static int alt_file_locked (alt_fd* fd),64
23014,"int ALT_OPEN (const char* file, int flags, int mode)",105
23015,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23016,"* copy of this software and associated documentation files (the ""Software""),  *",9
23017,"alt_printf(const char* fmt, ... )",51
23018,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23019,"* copy of this software and associated documentation files (the ""Software""),  *",9
23020,alt_putchar(int c),50
23021,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23022,"* copy of this software and associated documentation files (the ""Software""),  *",9
23023,alt_putcharbuf(int c),58
23024,alt_putbufflush(),73
23025,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23026,"* copy of this software and associated documentation files (the ""Software""),  *",9
23027,alt_putstr(const char* str),52
23028,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23029,"* copy of this software and associated documentation files (the ""Software""),  *",9
23030,"int ALT_READ (int file, void *ptr, size_t len)",58
23031,"int ALT_READ (int file, void *ptr, size_t len)",82
23032,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23033,"* copy of this software and associated documentation files (the ""Software""),  *",9
23034,void alt_release_fd (int fd),44
23035,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23036,"* copy of this software and associated documentation files (the ""Software""),  *",9
23037,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
23038,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23039,"* copy of this software and associated documentation files (the ""Software""),  *",9
23040,"alt_remap_uncached(void* ptr, alt_u32 len)",49
23041,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23042,"* copy of this software and associated documentation files (the ""Software""),  *",9
23043,"int ALT_RENAME (char *existing, char *new)",45
23044,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23045,"* copy of this software and associated documentation files (the ""Software""),  *",9
23046,caddr_t ALT_SBRK (int incr),68
23047,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23048,"* copy of this software and associated documentation files (the ""Software""),  *",9
23049,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
23050,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23051,"* copy of this software and associated documentation files (the ""Software""),  *",9
23052,"int ALT_STAT (const char *file, struct stat *st)",49
23053,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23054,"* copy of this software and associated documentation files (the ""Software""),  *",9
23055,void alt_alarm_stop (alt_alarm* alarm),66
23056,void alt_tick (void),87
23057,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23058,"* copy of this software and associated documentation files (the ""Software""),  *",9
23059,clock_t ALT_TIMES (struct tms *buf),51
23060,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23061,"* copy of this software and associated documentation files (the ""Software""),  *",9
23062,alt_uncached_free(volatile void* ptr),40
23063,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23064,"* copy of this software and associated documentation files (the ""Software""),  *",9
23065,alt_uncached_malloc(size_t size),42
23066,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23067,"* copy of this software and associated documentation files (the ""Software""),  *",9
23068,int ALT_UNLINK (char *name),45
23069,int ALT_USLEEP (useconds_t us),46
23070,unsigned int ALT_USLEEP (unsigned int us),48
23071,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23072,"* copy of this software and associated documentation files (the ""Software""),  *",9
23073,int ALT_WAIT (int *status),44
23074,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23075,"* copy of this software and associated documentation files (the ""Software""),  *",9
23076,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
23077,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
23078,void alt_irq_init ( const void* base ),80
23079,void alt_sys_init( void ),91
23080,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23081,"* copy of this software and associated documentation files (the ""Software""),  *",9
23082,static void alt_avalon_timer_sc_irq (void* base),54
23083,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
23084,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
23085,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23086,"* copy of this software and associated documentation files (the ""Software""),  *",9
23087,int alt_timestamp_start(void),64
23088,alt_timestamp_type alt_timestamp(void),100
23089,alt_u32 alt_timestamp_freq(void),138
23090,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23091,"* copy of this software and associated documentation files (the ""Software""),  *",9
23092,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23093,"* copy of this software and associated documentation files (the ""Software""),  *",9
23094,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
23095,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
23096,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
23097,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23098,"* copy of this software and associated documentation files (the ""Software""),  *",9
23099,void alt_vic_irq_init (alt_vic_dev* pdev),45
23100,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23101,"* copy of this software and associated documentation files (the ""Software""),  *",9
23102,"int alt_ic_isr_register(alt_u32 ic_id,",59
23103,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23104,"* copy of this software and associated documentation files (the ""Software""),  *",9
23105,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
23106,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23107,"* copy of this software and associated documentation files (the ""Software""),  *",9
23108,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
23109,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
23110,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
23111,void altera_nios2_gen2_irq_init(void) ,34
23112,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23113,"* copy of this software and associated documentation files (the ""Software""),  *",9
23114,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
23115,unsigned int alt_busy_sleep (unsigned int us),52
23116,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23117,"* copy of this software and associated documentation files (the ""Software""),  *",9
23118,int ALT_CLOSE (int fildes),42
23119,int ALT_CLOSE (int fildes),64
23120,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
23121,"* copy of this software and associated documentation files (the ""Software""),  *",9
23122,"void alt_dcache_flush (void* start, alt_u32 len)",46
23123,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
23124,"* copy of this software and associated documentation files (the ""Software""),  *",9
23125,void alt_dcache_flush_all (void),41
23126,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
23127,"* copy of this software and associated documentation files (the ""Software""),  *",9
23128,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
23129,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23130,"* copy of this software and associated documentation files (the ""Software""),  *",9
23131,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
23132,ALT_SEM(alt_fd_list_lock),109
23133,int alt_dev_reg (alt_dev* dev),151
23134,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23135,"* copy of this software and associated documentation files (the ""Software""),  *",9
23136,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
23137,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23138,"* copy of this software and associated documentation files (the ""Software""),  *",9
23139,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
23140,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23141,"* copy of this software and associated documentation files (the ""Software""),  *",9
23142,alt_dma_txchan alt_dma_txchan_open (const char* name),51
23143,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23144,"* copy of this software and associated documentation files (the ""Software""),  *",9
23145,void _do_ctors(void),58
23146,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23147,"* copy of this software and associated documentation files (the ""Software""),  *",9
23148,void _do_dtors(void),58
23149,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
23150,"* copy of this software and associated documentation files (the ""Software""),  *",9
23151,alt_ecc_fatal_exception_register(alt_u32 handler),66
23152,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23153,"* copy of this software and associated documentation files (the ""Software""),  *",9
23154,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23155,"* copy of this software and associated documentation files (the ""Software""),  *",9
23156,void __env_lock ( struct _reent *_r ),43
23157,void __env_unlock ( struct _reent *_r ),51
23158,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23159,"* copy of this software and associated documentation files (the ""Software""),  *",9
23160,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23161,"* copy of this software and associated documentation files (the ""Software""),  *",9
23162,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
23163,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23164,"* copy of this software and associated documentation files (the ""Software""),  *",9
23165,void ALT_EXIT (int exit_code),52
23166,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23167,"* copy of this software and associated documentation files (the ""Software""),  *",9
23168,"int ALT_FCNTL (int file, int cmd, ...)",66
23169,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23170,"* copy of this software and associated documentation files (the ""Software""),  *",9
23171,int alt_fd_lock (alt_fd* fd),54
23172,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23173,"* copy of this software and associated documentation files (the ""Software""),  *",9
23174,int alt_fd_unlock (alt_fd* fd),52
23175,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23176,"* copy of this software and associated documentation files (the ""Software""),  *",9
23177,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
23178,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23179,"* copy of this software and associated documentation files (the ""Software""),  *",9
23180,alt_dev* alt_find_file (const char* name),54
23181,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23182,"* copy of this software and associated documentation files (the ""Software""),  *",9
23183,alt_flash_fd* alt_flash_open_dev(const char* name),49
23184,void alt_flash_close_dev(alt_flash_fd* fd),61
23185,int alt_flash_device_register( alt_flash_fd* fd),70
23186,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23187,"* copy of this software and associated documentation files (the ""Software""),  *",9
23188,int ALT_FORK (void),45
23189,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23190,"* copy of this software and associated documentation files (the ""Software""),  *",9
23191,"int ALT_FSTAT (int file, struct stat *st)",63
23192,"int ALT_FSTAT (int file, struct stat *st)",93
23193,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23194,"* copy of this software and associated documentation files (the ""Software""),  *",9
23195,int alt_fs_reg (alt_dev* dev),57
23196,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23197,"* copy of this software and associated documentation files (the ""Software""),  *",9
23198,alt_getchar(void),51
23199,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23200,"* copy of this software and associated documentation files (the ""Software""),  *",9
23201,int ALT_GETPID (void),43
23202,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23203,"* copy of this software and associated documentation files (the ""Software""),  *",9
23204,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
23205,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
23206,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23207,"* copy of this software and associated documentation files (the ""Software""),  *",9
23208,int alt_get_fd (alt_dev* dev),54
23209,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
23210,"* copy of this software and associated documentation files (the ""Software""),  *",9
23211,/* The compiler inserts calls to mcount() at the start of,48
23212,static __inline__ void * mcount_allocate(unsigned int size),133
23213,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
23214,static int nios2_pcsample_init(void),218
23215,static alt_u32 nios2_pcsample(void* context),250
23216,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23217,"* copy of this software and associated documentation files (the ""Software""),  *",9
23218,"void alt_icache_flush (void* start, alt_u32 len)",42
23219,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23220,"* copy of this software and associated documentation files (the ""Software""),  *",9
23221,void alt_icache_flush_all (void),41
23222,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23223,"* copy of this software and associated documentation files (the ""Software""),  *",9
23224,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
23225,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
23226,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
23227,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
23228,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
23229,"* copy of this software and associated documentation files (the ""Software""),  *",9
23230,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
23231,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
23232,"* copy of this software and associated documentation files (the ""Software""),  *",9
23233,alt_exception_result (*alt_instruction_exception_handler),49
23234,int alt_instruction_exception_entry (alt_u32 exception_pc),53
23235,alt_instruction_exception_entry (alt_u32 exception_pc),68
23236,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
23237,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
23238,"* copy of this software and associated documentation files (the ""Software""),  *",9
23239,void alt_instruction_exception_register (,73
23240,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23241,"* copy of this software and associated documentation files (the ""Software""),  *",9
23242,"int ALT_IOCTL (int file, int req, void* arg)",68
23243,"int ALT_IOCTL (int file, int req, void* arg)",106
23244,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23245,"* copy of this software and associated documentation files (the ""Software""),  *",9
23246,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
23247,"void alt_io_redirect(const char* stdout_dev, ",85
23248,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
23249,"* copy of this software and associated documentation files (the ""Software""),  *",9
23250,void alt_irq_handler (void),80
23251,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
23252,"* copy of this software and associated documentation files (the ""Software""),  *",9
23253,"int alt_irq_register (alt_u32 id, ",75
23254,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23255,"* copy of this software and associated documentation files (the ""Software""),  *",9
23256,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23257,"* copy of this software and associated documentation files (the ""Software""),  *",9
23258,int ALT_ISATTY (int file),50
23259,int ALT_ISATTY (int file),84
23260,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23261,"* copy of this software and associated documentation files (the ""Software""),  *",9
23262,"int ALT_KILL (int pid, int sig)",49
23263,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23264,"* copy of this software and associated documentation files (the ""Software""),  *",9
23265,"int ALT_LINK ( char *existing, char *new)",45
23266,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
23267,"* copy of this software and associated documentation files (the ""Software""),  *",9
23268,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
23269,void alt_load (void),67
23270,"void alt_log_txchar(int c,char *base)",95
23271,"void alt_log_repchar(char c,int r,int base)",106
23272,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
23273,"int alt_log_printf_proc(const char *fmt, ... )",344
23274,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
23275,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
23276,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
23277,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
23278,"void alt_log_write(const void *ptr, size_t len)",440
23279,void alt_log_system_clock(),474
23280,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
23281,"* copy of this software and associated documentation files (the ""Software""),  *",9
23282,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
23283,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
23284,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
23285,"* copy of this software and associated documentation files (the ""Software""),  *",9
23286,void alt_main (void),82
23287,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23288,"* copy of this software and associated documentation files (the ""Software""),  *",9
23289,void __malloc_lock ( struct _reent *_r ),42
23290,void __malloc_unlock ( struct _reent *_r ),50
23291,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23292,"* copy of this software and associated documentation files (the ""Software""),  *",9
23293,"int ALT_OPEN (const char* file, int flags, int mode)",41
23294,static int alt_file_locked (alt_fd* fd),64
23295,"int ALT_OPEN (const char* file, int flags, int mode)",105
23296,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23297,"* copy of this software and associated documentation files (the ""Software""),  *",9
23298,"alt_printf(const char* fmt, ... )",51
23299,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23300,"* copy of this software and associated documentation files (the ""Software""),  *",9
23301,alt_putchar(int c),50
23302,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23303,"* copy of this software and associated documentation files (the ""Software""),  *",9
23304,alt_putcharbuf(int c),58
23305,alt_putbufflush(),73
23306,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23307,"* copy of this software and associated documentation files (the ""Software""),  *",9
23308,alt_putstr(const char* str),52
23309,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23310,"* copy of this software and associated documentation files (the ""Software""),  *",9
23311,"int ALT_READ (int file, void *ptr, size_t len)",58
23312,"int ALT_READ (int file, void *ptr, size_t len)",82
23313,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23314,"* copy of this software and associated documentation files (the ""Software""),  *",9
23315,void alt_release_fd (int fd),44
23316,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23317,"* copy of this software and associated documentation files (the ""Software""),  *",9
23318,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
23319,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23320,"* copy of this software and associated documentation files (the ""Software""),  *",9
23321,"alt_remap_uncached(void* ptr, alt_u32 len)",49
23322,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23323,"* copy of this software and associated documentation files (the ""Software""),  *",9
23324,"int ALT_RENAME (char *existing, char *new)",45
23325,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23326,"* copy of this software and associated documentation files (the ""Software""),  *",9
23327,caddr_t ALT_SBRK (int incr),68
23328,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23329,"* copy of this software and associated documentation files (the ""Software""),  *",9
23330,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
23331,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23332,"* copy of this software and associated documentation files (the ""Software""),  *",9
23333,"int ALT_STAT (const char *file, struct stat *st)",49
23334,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23335,"* copy of this software and associated documentation files (the ""Software""),  *",9
23336,void alt_alarm_stop (alt_alarm* alarm),66
23337,void alt_tick (void),87
23338,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23339,"* copy of this software and associated documentation files (the ""Software""),  *",9
23340,clock_t ALT_TIMES (struct tms *buf),51
23341,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23342,"* copy of this software and associated documentation files (the ""Software""),  *",9
23343,alt_uncached_free(volatile void* ptr),40
23344,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23345,"* copy of this software and associated documentation files (the ""Software""),  *",9
23346,alt_uncached_malloc(size_t size),42
23347,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23348,"* copy of this software and associated documentation files (the ""Software""),  *",9
23349,int ALT_UNLINK (char *name),45
23350,int ALT_USLEEP (useconds_t us),46
23351,unsigned int ALT_USLEEP (unsigned int us),48
23352,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23353,"* copy of this software and associated documentation files (the ""Software""),  *",9
23354,int ALT_WAIT (int *status),44
23355,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23356,"* copy of this software and associated documentation files (the ""Software""),  *",9
23357,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
23358,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
23359,*        Copyright (c) 2015 Altera Corporation,12
23360,status_code_t cnoc_msi_cmd_req_handler_init(),118
23361,status_code_t cnoc_msi_cmd_req_handler_init(),127
23362,"status_code_t ssm_status(const uint32_t *cmd_packet, uint32_t payload_words)",139
23363,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",156
23364,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",161
23365,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",175
23366,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",180
23367,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",190
23368,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",195
23369,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",205
23370,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",210
23371,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",228
23372,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",233
23373,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",250
23374,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",255
23375,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",269
23376,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",274
23377,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",287
23378,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",292
23379,"static status_code_t crete_not_busy_req(const uint32_t *cmd_packet, uint32_t payload_words)",326
23380,"static status_code_t crete_not_busy_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",335
23381,"static status_code_t crete_hip_cfg_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",350
23382,"static status_code_t crete_hip_cfg_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",357
23383,"static status_code_t crete_cal_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",371
23384,"static status_code_t crete_cal_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",378
23385,"static status_code_t cfg_refclk_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",392
23386,"static status_code_t cfg_refclk_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",399
23387,"static status_code_t crete_release_reset_sbm(const uint32_t *cmd_packet, uint32_t payload_words)",418
23388,"static status_code_t crete_release_reset_sbm(const uint32_t *cmd_packet, uint32_t payload_words)",425
23389,"static status_code_t internal_sbus_fw_write_handler(const uint32_t *cmd_packet, uint32_t payload_words)",443
23390,"static status_code_t internal_config_data_write_handler(const uint32_t *cmd_packet, uint32_t payload_words)",470
23391,"status_code_t crete_enable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",497
23392,"status_code_t crete_disable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",514
23393,"status_code_t crete_set_temp_sensor_mode(const uint32_t *cmd_packet, uint32_t payload_words)",535
23394,"static status_code_t cr_configure_aibio_redundancy(uint32_t ch_num, uint32_t ubump_num)",547
23395,"static status_code_t cr_configure_aibio_redundancy(uint32_t ch_num, uint32_t ubump_num)",551
23396,"static status_code_t cr_configure_aibaux_redundancy(uint32_t ch_num, uint32_t ubump_num)",612
23397,"static status_code_t cr_configure_aibaux_redundancy(uint32_t ch_num, uint32_t ubump_num)",617
23398,"static status_code_t check_serdes_crc_rev_id_handler(const uint32_t *cmd_packet, uint32_t payload_words)",644
23399,"static status_code_t test_end_signal_handler(const uint32_t *cmd_packet, uint32_t payload_words)",705
23400,void clear_ipc_signal(),716
23401,void set_ipc_signal(),721
23402,uint8_t wait_for_ip_signal(uint8_t non_blocking),726
23403,"status_code_t cr_avmm_config_loader(CR3_SEGMENT_CONTEXT_TYPE* segment_context, uint32_t* data_buffer){",14
23404,"static status_code_t program_avmm_config_regs(uint32_t *src_addr,",103
23405,"static status_code_t verify_segment_header(CR3_SEGMENT_CONTEXT_TYPE* segment_context, uint32_t* config_base_addr)",145
23406,"static status_code_t verify_channel_header(CR3_SEGMENT_CONTEXT_TYPE* segment_context, uint32_t hdr_word2)",190
23407,"static status_code_t verify_instance_header(CR3_SEGMENT_CONTEXT_TYPE* segment_context, CHAN_IP_CFG_ID_T inst_type, uint32_t hdr_word2)",243
23408,void clear_segment_context(CR3_SEGMENT_CONTEXT_TYPE* segment_context),309
23409,void clear_segment_context(CR3_SEGMENT_CONTEXT_TYPE* segment_context),315
23410,*        Copyright (c) 2015 Altera Corporation,12
23411,void cr_cnoc_rx_init(void),59
23412,void cr_cnoc_rx_init(),67
23413,static void cr_cnoc_rx_isr(void* context),139
23414,static void cr_cnoc_rx_isr(void* context),147
23415,void supervisory_control_loop(void),370
23416,void supervisory_control_loop(void),378
23417,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",391
23418,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",400
23419,bool is_main_ring_buf_empty(),432
23420,void pass_msg_2_cnoc_intr_handler(uint32_t addr_reg),441
23421,void pass_msg_2_cnoc_intr_handler(uint32_t addr_reg),450
23422,*        Copyright (c) 2015 Altera Corporation,12
23423,void cr_cnoc_tx_init(void),36
23424,void cr_cnoc_tx_init(),44
23425,"void cr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",73
23426,"void cr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",85
23427,"void send_msg_2_aib(const uint32_t *cmd_packet, uint32_t payload_words)",111
23428,"void send_msg_2_aib(uint32_t *cmd_packet, uint32_t payload_words)",119
23429,*        Copyright (c) 2015 Altera Corporation,12
23430,void init_cr3_dfx_state(),42
23431,void process_cr3_dfx_function(),51
23432,void clr_dfx_cmd_buf(),110
23433,void clr_dfx_cmd_buf(),114
23434,*        Copyright (c) 2015 Altera Corporation,12
23435,void dfx_cmd_req_handler_init(),119
23436,void dfx_cmd_req_handler_init(),127
23437,"void write_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",143
23438,"void write_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",151
23439,"void read_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",165
23440,"void read_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",174
23441,"void write_bulk_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",190
23442,"void write_bulk_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",198
23443,"void read_bulk_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",220
23444,"void read_bulk_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",228
23445,"void write_seq_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",253
23446,"void write_seq_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",261
23447,"void read_seq_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",285
23448,"void read_seq_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",293
23449,"void read_efuse_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",317
23450,"void read_efuse_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",325
23451,"void write_efuse_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",353
23452,"void write_efuse_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",361
23453,"void efuse_pgm_testrow_bit_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",381
23454,"void efuse_pgm_testrow_bit_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",389
23455,"void efuse_pgm_testcol_bit_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",409
23456,"void efuse_pgm_testcol_bit_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",417
23457,"void efuse_testrow_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",437
23458,"void efuse_testrow_read_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",445
23459,"void efuse_testcol_bit_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",467
23460,"void efuse_testcol_bit_read_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",475
23461,"void efuse_red_disable_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",497
23462,"void efuse_red_disable_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",505
23463,"void efuse_red_pgm_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",519
23464,"void efuse_red_pgm_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",527
23465,"void efuse_red_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",547
23466,"void efuse_red_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",555
23467,"void enter_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",577
23468,"void enter_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",585
23469,"void exit_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",599
23470,"void exit_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",607
23471,"void sbus_fw_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",623
23472,"void sbus_fw_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",631
23473,"void temp_sensor_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",646
23474,"void temp_sensor_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",655
23475,"void avmm_config_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",682
23476,"void avmm_config_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",690
23477,"void serdes_crc_check_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",706
23478,"void serdes_crc_check_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",714
23479,"void avmm_config_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",732
23480,"void spico_crc_check_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",740
23481,"void avmm_config_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",758
23482,"void sbus_init_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",766
23483,"void default_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",785
23484,"void default_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp)",793
23485,"void unrecognized_opcode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",809
23486,"void unrecognized_opcode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp)",817
23487,"void rsfec_user_access_en_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",832
23488,"static void rsfec_user_access_en_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp)",840
23489,* @author Nimeshkumar Shah (nimshah@altera.com),4
23490,*        Copyright (c) 2015 Altera Corporation,12
23491,"static void strobe_data(uint16_t efuse_bit_addr, uint8_t mode)",128
23492,"static void strobe_data(uint16_t efuse_bit_addr, uint8_t mode)",140
23493,void cr_efuse_enter_pd_mode(),212
23494,void cr_efuse_enter_pd_mode(),223
23495,void cr_efuse_exit_pd_mode(),242
23496,void cr_efuse_exit_pd_mode(),253
23497,"uint8_t cr_efuse_init(uint32_t *data0, uint32_t *data1)",277
23498,"uint8_t cr_efuse_init(uint32_t *data0, uint32_t *data1)",294
23499,"uint8_t cr_efuse_test_column_bit_read(uint8_t test_column_bit_addr, TestSelect_t testselect, bool margin_mode, uint32_t *data)",309
23500,"uint8_t cr_efuse_test_column_bit_read(uint8_t test_column_bit_addr, TestSelect_t testselect, bool margin_mode, uint32_t *data)",322
23501,"uint8_t cr_efuse_test_row_read(uint8_t bitline, bool margin_mode, uint32_t *data)",451
23502,"uint8_t cr_efuse_test_row_read(uint8_t bitline, bool margin_mode, uint32_t *data)",463
23503,"uint8_t cr_efuse_test_pgm_1bit(uint16_t efuse_test_bit_addr, TestSelect_t testselect, bool set)",584
23504,"uint8_t cr_efuse_test_pgm_1bit(uint16_t efuse_test_bit_addr, TestSelect_t testselect, bool set)",597
23505,uint8_t cr_efuse_redundancy_disable(RFBit_t rf_bit),697
23506,uint8_t cr_efuse_redundancy_disable(RFBit_t rf_bit),708
23507,"uint8_t cr_efuse_redundancy_pgm(uint16_t efuse_bit_address, bool set, RFBit_t rf_bit)",790
23508,"uint8_t cr_efuse_redundancy_pgm(uint16_t efuse_bit_address, bool set, RFBit_t rf_bit)",803
23509,"uint8_t cr_efuse_redundancy_read(bool margin_mode, uint32_t *data, uint8_t *rf)",911
23510,"uint8_t cr_efuse_redundancy_read(bool margin_mode, uint32_t *data0, uint32_t *data1)",929
23511,"uint8_t cr_efuse_array_pgm_1bit(uint16_t efuse_bit_addr, bool set)",1062
23512,"uint8_t cr_efuse_array_pgm_1bit(uint16_t efuse_bit_addr, bool set)",1074
23513,"uint8_t cr_efuse_array_pgm_row(uint16_t efuse_row_addr, uint32_t data)",1158
23514,"uint8_t cr_efuse_array_pgm_row(uint16_t efuse_row_addr, uint32_t data)",1170
23515,"uint8_t cr_efuse_array_read(uint16_t efuse_row_addr, bool margin_mode, uint32_t *data)",1265
23516,"uint8_t cr_efuse_array_read(uint16_t efuse_row_addr, bool margin_mode, uint32_t *data)",1277
23517,"uint8_t cr_efuse_strobe_auto_clear_en(bool enable, uint8_t strobe_auto_cnt_lmt)",1382
23518,"uint8_t cr_efuse_strobe_auto_clear_en(bool enable, uint8_t strobe_auto_cnt_lmt)",1394
23519,*        Copyright (c) 2018 Intel Corporation,12
23520,"uint8_t cr_pma_init(uint8_t channel_number, uint16_t mode){",39
23521,"uint8_t cr_pma_set_lb(cr_sbus_context_t *cr_sbus_ctxt, uint8_t channel_number, uint16_t ilb_mode){",79
23522,"uint8_t cr_pma_set_prbs(cr_sbus_context_t *cr_sbus_ctxt, uint8_t channel_number, uint16_t prbs_mode){",112
23523,"uint8_t cr_pma_write_recipe(cr_sbus_context_t *cr_sbus_ctxt, uint8_t channel_number, uint16_t intr_code, uint16_t intr_data){",171
23524,"uint8_t cr_pma_save_recipe(cr_sbus_context_t *cr_sbus_ctxt, uint8_t channel_number, uint8_t index, uint16_t intr_data, uint16_t mode)",196
23525,"uint8_t cr_pma_load_recipe(cr_sbus_context_t *cr_sbus_ctxt, uint8_t channel_number, uint16_t mode)",230
23526,"uint8_t cr_pma_copy_recipe(cr_sbus_context_t *cr_sbus_ctxt, uint8_t channel_number, uint8_t target_channel ,uint16_t mode){",378
23527,"uint8_t cr_pma_run_ical(cr_sbus_context_t *cr_sbus_ctxt, uint32_t channel_number, uint8_t effort_mode){",413
23528,"uint8_t cr_pma_run_pcal(cr_sbus_context_t *cr_sbus_ctxt, uint32_t channel_number, uint8_t pcal_mode){",453
23529,"uint8_t cr_pma_check_status(cr_sbus_context_t *cr_sbus_ctxt, uint32_t channel_number, uint16_t *intr_return){",483
23530,"uint8_t cr_pma_check_recipe(cr_sbus_context_t *cr_sbus_ctxt, uint32_t channel_number, uint16_t recipe, uint16_t code, uint16_t *intr_return){",510
23531,"static uint16_t cr_serdes_mem_rd( cr_sbus_context_t *cr_sbus_ctxt, uint8_t addr, uint16_t mem_addr) {",547
23532,"static void cr_serdes_mem_wr(cr_sbus_context_t *cr_sbus_ctxt, uint8_t addr, uint16_t mem_addr, uint16_t data) {",566
23533,"static uint16_t cr_serdes_mem_rmw(cr_sbus_context_t *cr_sbus_ctxt, uint8_t addr, uint16_t mem_addr, uint16_t data, uint16_t mask) {",585
23534,"static uint8_t cr_serdes_get_rx_line_encoding(cr_sbus_context_t *cr_sbus_ctxt, uint8_t addr) {",605
23535,"uint8_t cr_pma_enable_low_power_mode(cr_sbus_context_t *cr_sbus_ctxt, uint8_t addr, uint16_t enable_low_power_mode) {",626
23536,*        Copyright (c) 2015 Altera Corporation,12
23537,static uint8_t read_sbus_result(),42
23538,static inline uint8_t read_sbus_result(),50
23539,static uint8_t read_sbus_timeout_status(),63
23540,static inline uint8_t read_sbus_timeout_status(),72
23541,"static uint32_t sbus_command(uint8_t sbus_addr, uint8_t sbus_data_addr, cr_sbus_cmd_t sbus_cmd, uint32_t data, cr_sbus_timeout_t timeout, uint8_t *result_code)",84
23542,"static uint32_t sbus_command(uint8_t sbus_addr, uint8_t sbus_data_addr, cr_sbus_cmd_t sbus_cmd, uint32_t data, cr_sbus_timeout_t timeout, uint8_t *result_code)",97
23543,uint8_t cr_sbus_prepare_reconfig(),169
23544,uint8_t cr_sbus_prepare_reconfig(),178
23545,"cr_sbus_context_t* cr_sbus_init(uint8_t clk_divider, uint8_t clk_halt_multiplier, uint32_t xcvrs_enabled1hot)",205
23546,"cr_sbus_context_t* cr_sbus_init(uint8_t clk_divider, uint8_t clk_halt_multiplier, uint32_t xcvrs_enabled1hot)",217
23547,"uint8_t cr_sbus_block_reset(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr)",296
23548,"uint8_t cr_sbus_block_reset(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr)",306
23549,"uint8_t cr_sbus_write(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr, uint8_t sbus_data_addr, uint32_t data, uint8_t read_result, cr_sbus_timeout_t timeout)",338
23550,"uint8_t cr_sbus_write(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr, uint8_t sbus_data_addr, uint32_t data, cr_sbus_timeout_t timeout)",351
23551,"uint8_t cr_sbus_read(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr, uint8_t sbus_data_addr, uint32_t *data, cr_sbus_timeout_t timeout)",378
23552,"uint8_t cr_sbus_read(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr, uint8_t sbus_data_addr, uint32_t *data, cr_sbus_timeout_t timeout)",391
23553,"uint8_t cr_sbus_upload_spico_fw(cr_sbus_context_t *cr_sbus_ctxt, uint32_t *enc_fw_code, uint32_t size_in_10bit_instr, bool last_chunk)",420
23554,"uint8_t cr_sbus_upload_spico_fw(cr_sbus_context_t *cr_sbus_ctxt, uint32_t *enc_fw_code, uint32_t size_in_10bit_instr, bool last_chunk)",433
23555,uint8_t cr_sbus_spico_enable(cr_sbus_context_t *cr_sbus_ctxt),532
23556,uint8_t cr_sbus_spico_enable(cr_sbus_context_t *cr_sbus_ctxt),541
23557,uint8_t cr_sbus_spico_crc_run(cr_sbus_context_t *cr_sbus_ctxt),568
23558,uint8_t cr_sbus_spico_crc_run(cr_sbus_context_t *cr_sbus_ctxt),577
23559,uint8_t cr_sbus_spico_crc_check(cr_sbus_context_t *cr_sbus_ctxt),618
23560,uint8_t cr_sbus_spico_crc_check(cr_sbus_context_t *cr_sbus_ctxt),628
23561,"uint8_t cr_sbus_upload_serdes_fw(cr_sbus_context_t *cr_sbus_ctxt, uint32_t *enc_fw_code, uint32_t size_in_10bit_instr, bool last_chunk)",677
23562,"uint8_t cr_sbus_upload_serdes_fw(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr, uint32_t *enc_fw_code, uint32_t size_in_10bit_instr, bool last_chunk)",690
23563,"uint8_t cr_sbus_serdes_enable(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr)",772
23564,"uint8_t cr_sbus_serdes_enable(cr_sbus_context_t *cr_sbus_ctxt, uint8_t sbus_addr)",782
23565,uint8_t cr_sbus_serdes_crc_run(cr_sbus_context_t *cr_sbus_ctxt),824
23566,uint8_t cr_sbus_serdes_crc_run(cr_sbus_context_t *cr_sbus_ctxt),833
23567,uint8_t cr_sbus_serdes_crc_check(cr_sbus_context_t *cr_sbus_ctxt),869
23568,uint8_t cr_sbus_serdes_crc_check(cr_sbus_context_t *cr_sbus_ctxt),879
23569,"uint8_t cr_sbus_send_spico_intr(cr_sbus_context_t *cr_sbus_ctxt, uint8_t intr_code, uint16_t intr_data, uint16_t *intr_return)",936
23570,"uint8_t cr_sbus_send_spico_intr(cr_sbus_context_t *cr_sbus_ctxt, uint8_t intr_code, uint16_t intr_data, uint16_t *intr_return, uint16_t *intr_status)",949
23571,"uint8_t cr_sbus_send_serdes_intr(cr_sbus_context_t *cr_sbus_ctxt, uint32_t serdes_sbus_addr, uint8_t intr_code, uint16_t intr_data, uint16_t *intr_return)",997
23572,"uint8_t cr_sbus_send_serdes_intr(cr_sbus_context_t *cr_sbus_ctxt, uint32_t serdes_sbus_addr, uint16_t intr_code, uint16_t intr_data, uint16_t *intr_return)",1009
23573,"uint8_t cr_sbus_spico_check_mem_ecc_status(cr_sbus_context_t *cr_sbus_ctxt, cr_sbus_ecc_t *imem_ecc, cr_sbus_ecc_t *dmem_ecc)",1052
23574,"uint8_t cr_sbus_spico_check_mem_ecc_status(cr_sbus_context_t *cr_sbus_ctxt, cr_sbus_ecc_t *imem_ecc, cr_sbus_ecc_t *dmem_ecc)",1067
23575,"uint8_t cr_sbus_serdes_check_mem_ecc_status(cr_sbus_context_t *cr_sbus_ctxt, uint8_t serdes_sbus_addr, cr_sbus_ecc_t *imem_ecc, cr_sbus_ecc_t *dmem_ecc)",1110
23576,"uint8_t cr_sbus_serdes_check_mem_ecc_status(cr_sbus_context_t *cr_sbus_ctxt, uint8_t serdes_sbus_addr, cr_sbus_ecc_t *imem_ecc, cr_sbus_ecc_t *dmem_ecc)",1126
23577,"uint8_t cr_sbus_serdes_channel_assign_bcast_addr(cr_sbus_context_t *cr_sbus_ctxt, uint32_t channel_map, uint8_t bcast_addr)",1176
23578,"uint8_t cr_sbus_serdes_channel_assign_bcast_addr(cr_sbus_context_t *cr_sbus_ctxt, uint32_t channel_map, uint8_t bcast_addr)",1188
23579,"uint8_t cr_sbus_ctrlr_cmd(cr_sbus_context_t *cr_sbus_ctxt, cr_sbus_timeout_t timeout)",1228
23580,"uint8_t cr_sbus_ctrlr_cmd(cr_sbus_context_t *cr_sbus_ctxt, cr_sbus_timeout_t timeout)",1239
23581,void cr_serdes_spico_process_quantum(),1263
23582,void cr_serdes_spico_process_quantum(),1271
23583,"status_code_t cr_sbus_fw_loader(FW_FORWARDING_CONTEXT_TYPE* fw_forwarding_context, uint32_t* data_buffer){",11
23584,status_code_t verify_ssm_header(),56
23585,"status_code_t verify_ssm_header(FW_FORWARDING_CONTEXT_TYPE* fw_forwarding_context, uint32_t* fw_data)",63
23586,void clear_fw_fowarding_context(void),129
23587,void clear_fw_forwarding_context(FW_FORWARDING_CONTEXT_TYPE* fw_forwarding_context),135
23588,*        Copyright (c) 2015 Altera Corporation,12
23589,static uint8_t read_sbus_result(),63
23590,static uint8_t read_sbus_result(),71
23591,"static uint32_t sbus_command(uint8_t sbus_addr, uint8_t sbus_data_addr, cr_sbus_cmd_t sbus_cmd, uint32_t data, uint8_t *result_code)",80
23592,"static uint32_t sbus_command(uint8_t sbus_addr, uint8_t sbus_data_addr, cr_sbus_cmd_t sbus_cmd, uint32_t data, uint8_t *result_code)",92
23593,uint8_t cr_tempsensor_init(uint32_t clk_divider),118
23594,uint8_t cr_tempsensor_init(uint32_t clk_divider),130
23595,uint8_t cr_tempsensor_deinit(),202
23596,uint8_t cr_tempsensor_deinit(),213
23597,uint8_t cr_tempsensor_select_mode(Temp_Sensor_t temp_sensor),237
23598,uint8_t cr_tempsensor_select_mode(Temp_Sensor_t temp_sensor),255
23599,uint8_t cr_tempsensor_read_value(uint16_t *temp_value),332
23600,uint8_t cr_tempsensor_read_value(uint16_t *temp_value),345
23601,int32_t cr_tempsensor_convert_raw_to_celsius24m8f(uint16_t raw_value),402
23602,int32_t cr_tempsensor_convert_raw_to_celsius24m8f(uint16_t raw_value),412
23603,"void cr_tempsensor_set_aib_mode(Temp_Sensor_t temp_sensor, uint32_t update_interval_ms)",421
23604,"void cr_tempsensor_set_aib_mode(Temp_Sensor_t temp_sensor, uint32_t update_interval_ms)",433
23605,void cr_tempsensor_quantum_pause(),455
23606,void cr_tempsensor_quantum_pause(void),465
23607,void cr_tempsensor_quantum_resume(),474
23608,void cr_tempsensor_quantum_resume(void),484
23609,void cr_tempsensor_process_is_paused(),499
23610,uint8_t cr_tempsensor_process_is_paused(void),509
23611,void cr_tempsensor_set_reporting_mode(uint32_t mode),515
23612,void cr_tempsensor_set_reporting_mode(uint32_t mode),525
23613,void cr_tempsensor_process_quantum(),531
23614,void cr_tempsensor_process_quantum(),542
23615,void cr_tempsensor_read_sensor_once(),734
23616,"uint8_t cr_tempsensor_read_sensor_once(Temp_Sensor_t temp_sensor, uint16_t *raw_value)",747
23617,"static void set_ssm_out_pio(write_mode_t write_mode, uint32_t bits, crete_fw_mode_t fw_mode) {",24
23618,void init_avmm_ssm_out_pio() {,40
23619,void enter_user_mode(){,50
23620,void exit_user_mode(){,55
23621,void release_reset_hip(){,60
23622,void assert_reset_hip(){,127
23623,uint32_t xcvr_enabled(){,160
23624,uint8_t release_sbus_reset(){,164
23625,void assert_sbus_reset(){,203
23626,void release_avmm_reset() {,229
23627,void assert_avmm_reset() {,238
23628,void set_sbus_crc_result(uint8_t is_pass) {,247
23629,void cr_set_rsfec_user_access_en(uint32_t access_en_bits),257
23630,*        Copyright (c) 2015 Altera Corporation,12
23631,"uint8_t check_message_debounce(uint8_t channel, uint32_t *msg)",47
23632,"uint8_t cr_usr_mailbox_recvmsg(uint8_t channel, uint32_t *msg)",80
23633,"uint8_t cr_usr_mailbox_recvmsg(uint8_t channel, uint32_t *msg)",93
23634,"uint8_t cr_usr_mailbox_sndmsg(uint8_t channel, uint32_t msg)",123
23635,"uint8_t cr_usr_mailbox_sndmsg(uint8_t channel, uint32_t msg)",135
23636,void cr_usr_mailbox_process_quantum(),158
23637,void cr_usr_mailbox_process_quantum(),173
23638,*        Copyright (c) 2015 Altera Corporation,12
23639,int main(void),53
23640,void notify_aib_crete_init(),138
23641,void notify_aib_crete_init(),142
23642,void alt_irq_init ( const void* base ),84
23643,void alt_sys_init( void ),95
23644,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23645,"* copy of this software and associated documentation files (the ""Software""),  *",9
23646,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
23647,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
23648,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
23649,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
23650,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
23651,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
23652,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
23653,int alt_avalon_dma_space (alt_dma_txchan dma),355
23654,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
23655,static void alt_avalon_dma_irq (void* context),446
23656,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
23657,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
23658,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23659,"* copy of this software and associated documentation files (the ""Software""),  *",9
23660,"int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,",39
23661,"int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)",65
23662,"int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)",70
23663,int altera_avalon_fifo_read_almostfull(alt_u32 address),76
23664,int altera_avalon_fifo_read_almostempty(alt_u32 address),81
23665,"int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)",86
23666,int altera_avalon_fifo_read_level(alt_u32 address),91
23667,"int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)",96
23668,"int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)",105
23669,"int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)",114
23670,"int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)",123
23671,"int altera_avalon_fifo_write_fifo(alt_u32 write_address,",132
23672,"int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)",147
23673,"int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)",161
23674,"int altera_avalon_fifo_write_other_info(alt_u32 write_address,",170
23675,int altera_avalon_fifo_read_other_info(alt_u32 read_address),185
23676,int altera_avalon_fifo_read_backpressure (alt_u32 read_address){,190
23677,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23678,"* copy of this software and associated documentation files (the ""Software""),  *",9
23679,static void alt_avalon_timer_sc_irq (void* base),54
23680,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
23681,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
23682,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23683,"* copy of this software and associated documentation files (the ""Software""),  *",9
23684,int alt_timestamp_start(void),64
23685,alt_timestamp_type alt_timestamp(void),100
23686,alt_u32 alt_timestamp_freq(void),138
23687,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23688,"* copy of this software and associated documentation files (the ""Software""),  *",9
23689,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23690,"* copy of this software and associated documentation files (the ""Software""),  *",9
23691,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
23692,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
23693,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
23694,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23695,"* copy of this software and associated documentation files (the ""Software""),  *",9
23696,void alt_vic_irq_init (alt_vic_dev* pdev),45
23697,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23698,"* copy of this software and associated documentation files (the ""Software""),  *",9
23699,"int alt_ic_isr_register(alt_u32 ic_id,",59
23700,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23701,"* copy of this software and associated documentation files (the ""Software""),  *",9
23702,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
23703,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23704,"* copy of this software and associated documentation files (the ""Software""),  *",9
23705,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
23706,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
23707,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
23708,void altera_nios2_gen2_irq_init(void) ,34
23709,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23710,"* copy of this software and associated documentation files (the ""Software""),  *",9
23711,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
23712,unsigned int alt_busy_sleep (unsigned int us),52
23713,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23714,"* copy of this software and associated documentation files (the ""Software""),  *",9
23715,int ALT_CLOSE (int fildes),42
23716,int ALT_CLOSE (int fildes),64
23717,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
23718,"* copy of this software and associated documentation files (the ""Software""),  *",9
23719,"void alt_dcache_flush (void* start, alt_u32 len)",46
23720,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
23721,"* copy of this software and associated documentation files (the ""Software""),  *",9
23722,void alt_dcache_flush_all (void),41
23723,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
23724,"* copy of this software and associated documentation files (the ""Software""),  *",9
23725,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
23726,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23727,"* copy of this software and associated documentation files (the ""Software""),  *",9
23728,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
23729,ALT_SEM(alt_fd_list_lock),109
23730,int alt_dev_reg (alt_dev* dev),151
23731,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23732,"* copy of this software and associated documentation files (the ""Software""),  *",9
23733,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
23734,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23735,"* copy of this software and associated documentation files (the ""Software""),  *",9
23736,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
23737,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23738,"* copy of this software and associated documentation files (the ""Software""),  *",9
23739,alt_dma_txchan alt_dma_txchan_open (const char* name),51
23740,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23741,"* copy of this software and associated documentation files (the ""Software""),  *",9
23742,void _do_ctors(void),58
23743,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23744,"* copy of this software and associated documentation files (the ""Software""),  *",9
23745,void _do_dtors(void),58
23746,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
23747,"* copy of this software and associated documentation files (the ""Software""),  *",9
23748,alt_ecc_fatal_exception_register(alt_u32 handler),66
23749,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23750,"* copy of this software and associated documentation files (the ""Software""),  *",9
23751,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23752,"* copy of this software and associated documentation files (the ""Software""),  *",9
23753,void __env_lock ( struct _reent *_r ),43
23754,void __env_unlock ( struct _reent *_r ),51
23755,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23756,"* copy of this software and associated documentation files (the ""Software""),  *",9
23757,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23758,"* copy of this software and associated documentation files (the ""Software""),  *",9
23759,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
23760,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23761,"* copy of this software and associated documentation files (the ""Software""),  *",9
23762,void ALT_EXIT (int exit_code),52
23763,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23764,"* copy of this software and associated documentation files (the ""Software""),  *",9
23765,"int ALT_FCNTL (int file, int cmd, ...)",66
23766,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23767,"* copy of this software and associated documentation files (the ""Software""),  *",9
23768,int alt_fd_lock (alt_fd* fd),54
23769,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23770,"* copy of this software and associated documentation files (the ""Software""),  *",9
23771,int alt_fd_unlock (alt_fd* fd),52
23772,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23773,"* copy of this software and associated documentation files (the ""Software""),  *",9
23774,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
23775,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23776,"* copy of this software and associated documentation files (the ""Software""),  *",9
23777,alt_dev* alt_find_file (const char* name),54
23778,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23779,"* copy of this software and associated documentation files (the ""Software""),  *",9
23780,alt_flash_fd* alt_flash_open_dev(const char* name),49
23781,void alt_flash_close_dev(alt_flash_fd* fd),61
23782,int alt_flash_device_register( alt_flash_fd* fd),70
23783,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23784,"* copy of this software and associated documentation files (the ""Software""),  *",9
23785,int ALT_FORK (void),45
23786,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23787,"* copy of this software and associated documentation files (the ""Software""),  *",9
23788,"int ALT_FSTAT (int file, struct stat *st)",63
23789,"int ALT_FSTAT (int file, struct stat *st)",93
23790,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23791,"* copy of this software and associated documentation files (the ""Software""),  *",9
23792,int alt_fs_reg (alt_dev* dev),57
23793,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23794,"* copy of this software and associated documentation files (the ""Software""),  *",9
23795,alt_getchar(void),51
23796,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23797,"* copy of this software and associated documentation files (the ""Software""),  *",9
23798,int ALT_GETPID (void),43
23799,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23800,"* copy of this software and associated documentation files (the ""Software""),  *",9
23801,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
23802,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
23803,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23804,"* copy of this software and associated documentation files (the ""Software""),  *",9
23805,int alt_get_fd (alt_dev* dev),54
23806,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
23807,"* copy of this software and associated documentation files (the ""Software""),  *",9
23808,/* The compiler inserts calls to mcount() at the start of,48
23809,static __inline__ void * mcount_allocate(unsigned int size),133
23810,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
23811,static int nios2_pcsample_init(void),218
23812,static alt_u32 nios2_pcsample(void* context),250
23813,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23814,"* copy of this software and associated documentation files (the ""Software""),  *",9
23815,"void alt_icache_flush (void* start, alt_u32 len)",42
23816,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23817,"* copy of this software and associated documentation files (the ""Software""),  *",9
23818,void alt_icache_flush_all (void),41
23819,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23820,"* copy of this software and associated documentation files (the ""Software""),  *",9
23821,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
23822,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
23823,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
23824,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
23825,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
23826,"* copy of this software and associated documentation files (the ""Software""),  *",9
23827,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
23828,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
23829,"* copy of this software and associated documentation files (the ""Software""),  *",9
23830,alt_exception_result (*alt_instruction_exception_handler),49
23831,int alt_instruction_exception_entry (alt_u32 exception_pc),53
23832,alt_instruction_exception_entry (alt_u32 exception_pc),68
23833,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
23834,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
23835,"* copy of this software and associated documentation files (the ""Software""),  *",9
23836,void alt_instruction_exception_register (,73
23837,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23838,"* copy of this software and associated documentation files (the ""Software""),  *",9
23839,"int ALT_IOCTL (int file, int req, void* arg)",68
23840,"int ALT_IOCTL (int file, int req, void* arg)",106
23841,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23842,"* copy of this software and associated documentation files (the ""Software""),  *",9
23843,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
23844,"void alt_io_redirect(const char* stdout_dev, ",85
23845,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
23846,"* copy of this software and associated documentation files (the ""Software""),  *",9
23847,void alt_irq_handler (void),80
23848,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
23849,"* copy of this software and associated documentation files (the ""Software""),  *",9
23850,"int alt_irq_register (alt_u32 id, ",75
23851,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23852,"* copy of this software and associated documentation files (the ""Software""),  *",9
23853,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23854,"* copy of this software and associated documentation files (the ""Software""),  *",9
23855,int ALT_ISATTY (int file),50
23856,int ALT_ISATTY (int file),84
23857,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23858,"* copy of this software and associated documentation files (the ""Software""),  *",9
23859,"int ALT_KILL (int pid, int sig)",49
23860,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23861,"* copy of this software and associated documentation files (the ""Software""),  *",9
23862,"int ALT_LINK ( char *existing, char *new)",45
23863,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
23864,"* copy of this software and associated documentation files (the ""Software""),  *",9
23865,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
23866,void alt_load (void),67
23867,"void alt_log_txchar(int c,char *base)",95
23868,"void alt_log_repchar(char c,int r,int base)",106
23869,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
23870,"int alt_log_printf_proc(const char *fmt, ... )",344
23871,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
23872,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
23873,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
23874,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
23875,"void alt_log_write(const void *ptr, size_t len)",440
23876,void alt_log_system_clock(),474
23877,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
23878,"* copy of this software and associated documentation files (the ""Software""),  *",9
23879,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
23880,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
23881,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
23882,"* copy of this software and associated documentation files (the ""Software""),  *",9
23883,void alt_main (void),82
23884,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23885,"* copy of this software and associated documentation files (the ""Software""),  *",9
23886,void __malloc_lock ( struct _reent *_r ),42
23887,void __malloc_unlock ( struct _reent *_r ),50
23888,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23889,"* copy of this software and associated documentation files (the ""Software""),  *",9
23890,"int ALT_OPEN (const char* file, int flags, int mode)",41
23891,static int alt_file_locked (alt_fd* fd),64
23892,"int ALT_OPEN (const char* file, int flags, int mode)",105
23893,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23894,"* copy of this software and associated documentation files (the ""Software""),  *",9
23895,"alt_printf(const char* fmt, ... )",51
23896,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23897,"* copy of this software and associated documentation files (the ""Software""),  *",9
23898,alt_putchar(int c),50
23899,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23900,"* copy of this software and associated documentation files (the ""Software""),  *",9
23901,alt_putcharbuf(int c),58
23902,alt_putbufflush(),73
23903,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
23904,"* copy of this software and associated documentation files (the ""Software""),  *",9
23905,alt_putstr(const char* str),52
23906,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23907,"* copy of this software and associated documentation files (the ""Software""),  *",9
23908,"int ALT_READ (int file, void *ptr, size_t len)",58
23909,"int ALT_READ (int file, void *ptr, size_t len)",82
23910,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23911,"* copy of this software and associated documentation files (the ""Software""),  *",9
23912,void alt_release_fd (int fd),44
23913,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23914,"* copy of this software and associated documentation files (the ""Software""),  *",9
23915,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
23916,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23917,"* copy of this software and associated documentation files (the ""Software""),  *",9
23918,"alt_remap_uncached(void* ptr, alt_u32 len)",49
23919,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23920,"* copy of this software and associated documentation files (the ""Software""),  *",9
23921,"int ALT_RENAME (char *existing, char *new)",45
23922,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23923,"* copy of this software and associated documentation files (the ""Software""),  *",9
23924,caddr_t ALT_SBRK (int incr),68
23925,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23926,"* copy of this software and associated documentation files (the ""Software""),  *",9
23927,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
23928,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23929,"* copy of this software and associated documentation files (the ""Software""),  *",9
23930,"int ALT_STAT (const char *file, struct stat *st)",49
23931,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
23932,"* copy of this software and associated documentation files (the ""Software""),  *",9
23933,void alt_alarm_stop (alt_alarm* alarm),66
23934,void alt_tick (void),87
23935,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23936,"* copy of this software and associated documentation files (the ""Software""),  *",9
23937,clock_t ALT_TIMES (struct tms *buf),51
23938,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23939,"* copy of this software and associated documentation files (the ""Software""),  *",9
23940,alt_uncached_free(volatile void* ptr),40
23941,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
23942,"* copy of this software and associated documentation files (the ""Software""),  *",9
23943,alt_uncached_malloc(size_t size),42
23944,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23945,"* copy of this software and associated documentation files (the ""Software""),  *",9
23946,int ALT_UNLINK (char *name),45
23947,int ALT_USLEEP (useconds_t us),46
23948,unsigned int ALT_USLEEP (unsigned int us),48
23949,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
23950,"* copy of this software and associated documentation files (the ""Software""),  *",9
23951,int ALT_WAIT (int *status),44
23952,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23953,"* copy of this software and associated documentation files (the ""Software""),  *",9
23954,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
23955,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
23956,void alt_irq_init ( const void* base ),84
23957,void alt_sys_init( void ),95
23958,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
23959,"* copy of this software and associated documentation files (the ""Software""),  *",9
23960,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
23961,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
23962,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
23963,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
23964,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
23965,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
23966,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
23967,int alt_avalon_dma_space (alt_dma_txchan dma),355
23968,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
23969,static void alt_avalon_dma_irq (void* context),446
23970,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
23971,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
23972,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
23973,"* copy of this software and associated documentation files (the ""Software""),  *",9
23974,"int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,",39
23975,"int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)",65
23976,"int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)",70
23977,int altera_avalon_fifo_read_almostfull(alt_u32 address),76
23978,int altera_avalon_fifo_read_almostempty(alt_u32 address),81
23979,"int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)",86
23980,int altera_avalon_fifo_read_level(alt_u32 address),91
23981,"int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)",96
23982,"int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)",105
23983,"int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)",114
23984,"int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)",123
23985,"int altera_avalon_fifo_write_fifo(alt_u32 write_address,",132
23986,"int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)",147
23987,"int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)",161
23988,"int altera_avalon_fifo_write_other_info(alt_u32 write_address,",170
23989,int altera_avalon_fifo_read_other_info(alt_u32 read_address),185
23990,int altera_avalon_fifo_read_backpressure (alt_u32 read_address){,190
23991,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23992,"* copy of this software and associated documentation files (the ""Software""),  *",9
23993,static void alt_avalon_timer_sc_irq (void* base),54
23994,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
23995,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
23996,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
23997,"* copy of this software and associated documentation files (the ""Software""),  *",9
23998,int alt_timestamp_start(void),64
23999,alt_timestamp_type alt_timestamp(void),100
24000,alt_u32 alt_timestamp_freq(void),138
24001,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24002,"* copy of this software and associated documentation files (the ""Software""),  *",9
24003,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24004,"* copy of this software and associated documentation files (the ""Software""),  *",9
24005,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
24006,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
24007,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
24008,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24009,"* copy of this software and associated documentation files (the ""Software""),  *",9
24010,void alt_vic_irq_init (alt_vic_dev* pdev),45
24011,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24012,"* copy of this software and associated documentation files (the ""Software""),  *",9
24013,"int alt_ic_isr_register(alt_u32 ic_id,",59
24014,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24015,"* copy of this software and associated documentation files (the ""Software""),  *",9
24016,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
24017,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24018,"* copy of this software and associated documentation files (the ""Software""),  *",9
24019,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
24020,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
24021,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
24022,void altera_nios2_gen2_irq_init(void) ,34
24023,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24024,"* copy of this software and associated documentation files (the ""Software""),  *",9
24025,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
24026,unsigned int alt_busy_sleep (unsigned int us),52
24027,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24028,"* copy of this software and associated documentation files (the ""Software""),  *",9
24029,int ALT_CLOSE (int fildes),42
24030,int ALT_CLOSE (int fildes),64
24031,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
24032,"* copy of this software and associated documentation files (the ""Software""),  *",9
24033,"void alt_dcache_flush (void* start, alt_u32 len)",46
24034,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
24035,"* copy of this software and associated documentation files (the ""Software""),  *",9
24036,void alt_dcache_flush_all (void),41
24037,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
24038,"* copy of this software and associated documentation files (the ""Software""),  *",9
24039,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
24040,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24041,"* copy of this software and associated documentation files (the ""Software""),  *",9
24042,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
24043,ALT_SEM(alt_fd_list_lock),109
24044,int alt_dev_reg (alt_dev* dev),151
24045,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24046,"* copy of this software and associated documentation files (the ""Software""),  *",9
24047,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
24048,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24049,"* copy of this software and associated documentation files (the ""Software""),  *",9
24050,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
24051,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24052,"* copy of this software and associated documentation files (the ""Software""),  *",9
24053,alt_dma_txchan alt_dma_txchan_open (const char* name),51
24054,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24055,"* copy of this software and associated documentation files (the ""Software""),  *",9
24056,void _do_ctors(void),58
24057,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24058,"* copy of this software and associated documentation files (the ""Software""),  *",9
24059,void _do_dtors(void),58
24060,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
24061,"* copy of this software and associated documentation files (the ""Software""),  *",9
24062,alt_ecc_fatal_exception_register(alt_u32 handler),66
24063,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24064,"* copy of this software and associated documentation files (the ""Software""),  *",9
24065,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24066,"* copy of this software and associated documentation files (the ""Software""),  *",9
24067,void __env_lock ( struct _reent *_r ),43
24068,void __env_unlock ( struct _reent *_r ),51
24069,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24070,"* copy of this software and associated documentation files (the ""Software""),  *",9
24071,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24072,"* copy of this software and associated documentation files (the ""Software""),  *",9
24073,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
24074,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24075,"* copy of this software and associated documentation files (the ""Software""),  *",9
24076,void ALT_EXIT (int exit_code),52
24077,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24078,"* copy of this software and associated documentation files (the ""Software""),  *",9
24079,"int ALT_FCNTL (int file, int cmd, ...)",66
24080,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24081,"* copy of this software and associated documentation files (the ""Software""),  *",9
24082,int alt_fd_lock (alt_fd* fd),54
24083,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24084,"* copy of this software and associated documentation files (the ""Software""),  *",9
24085,int alt_fd_unlock (alt_fd* fd),52
24086,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24087,"* copy of this software and associated documentation files (the ""Software""),  *",9
24088,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
24089,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24090,"* copy of this software and associated documentation files (the ""Software""),  *",9
24091,alt_dev* alt_find_file (const char* name),54
24092,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24093,"* copy of this software and associated documentation files (the ""Software""),  *",9
24094,alt_flash_fd* alt_flash_open_dev(const char* name),49
24095,void alt_flash_close_dev(alt_flash_fd* fd),61
24096,int alt_flash_device_register( alt_flash_fd* fd),70
24097,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24098,"* copy of this software and associated documentation files (the ""Software""),  *",9
24099,int ALT_FORK (void),45
24100,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24101,"* copy of this software and associated documentation files (the ""Software""),  *",9
24102,"int ALT_FSTAT (int file, struct stat *st)",63
24103,"int ALT_FSTAT (int file, struct stat *st)",93
24104,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24105,"* copy of this software and associated documentation files (the ""Software""),  *",9
24106,int alt_fs_reg (alt_dev* dev),57
24107,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24108,"* copy of this software and associated documentation files (the ""Software""),  *",9
24109,alt_getchar(void),51
24110,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24111,"* copy of this software and associated documentation files (the ""Software""),  *",9
24112,int ALT_GETPID (void),43
24113,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24114,"* copy of this software and associated documentation files (the ""Software""),  *",9
24115,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
24116,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
24117,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24118,"* copy of this software and associated documentation files (the ""Software""),  *",9
24119,int alt_get_fd (alt_dev* dev),54
24120,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
24121,"* copy of this software and associated documentation files (the ""Software""),  *",9
24122,/* The compiler inserts calls to mcount() at the start of,48
24123,static __inline__ void * mcount_allocate(unsigned int size),133
24124,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
24125,static int nios2_pcsample_init(void),218
24126,static alt_u32 nios2_pcsample(void* context),250
24127,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24128,"* copy of this software and associated documentation files (the ""Software""),  *",9
24129,"void alt_icache_flush (void* start, alt_u32 len)",42
24130,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24131,"* copy of this software and associated documentation files (the ""Software""),  *",9
24132,void alt_icache_flush_all (void),41
24133,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24134,"* copy of this software and associated documentation files (the ""Software""),  *",9
24135,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
24136,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
24137,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
24138,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
24139,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
24140,"* copy of this software and associated documentation files (the ""Software""),  *",9
24141,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
24142,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
24143,"* copy of this software and associated documentation files (the ""Software""),  *",9
24144,alt_exception_result (*alt_instruction_exception_handler),49
24145,int alt_instruction_exception_entry (alt_u32 exception_pc),53
24146,alt_instruction_exception_entry (alt_u32 exception_pc),68
24147,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
24148,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
24149,"* copy of this software and associated documentation files (the ""Software""),  *",9
24150,void alt_instruction_exception_register (,73
24151,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24152,"* copy of this software and associated documentation files (the ""Software""),  *",9
24153,"int ALT_IOCTL (int file, int req, void* arg)",68
24154,"int ALT_IOCTL (int file, int req, void* arg)",106
24155,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24156,"* copy of this software and associated documentation files (the ""Software""),  *",9
24157,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
24158,"void alt_io_redirect(const char* stdout_dev, ",85
24159,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
24160,"* copy of this software and associated documentation files (the ""Software""),  *",9
24161,void alt_irq_handler (void),80
24162,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
24163,"* copy of this software and associated documentation files (the ""Software""),  *",9
24164,"int alt_irq_register (alt_u32 id, ",75
24165,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24166,"* copy of this software and associated documentation files (the ""Software""),  *",9
24167,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24168,"* copy of this software and associated documentation files (the ""Software""),  *",9
24169,int ALT_ISATTY (int file),50
24170,int ALT_ISATTY (int file),84
24171,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24172,"* copy of this software and associated documentation files (the ""Software""),  *",9
24173,"int ALT_KILL (int pid, int sig)",49
24174,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24175,"* copy of this software and associated documentation files (the ""Software""),  *",9
24176,"int ALT_LINK ( char *existing, char *new)",45
24177,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
24178,"* copy of this software and associated documentation files (the ""Software""),  *",9
24179,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
24180,void alt_load (void),67
24181,"void alt_log_txchar(int c,char *base)",95
24182,"void alt_log_repchar(char c,int r,int base)",106
24183,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
24184,"int alt_log_printf_proc(const char *fmt, ... )",344
24185,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
24186,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
24187,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
24188,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
24189,"void alt_log_write(const void *ptr, size_t len)",440
24190,void alt_log_system_clock(),474
24191,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
24192,"* copy of this software and associated documentation files (the ""Software""),  *",9
24193,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
24194,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
24195,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
24196,"* copy of this software and associated documentation files (the ""Software""),  *",9
24197,void alt_main (void),82
24198,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24199,"* copy of this software and associated documentation files (the ""Software""),  *",9
24200,void __malloc_lock ( struct _reent *_r ),42
24201,void __malloc_unlock ( struct _reent *_r ),50
24202,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24203,"* copy of this software and associated documentation files (the ""Software""),  *",9
24204,"int ALT_OPEN (const char* file, int flags, int mode)",41
24205,static int alt_file_locked (alt_fd* fd),64
24206,"int ALT_OPEN (const char* file, int flags, int mode)",105
24207,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24208,"* copy of this software and associated documentation files (the ""Software""),  *",9
24209,"alt_printf(const char* fmt, ... )",51
24210,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24211,"* copy of this software and associated documentation files (the ""Software""),  *",9
24212,alt_putchar(int c),50
24213,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24214,"* copy of this software and associated documentation files (the ""Software""),  *",9
24215,alt_putcharbuf(int c),58
24216,alt_putbufflush(),73
24217,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24218,"* copy of this software and associated documentation files (the ""Software""),  *",9
24219,alt_putstr(const char* str),52
24220,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24221,"* copy of this software and associated documentation files (the ""Software""),  *",9
24222,"int ALT_READ (int file, void *ptr, size_t len)",58
24223,"int ALT_READ (int file, void *ptr, size_t len)",82
24224,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24225,"* copy of this software and associated documentation files (the ""Software""),  *",9
24226,void alt_release_fd (int fd),44
24227,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
24228,"* copy of this software and associated documentation files (the ""Software""),  *",9
24229,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
24230,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
24231,"* copy of this software and associated documentation files (the ""Software""),  *",9
24232,"alt_remap_uncached(void* ptr, alt_u32 len)",49
24233,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24234,"* copy of this software and associated documentation files (the ""Software""),  *",9
24235,"int ALT_RENAME (char *existing, char *new)",45
24236,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24237,"* copy of this software and associated documentation files (the ""Software""),  *",9
24238,caddr_t ALT_SBRK (int incr),68
24239,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24240,"* copy of this software and associated documentation files (the ""Software""),  *",9
24241,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
24242,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24243,"* copy of this software and associated documentation files (the ""Software""),  *",9
24244,"int ALT_STAT (const char *file, struct stat *st)",49
24245,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24246,"* copy of this software and associated documentation files (the ""Software""),  *",9
24247,void alt_alarm_stop (alt_alarm* alarm),66
24248,void alt_tick (void),87
24249,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24250,"* copy of this software and associated documentation files (the ""Software""),  *",9
24251,clock_t ALT_TIMES (struct tms *buf),51
24252,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
24253,"* copy of this software and associated documentation files (the ""Software""),  *",9
24254,alt_uncached_free(volatile void* ptr),40
24255,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
24256,"* copy of this software and associated documentation files (the ""Software""),  *",9
24257,alt_uncached_malloc(size_t size),42
24258,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24259,"* copy of this software and associated documentation files (the ""Software""),  *",9
24260,int ALT_UNLINK (char *name),45
24261,int ALT_USLEEP (useconds_t us),46
24262,unsigned int ALT_USLEEP (unsigned int us),48
24263,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24264,"* copy of this software and associated documentation files (the ""Software""),  *",9
24265,int ALT_WAIT (int *status),44
24266,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24267,"* copy of this software and associated documentation files (the ""Software""),  *",9
24268,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
24269,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
24270,* Copyright (2018) Intel Corporation,13
24271,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
24272,status_code_t cnoc_msi_cmd_req_handler_init(),150
24273,status_code_t cnoc_msi_cmd_req_handler_init(),159
24274,"status_code_t ssm_status(const uint32_t *cmd_packet, uint32_t payload_words)",171
24275,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",188
24276,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",193
24277,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",208
24278,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",213
24279,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",223
24280,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",228
24281,"status_code_t register_get_handler(const uint32_t *cmd_packet, uint32_t payload_words)",237
24282,"status_code_t register_get_handler(const uint32_t *cmd_packet, uint32_t payload_words)",242
24283,"status_code_t register_set_handler(const uint32_t *cmd_packet, uint32_t payload_words)",267
24284,"status_code_t register_set_handler(const uint32_t *cmd_packet, uint32_t payload_words)",272
24285,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",295
24286,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",300
24287,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",320
24288,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",325
24289,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",344
24290,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",349
24291,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",377
24292,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",382
24293,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",398
24294,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",403
24295,"status_code_t pio_clear_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",442
24296,"status_code_t pio_clear_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",447
24297,"status_code_t pio_assert_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",470
24298,"status_code_t pio_assert_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",476
24299,"static status_code_t crete_not_busy_req(const uint32_t *cmd_packet, uint32_t payload_words)",517
24300,"static status_code_t crete_not_busy_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",526
24301,"static status_code_t crete_hip_cfg_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",542
24302,"static status_code_t crete_hip_cfg_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",549
24303,"static status_code_t crete_cal_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",563
24304,"static status_code_t crete_cal_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",570
24305,"static status_code_t crete_cal_lib_comp_handler(const uint32_t *cmd_packet, uint32_t payload_words)",584
24306,"static status_code_t crete_cal_lib_comp_handler(const uint32_t *cmd_packet, uint32_t payload_words)",591
24307,"static status_code_t cfg_refclk_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",610
24308,"static status_code_t cfg_refclk_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",617
24309,"static status_code_t internal_config_data_write_handler(const uint32_t *cmd_packet, uint32_t payload_words)",642
24310,"static status_code_t update_phy_fw_type(const uint32_t *cmd_packet, uint32_t payload_words)",666
24311,"static status_code_t update_phy_fw_type(const uint32_t *cmd_packet, uint32_t payload_words)",673
24312,"static status_code_t update_config_state(const uint32_t *cmd_packet, uint32_t payload_words)",691
24313,"static status_code_t update_config_state(const uint32_t *cmd_packet, uint32_t payload_words)",698
24314,"status_code_t crete_set_temp_sensor_mode(const uint32_t *cmd_packet, uint32_t payload_words)",721
24315,"status_code_t crete_enable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",739
24316,"status_code_t crete_disable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",757
24317,"static status_code_t whr_configure_aibio_redundancy(uint32_t ch_num, uint32_t ubump_num)",777
24318,"static status_code_t gdr_configure_aibio_redundancy(uint32_t ch_num, uint32_t ubump_num)",781
24319,"static status_code_t whr_configure_aibaux_redundancy(uint32_t ch_num, uint32_t ubump_num)",843
24320,"static status_code_t gdr_configure_aibaux_redundancy(uint32_t ch_num, uint32_t ubump_num)",848
24321,"static status_code_t test_end_signal_handler(const uint32_t *cmd_packet, uint32_t payload_words)",875
24322,"static status_code_t avmm_addr_pair_handler(const uint32_t *cmd_packet, uint32_t payload_words)",884
24323,void clear_ipc_signal(),895
24324,void set_ipc_signal(),900
24325,uint8_t wait_for_ip_signal(uint8_t non_blocking),905
24326,*        Copyright (c) 2015 Altera Corporation,12
24327,((credits_transferred < credits_available) ? 1 : 0 ),67
24328,void hip2c_avalon_fifo_init(),134
24329,static void hip2c_avalon_fifo_init(),143
24330,uint8_t cvp_data_available(),159
24331,static inline uint8_t cvp_data_available(),167
24332,uint8_t cvp_data_fifo_empty (),180
24333,static inline uint8_t cvp_data_fifo_empty(),188
24334,uint8_t cvp_last_credit (),199
24335,static inline uint8_t cvp_last_credit(),207
24336,bool cvp_config_asserted(),216
24337,static inline bool cvp_config_asserted(),224
24338,static void hip2c_bridge_out_isr(),235
24339,static void hip2c_bridge_out_isr(void* context),243
24340,static void cvp_dma_isr(),273
24341,static void cvp_dma_isr(),281
24342,static (void) exe_state_to_pause (void),338
24343,static void exe_state_to_pause (),346
24344,static (void) exe_state_to_wait (void),373
24345,static void exe_state_to_wait (),381
24346,static (void) exe_state_to_start_transfer (void),397
24347,static void exe_state_to_start_transfer (),405
24348,static (void) exe_state_to_data_available (void),422
24349,static void exe_state_to_data_available (),430
24350,static (void) exe_state_init_to_wait (void),451
24351,static void exe_state_init_to_wait (),459
24352,static void dma_context_wiped (),483
24353,static void dma_context_wiped (),492
24354,static (void) exe_state_uninit to init(void),509
24355,static void exe_state_uninit_to_init(),517
24356,static (void) exe_state_host_terminate (void),564
24357,static void exe_state_host_terminate(),572
24358,static (void) exe_state_cleanup (void),591
24359,static void exe_state_cleanup(),599
24360,static void cvp_init(),686
24361,static void cvp_init(),694
24362,"static void cvp_start_transfer(uint32_t address, uint32_t payload)",725
24363,"static void cvp_start_transfer(uint32_t address, uint32_t payload)",736
24364,"status_code_t cvp_version_handler(const uint32_t *cmd_packet, uint32_t payload_words)",800
24365,"status_code_t cvp_version_handler(const uint32_t *cmd_packet, uint32_t payload_words)",804
24366,"status_code_t cvp_assert_deassert_handler(const uint32_t *cmd_packet, uint32_t payload_words)",818
24367,"status_code_t cvp_assert_deassert_handler(const uint32_t *cmd_packet, uint32_t payload_words)",822
24368,"status_code_t cvp_aib_credits_handler(const uint32_t *cmd_packet, uint32_t payload_words)",836
24369,"status_code_t cvp_aib_credits_handler(const uint32_t *cmd_packet, uint32_t payload_words)",840
24370,void cvp_cre_credits_handler(uint32_t credits),869
24371,void  cvp_cre_credits_handler(uint32_t credits),874
24372,void flush_cvp_buffer (uint32_t words_remaining),961
24373,static uint32_t flush_cvp_buffer (),969
24374,"status_code_t cvp_done_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1017
24375,"status_code_t cvp_done_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1021
24376,void cvp_context_restore (),1120
24377,void cvp_context_restore(),1128
24378,uint8_t cvp_context_restore_on_going(),1147
24379,uint8_t cvp_context_restore_on_going(),1157
24380,"status_code_t cvp_buf_org_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1175
24381,"status_code_t cvp_buf_org_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1179
24382,"status_code_t cvp_error_to_host_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1205
24383,"status_code_t cvp_error_to_host_handler(const uint32_t *cmd_packet, uint32_t payload_words){",1209
24384,void cvp_cnoc_tx_lock(),1219
24385,void cvp_cnoc_tx_lock(),1225
24386,void cvp_cnoc_tx_unlock(),1273
24387,void cvp_cnoc_tx_unlock(),1278
24388,void cvp_in_pio_isr_handler(),1293
24389,static void cvp_in_pio_isr_handler(),1297
24390,void cvp_in_pio_isr_handler(),1342
24391,void cvp_in_pio_isr_init(),1346
24392,void cvp_state_machine(),1359
24393,void cvp_state_machine(),1375
24394,static inline void update_host_credit_count(uint32_t credits){,1422
24395,* Copyright (2019) Intel Corporation,3
24396,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",6
24397,"uint8_t gdr_avmm_config_write(uint32_t offset, uint32_t size_bytes, const uint32_t *data_buffer)",39
24398,status_code_t gdr_avmm_config_loader(const uint32_t *data_buffer),88
24399,"uint8_t gdr_avmm_config_test(uint32_t offset, uint32_t size_bytes, const uint32_t *data_buffer)",143
24400,status_code_t gdr_avmm_config_loader_verify(const uint32_t *data_buffer),181
24401,uint32_t gdr_avmm_get_hw_mode(),219
24402,* Copyright (2018) Intel Corporation,13
24403,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
24404,void gdr_cnoc_rx_init(void),77
24405,void gdr_cnoc_rx_init(),85
24406,static void gdr_cnoc_rx_isr(void* context),142
24407,static void gdr_cnoc_rx_isr(void* context),150
24408,void supervisory_control_loop(void),371
24409,void supervisory_control_loop(void),379
24410,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",392
24411,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",401
24412,bool is_main_ring_buf_empty(),433
24413,void pass_msg_2_cnoc_intr_handler(uint32_t addr_reg),442
24414,void pass_msg_2_cnoc_intr_handler(uint32_t addr_reg),451
24415,* Copyright (2018) Intel Corporation,13
24416,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
24417,void gdr_cnoc_tx_init(void),52
24418,void gdr_cnoc_tx_init(),60
24419,"void gdr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",89
24420,"void gdr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",101
24421,"void send_msg_2_aib(const uint32_t *cmd_packet, uint32_t payload_words)",127
24422,"void send_msg_2_aib(uint32_t *cmd_packet, uint32_t payload_words)",135
24423,* Copyright (2018) Intel Corporation,13
24424,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
24425,void init_gdr_dfx_state(),58
24426,void process_gdr_dfx_function(),67
24427,void clr_dfx_cmd_buf(),125
24428,void clr_dfx_cmd_buf(),129
24429,* Copyright (2018) Intel Corporation,13
24430,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
24431,void dfx_cmd_req_handler_init(),116
24432,void dfx_cmd_req_handler_init(),124
24433,"void write_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",140
24434,"void write_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",148
24435,"void read_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",162
24436,"void read_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",171
24437,"void avmm_write_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",186
24438,"void avmm_write_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",194
24439,"void barak_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",213
24440,"void barak_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",221
24441,"void ux_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",235
24442,"void ux_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",243
24443,"void enter_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",257
24444,"void enter_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",265
24445,"void exit_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",279
24446,"void exit_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",287
24447,"void release_hip_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",302
24448,"void release_hip_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",310
24449,"void assert_hip_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",324
24450,"void assert_hip_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",332
24451,"void ipsec_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",347
24452,"void ipsec_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",355
24453,"void cnoc_return_packet_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",369
24454,"void cnoc_return_packet_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",377
24455,"void read_dts_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",391
24456,"void read_dts_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",399
24457,"void write_cal_dts_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",421
24458,"void write_cal_dts_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",429
24459,"void dts_init_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",444
24460,"void dts_init_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",452
24461,"void avmm_data_test_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",467
24462,"void avmm_data_test_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",475
24463,"void unrecognized_opcode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",503
24464,"void unrecognized_opcode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp)",511
24465,"void start_pll_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",526
24466,"void start_pll_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",534
24467,*        Copyright (c) 2019 Altera Corporation,12
24468,STATIC uint8_t set_dts_pio(uint32_t dts_cfg_bitmask),67
24469,gdr_return_t gdr_dts_init(void),226
24470,gdr_return_t gdr_dts_init(void),237
24471,gdr_return_t gdr_dts_deinit(),298
24472,gdr_return_t gdr_dts_deinit(),309
24473,"gdr_return_t gdr_dts_enable(bool enable,  bool wait_for_data_valid)",337
24474,"gdr_return_t gdr_dts_enable(bool enable, bool wait_for_data_valid)",349
24475,gdr_return_t gdr_dts_select_mode(DTS_State_t dts_state),373
24476,gdr_return_t gdr_dts_select_mode(DTS_Mode_t dts_mode),391
24477,"uint8_t gdr_dts_read_value(uint16_t *raw_value, int32_t *converted_value)",414
24478,"gdr_return_t gdr_dts_read_value(uint16_t *raw_value, int32_t *conv_value)",428
24479,int32_t conv_code_to_celsius(int32_t raw_value),461
24480,int32_t conv_code_to_celsius(int32_t raw_value),471
24481,uint16_t conv_celsius_to_code(int32_t temp_celsius),486
24482,uint16_t conv_celsius_to_code(int32_t temp_celsius),496
24483,gdr_return_t gdr_dts_set_aib_mode(uint32_t update_interval_ms),506
24484,"gdr_return_t gdr_dts_set_aib_mode(DTS_Mode_t temp_sensor, uint32_t update_interval_ms)",517
24485,gdr_return_t gdr_dts_set_alert(int32_t alert_value),543
24486,gdr_return_t gdr_dts_set_alert(int32_t alert_value),554
24487,gdr_return_t gdr_dts_set_trip(int32_t trigger_value),578
24488,gdr_return_t gdr_dts_set_trip(int32_t trigger_value),589
24489,"gdr_return_t gdr_dts_set_calibration(int32_t calib_addr, int32_t calib_data)",614
24490,"gdr_return_t gdr_dts_set_calibration(int32_t calib_addr, int32_t calib_data)",626
24491,gdr_return_t gdr_dts_set_calibration_all(int32_t calib_data),638
24492,gdr_return_t gdr_dts_set_calibration_all(int32_t calib_data),649
24493,void gdr_dts_set_reporting_mode(uint32_t mode),666
24494,void gdr_dts_set_reporting_mode(uint32_t mode),676
24495,void gdr_dts_process_quantum(),682
24496,void gdr_dts_process_quantum(),693
24497,gdr_return_t gdr_dts_fuse_update(uint32_t * data),874
24498,gdr_return_t gdr_dts_fuse_update(uint32_t * data),886
24499,void gdr_dts_read_sensor_once(),982
24500,"gdr_return_t gdr_dts_read_sensor_once(DTS_Mode_t temp_sensor, uint16_t *raw_value, int32_t *conv_value)",996
24501,* @author kcheon3 (kean.khee.cheong@intel.com),4
24502,* Copyright (2019) Intel Corporation,13
24503,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
24504,"static void program_1bit(uint16_t efuse_row_addr, uint32_t databit)",80
24505,"static void program_bits(uint16_t efuse_row_addr, uint32_t databit)",93
24506,"GDR_SUCCESS gdr_efuse_init(uint32_t *data0, uint32_t *data1)",152
24507,gdr_return_t gdr_efuse_init(),163
24508,gdr_return_t gdr_efuse_redundancy_disable(uint16_t efuse_row_address),178
24509,gdr_return_t gdr_efuse_redundancy_enable(uint16_t efuse_row_address),189
24510,"gdr_return_t gdr_efuse_redundancy_pgm(uint16_t efuse_row_address, uint32_t repair_bits)",207
24511,"gdr_return_t gdr_efuse_redundancy_pgm(uint16_t efuse_row_address, uint32_t repair_bits)",219
24512,gdr_return_t gdr_efuse_redundancy_read(),236
24513,gdr_return_t gdr_efuse_redundancy_read(),247
24514,"gdr_return_t gdr_efuse_array_pgm_row(uint16_t efuse_row_addr, uint32_t data)",264
24515,"gdr_return_t gdr_efuse_array_pgm_row(uint16_t efuse_row_addr, uint32_t data)",276
24516,"gdr_return_t gdr_efuse_array_read(uint16_t efuse_row_addr, bool margin_mode, uint32_t *data)",299
24517,"gdr_return_t gdr_efuse_array_read(uint16_t efuse_row_addr, uint32_t *data)",310
24518,gdr_return_t gdr_set_marginmode(MarginMode_t margin_mode),361
24519,gdr_return_t gdr_set_marginmode(MarginMode_t margin_mode),372
24520,gdr_return_t gdr_efuse_read_map_content(void),414
24521,gdr_return_t gdr_efuse_read_map_content(void),425
24522,gdr_return_t gdr_ux_fuse_update(uint32_t * data),514
24523,gdr_return_t gdr_barak_fuse_update(uint32_t * data),654
24524,gdr_return_t gdr_ux_update(),753
24525,gdr_return_t gdr_barak_update(),891
24526,*        Copyright (c) 2019 Altera Corporation,12
24527,void phy_set_fuse_push_bypass(bool bypass),70
24528,void phy_fw_update_available(bool isavail),75
24529,bool phy_get_busy_flag(void),82
24530,void phy_fw_update_fw_type(PHY_FW_TYPE_t phy_fw_type),88
24531,uint32_t get_phy_fw_status(void),93
24532,"static void phy_write_sram_chunk(uint32_t sram_offset_32bit, uint32_t size_32bit, const uint32_t *data)",98
24533,void phy_fw_process_quantum(cnt_fw_mode_t fw_mode),106
24534,uint32_t get_phy_fw_version(void),254
24535,* Copyright (2020) Intel Corporation,3
24536,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",6
24537,void gdr_set_flux_en(uint32_t ux_base_addr),79
24538,"void set_mem_ctrl(uint8_t wdata, uint16_t f_addr, uint8_t pll_no)",95
24539,bool gdr_ref_clk_check(gdr_pll_config_state_t *pll_cfg_state),113
24540,bool gdr_check_pll_ready_load(gdr_pll_config_state_t *pll_cfg_state),140
24541,bool gdr_read_mem_resp(gdr_pll_config_state_t *pll_cfg_state),150
24542,void gdr_set_pll_enable(bool enable),169
24543,void gdr_set_usermode(bool enable),182
24544,bool Eval_Topo(),187
24545,void gdr_pcie_process_quantum(gdr_ux_state_t *pll_cfg_ux_state),226
24546,"void SetRefClk(bool init, bool pll0, bool pll1, bool pll2)",360
24547,void gdr_pll_process_quantum(),511
24548,void gdr_pll_ux_quantum(gdr_pll_config_state_t *pll_cfg_state),642
24549,"void unused_pll_keepalive_quantum(uint8_t pll_no, PLL_State_t *unused_pll_state)",965
24550,void gdr_pll_monitoring(gdr_pll_config_state_t *pll_cfg_state),1042
24551,*        Copyright (c) 2019 Altera Corporation,12
24552,"void gdr_start_timer(timer_type_t timer, uint32_t duration, bool mode)",21
24553,void gdr_stop_timer(timer_type_t timer),35
24554,bool gdr_read_clear_timer_status(timer_type_t timer),44
24555,bool gdr_read_timer_status(timer_type_t timer),54
24556,static void gdr_timer_isr_handler(),63
24557,void gdr_timer1_init(void),88
24558,void gdr_timer1_deinit(void),95
24559,* Copyright (2018) Intel Corporation,3
24560,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",6
24561,"static uint8_t set_ssm_out_pio(write_mode_t write_mode, uint32_t bits, cnt_fw_mode_t fw_mode) {",43
24562,void release_reset_hip(){,61
24563,void assert_reset_hip(){,93
24564,void release_avmm_reset() {,112
24565,void assert_avmm_reset() {,117
24566,void enter_user_mode(),126
24567,void exit_user_mode(),136
24568,void gdr_set_config_state(uint32_t config_state),146
24569,uint32_t gdr_get_config_state(),151
24570,uint32_t gdr_get_pcie_pin_perst(),156
24571,* Copyright (2018) Intel Corporation,13
24572,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
24573,"uint8_t gdr_usr_mailbox_recvmsg(uint32_t mailbox_addr, uint32_t *msg)",57
24574,"uint8_t gdr_usr_mailbox_recvmsg(uint32_t mailbox_addr, uint32_t *msg)",70
24575,"uint8_t gdr_usr_mailbox_sndmsg(uint32_t mailbox_addr, uint32_t msg)",90
24576,"uint8_t gdr_usr_mailbox_sndmsg(uint32_t mailbox_addr, uint32_t msg)",102
24577,void release_cpi(uint32_t base_addr),112
24578,"void config_aprobe_ux(uint32_t base_addr, uint32_t cmd_data)",163
24579,void gdr_usr_mailbox_setAprobe(uint32_t data),211
24580,void gdr_usr_mailbox_setAprobe(uint32_t cmd_data),222
24581,void gdr_usr_mailbox_process_quantum(),303
24582,void gdr_usr_mailbox_process_quantum(),318
24583,* Copyright (2018) Intel Corporation,13
24584,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
24585,int main(void),74
24586,void notify_aib_crete_init(),171
24587,void ux_rcomp_calib(),182
24588,void alt_irq_init ( const void* base ),84
24589,void alt_sys_init( void ),95
24590,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24591,"* copy of this software and associated documentation files (the ""Software""),  *",9
24592,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
24593,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
24594,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
24595,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
24596,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
24597,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
24598,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
24599,int alt_avalon_dma_space (alt_dma_txchan dma),355
24600,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
24601,static void alt_avalon_dma_irq (void* context),446
24602,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
24603,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
24604,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24605,"* copy of this software and associated documentation files (the ""Software""),  *",9
24606,"int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,",39
24607,"int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)",65
24608,"int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)",70
24609,int altera_avalon_fifo_read_almostfull(alt_u32 address),76
24610,int altera_avalon_fifo_read_almostempty(alt_u32 address),81
24611,"int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)",86
24612,int altera_avalon_fifo_read_level(alt_u32 address),91
24613,"int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)",96
24614,"int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)",105
24615,"int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)",114
24616,"int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)",123
24617,"int altera_avalon_fifo_write_fifo(alt_u32 write_address,",132
24618,"int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)",147
24619,"int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)",161
24620,"int altera_avalon_fifo_write_other_info(alt_u32 write_address,",170
24621,int altera_avalon_fifo_read_other_info(alt_u32 read_address),185
24622,int altera_avalon_fifo_read_backpressure (alt_u32 read_address){,190
24623,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24624,"* copy of this software and associated documentation files (the ""Software""),  *",9
24625,static void alt_avalon_timer_sc_irq (void* base),54
24626,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
24627,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
24628,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24629,"* copy of this software and associated documentation files (the ""Software""),  *",9
24630,int alt_timestamp_start(void),64
24631,alt_timestamp_type alt_timestamp(void),100
24632,alt_u32 alt_timestamp_freq(void),138
24633,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24634,"* copy of this software and associated documentation files (the ""Software""),  *",9
24635,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24636,"* copy of this software and associated documentation files (the ""Software""),  *",9
24637,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
24638,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
24639,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
24640,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24641,"* copy of this software and associated documentation files (the ""Software""),  *",9
24642,void alt_vic_irq_init (alt_vic_dev* pdev),45
24643,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24644,"* copy of this software and associated documentation files (the ""Software""),  *",9
24645,"int alt_ic_isr_register(alt_u32 ic_id,",59
24646,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24647,"* copy of this software and associated documentation files (the ""Software""),  *",9
24648,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
24649,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24650,"* copy of this software and associated documentation files (the ""Software""),  *",9
24651,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
24652,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
24653,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
24654,void altera_nios2_gen2_irq_init(void) ,34
24655,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24656,"* copy of this software and associated documentation files (the ""Software""),  *",9
24657,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
24658,unsigned int alt_busy_sleep (unsigned int us),52
24659,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24660,"* copy of this software and associated documentation files (the ""Software""),  *",9
24661,int ALT_CLOSE (int fildes),42
24662,int ALT_CLOSE (int fildes),64
24663,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
24664,"* copy of this software and associated documentation files (the ""Software""),  *",9
24665,"void alt_dcache_flush (void* start, alt_u32 len)",46
24666,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
24667,"* copy of this software and associated documentation files (the ""Software""),  *",9
24668,void alt_dcache_flush_all (void),41
24669,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
24670,"* copy of this software and associated documentation files (the ""Software""),  *",9
24671,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
24672,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24673,"* copy of this software and associated documentation files (the ""Software""),  *",9
24674,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
24675,ALT_SEM(alt_fd_list_lock),109
24676,int alt_dev_reg (alt_dev* dev),151
24677,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24678,"* copy of this software and associated documentation files (the ""Software""),  *",9
24679,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
24680,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24681,"* copy of this software and associated documentation files (the ""Software""),  *",9
24682,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
24683,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24684,"* copy of this software and associated documentation files (the ""Software""),  *",9
24685,alt_dma_txchan alt_dma_txchan_open (const char* name),51
24686,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24687,"* copy of this software and associated documentation files (the ""Software""),  *",9
24688,void _do_ctors(void),58
24689,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24690,"* copy of this software and associated documentation files (the ""Software""),  *",9
24691,void _do_dtors(void),58
24692,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
24693,"* copy of this software and associated documentation files (the ""Software""),  *",9
24694,alt_ecc_fatal_exception_register(alt_u32 handler),66
24695,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24696,"* copy of this software and associated documentation files (the ""Software""),  *",9
24697,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24698,"* copy of this software and associated documentation files (the ""Software""),  *",9
24699,void __env_lock ( struct _reent *_r ),43
24700,void __env_unlock ( struct _reent *_r ),51
24701,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24702,"* copy of this software and associated documentation files (the ""Software""),  *",9
24703,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24704,"* copy of this software and associated documentation files (the ""Software""),  *",9
24705,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
24706,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24707,"* copy of this software and associated documentation files (the ""Software""),  *",9
24708,void ALT_EXIT (int exit_code),52
24709,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24710,"* copy of this software and associated documentation files (the ""Software""),  *",9
24711,"int ALT_FCNTL (int file, int cmd, ...)",66
24712,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24713,"* copy of this software and associated documentation files (the ""Software""),  *",9
24714,int alt_fd_lock (alt_fd* fd),54
24715,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24716,"* copy of this software and associated documentation files (the ""Software""),  *",9
24717,int alt_fd_unlock (alt_fd* fd),52
24718,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24719,"* copy of this software and associated documentation files (the ""Software""),  *",9
24720,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
24721,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24722,"* copy of this software and associated documentation files (the ""Software""),  *",9
24723,alt_dev* alt_find_file (const char* name),54
24724,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24725,"* copy of this software and associated documentation files (the ""Software""),  *",9
24726,alt_flash_fd* alt_flash_open_dev(const char* name),49
24727,void alt_flash_close_dev(alt_flash_fd* fd),61
24728,int alt_flash_device_register( alt_flash_fd* fd),70
24729,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24730,"* copy of this software and associated documentation files (the ""Software""),  *",9
24731,int ALT_FORK (void),45
24732,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24733,"* copy of this software and associated documentation files (the ""Software""),  *",9
24734,"int ALT_FSTAT (int file, struct stat *st)",63
24735,"int ALT_FSTAT (int file, struct stat *st)",93
24736,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24737,"* copy of this software and associated documentation files (the ""Software""),  *",9
24738,int alt_fs_reg (alt_dev* dev),57
24739,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24740,"* copy of this software and associated documentation files (the ""Software""),  *",9
24741,alt_getchar(void),51
24742,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24743,"* copy of this software and associated documentation files (the ""Software""),  *",9
24744,int ALT_GETPID (void),43
24745,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24746,"* copy of this software and associated documentation files (the ""Software""),  *",9
24747,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
24748,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
24749,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24750,"* copy of this software and associated documentation files (the ""Software""),  *",9
24751,int alt_get_fd (alt_dev* dev),54
24752,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
24753,"* copy of this software and associated documentation files (the ""Software""),  *",9
24754,/* The compiler inserts calls to mcount() at the start of,48
24755,static __inline__ void * mcount_allocate(unsigned int size),133
24756,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
24757,static int nios2_pcsample_init(void),218
24758,static alt_u32 nios2_pcsample(void* context),250
24759,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24760,"* copy of this software and associated documentation files (the ""Software""),  *",9
24761,"void alt_icache_flush (void* start, alt_u32 len)",42
24762,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24763,"* copy of this software and associated documentation files (the ""Software""),  *",9
24764,void alt_icache_flush_all (void),41
24765,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24766,"* copy of this software and associated documentation files (the ""Software""),  *",9
24767,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
24768,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
24769,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
24770,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
24771,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
24772,"* copy of this software and associated documentation files (the ""Software""),  *",9
24773,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
24774,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
24775,"* copy of this software and associated documentation files (the ""Software""),  *",9
24776,alt_exception_result (*alt_instruction_exception_handler),49
24777,int alt_instruction_exception_entry (alt_u32 exception_pc),53
24778,alt_instruction_exception_entry (alt_u32 exception_pc),68
24779,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
24780,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
24781,"* copy of this software and associated documentation files (the ""Software""),  *",9
24782,void alt_instruction_exception_register (,73
24783,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24784,"* copy of this software and associated documentation files (the ""Software""),  *",9
24785,"int ALT_IOCTL (int file, int req, void* arg)",68
24786,"int ALT_IOCTL (int file, int req, void* arg)",106
24787,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24788,"* copy of this software and associated documentation files (the ""Software""),  *",9
24789,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
24790,"void alt_io_redirect(const char* stdout_dev, ",85
24791,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
24792,"* copy of this software and associated documentation files (the ""Software""),  *",9
24793,void alt_irq_handler (void),80
24794,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
24795,"* copy of this software and associated documentation files (the ""Software""),  *",9
24796,"int alt_irq_register (alt_u32 id, ",75
24797,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24798,"* copy of this software and associated documentation files (the ""Software""),  *",9
24799,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24800,"* copy of this software and associated documentation files (the ""Software""),  *",9
24801,int ALT_ISATTY (int file),50
24802,int ALT_ISATTY (int file),84
24803,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24804,"* copy of this software and associated documentation files (the ""Software""),  *",9
24805,"int ALT_KILL (int pid, int sig)",49
24806,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24807,"* copy of this software and associated documentation files (the ""Software""),  *",9
24808,"int ALT_LINK ( char *existing, char *new)",45
24809,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
24810,"* copy of this software and associated documentation files (the ""Software""),  *",9
24811,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
24812,void alt_load (void),67
24813,"void alt_log_txchar(int c,char *base)",95
24814,"void alt_log_repchar(char c,int r,int base)",106
24815,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
24816,"int alt_log_printf_proc(const char *fmt, ... )",344
24817,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
24818,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
24819,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
24820,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
24821,"void alt_log_write(const void *ptr, size_t len)",440
24822,void alt_log_system_clock(),474
24823,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
24824,"* copy of this software and associated documentation files (the ""Software""),  *",9
24825,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
24826,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
24827,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
24828,"* copy of this software and associated documentation files (the ""Software""),  *",9
24829,void alt_main (void),82
24830,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24831,"* copy of this software and associated documentation files (the ""Software""),  *",9
24832,void __malloc_lock ( struct _reent *_r ),42
24833,void __malloc_unlock ( struct _reent *_r ),50
24834,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24835,"* copy of this software and associated documentation files (the ""Software""),  *",9
24836,"int ALT_OPEN (const char* file, int flags, int mode)",41
24837,static int alt_file_locked (alt_fd* fd),64
24838,"int ALT_OPEN (const char* file, int flags, int mode)",105
24839,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24840,"* copy of this software and associated documentation files (the ""Software""),  *",9
24841,"alt_printf(const char* fmt, ... )",51
24842,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24843,"* copy of this software and associated documentation files (the ""Software""),  *",9
24844,alt_putchar(int c),50
24845,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24846,"* copy of this software and associated documentation files (the ""Software""),  *",9
24847,alt_putcharbuf(int c),58
24848,alt_putbufflush(),73
24849,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
24850,"* copy of this software and associated documentation files (the ""Software""),  *",9
24851,alt_putstr(const char* str),52
24852,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24853,"* copy of this software and associated documentation files (the ""Software""),  *",9
24854,"int ALT_READ (int file, void *ptr, size_t len)",58
24855,"int ALT_READ (int file, void *ptr, size_t len)",82
24856,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24857,"* copy of this software and associated documentation files (the ""Software""),  *",9
24858,void alt_release_fd (int fd),44
24859,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
24860,"* copy of this software and associated documentation files (the ""Software""),  *",9
24861,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
24862,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
24863,"* copy of this software and associated documentation files (the ""Software""),  *",9
24864,"alt_remap_uncached(void* ptr, alt_u32 len)",49
24865,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24866,"* copy of this software and associated documentation files (the ""Software""),  *",9
24867,"int ALT_RENAME (char *existing, char *new)",45
24868,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24869,"* copy of this software and associated documentation files (the ""Software""),  *",9
24870,caddr_t ALT_SBRK (int incr),68
24871,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24872,"* copy of this software and associated documentation files (the ""Software""),  *",9
24873,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
24874,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24875,"* copy of this software and associated documentation files (the ""Software""),  *",9
24876,"int ALT_STAT (const char *file, struct stat *st)",49
24877,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24878,"* copy of this software and associated documentation files (the ""Software""),  *",9
24879,void alt_alarm_stop (alt_alarm* alarm),66
24880,void alt_tick (void),87
24881,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24882,"* copy of this software and associated documentation files (the ""Software""),  *",9
24883,clock_t ALT_TIMES (struct tms *buf),51
24884,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
24885,"* copy of this software and associated documentation files (the ""Software""),  *",9
24886,alt_uncached_free(volatile void* ptr),40
24887,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
24888,"* copy of this software and associated documentation files (the ""Software""),  *",9
24889,alt_uncached_malloc(size_t size),42
24890,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24891,"* copy of this software and associated documentation files (the ""Software""),  *",9
24892,int ALT_UNLINK (char *name),45
24893,int ALT_USLEEP (useconds_t us),46
24894,unsigned int ALT_USLEEP (unsigned int us),48
24895,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24896,"* copy of this software and associated documentation files (the ""Software""),  *",9
24897,int ALT_WAIT (int *status),44
24898,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24899,"* copy of this software and associated documentation files (the ""Software""),  *",9
24900,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
24901,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
24902,void alt_irq_init ( const void* base ),84
24903,void alt_sys_init( void ),95
24904,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24905,"* copy of this software and associated documentation files (the ""Software""),  *",9
24906,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
24907,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
24908,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
24909,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
24910,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
24911,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
24912,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
24913,int alt_avalon_dma_space (alt_dma_txchan dma),355
24914,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
24915,static void alt_avalon_dma_irq (void* context),446
24916,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
24917,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
24918,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
24919,"* copy of this software and associated documentation files (the ""Software""),  *",9
24920,"int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,",39
24921,"int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)",65
24922,"int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)",70
24923,int altera_avalon_fifo_read_almostfull(alt_u32 address),76
24924,int altera_avalon_fifo_read_almostempty(alt_u32 address),81
24925,"int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)",86
24926,int altera_avalon_fifo_read_level(alt_u32 address),91
24927,"int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)",96
24928,"int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)",105
24929,"int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)",114
24930,"int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)",123
24931,"int altera_avalon_fifo_write_fifo(alt_u32 write_address,",132
24932,"int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)",147
24933,"int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)",161
24934,"int altera_avalon_fifo_write_other_info(alt_u32 write_address,",170
24935,int altera_avalon_fifo_read_other_info(alt_u32 read_address),185
24936,int altera_avalon_fifo_read_backpressure (alt_u32 read_address){,190
24937,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24938,"* copy of this software and associated documentation files (the ""Software""),  *",9
24939,static void alt_avalon_timer_sc_irq (void* base),54
24940,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
24941,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
24942,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24943,"* copy of this software and associated documentation files (the ""Software""),  *",9
24944,int alt_timestamp_start(void),64
24945,alt_timestamp_type alt_timestamp(void),100
24946,alt_u32 alt_timestamp_freq(void),138
24947,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
24948,"* copy of this software and associated documentation files (the ""Software""),  *",9
24949,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24950,"* copy of this software and associated documentation files (the ""Software""),  *",9
24951,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
24952,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
24953,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
24954,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24955,"* copy of this software and associated documentation files (the ""Software""),  *",9
24956,void alt_vic_irq_init (alt_vic_dev* pdev),45
24957,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24958,"* copy of this software and associated documentation files (the ""Software""),  *",9
24959,"int alt_ic_isr_register(alt_u32 ic_id,",59
24960,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24961,"* copy of this software and associated documentation files (the ""Software""),  *",9
24962,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
24963,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
24964,"* copy of this software and associated documentation files (the ""Software""),  *",9
24965,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
24966,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
24967,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
24968,void altera_nios2_gen2_irq_init(void) ,34
24969,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
24970,"* copy of this software and associated documentation files (the ""Software""),  *",9
24971,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
24972,unsigned int alt_busy_sleep (unsigned int us),52
24973,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24974,"* copy of this software and associated documentation files (the ""Software""),  *",9
24975,int ALT_CLOSE (int fildes),42
24976,int ALT_CLOSE (int fildes),64
24977,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
24978,"* copy of this software and associated documentation files (the ""Software""),  *",9
24979,"void alt_dcache_flush (void* start, alt_u32 len)",46
24980,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
24981,"* copy of this software and associated documentation files (the ""Software""),  *",9
24982,void alt_dcache_flush_all (void),41
24983,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
24984,"* copy of this software and associated documentation files (the ""Software""),  *",9
24985,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
24986,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24987,"* copy of this software and associated documentation files (the ""Software""),  *",9
24988,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
24989,ALT_SEM(alt_fd_list_lock),109
24990,int alt_dev_reg (alt_dev* dev),151
24991,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24992,"* copy of this software and associated documentation files (the ""Software""),  *",9
24993,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
24994,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24995,"* copy of this software and associated documentation files (the ""Software""),  *",9
24996,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
24997,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
24998,"* copy of this software and associated documentation files (the ""Software""),  *",9
24999,alt_dma_txchan alt_dma_txchan_open (const char* name),51
25000,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25001,"* copy of this software and associated documentation files (the ""Software""),  *",9
25002,void _do_ctors(void),58
25003,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25004,"* copy of this software and associated documentation files (the ""Software""),  *",9
25005,void _do_dtors(void),58
25006,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
25007,"* copy of this software and associated documentation files (the ""Software""),  *",9
25008,alt_ecc_fatal_exception_register(alt_u32 handler),66
25009,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25010,"* copy of this software and associated documentation files (the ""Software""),  *",9
25011,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25012,"* copy of this software and associated documentation files (the ""Software""),  *",9
25013,void __env_lock ( struct _reent *_r ),43
25014,void __env_unlock ( struct _reent *_r ),51
25015,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25016,"* copy of this software and associated documentation files (the ""Software""),  *",9
25017,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25018,"* copy of this software and associated documentation files (the ""Software""),  *",9
25019,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
25020,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25021,"* copy of this software and associated documentation files (the ""Software""),  *",9
25022,void ALT_EXIT (int exit_code),52
25023,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25024,"* copy of this software and associated documentation files (the ""Software""),  *",9
25025,"int ALT_FCNTL (int file, int cmd, ...)",66
25026,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25027,"* copy of this software and associated documentation files (the ""Software""),  *",9
25028,int alt_fd_lock (alt_fd* fd),54
25029,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25030,"* copy of this software and associated documentation files (the ""Software""),  *",9
25031,int alt_fd_unlock (alt_fd* fd),52
25032,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25033,"* copy of this software and associated documentation files (the ""Software""),  *",9
25034,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
25035,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25036,"* copy of this software and associated documentation files (the ""Software""),  *",9
25037,alt_dev* alt_find_file (const char* name),54
25038,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25039,"* copy of this software and associated documentation files (the ""Software""),  *",9
25040,alt_flash_fd* alt_flash_open_dev(const char* name),49
25041,void alt_flash_close_dev(alt_flash_fd* fd),61
25042,int alt_flash_device_register( alt_flash_fd* fd),70
25043,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25044,"* copy of this software and associated documentation files (the ""Software""),  *",9
25045,int ALT_FORK (void),45
25046,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25047,"* copy of this software and associated documentation files (the ""Software""),  *",9
25048,"int ALT_FSTAT (int file, struct stat *st)",63
25049,"int ALT_FSTAT (int file, struct stat *st)",93
25050,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25051,"* copy of this software and associated documentation files (the ""Software""),  *",9
25052,int alt_fs_reg (alt_dev* dev),57
25053,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25054,"* copy of this software and associated documentation files (the ""Software""),  *",9
25055,alt_getchar(void),51
25056,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25057,"* copy of this software and associated documentation files (the ""Software""),  *",9
25058,int ALT_GETPID (void),43
25059,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
25060,"* copy of this software and associated documentation files (the ""Software""),  *",9
25061,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
25062,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
25063,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25064,"* copy of this software and associated documentation files (the ""Software""),  *",9
25065,int alt_get_fd (alt_dev* dev),54
25066,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
25067,"* copy of this software and associated documentation files (the ""Software""),  *",9
25068,/* The compiler inserts calls to mcount() at the start of,48
25069,static __inline__ void * mcount_allocate(unsigned int size),133
25070,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
25071,static int nios2_pcsample_init(void),218
25072,static alt_u32 nios2_pcsample(void* context),250
25073,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25074,"* copy of this software and associated documentation files (the ""Software""),  *",9
25075,"void alt_icache_flush (void* start, alt_u32 len)",42
25076,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25077,"* copy of this software and associated documentation files (the ""Software""),  *",9
25078,void alt_icache_flush_all (void),41
25079,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25080,"* copy of this software and associated documentation files (the ""Software""),  *",9
25081,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
25082,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
25083,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
25084,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
25085,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
25086,"* copy of this software and associated documentation files (the ""Software""),  *",9
25087,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
25088,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
25089,"* copy of this software and associated documentation files (the ""Software""),  *",9
25090,alt_exception_result (*alt_instruction_exception_handler),49
25091,int alt_instruction_exception_entry (alt_u32 exception_pc),53
25092,alt_instruction_exception_entry (alt_u32 exception_pc),68
25093,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
25094,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
25095,"* copy of this software and associated documentation files (the ""Software""),  *",9
25096,void alt_instruction_exception_register (,73
25097,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25098,"* copy of this software and associated documentation files (the ""Software""),  *",9
25099,"int ALT_IOCTL (int file, int req, void* arg)",68
25100,"int ALT_IOCTL (int file, int req, void* arg)",106
25101,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25102,"* copy of this software and associated documentation files (the ""Software""),  *",9
25103,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
25104,"void alt_io_redirect(const char* stdout_dev, ",85
25105,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
25106,"* copy of this software and associated documentation files (the ""Software""),  *",9
25107,void alt_irq_handler (void),80
25108,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
25109,"* copy of this software and associated documentation files (the ""Software""),  *",9
25110,"int alt_irq_register (alt_u32 id, ",75
25111,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25112,"* copy of this software and associated documentation files (the ""Software""),  *",9
25113,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25114,"* copy of this software and associated documentation files (the ""Software""),  *",9
25115,int ALT_ISATTY (int file),50
25116,int ALT_ISATTY (int file),84
25117,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25118,"* copy of this software and associated documentation files (the ""Software""),  *",9
25119,"int ALT_KILL (int pid, int sig)",49
25120,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25121,"* copy of this software and associated documentation files (the ""Software""),  *",9
25122,"int ALT_LINK ( char *existing, char *new)",45
25123,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
25124,"* copy of this software and associated documentation files (the ""Software""),  *",9
25125,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
25126,void alt_load (void),67
25127,"void alt_log_txchar(int c,char *base)",95
25128,"void alt_log_repchar(char c,int r,int base)",106
25129,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
25130,"int alt_log_printf_proc(const char *fmt, ... )",344
25131,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
25132,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
25133,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
25134,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
25135,"void alt_log_write(const void *ptr, size_t len)",440
25136,void alt_log_system_clock(),474
25137,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
25138,"* copy of this software and associated documentation files (the ""Software""),  *",9
25139,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
25140,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
25141,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
25142,"* copy of this software and associated documentation files (the ""Software""),  *",9
25143,void alt_main (void),82
25144,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25145,"* copy of this software and associated documentation files (the ""Software""),  *",9
25146,void __malloc_lock ( struct _reent *_r ),42
25147,void __malloc_unlock ( struct _reent *_r ),50
25148,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25149,"* copy of this software and associated documentation files (the ""Software""),  *",9
25150,"int ALT_OPEN (const char* file, int flags, int mode)",41
25151,static int alt_file_locked (alt_fd* fd),64
25152,"int ALT_OPEN (const char* file, int flags, int mode)",105
25153,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25154,"* copy of this software and associated documentation files (the ""Software""),  *",9
25155,"alt_printf(const char* fmt, ... )",51
25156,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25157,"* copy of this software and associated documentation files (the ""Software""),  *",9
25158,alt_putchar(int c),50
25159,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25160,"* copy of this software and associated documentation files (the ""Software""),  *",9
25161,alt_putcharbuf(int c),58
25162,alt_putbufflush(),73
25163,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25164,"* copy of this software and associated documentation files (the ""Software""),  *",9
25165,alt_putstr(const char* str),52
25166,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25167,"* copy of this software and associated documentation files (the ""Software""),  *",9
25168,"int ALT_READ (int file, void *ptr, size_t len)",58
25169,"int ALT_READ (int file, void *ptr, size_t len)",82
25170,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25171,"* copy of this software and associated documentation files (the ""Software""),  *",9
25172,void alt_release_fd (int fd),44
25173,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
25174,"* copy of this software and associated documentation files (the ""Software""),  *",9
25175,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
25176,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
25177,"* copy of this software and associated documentation files (the ""Software""),  *",9
25178,"alt_remap_uncached(void* ptr, alt_u32 len)",49
25179,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25180,"* copy of this software and associated documentation files (the ""Software""),  *",9
25181,"int ALT_RENAME (char *existing, char *new)",45
25182,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25183,"* copy of this software and associated documentation files (the ""Software""),  *",9
25184,caddr_t ALT_SBRK (int incr),68
25185,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
25186,"* copy of this software and associated documentation files (the ""Software""),  *",9
25187,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
25188,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25189,"* copy of this software and associated documentation files (the ""Software""),  *",9
25190,"int ALT_STAT (const char *file, struct stat *st)",49
25191,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
25192,"* copy of this software and associated documentation files (the ""Software""),  *",9
25193,void alt_alarm_stop (alt_alarm* alarm),66
25194,void alt_tick (void),87
25195,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25196,"* copy of this software and associated documentation files (the ""Software""),  *",9
25197,clock_t ALT_TIMES (struct tms *buf),51
25198,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
25199,"* copy of this software and associated documentation files (the ""Software""),  *",9
25200,alt_uncached_free(volatile void* ptr),40
25201,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
25202,"* copy of this software and associated documentation files (the ""Software""),  *",9
25203,alt_uncached_malloc(size_t size),42
25204,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25205,"* copy of this software and associated documentation files (the ""Software""),  *",9
25206,int ALT_UNLINK (char *name),45
25207,int ALT_USLEEP (useconds_t us),46
25208,unsigned int ALT_USLEEP (unsigned int us),48
25209,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25210,"* copy of this software and associated documentation files (the ""Software""),  *",9
25211,int ALT_WAIT (int *status),44
25212,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25213,"* copy of this software and associated documentation files (the ""Software""),  *",9
25214,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
25215,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
25216,* Copyright (2018) Intel Corporation,13
25217,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
25218,status_code_t cnoc_msi_cmd_req_handler_init(),146
25219,status_code_t cnoc_msi_cmd_req_handler_init(),155
25220,"status_code_t ssm_status(const uint32_t *cmd_packet, uint32_t payload_words)",167
25221,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",184
25222,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",189
25223,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",208
25224,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",213
25225,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",223
25226,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",228
25227,"status_code_t register_get_handler(const uint32_t *cmd_packet, uint32_t payload_words)",237
25228,"status_code_t register_get_handler(const uint32_t *cmd_packet, uint32_t payload_words)",242
25229,"status_code_t register_set_handler(const uint32_t *cmd_packet, uint32_t payload_words)",267
25230,"status_code_t register_set_handler(const uint32_t *cmd_packet, uint32_t payload_words)",272
25231,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",295
25232,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",300
25233,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",336
25234,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",341
25235,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",374
25236,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",379
25237,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",412
25238,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",417
25239,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",432
25240,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",437
25241,"status_code_t pio_clear_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",476
25242,"status_code_t pio_clear_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",481
25243,"status_code_t pio_assert_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",506
25244,"status_code_t pio_assert_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",512
25245,"static status_code_t crete_not_busy_req(const uint32_t *cmd_packet, uint32_t payload_words)",545
25246,"static status_code_t crete_not_busy_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",554
25247,"static status_code_t crete_hip_cfg_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",570
25248,"static status_code_t crete_hip_cfg_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",577
25249,"static status_code_t crete_cal_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",591
25250,"static status_code_t crete_cal_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",598
25251,"static status_code_t crete_cal_lib_comp_handler(const uint32_t *cmd_packet, uint32_t payload_words)",612
25252,"static status_code_t crete_cal_lib_comp_handler(const uint32_t *cmd_packet, uint32_t payload_words)",619
25253,"static status_code_t cfg_refclk_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",642
25254,"static status_code_t cfg_refclk_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",649
25255,"static status_code_t internal_config_data_write_handler(const uint32_t *cmd_packet, uint32_t payload_words)",676
25256,"static status_code_t param_table_handler(const uint32_t *cmd_packet, uint32_t payload_words)",699
25257,"status_code_t crete_enable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",729
25258,"status_code_t crete_disable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",746
25259,"status_code_t crete_set_temp_sensor_mode(const uint32_t *cmd_packet, uint32_t payload_words)",767
25260,"static status_code_t rnr_configure_aibio_redundancy(uint32_t ch_num, uint32_t ubump_num)",779
25261,"static status_code_t rnr_configure_aibio_redundancy(uint32_t ch_num, uint32_t ubump_num)",783
25262,"static status_code_t rnr_configure_aibaux_redundancy(uint32_t ch_num, uint32_t ubump_num)",846
25263,"static status_code_t rnr_configure_aibaux_redundancy(uint32_t ch_num, uint32_t ubump_num)",851
25264,"static status_code_t test_end_signal_handler(const uint32_t *cmd_packet, uint32_t payload_words)",879
25265,"static status_code_t avmm_addr_pair_handler(const uint32_t *cmd_packet, uint32_t payload_words)",888
25266,*        Copyright (c) 2015 Altera Corporation,12
25267,((credits_transferred < credits_available) ? 1 : 0 ),70
25268,uint32_t rnr_get_scratch_registers_offset(uint32_t addr),137
25269,uint32_t rnr_get_scratch_registers_offset(uint32_t addr),147
25270,void hip2c_avalon_fifo_init(),160
25271,static void hip2c_avalon_fifo_init(),169
25272,uint8_t cvp_data_available(),185
25273,static inline uint8_t cvp_data_available(),193
25274,uint8_t cvp_data_fifo_empty (),206
25275,static inline uint8_t cvp_data_fifo_empty(),214
25276,uint8_t cvp_last_credit (),225
25277,static inline uint8_t cvp_last_credit(),233
25278,bool cvp_config_asserted(),242
25279,static inline bool cvp_config_asserted(),250
25280,static void hip2c_bridge_out_isr(),261
25281,static void hip2c_bridge_out_isr(void* context),269
25282,static void cvp_dma_isr(),299
25283,static void cvp_dma_isr(),307
25284,static (void) exe_state_to_pause (void),363
25285,static void exe_state_to_pause (),371
25286,static (void) exe_state_to_wait (void),398
25287,static void exe_state_to_wait (),406
25288,static (void) exe_state_to_start_transfer (void),422
25289,static void exe_state_to_start_transfer (),430
25290,static (void) exe_state_to_data_available (void),447
25291,static void exe_state_to_data_available (),455
25292,static (void) exe_state_init_to_wait (void),476
25293,static void exe_state_init_to_wait (),484
25294,static void dma_context_wiped (),508
25295,static void dma_context_wiped (),517
25296,static (void) exe_state_uninit to init(void),534
25297,static void exe_state_uninit_to_init(),542
25298,static (void) exe_state_host_terminate (void),589
25299,static void exe_state_host_terminate(),597
25300,static (void) exe_state_cleanup (void),616
25301,static void exe_state_cleanup(),624
25302,static void cvp_init(),710
25303,static void cvp_init(),718
25304,"static void cvp_start_transfer(uint32_t address, uint32_t payload)",749
25305,"static void cvp_start_transfer(uint32_t address, uint32_t payload)",760
25306,"status_code_t cvp_version_handler(const uint32_t *cmd_packet, uint32_t payload_words)",824
25307,"status_code_t cvp_version_handler(const uint32_t *cmd_packet, uint32_t payload_words)",828
25308,"status_code_t cvp_assert_deassert_handler(const uint32_t *cmd_packet, uint32_t payload_words)",842
25309,"status_code_t cvp_assert_deassert_handler(const uint32_t *cmd_packet, uint32_t payload_words)",846
25310,"status_code_t cvp_aib_credits_handler(const uint32_t *cmd_packet, uint32_t payload_words)",860
25311,"status_code_t cvp_aib_credits_handler(const uint32_t *cmd_packet, uint32_t payload_words)",864
25312,void cvp_cre_credits_handler(uint32_t credits),893
25313,void  cvp_cre_credits_handler(uint32_t credits),898
25314,void flush_cvp_buffer (uint32_t words_remaining),985
25315,static uint32_t flush_cvp_buffer (),993
25316,"status_code_t cvp_done_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1041
25317,"status_code_t cvp_done_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1045
25318,void cvp_context_restore (),1145
25319,void cvp_context_restore(),1153
25320,uint8_t cvp_context_restore_on_going(),1173
25321,uint8_t cvp_context_restore_on_going(),1183
25322,"status_code_t cvp_buf_org_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1202
25323,"status_code_t cvp_buf_org_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1206
25324,"status_code_t cvp_error_to_host_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1232
25325,"status_code_t cvp_error_to_host_handler(const uint32_t *cmd_packet, uint32_t payload_words){",1236
25326,void cvp_cnoc_tx_lock(),1246
25327,void cvp_cnoc_tx_lock(),1252
25328,void cvp_cnoc_tx_unlock(),1300
25329,void cvp_cnoc_tx_unlock(),1305
25330,void cvp_in_pio_isr_handler(),1320
25331,static void cvp_in_pio_isr_handler(),1324
25332,void cvp_in_pio_isr_handler(),1356
25333,void cvp_in_pio_isr_init(),1360
25334,void cvp_state_machine(),1376
25335,void cvp_state_machine(),1392
25336,static inline void update_host_credit_count(uint32_t credits){,1504
25337,void set_cvp_enable(void),1520
25338,void clear_cvp_enable(void),1529
25339,* Copyright (2018) Intel Corporation,13
25340,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
25341,int main(void),81
25342,static void setup_power_gate_seq(void),245
25343,static void notify_aib_crete_init(),280
25344,static void BTI_protection_init(),288
25345,* Copyright (2018) Intel Corporation,3
25346,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",6
25347,"uint8_t rnr_avmm_config_write(uint32_t offset, uint32_t size_bytes, const uint32_t *data_buffer)",47
25348,status_code_t rnr_avmm_config_loader(const uint32_t *data_buffer),143
25349,uint32_t rnr_avmm_get_topology(),185
25350,uint32_t rnr_avmm_get_sram_stored_complete(),190
25351,* Copyright (2018) Intel Corporation,13
25352,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
25353,void rnr_cnoc_rx_init(void),78
25354,void rnr_cnoc_rx_init(),86
25355,static void rnr_cnoc_rx_isr(void* context),162
25356,static void rnr_cnoc_rx_isr(void* context),170
25357,void supervisory_control_loop(void),398
25358,void supervisory_control_loop(void),406
25359,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",419
25360,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",428
25361,bool is_main_ring_buf_empty(),460
25362,void pass_msg_2_cnoc_intr_handler(uint32_t addr_reg),466
25363,void pass_msg_2_cnoc_intr_handler(uint32_t addr_reg),475
25364,* Copyright (2018) Intel Corporation,13
25365,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
25366,void rnr_cnoc_tx_init(void),53
25367,void rnr_cnoc_tx_init(),61
25368,"void rnr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",90
25369,"void rnr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",102
25370,"void send_msg_2_aib(const uint32_t *cmd_packet, uint32_t payload_words)",128
25371,"void send_msg_2_aib(uint32_t *cmd_packet, uint32_t payload_words)",136
25372,* @author pohsanng (poh.san.ng@intel.com),4
25373,* Copyright (2018) Intel Corporation,13
25374,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
25375,void init_rnr_dfx_state(),52
25376,void process_rnr_dfx_function(),59
25377,void clr_dfx_cmd_buf(),114
25378,void clr_dfx_cmd_buf(),118
25379,* @author pohsanng (poh.san.ng@intel.com),4
25380,* Copyright (2018) Intel Corporation,13
25381,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
25382,void dfx_cmd_req_handler_init(),107
25383,void dfx_cmd_req_handler_init(),115
25384,"void phy_version_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",127
25385,"void phy_version_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",135
25386,"void fuse_overwrite_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",149
25387,"void fuse_overwrite_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",157
25388,"void phy_fw_load_status_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",182
25389,"void phy_fw_load_status_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",190
25390,"void phy_fw_full_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",204
25391,"void phy_fw_load_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",212
25392,"void write_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",227
25393,"void write_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",235
25394,"void avmm_write_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",248
25395,"void avmm_write_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",256
25396,"void enter_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",272
25397,"void enter_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",280
25398,"void exit_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",293
25399,"void exit_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",301
25400,"void cfg_sec_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",315
25401,"void cfg_sec_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",323
25402,"void cnoc_return_packet_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",337
25403,"void cnoc_return_packet_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",345
25404,"void read_dts_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",357
25405,"void read_dts_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",365
25406,"void write_cal_dts_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",383
25407,"void write_cal_dts_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",391
25408,"void dts_init_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",404
25409,"void dts_init_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",412
25410,"void stub_perst_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",426
25411,"void stub_perst_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",434
25412,"void cold_reset_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",448
25413,"void cold_reset_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",456
25414,"void unrecognized_opcode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",470
25415,"void unrecognized_opcode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp)",478
25416,void dfx_cold_reset_entry_exit(uint32_t data),493
25417,*        Copyright (c) 2019 Altera Corporation,12
25418,void rnr_dts_init(void),47
25419,void rnr_dts_init(void),58
25420,void rnr_dts_deinit(void),69
25421,void rnr_dts_deinit(void),80
25422,"rnr_return_t rnr_dts_read_value(DTS_Sensor_t sensor, uint16_t *raw_value)",90
25423,"static rnr_return_t rnr_dts_read_value(DTS_Sensor_t sensor, uint16_t *raw_value)",103
25424,"void rnr_dts_set_aib_mode(DTS_State_t temp_sensor, uint32_t update_interval_ms)",199
25425,"void rnr_dts_set_aib_mode(DTS_State_t state, uint32_t update_interval_ms)",210
25426,void rnr_dts_enable(bool enable),227
25427,void rnr_dts_enable(bool enable),237
25428,rnr_return_t rnr_dts_fuse_update(uint32_t * data),246
25429,"rnr_return_t rnr_dts_fuse_update(uint32_t * data, uint32_t size)",258
25430,void rnr_dts_fuse_pushing(void),280
25431,void rnr_dts_fuse_pushing(void),290
25432,void rnr_dts_set_reporting_mode(uint32_t mode),303
25433,void rnr_dts_set_reporting_mode(uint32_t mode),313
25434,void rnr_dts_read_sensor_once(),319
25435,"rnr_return_t rnr_dts_read_sensor_once(DTS_Sensor_t sensor, uint16_t *raw_value)",332
25436,int32_t conv_code_to_celsius(uint16_t raw_value),347
25437,int32_t conv_code_to_celsius(uint16_t raw_value),357
25438,void rnr_dts_process_quantum(void),376
25439,void rnr_dts_process_quantum(void),387
25440,* @author pohsanng (poh.san.ng@intel.com),4
25441,* Copyright (2019) Intel Corporation,13
25442,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
25443,"static void program_bits(uint32_t margin_mode, uint16_t efuse_row_addr, uint32_t databit_L, uint32_t databit_H)",130
25444,"static void program_bits(uint32_t margin_mode, uint16_t efuse_row_addr, uint32_t databit_L, uint32_t databit_H)",144
25445,RNR_SUCCESS rnr_efuse_init(),237
25446,rnr_return_t rnr_efuse_init(),248
25447,"rnr_return_t rnr_efuse_redundancy_enable(uint32_t margin_mode, uint16_t efuse_row_address)",268
25448,"rnr_return_t rnr_efuse_redundancy_enable(uint32_t margin_mode, uint16_t efuse_row_address)",280
25449,"rnr_return_t rnr_efuse_redundancy_pgm(uint32_t margin_mode, uint16_t efuse_row_address, uint32_t repair_bits0, uint32_t repair_bits1)",298
25450,"rnr_return_t rnr_efuse_redundancy_pgm(uint32_t margin_mode, uint16_t efuse_row_address, uint32_t repair_bits0, uint32_t repair_bits1)",312
25451,rnr_return_t rnr_efuse_redundancy_read(),333
25452,rnr_return_t rnr_efuse_redundancy_read(),344
25453,"rnr_return_t rnr_efuse_array_pgm_row(uint32_t margin_mode, uint16_t efuse_row_addr, uint32_t data0, uint21_t data1)",369
25454,"rnr_return_t rnr_efuse_array_pgm_row(uint32_t margin_mode, uint16_t efuse_row_addr, uint32_t data0, uint32_t data1)",383
25455,"rnr_return_t rnr_efuse_array_read(uint16_t efuse_row_addr, uint32_t *data0, uint32_t *data1)",400
25456,"rnr_return_t rnr_efuse_array_read(uint16_t efuse_row_addr, uint32_t *data0, uint32_t *data1)",412
25457,void rnr_efuse_enter_pwrdwn_mode(),462
25458,static void rnr_efuse_enter_pwrdwn_mode(),472
25459,void iosc_fuse_trim_update(),501
25460,void iosc_fuse_trim_update(uint32_t data),505
25461,void apply_iosc_fuse_trim(void),511
25462,void apply_iosc_fuse_trim(void),515
25463,rnr_return_t ssm_memory_fuse_update(uint32_t * data),522
25464,"rnr_return_t ssm_memory_fuse_update(uint32_t * data, uint32_t size)",534
25465,void ssm_memory_fuse_pushing(void),550
25466,void ssm_memory_fuse_pushing(void),560
25467,rnr_return_t pcie_memory_fuse_update(uint32_t * data),567
25468,"rnr_return_t pcie_memory_fuse_update(uint32_t * data, uint32_t size)",579
25469,void pcie_memory_fuse_pushing(void),594
25470,void pcie_memory_fuse_pushing(void),604
25471,rnr_return_t cxl_memory_fuse_update(uint32_t * data),613
25472,"rnr_return_t cxl_memory_fuse_update(uint32_t * data, uint32_t size)",625
25473,void cxl_memory_fuse_pushing(void),642
25474,void cxl_memory_fuse_pushing(void),652
25475,rnr_return_t rnr_efuse_read_map_content(void),660
25476,rnr_return_t rnr_efuse_read_map_content(void),671
25477,rnr_return_t rnr_dfx_force_fuse_update(const uint32_t *data_buff),951
25478,rnr_return_t rnr_dfx_force_fuse_update(uint32_t *data_buffer),962
25479,*        Copyright (c) 2019 Altera Corporation,12
25480,bool get_hrc_ready(void),195
25481,void rnr_hrc_pld_src_en_set(bool data),214
25482,void rnr_wa_hrc_ip_ena_vec_force(void),221
25483,"static uint8_t wait_for_reg_val(uint32_t addr, uint32_t value, uint32_t bitmask, uint8_t wait_long)",229
25484,"void hrc_msgbus_rst_n_set(int ip,uint32_t write_mode)",268
25485,void hrc_phy_txenable_set(uint32_t write_mode),327
25486,static uint8_t hrc_is_bypass_ssm_mode(void),339
25487,static uint8_t hrc_is_bypass_ssm_mode(void),349
25488,"void hrc_lane_reset_staggering(uint32_t lane_mask, uint32_t write_mode)",362
25489,"void hrc_lane_reset_staggering(uint32_t lane_mask, uint32_t write_mode)",372
25490,"uint8_t hrc_is_ipX_rst(hrc_byp_reset_ipX_t ipX, hrc_byp_reset_ipX_type_t type)",401
25491,"uint8_t hrc_is_ipX_rst(hrc_byp_reset_ipX_t ipX, hrc_byp_reset_ipX_type_t type)",411
25492,void hrc_exit_rst_state(hrc_byp_reset_state_t target_state),455
25493,uint8_t hrc_exit_rst_state(hrc_byp_reset_state_t target_state),465
25494,uint8_t hrc_core_reset_handling(),701
25495,void hrc_enter_rst_state(hrc_byp_reset_state_t target_state),873
25496,uint8_t hrc_enter_rst_state(hrc_byp_reset_state_t target_state),883
25497,void hrc_change_rst_state(hrc_byp_reset_state_t target_state),974
25498,uint8_t hrc_change_rst_state(hrc_byp_reset_state_t target_state),984
25499,void hrc_bypass_is_super_reset(void),1008
25500,"uint8_t hrc_bypass_is_super_reset(uint32_t hrc_byp_stat_reg0, uint32_t hrc_rst_ctrl)",1018
25501,void hrc_bypass_is_full_reset(void),1050
25502,"uint8_t hrc_bypass_is_full_reset(uint32_t hrc_byp_stat_reg0, uint32_t hrc_rst_ctrl)",1060
25503,void hrc_bypass_is_partial_reset(void),1102
25504,"uint8_t hrc_bypass_is_partial_reset(uint32_t hrc_byp_stat_reg0, uint32_t hrc_rst_ctrl)",1112
25505,void hrc_bypass_is_core_reset(void),1154
25506,"uint8_t hrc_bypass_is_core_reset(uint32_t hrc_byp_stat_reg0, uint32_t hrc_rst_ctrl)",1164
25507,void hrc_get_state(void),1195
25508,hrc_byp_reset_state_t hrc_get_state(uint8_t perst_status),1205
25509,void hrc_isr_handler(),1241
25510,void hrc_bypass_intr_handler(),1249
25511,void hrc_ssm_bypass_mode_init(void),1268
25512,void hrc_ssm_bypass_mode_init(void),1277
25513,void hrc_ssm_bypass_mode_uninit(void),1369
25514,void hrc_ssm_bypass_mode_uninit(void),1378
25515,void hrc_bypass_process_quantum(void),1389
25516,void hrc_bypass_process_quantum(void),1399
25517,bool get_hrc_bypass_ssm_mode(void),1444
25518,*        Copyright (c) 2019 Altera Corporation,12
25519,bool rnr_is_param_table_init(void),30
25520,status_code_t rnr_update_param_table(const uint32_t *data_buffer),44
25521,bool rnr_get_param_table(rnr_param_table_t * param_table),74
25522,uint32_t rnr_get_param_topology_mode(void),83
25523,uint32_t rnr_get_param_phy_octet_mode(void),96
25524,bool rnr_is_param_phy_octet0_active(void),110
25525,bool rnr_is_param_phy_octet1_active(void),119
25526,*        Copyright (c) 2019 Altera Corporation,12
25527,static void phy_clear_octet_setup_status(void),96
25528,static bool rnr_phy_0_ready_for_load(void),102
25529,void set_release_hrc(void),119
25530,static bool rnr_phy_1_ready_for_load(void),124
25531,void rnr_set_phy_loading_mode(uint32_t phy_type),141
25532,bool phy_get_busy_flag(void),153
25533,void phy_fw_update_available(bool isavail),164
25534,"static void phy_write_sram_chunk(uint32_t sram_offset_32bit, uint32_t size_32bit, const uint32_t *data)",174
25535,static bool phy_recipe_load_0(const uint32_t *data),184
25536,static bool phy_recipe_load_1(const uint32_t *data),205
25537,"static void phy_security_set(bool i_apb_pprot_enable, uint8_t i_apb_pprot)",225
25538,static void register_override_0(void),234
25539,static void register_override_1(void),267
25540,void phy_octet0_perst_monitor(void),297
25541,void phy_octet1_perst_monitor(void),351
25542,rnr_return_t phy_octet0_fuse_update(uint32_t * data),406
25543,"rnr_return_t phy_octet0_fuse_update(uint32_t * data, uint32_t size)",418
25544,void phy_octet0_fuse_pushing(void),435
25545,void phy_octet0_fuse_pushing(void),445
25546,rnr_return_t phy_octet1_fuse_update(uint32_t * data),455
25547,"rnr_return_t phy_octet1_fuse_update(uint32_t * data, uint32_t size)",467
25548,void phy_octet1_fuse_pushing(void),484
25549,void phy_octet1_fuse_pushing(void),494
25550,rnr_return_t phy_com_fuse_update(uint32_t * data),504
25551,"rnr_return_t phy_com_fuse_update(uint32_t * data, uint32_t size)",516
25552,void phy_com_fuse_pushing_0(void),534
25553,void phy_com_fuse_pushing_0(void),544
25554,void phy_com_fuse_pushing_1(void),561
25555,void phy_com_fuse_pushing_1(void),571
25556,rnr_return_t phy_rnr_b0_com_fuse_update(uint32_t * data),587
25557,"rnr_return_t phy_rnr_b0_com_fuse_update(uint32_t * data, uint32_t size)",599
25558,void phy_rnr_b0_com_fuse_pushing_0(void),618
25559,void phy_rnr_b0_com_fuse_pushing_0(void),628
25560,void phy_rnr_b0_com_fuse_pushing_1(void),645
25561,void phy_rnr_b0_com_fuse_pushing_1(void),655
25562,void rnr_topology_setup(void),671
25563,void rnr_phy_octet_setup(void),817
25564,void rnr_phy_force_perst(uint32_t data),865
25565,void pio_in_1_isr_handler(),880
25566,static void pio_in_1_isr_handler(),884
25567,void pio_in_1_isr_init(),996
25568,uint32_t get_phy_fw_version(void),1004
25569,bool phy_pwr_ctrl_sus_ack_check(void),1015
25570,void phy_set_efuse_push_state(void),1069
25571,void phy_fw_process_quantum_0(cnt_fw_mode_t fw_mode),1075
25572,void phy_fw_process_quantum_1(cnt_fw_mode_t fw_mode),1332
25573,void phy_fw_process_quantum(cnt_fw_mode_t fw_mode),1582
25574,void phy_octet_perst_quantum(cnt_fw_mode_t fw_mode),1608
25575,void rnr_phy_octet_deinit(void),1621
25576,void rnr_phy_pwrctl_deinit(void),1637
25577,void rnr_phy_srst_deinit(void),1647
25578,*        Copyright (c) 2019 Altera Corporation,12
25579,bool get_pll_ready(void),55
25580,"rnr_return_t rnr_adpll0_fuse_update(uint32_t * data, uint32_t size)",68
25581,"rnr_return_t rnr_adpll0_fuse_update(uint32_t * data, uint32_t size)",80
25582,void rnr_adpll0_fuse_pushing(void),107
25583,void rnr_adpll0_fuse_pushing(void),117
25584,"rnr_return_t rnr_adpll1_fuse_update(uint32_t * data, uint32_t size)",174
25585,"rnr_return_t rnr_adpll1_fuse_update(uint32_t * data, uint32_t size)",186
25586,void rnr_adpll1_fuse_pushing(void),213
25587,void rnr_adpll1_fuse_pushing(void),223
25588,"rnr_return_t rnr_pldpll_fuse_update(uint32_t * data, uint32_t size)",280
25589,"rnr_return_t rnr_pldpll_fuse_update(uint32_t * data, uint32_t size)",292
25590,void rnr_pldpll_fuse_pushing(void),319
25591,void rnr_pldpll_fuse_pushing(void),329
25592,void pio_in_0_isr_handler(),386
25593,static void pio_in_0_isr_handler(),390
25594,void pio_in_0_isr_init(),498
25595,void rnr_pipe_pll0_process_quantum(void),507
25596,void rnr_pipe_pll0_process_quantum(void),517
25597,void rnr_pipe_pll1_process_quantum(void),622
25598,void rnr_pipe_pll1_process_quantum(void),632
25599,void rnr_pld_pll_process_quantum(void),729
25600,void rnr_pld_pll_process_quantum(void),739
25601,void rnr_pll_process_quantum(void),838
25602,void assert_pwrgood_pll(void),845
25603,void rnr_pll_deinit(void),856
25604,*        Copyright (c) 2019 Altera Corporation,12
25605,"void rnr_start_timer(timer_type_t timer, uint32_t duration, bool mode)",21
25606,void rnr_stop_timer(timer_type_t timer),35
25607,bool rnr_read_clear_timer_status(timer_type_t timer),44
25608,bool rnr_read_timer_status(timer_type_t timer),54
25609,static void rnr_timer_isr_handler(),63
25610,void rnr_timer1_init(void),88
25611,void rnr_timer1_deinit(void),96
25612,* Copyright (2018) Intel Corporation,3
25613,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",6
25614,void set_fw_mode(cnt_fw_mode_t fw_mode),45
25615,"static uint8_t set_ssm_out_pio_0(write_mode_t write_mode, uint32_t bits, cnt_fw_mode_t fw_mode) {",55
25616,void release_hard_reset_hrc_n(void) {,68
25617,void release_reset_partial_hip(cnt_fw_mode_t fw_mode) {,84
25618,void release_reset_hip(){,97
25619,void assert_reset_hip(){,112
25620,void release_fuse_valid(){,125
25621,void assert_fuse_valid(){,142
25622,void enter_user_mode(){,159
25623,void exit_user_mode(){,183
25624,void release_avmm_int_reset() {,192
25625,void assert_avmm_int_reset() {,196
25626,void release_avmm_ext_reset() {,201
25627,void assert_avmm_ext_reset() {,206
25628,void assert_avmm_reset() {,211
25629,void release_avmm_clk_reset() {,216
25630,void flp_overwrite_quantum(void),221
25631,void alt_irq_init ( const void* base ),84
25632,void alt_sys_init( void ),95
25633,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25634,"* copy of this software and associated documentation files (the ""Software""),  *",9
25635,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
25636,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
25637,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
25638,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
25639,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
25640,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
25641,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
25642,int alt_avalon_dma_space (alt_dma_txchan dma),355
25643,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
25644,static void alt_avalon_dma_irq (void* context),446
25645,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
25646,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
25647,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25648,"* copy of this software and associated documentation files (the ""Software""),  *",9
25649,"int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,",39
25650,"int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)",65
25651,"int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)",70
25652,int altera_avalon_fifo_read_almostfull(alt_u32 address),76
25653,int altera_avalon_fifo_read_almostempty(alt_u32 address),81
25654,"int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)",86
25655,int altera_avalon_fifo_read_level(alt_u32 address),91
25656,"int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)",96
25657,"int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)",105
25658,"int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)",114
25659,"int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)",123
25660,"int altera_avalon_fifo_write_fifo(alt_u32 write_address,",132
25661,"int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)",147
25662,"int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)",161
25663,"int altera_avalon_fifo_write_other_info(alt_u32 write_address,",170
25664,int altera_avalon_fifo_read_other_info(alt_u32 read_address),185
25665,int altera_avalon_fifo_read_backpressure (alt_u32 read_address){,190
25666,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25667,"* copy of this software and associated documentation files (the ""Software""),  *",9
25668,static void alt_avalon_timer_sc_irq (void* base),54
25669,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
25670,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
25671,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25672,"* copy of this software and associated documentation files (the ""Software""),  *",9
25673,int alt_timestamp_start(void),64
25674,alt_timestamp_type alt_timestamp(void),100
25675,alt_u32 alt_timestamp_freq(void),138
25676,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25677,"* copy of this software and associated documentation files (the ""Software""),  *",9
25678,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25679,"* copy of this software and associated documentation files (the ""Software""),  *",9
25680,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
25681,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
25682,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
25683,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25684,"* copy of this software and associated documentation files (the ""Software""),  *",9
25685,void alt_vic_irq_init (alt_vic_dev* pdev),45
25686,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25687,"* copy of this software and associated documentation files (the ""Software""),  *",9
25688,"int alt_ic_isr_register(alt_u32 ic_id,",59
25689,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25690,"* copy of this software and associated documentation files (the ""Software""),  *",9
25691,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
25692,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25693,"* copy of this software and associated documentation files (the ""Software""),  *",9
25694,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
25695,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
25696,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
25697,void altera_nios2_gen2_irq_init(void) ,34
25698,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
25699,"* copy of this software and associated documentation files (the ""Software""),  *",9
25700,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
25701,unsigned int alt_busy_sleep (unsigned int us),52
25702,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25703,"* copy of this software and associated documentation files (the ""Software""),  *",9
25704,int ALT_CLOSE (int fildes),42
25705,int ALT_CLOSE (int fildes),64
25706,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
25707,"* copy of this software and associated documentation files (the ""Software""),  *",9
25708,"void alt_dcache_flush (void* start, alt_u32 len)",46
25709,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
25710,"* copy of this software and associated documentation files (the ""Software""),  *",9
25711,void alt_dcache_flush_all (void),41
25712,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
25713,"* copy of this software and associated documentation files (the ""Software""),  *",9
25714,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
25715,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25716,"* copy of this software and associated documentation files (the ""Software""),  *",9
25717,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
25718,ALT_SEM(alt_fd_list_lock),109
25719,int alt_dev_reg (alt_dev* dev),151
25720,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25721,"* copy of this software and associated documentation files (the ""Software""),  *",9
25722,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
25723,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25724,"* copy of this software and associated documentation files (the ""Software""),  *",9
25725,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
25726,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25727,"* copy of this software and associated documentation files (the ""Software""),  *",9
25728,alt_dma_txchan alt_dma_txchan_open (const char* name),51
25729,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25730,"* copy of this software and associated documentation files (the ""Software""),  *",9
25731,void _do_ctors(void),58
25732,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25733,"* copy of this software and associated documentation files (the ""Software""),  *",9
25734,void _do_dtors(void),58
25735,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
25736,"* copy of this software and associated documentation files (the ""Software""),  *",9
25737,alt_ecc_fatal_exception_register(alt_u32 handler),66
25738,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25739,"* copy of this software and associated documentation files (the ""Software""),  *",9
25740,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25741,"* copy of this software and associated documentation files (the ""Software""),  *",9
25742,void __env_lock ( struct _reent *_r ),43
25743,void __env_unlock ( struct _reent *_r ),51
25744,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25745,"* copy of this software and associated documentation files (the ""Software""),  *",9
25746,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25747,"* copy of this software and associated documentation files (the ""Software""),  *",9
25748,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
25749,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25750,"* copy of this software and associated documentation files (the ""Software""),  *",9
25751,void ALT_EXIT (int exit_code),52
25752,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25753,"* copy of this software and associated documentation files (the ""Software""),  *",9
25754,"int ALT_FCNTL (int file, int cmd, ...)",66
25755,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25756,"* copy of this software and associated documentation files (the ""Software""),  *",9
25757,int alt_fd_lock (alt_fd* fd),54
25758,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25759,"* copy of this software and associated documentation files (the ""Software""),  *",9
25760,int alt_fd_unlock (alt_fd* fd),52
25761,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25762,"* copy of this software and associated documentation files (the ""Software""),  *",9
25763,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
25764,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25765,"* copy of this software and associated documentation files (the ""Software""),  *",9
25766,alt_dev* alt_find_file (const char* name),54
25767,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25768,"* copy of this software and associated documentation files (the ""Software""),  *",9
25769,alt_flash_fd* alt_flash_open_dev(const char* name),49
25770,void alt_flash_close_dev(alt_flash_fd* fd),61
25771,int alt_flash_device_register( alt_flash_fd* fd),70
25772,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25773,"* copy of this software and associated documentation files (the ""Software""),  *",9
25774,int ALT_FORK (void),45
25775,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25776,"* copy of this software and associated documentation files (the ""Software""),  *",9
25777,"int ALT_FSTAT (int file, struct stat *st)",63
25778,"int ALT_FSTAT (int file, struct stat *st)",93
25779,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25780,"* copy of this software and associated documentation files (the ""Software""),  *",9
25781,int alt_fs_reg (alt_dev* dev),57
25782,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25783,"* copy of this software and associated documentation files (the ""Software""),  *",9
25784,alt_getchar(void),51
25785,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25786,"* copy of this software and associated documentation files (the ""Software""),  *",9
25787,int ALT_GETPID (void),43
25788,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
25789,"* copy of this software and associated documentation files (the ""Software""),  *",9
25790,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
25791,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
25792,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25793,"* copy of this software and associated documentation files (the ""Software""),  *",9
25794,int alt_get_fd (alt_dev* dev),54
25795,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
25796,"* copy of this software and associated documentation files (the ""Software""),  *",9
25797,/* The compiler inserts calls to mcount() at the start of,48
25798,static __inline__ void * mcount_allocate(unsigned int size),133
25799,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
25800,static int nios2_pcsample_init(void),218
25801,static alt_u32 nios2_pcsample(void* context),250
25802,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25803,"* copy of this software and associated documentation files (the ""Software""),  *",9
25804,"void alt_icache_flush (void* start, alt_u32 len)",42
25805,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25806,"* copy of this software and associated documentation files (the ""Software""),  *",9
25807,void alt_icache_flush_all (void),41
25808,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25809,"* copy of this software and associated documentation files (the ""Software""),  *",9
25810,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
25811,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
25812,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
25813,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
25814,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
25815,"* copy of this software and associated documentation files (the ""Software""),  *",9
25816,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
25817,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
25818,"* copy of this software and associated documentation files (the ""Software""),  *",9
25819,alt_exception_result (*alt_instruction_exception_handler),49
25820,int alt_instruction_exception_entry (alt_u32 exception_pc),53
25821,alt_instruction_exception_entry (alt_u32 exception_pc),68
25822,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
25823,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
25824,"* copy of this software and associated documentation files (the ""Software""),  *",9
25825,void alt_instruction_exception_register (,73
25826,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25827,"* copy of this software and associated documentation files (the ""Software""),  *",9
25828,"int ALT_IOCTL (int file, int req, void* arg)",68
25829,"int ALT_IOCTL (int file, int req, void* arg)",106
25830,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25831,"* copy of this software and associated documentation files (the ""Software""),  *",9
25832,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
25833,"void alt_io_redirect(const char* stdout_dev, ",85
25834,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
25835,"* copy of this software and associated documentation files (the ""Software""),  *",9
25836,void alt_irq_handler (void),80
25837,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
25838,"* copy of this software and associated documentation files (the ""Software""),  *",9
25839,"int alt_irq_register (alt_u32 id, ",75
25840,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25841,"* copy of this software and associated documentation files (the ""Software""),  *",9
25842,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25843,"* copy of this software and associated documentation files (the ""Software""),  *",9
25844,int ALT_ISATTY (int file),50
25845,int ALT_ISATTY (int file),84
25846,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25847,"* copy of this software and associated documentation files (the ""Software""),  *",9
25848,"int ALT_KILL (int pid, int sig)",49
25849,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25850,"* copy of this software and associated documentation files (the ""Software""),  *",9
25851,"int ALT_LINK ( char *existing, char *new)",45
25852,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
25853,"* copy of this software and associated documentation files (the ""Software""),  *",9
25854,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
25855,void alt_load (void),67
25856,"void alt_log_txchar(int c,char *base)",95
25857,"void alt_log_repchar(char c,int r,int base)",106
25858,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
25859,"int alt_log_printf_proc(const char *fmt, ... )",344
25860,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
25861,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
25862,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
25863,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
25864,"void alt_log_write(const void *ptr, size_t len)",440
25865,void alt_log_system_clock(),474
25866,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
25867,"* copy of this software and associated documentation files (the ""Software""),  *",9
25868,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
25869,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
25870,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
25871,"* copy of this software and associated documentation files (the ""Software""),  *",9
25872,void alt_main (void),82
25873,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25874,"* copy of this software and associated documentation files (the ""Software""),  *",9
25875,void __malloc_lock ( struct _reent *_r ),42
25876,void __malloc_unlock ( struct _reent *_r ),50
25877,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25878,"* copy of this software and associated documentation files (the ""Software""),  *",9
25879,"int ALT_OPEN (const char* file, int flags, int mode)",41
25880,static int alt_file_locked (alt_fd* fd),64
25881,"int ALT_OPEN (const char* file, int flags, int mode)",105
25882,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25883,"* copy of this software and associated documentation files (the ""Software""),  *",9
25884,"alt_printf(const char* fmt, ... )",51
25885,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25886,"* copy of this software and associated documentation files (the ""Software""),  *",9
25887,alt_putchar(int c),50
25888,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25889,"* copy of this software and associated documentation files (the ""Software""),  *",9
25890,alt_putcharbuf(int c),58
25891,alt_putbufflush(),73
25892,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
25893,"* copy of this software and associated documentation files (the ""Software""),  *",9
25894,alt_putstr(const char* str),52
25895,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25896,"* copy of this software and associated documentation files (the ""Software""),  *",9
25897,"int ALT_READ (int file, void *ptr, size_t len)",58
25898,"int ALT_READ (int file, void *ptr, size_t len)",82
25899,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25900,"* copy of this software and associated documentation files (the ""Software""),  *",9
25901,void alt_release_fd (int fd),44
25902,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
25903,"* copy of this software and associated documentation files (the ""Software""),  *",9
25904,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
25905,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
25906,"* copy of this software and associated documentation files (the ""Software""),  *",9
25907,"alt_remap_uncached(void* ptr, alt_u32 len)",49
25908,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25909,"* copy of this software and associated documentation files (the ""Software""),  *",9
25910,"int ALT_RENAME (char *existing, char *new)",45
25911,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25912,"* copy of this software and associated documentation files (the ""Software""),  *",9
25913,caddr_t ALT_SBRK (int incr),68
25914,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
25915,"* copy of this software and associated documentation files (the ""Software""),  *",9
25916,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
25917,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25918,"* copy of this software and associated documentation files (the ""Software""),  *",9
25919,"int ALT_STAT (const char *file, struct stat *st)",49
25920,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
25921,"* copy of this software and associated documentation files (the ""Software""),  *",9
25922,void alt_alarm_stop (alt_alarm* alarm),66
25923,void alt_tick (void),87
25924,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25925,"* copy of this software and associated documentation files (the ""Software""),  *",9
25926,clock_t ALT_TIMES (struct tms *buf),51
25927,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
25928,"* copy of this software and associated documentation files (the ""Software""),  *",9
25929,alt_uncached_free(volatile void* ptr),40
25930,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
25931,"* copy of this software and associated documentation files (the ""Software""),  *",9
25932,alt_uncached_malloc(size_t size),42
25933,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25934,"* copy of this software and associated documentation files (the ""Software""),  *",9
25935,int ALT_UNLINK (char *name),45
25936,int ALT_USLEEP (useconds_t us),46
25937,unsigned int ALT_USLEEP (unsigned int us),48
25938,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
25939,"* copy of this software and associated documentation files (the ""Software""),  *",9
25940,int ALT_WAIT (int *status),44
25941,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25942,"* copy of this software and associated documentation files (the ""Software""),  *",9
25943,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
25944,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
25945,void alt_irq_init ( const void* base ),84
25946,void alt_sys_init( void ),95
25947,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25948,"* copy of this software and associated documentation files (the ""Software""),  *",9
25949,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
25950,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
25951,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
25952,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
25953,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
25954,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
25955,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
25956,int alt_avalon_dma_space (alt_dma_txchan dma),355
25957,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
25958,static void alt_avalon_dma_irq (void* context),446
25959,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
25960,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
25961,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
25962,"* copy of this software and associated documentation files (the ""Software""),  *",9
25963,"int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,",39
25964,"int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)",65
25965,"int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)",70
25966,int altera_avalon_fifo_read_almostfull(alt_u32 address),76
25967,int altera_avalon_fifo_read_almostempty(alt_u32 address),81
25968,"int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)",86
25969,int altera_avalon_fifo_read_level(alt_u32 address),91
25970,"int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)",96
25971,"int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)",105
25972,"int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)",114
25973,"int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)",123
25974,"int altera_avalon_fifo_write_fifo(alt_u32 write_address,",132
25975,"int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)",147
25976,"int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)",161
25977,"int altera_avalon_fifo_write_other_info(alt_u32 write_address,",170
25978,int altera_avalon_fifo_read_other_info(alt_u32 read_address),185
25979,int altera_avalon_fifo_read_backpressure (alt_u32 read_address){,190
25980,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25981,"* copy of this software and associated documentation files (the ""Software""),  *",9
25982,static void alt_avalon_timer_sc_irq (void* base),54
25983,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
25984,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
25985,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25986,"* copy of this software and associated documentation files (the ""Software""),  *",9
25987,int alt_timestamp_start(void),64
25988,alt_timestamp_type alt_timestamp(void),100
25989,alt_u32 alt_timestamp_freq(void),138
25990,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
25991,"* copy of this software and associated documentation files (the ""Software""),  *",9
25992,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25993,"* copy of this software and associated documentation files (the ""Software""),  *",9
25994,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
25995,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
25996,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
25997,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
25998,"* copy of this software and associated documentation files (the ""Software""),  *",9
25999,void alt_vic_irq_init (alt_vic_dev* pdev),45
26000,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26001,"* copy of this software and associated documentation files (the ""Software""),  *",9
26002,"int alt_ic_isr_register(alt_u32 ic_id,",59
26003,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26004,"* copy of this software and associated documentation files (the ""Software""),  *",9
26005,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
26006,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26007,"* copy of this software and associated documentation files (the ""Software""),  *",9
26008,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
26009,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
26010,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
26011,void altera_nios2_gen2_irq_init(void) ,34
26012,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26013,"* copy of this software and associated documentation files (the ""Software""),  *",9
26014,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
26015,unsigned int alt_busy_sleep (unsigned int us),52
26016,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26017,"* copy of this software and associated documentation files (the ""Software""),  *",9
26018,int ALT_CLOSE (int fildes),42
26019,int ALT_CLOSE (int fildes),64
26020,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
26021,"* copy of this software and associated documentation files (the ""Software""),  *",9
26022,"void alt_dcache_flush (void* start, alt_u32 len)",46
26023,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
26024,"* copy of this software and associated documentation files (the ""Software""),  *",9
26025,void alt_dcache_flush_all (void),41
26026,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
26027,"* copy of this software and associated documentation files (the ""Software""),  *",9
26028,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
26029,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26030,"* copy of this software and associated documentation files (the ""Software""),  *",9
26031,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
26032,ALT_SEM(alt_fd_list_lock),109
26033,int alt_dev_reg (alt_dev* dev),151
26034,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26035,"* copy of this software and associated documentation files (the ""Software""),  *",9
26036,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
26037,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26038,"* copy of this software and associated documentation files (the ""Software""),  *",9
26039,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
26040,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26041,"* copy of this software and associated documentation files (the ""Software""),  *",9
26042,alt_dma_txchan alt_dma_txchan_open (const char* name),51
26043,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26044,"* copy of this software and associated documentation files (the ""Software""),  *",9
26045,void _do_ctors(void),58
26046,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26047,"* copy of this software and associated documentation files (the ""Software""),  *",9
26048,void _do_dtors(void),58
26049,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
26050,"* copy of this software and associated documentation files (the ""Software""),  *",9
26051,alt_ecc_fatal_exception_register(alt_u32 handler),66
26052,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26053,"* copy of this software and associated documentation files (the ""Software""),  *",9
26054,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26055,"* copy of this software and associated documentation files (the ""Software""),  *",9
26056,void __env_lock ( struct _reent *_r ),43
26057,void __env_unlock ( struct _reent *_r ),51
26058,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26059,"* copy of this software and associated documentation files (the ""Software""),  *",9
26060,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26061,"* copy of this software and associated documentation files (the ""Software""),  *",9
26062,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
26063,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26064,"* copy of this software and associated documentation files (the ""Software""),  *",9
26065,void ALT_EXIT (int exit_code),52
26066,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26067,"* copy of this software and associated documentation files (the ""Software""),  *",9
26068,"int ALT_FCNTL (int file, int cmd, ...)",66
26069,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26070,"* copy of this software and associated documentation files (the ""Software""),  *",9
26071,int alt_fd_lock (alt_fd* fd),54
26072,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26073,"* copy of this software and associated documentation files (the ""Software""),  *",9
26074,int alt_fd_unlock (alt_fd* fd),52
26075,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26076,"* copy of this software and associated documentation files (the ""Software""),  *",9
26077,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
26078,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26079,"* copy of this software and associated documentation files (the ""Software""),  *",9
26080,alt_dev* alt_find_file (const char* name),54
26081,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26082,"* copy of this software and associated documentation files (the ""Software""),  *",9
26083,alt_flash_fd* alt_flash_open_dev(const char* name),49
26084,void alt_flash_close_dev(alt_flash_fd* fd),61
26085,int alt_flash_device_register( alt_flash_fd* fd),70
26086,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26087,"* copy of this software and associated documentation files (the ""Software""),  *",9
26088,int ALT_FORK (void),45
26089,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
26090,"* copy of this software and associated documentation files (the ""Software""),  *",9
26091,"int ALT_FSTAT (int file, struct stat *st)",63
26092,"int ALT_FSTAT (int file, struct stat *st)",93
26093,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26094,"* copy of this software and associated documentation files (the ""Software""),  *",9
26095,int alt_fs_reg (alt_dev* dev),57
26096,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26097,"* copy of this software and associated documentation files (the ""Software""),  *",9
26098,alt_getchar(void),51
26099,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26100,"* copy of this software and associated documentation files (the ""Software""),  *",9
26101,int ALT_GETPID (void),43
26102,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26103,"* copy of this software and associated documentation files (the ""Software""),  *",9
26104,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
26105,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
26106,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26107,"* copy of this software and associated documentation files (the ""Software""),  *",9
26108,int alt_get_fd (alt_dev* dev),54
26109,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
26110,"* copy of this software and associated documentation files (the ""Software""),  *",9
26111,/* The compiler inserts calls to mcount() at the start of,48
26112,static __inline__ void * mcount_allocate(unsigned int size),133
26113,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
26114,static int nios2_pcsample_init(void),218
26115,static alt_u32 nios2_pcsample(void* context),250
26116,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26117,"* copy of this software and associated documentation files (the ""Software""),  *",9
26118,"void alt_icache_flush (void* start, alt_u32 len)",42
26119,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26120,"* copy of this software and associated documentation files (the ""Software""),  *",9
26121,void alt_icache_flush_all (void),41
26122,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26123,"* copy of this software and associated documentation files (the ""Software""),  *",9
26124,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
26125,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
26126,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
26127,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
26128,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
26129,"* copy of this software and associated documentation files (the ""Software""),  *",9
26130,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
26131,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
26132,"* copy of this software and associated documentation files (the ""Software""),  *",9
26133,alt_exception_result (*alt_instruction_exception_handler),49
26134,int alt_instruction_exception_entry (alt_u32 exception_pc),53
26135,alt_instruction_exception_entry (alt_u32 exception_pc),68
26136,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
26137,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
26138,"* copy of this software and associated documentation files (the ""Software""),  *",9
26139,void alt_instruction_exception_register (,73
26140,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
26141,"* copy of this software and associated documentation files (the ""Software""),  *",9
26142,"int ALT_IOCTL (int file, int req, void* arg)",68
26143,"int ALT_IOCTL (int file, int req, void* arg)",106
26144,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26145,"* copy of this software and associated documentation files (the ""Software""),  *",9
26146,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
26147,"void alt_io_redirect(const char* stdout_dev, ",85
26148,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
26149,"* copy of this software and associated documentation files (the ""Software""),  *",9
26150,void alt_irq_handler (void),80
26151,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
26152,"* copy of this software and associated documentation files (the ""Software""),  *",9
26153,"int alt_irq_register (alt_u32 id, ",75
26154,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26155,"* copy of this software and associated documentation files (the ""Software""),  *",9
26156,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
26157,"* copy of this software and associated documentation files (the ""Software""),  *",9
26158,int ALT_ISATTY (int file),50
26159,int ALT_ISATTY (int file),84
26160,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26161,"* copy of this software and associated documentation files (the ""Software""),  *",9
26162,"int ALT_KILL (int pid, int sig)",49
26163,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26164,"* copy of this software and associated documentation files (the ""Software""),  *",9
26165,"int ALT_LINK ( char *existing, char *new)",45
26166,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
26167,"* copy of this software and associated documentation files (the ""Software""),  *",9
26168,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
26169,void alt_load (void),67
26170,"void alt_log_txchar(int c,char *base)",95
26171,"void alt_log_repchar(char c,int r,int base)",106
26172,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
26173,"int alt_log_printf_proc(const char *fmt, ... )",344
26174,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
26175,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
26176,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
26177,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
26178,"void alt_log_write(const void *ptr, size_t len)",440
26179,void alt_log_system_clock(),474
26180,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
26181,"* copy of this software and associated documentation files (the ""Software""),  *",9
26182,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
26183,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
26184,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
26185,"* copy of this software and associated documentation files (the ""Software""),  *",9
26186,void alt_main (void),82
26187,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26188,"* copy of this software and associated documentation files (the ""Software""),  *",9
26189,void __malloc_lock ( struct _reent *_r ),42
26190,void __malloc_unlock ( struct _reent *_r ),50
26191,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26192,"* copy of this software and associated documentation files (the ""Software""),  *",9
26193,"int ALT_OPEN (const char* file, int flags, int mode)",41
26194,static int alt_file_locked (alt_fd* fd),64
26195,"int ALT_OPEN (const char* file, int flags, int mode)",105
26196,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26197,"* copy of this software and associated documentation files (the ""Software""),  *",9
26198,"alt_printf(const char* fmt, ... )",51
26199,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26200,"* copy of this software and associated documentation files (the ""Software""),  *",9
26201,alt_putchar(int c),50
26202,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26203,"* copy of this software and associated documentation files (the ""Software""),  *",9
26204,alt_putcharbuf(int c),58
26205,alt_putbufflush(),73
26206,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26207,"* copy of this software and associated documentation files (the ""Software""),  *",9
26208,alt_putstr(const char* str),52
26209,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
26210,"* copy of this software and associated documentation files (the ""Software""),  *",9
26211,"int ALT_READ (int file, void *ptr, size_t len)",58
26212,"int ALT_READ (int file, void *ptr, size_t len)",82
26213,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26214,"* copy of this software and associated documentation files (the ""Software""),  *",9
26215,void alt_release_fd (int fd),44
26216,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
26217,"* copy of this software and associated documentation files (the ""Software""),  *",9
26218,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
26219,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
26220,"* copy of this software and associated documentation files (the ""Software""),  *",9
26221,"alt_remap_uncached(void* ptr, alt_u32 len)",49
26222,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26223,"* copy of this software and associated documentation files (the ""Software""),  *",9
26224,"int ALT_RENAME (char *existing, char *new)",45
26225,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26226,"* copy of this software and associated documentation files (the ""Software""),  *",9
26227,caddr_t ALT_SBRK (int incr),68
26228,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26229,"* copy of this software and associated documentation files (the ""Software""),  *",9
26230,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
26231,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26232,"* copy of this software and associated documentation files (the ""Software""),  *",9
26233,"int ALT_STAT (const char *file, struct stat *st)",49
26234,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26235,"* copy of this software and associated documentation files (the ""Software""),  *",9
26236,void alt_alarm_stop (alt_alarm* alarm),66
26237,void alt_tick (void),87
26238,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26239,"* copy of this software and associated documentation files (the ""Software""),  *",9
26240,clock_t ALT_TIMES (struct tms *buf),51
26241,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
26242,"* copy of this software and associated documentation files (the ""Software""),  *",9
26243,alt_uncached_free(volatile void* ptr),40
26244,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
26245,"* copy of this software and associated documentation files (the ""Software""),  *",9
26246,alt_uncached_malloc(size_t size),42
26247,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26248,"* copy of this software and associated documentation files (the ""Software""),  *",9
26249,int ALT_UNLINK (char *name),45
26250,int ALT_USLEEP (useconds_t us),46
26251,unsigned int ALT_USLEEP (unsigned int us),48
26252,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26253,"* copy of this software and associated documentation files (the ""Software""),  *",9
26254,int ALT_WAIT (int *status),44
26255,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
26256,"* copy of this software and associated documentation files (the ""Software""),  *",9
26257,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
26258,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
26259,* Copyright (2018) Intel Corporation,13
26260,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26261,status_code_t cnoc_msi_cmd_req_handler_init(),143
26262,status_code_t cnoc_msi_cmd_req_handler_init(),152
26263,"status_code_t ssm_status(const uint32_t *cmd_packet, uint32_t payload_words)",164
26264,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",183
26265,"status_code_t pio_cnoc_stop_request_handler(const uint32_t *cmd_packet, uint32_t payload_words)",188
26266,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",209
26267,"status_code_t pio_freeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",214
26268,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",224
26269,"status_code_t pio_unfreeze_3v_io_tri_state_handler(const uint32_t *cmd_packet, uint32_t payload_words)",229
26270,"status_code_t register_get_handler(const uint32_t *cmd_packet, uint32_t payload_words)",238
26271,"status_code_t register_get_handler(const uint32_t *cmd_packet, uint32_t payload_words)",243
26272,"status_code_t register_set_handler(const uint32_t *cmd_packet, uint32_t payload_words)",273
26273,"status_code_t register_set_handler(const uint32_t *cmd_packet, uint32_t payload_words)",278
26274,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",303
26275,"status_code_t pio_release_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",308
26276,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",346
26277,"status_code_t pio_assert_cre_all_handler(const uint32_t *cmd_packet, uint32_t payload_words)",351
26278,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",373
26279,"status_code_t pio_enter_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",378
26280,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",406
26281,"status_code_t pio_exit_user_mode_handler(const uint32_t *cmd_packet, uint32_t payload_words)",411
26282,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",424
26283,"status_code_t ubump_redundancy_mux_handler(const uint32_t *cmd_packet, uint32_t payload_words)",429
26284,"status_code_t pio_clear_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",468
26285,"status_code_t pio_clear_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",473
26286,"status_code_t pio_assert_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",495
26287,"status_code_t pio_assert_cvp_enable_handler(const uint32_t *cmd_packet, uint32_t payload_words)",501
26288,"static status_code_t crete_not_busy_req(const uint32_t *cmd_packet, uint32_t payload_words)",534
26289,"static status_code_t crete_not_busy_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",543
26290,"static status_code_t crete_hip_cfg_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",558
26291,"static status_code_t crete_hip_cfg_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",565
26292,"static status_code_t crete_cal_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",579
26293,"static status_code_t crete_cal_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",586
26294,"static status_code_t crete_cal_lib_comp_handler(const uint32_t *cmd_packet, uint32_t payload_words)",600
26295,"static status_code_t crete_cal_lib_comp_handler(const uint32_t *cmd_packet, uint32_t payload_words)",607
26296,"static status_code_t cfg_refclk_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",620
26297,"static status_code_t cfg_refclk_req_handler(const uint32_t *cmd_packet, uint32_t payload_words)",627
26298,"static status_code_t internal_config_data_write_handler(const uint32_t *cmd_packet, uint32_t payload_words)",650
26299,"status_code_t crete_enable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",678
26300,"status_code_t crete_disable_temp_sensor(const uint32_t *cmd_packet, uint32_t payload_words)",695
26301,"static status_code_t whr_configure_aibio_redundancy(uint32_t ch_num, uint32_t ubump_num)",714
26302,"static status_code_t whr_configure_aibio_redundancy(uint32_t ch_num, uint32_t ubump_num)",718
26303,"static status_code_t whr_configure_aibaux_redundancy(uint32_t ch_num, uint32_t ubump_num)",789
26304,"static status_code_t whr_configure_aibaux_redundancy(uint32_t ch_num, uint32_t ubump_num)",794
26305,"static status_code_t test_end_signal_handler(const uint32_t *cmd_packet, uint32_t payload_words)",822
26306,"static status_code_t avmm_addr_pair_handler(const uint32_t *cmd_packet, uint32_t payload_words)",831
26307,void clear_ipc_signal(),842
26308,void set_ipc_signal(),847
26309,uint8_t wait_for_ip_signal(uint8_t non_blocking),852
26310,* Copyright (2018) Intel Corporation,13
26311,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26312,int main(void),78
26313,void notify_aib_crete_init(),173
26314,void notify_aib_crete_init(),177
26315,void apply_iosc_fuse_trim(),188
26316,void apply_iosc_fuse_trim(),192
26317,* Copyright (2018) Intel Corporation,3
26318,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",6
26319,"uint8_t whr_avmm_config_write(uint32_t offset, uint32_t size_bytes, const uint32_t *data_buffer)",35
26320,status_code_t whr_avmm_config_loader(const uint32_t *data_buffer),75
26321,uint32_t whr_avmm_get_hw_mode(),110
26322,* Copyright (2018) Intel Corporation,13
26323,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26324,void whr_cnoc_rx_init(void),77
26325,void whr_cnoc_rx_init(),85
26326,static void whr_cnoc_rx_isr(void* context),155
26327,static void whr_cnoc_rx_isr(void* context),163
26328,void supervisory_control_loop(void),375
26329,void supervisory_control_loop(void),383
26330,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",396
26331,"void put_msg_2_ring_buf(const uint32_t *cmd_packet, uint32_t payload_words)",405
26332,bool is_main_ring_buf_empty(),437
26333,void pass_msg_2_cnoc_intr_handler(uint32_t addr_reg),446
26334,void pass_msg_2_cnoc_intr_handler(uint32_t addr_reg),455
26335,* Copyright (2018) Intel Corporation,13
26336,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26337,void whr_cnoc_tx_init(void),53
26338,void whr_cnoc_tx_init(),61
26339,"void whr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",90
26340,"void whr_cnoc_tx_transmit(uint32_t *pkt_buffer, uint32_t payload_words, uint32_t areg, uint32_t offset, uint32_t op)",102
26341,"void send_msg_2_aib(const uint32_t *cmd_packet, uint32_t payload_words)",128
26342,"void send_msg_2_aib(uint32_t *cmd_packet, uint32_t payload_words)",136
26343,*        Copyright (c) 2015 Altera Corporation,12
26344,((credits_transferred < credits_available) ? 1 : 0 ),67
26345,void hip2c_avalon_fifo_init(),134
26346,static void hip2c_avalon_fifo_init(),143
26347,uint8_t whr_cvp_data_available(),159
26348,static inline uint8_t whr_cvp_data_available(),167
26349,uint8_t whr_cvp_data_fifo_empty (),180
26350,static inline uint8_t whr_cvp_data_fifo_empty(),188
26351,uint8_t whr_cvp_last_credit (),199
26352,static inline uint8_t whr_cvp_last_credit(),207
26353,bool cvp_config_asserted(),216
26354,static inline bool cvp_config_asserted(),224
26355,static void hip2c_bridge_out_isr(),235
26356,static void hip2c_bridge_out_isr(void* context),243
26357,static void cvp_dma_isr(),274
26358,static void cvp_dma_isr(),282
26359,static (void) exe_state_to_pause (void),340
26360,static void exe_state_to_pause (),348
26361,static (void) exe_state_to_wait (void),375
26362,static void exe_state_to_wait (),383
26363,static (void) exe_state_to_start_transfer (void),399
26364,static void exe_state_to_start_transfer (),407
26365,static (void) exe_state_to_data_available (void),424
26366,static void exe_state_to_data_available (),432
26367,static (void) exe_state_init_to_wait (void),453
26368,static void exe_state_init_to_wait (),461
26369,static void dma_context_wiped (),485
26370,static void dma_context_wiped (),494
26371,static (void) exe_state_uninit to init(void),511
26372,static void exe_state_uninit_to_init(),519
26373,static (void) exe_state_host_terminate (void),566
26374,static void exe_state_host_terminate(),574
26375,static (void) exe_state_cleanup (void),593
26376,static void exe_state_cleanup(),601
26377,static void cvp_init(),689
26378,static void cvp_init(),697
26379,"static void cvp_start_transfer(uint32_t address, uint32_t payload)",728
26380,"static void cvp_start_transfer(uint32_t address, uint32_t payload)",739
26381,"status_code_t whr_cvp_version_handler(const uint32_t *cmd_packet, uint32_t payload_words)",803
26382,"status_code_t whr_cvp_version_handler(const uint32_t *cmd_packet, uint32_t payload_words)",807
26383,"status_code_t whr_cvp_assert_deassert_handler(const uint32_t *cmd_packet, uint32_t payload_words)",821
26384,"status_code_t whr_cvp_assert_deassert_handler(const uint32_t *cmd_packet, uint32_t payload_words)",825
26385,"status_code_t whr_cvp_aib_credits_handler(const uint32_t *cmd_packet, uint32_t payload_words)",839
26386,"status_code_t whr_cvp_aib_credits_handler(const uint32_t *cmd_packet, uint32_t payload_words)",843
26387,void whr_cvp_cre_credits_handler(uint32_t credits),872
26388,void  whr_cvp_cre_credits_handler(uint32_t credits),877
26389,void flush_cvp_buffer (uint32_t words_remaining),964
26390,static uint32_t flush_cvp_buffer (),972
26391,"status_code_t whr_cvp_done_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1020
26392,"status_code_t whr_cvp_done_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1024
26393,void cvp_context_restore (),1123
26394,void whr_cvp_context_restore(),1131
26395,uint8_t whr_cvp_context_restore_on_going(),1150
26396,uint8_t whr_cvp_context_restore_on_going(),1160
26397,"status_code_t whr_cvp_buf_org_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1178
26398,"status_code_t whr_cvp_buf_org_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1182
26399,"status_code_t whr_cvp_error_to_host_handler(const uint32_t *cmd_packet, uint32_t payload_words)",1208
26400,"status_code_t whr_cvp_error_to_host_handler(const uint32_t *cmd_packet, uint32_t payload_words){",1212
26401,void whr_cvp_cnoc_tx_lock(),1222
26402,void whr_cvp_cnoc_tx_lock(),1228
26403,void whr_cvp_cnoc_tx_unlock(),1276
26404,void whr_cvp_cnoc_tx_unlock(),1281
26405,void whr_cvp_in_pio_isr_handler(),1296
26406,static void whr_cvp_in_pio_isr_handler(),1300
26407,void whr_cvp_in_pio_isr_handler(),1361
26408,void whr_cvp_in_pio_isr_init(),1365
26409,void cvp_state_machine(),1378
26410,void cvp_state_machine(),1394
26411,static inline void update_host_credit_count(uint32_t credits){,1442
26412,* Copyright (2018) Intel Corporation,13
26413,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26414,void init_whr_dfx_state(),58
26415,void process_whr_dfx_function(),67
26416,void clr_dfx_cmd_buf(),125
26417,void clr_dfx_cmd_buf(),129
26418,* Copyright (2018) Intel Corporation,13
26419,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26420,void dfx_cmd_req_handler_init(),124
26421,void dfx_cmd_req_handler_init(),132
26422,"void write_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",148
26423,"void write_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",156
26424,"void read_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",170
26425,"void read_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",179
26426,"void write_bulk_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",195
26427,"void write_bulk_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",203
26428,"void read_bulk_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",225
26429,"void read_bulk_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",233
26430,"void read_seq_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",258
26431,"void read_seq_word_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",266
26432,"void read_efuse_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",290
26433,"void read_efuse_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",298
26434,"void write_efuse_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",326
26435,"void write_efuse_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",334
26436,"void efuse_pgm_testrow_bit_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",354
26437,"void efuse_pgm_testrow_bit_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",362
26438,"void efuse_pgm_testcol_bit_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",382
26439,"void efuse_pgm_testcol_bit_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",390
26440,"void efuse_testrow_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",410
26441,"void efuse_testrow_read_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",418
26442,"void efuse_testcol_bit_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",440
26443,"void efuse_testcol_bit_read_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",448
26444,"void efuse_red_disable_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",470
26445,"void efuse_red_disable_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",478
26446,"void efuse_red_pgm_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",492
26447,"void efuse_red_pgm_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",500
26448,"void efuse_red_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",520
26449,"void efuse_red_read_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",528
26450,"void enter_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",550
26451,"void enter_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",558
26452,"void exit_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",572
26453,"void exit_user_mode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",580
26454,"void temp_sensor_cal_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",595
26455,"void temp_sensor_cal_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",605
26456,"void temp_sensor_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",638
26457,"void temp_sensor_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",646
26458,"void avmm_transfer_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",677
26459,"void avmm_transfer_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",685
26460,"void phy_fw_available_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",700
26461,"void phy_fw_available_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",708
26462,"void release_reset_hip_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",722
26463,"void release_reset_hip_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",730
26464,"void assert_reset_hip_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",744
26465,"void assert_reset_hip_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp){",752
26466,"void unrecognized_opcode_dfx_cmd_handler(uint32_t opcode, uint32_t len, uin32_t *p_data, dfx_resp_buffer_t *p_resp)",766
26467,"void unrecognized_opcode_dfx_cmd_handler(uint32_t opcode, uint32_t len, const uint32_t *p_data, dfx_resp_buffer_t *p_resp)",774
26468,* @author Nimeshkumar Shah (nimshah@altera.com),4
26469,* Copyright (2018) Intel Corporation,13
26470,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26471,"static void strobe_data(uint16_t efuse_bit_addr, uint8_t mode)",144
26472,"static void strobe_data(uint16_t efuse_bit_addr, uint8_t mode)",156
26473,void whr_efuse_enter_pd_mode(),228
26474,void whr_efuse_enter_pd_mode(),239
26475,void whr_efuse_exit_pd_mode(),258
26476,void whr_efuse_exit_pd_mode(),269
26477,"uint8_t whr_efuse_init(uint32_t *data0, uint32_t *data1)",293
26478,"uint8_t whr_efuse_init(uint32_t *data0, uint32_t *data1)",310
26479,"uint8_t whr_efuse_test_column_bit_read(uint8_t test_column_bit_addr, TestSelect_t testselect, bool margin_mode, uint32_t *data)",325
26480,"uint8_t whr_efuse_test_column_bit_read(uint8_t test_column_bit_addr, TestSelect_t testselect, bool margin_mode, uint32_t *data)",338
26481,"uint8_t whr_efuse_test_row_read(uint8_t bitline, bool margin_mode, uint32_t *data)",467
26482,"uint8_t whr_efuse_test_row_read(uint8_t bitline, bool margin_mode, uint32_t *data)",479
26483,"uint8_t whr_efuse_test_pgm_1bit(uint16_t efuse_test_bit_addr, TestSelect_t testselect, bool set)",600
26484,"uint8_t whr_efuse_test_pgm_1bit(uint16_t efuse_test_bit_addr, TestSelect_t testselect, bool set)",613
26485,uint8_t whr_efuse_redundancy_disable(RFBit_t rf_bit),713
26486,uint8_t whr_efuse_redundancy_disable(RFBit_t rf_bit),724
26487,"uint8_t whr_efuse_redundancy_pgm(uint16_t efuse_bit_address, bool set, RFBit_t rf_bit)",806
26488,"uint8_t whr_efuse_redundancy_pgm(uint16_t efuse_bit_address, bool set, RFBit_t rf_bit)",819
26489,"uint8_t whr_efuse_redundancy_read(bool margin_mode, uint32_t *data, uint8_t *rf)",927
26490,"uint8_t whr_efuse_redundancy_read(bool margin_mode, uint32_t *data0, uint32_t *data1)",945
26491,"uint8_t whr_efuse_array_pgm_1bit(uint16_t efuse_bit_addr, bool set)",1078
26492,"uint8_t whr_efuse_array_pgm_1bit(uint16_t efuse_bit_addr, bool set)",1090
26493,"uint8_t whr_efuse_array_pgm_row(uint16_t efuse_row_addr, uint32_t data)",1174
26494,"uint8_t whr_efuse_array_pgm_row(uint16_t efuse_row_addr, uint32_t data)",1186
26495,"uint8_t whr_efuse_array_read(uint16_t efuse_row_addr, bool margin_mode, uint32_t *data)",1281
26496,"uint8_t whr_efuse_array_read(uint16_t efuse_row_addr, bool margin_mode, uint32_t *data)",1293
26497,"uint8_t whr_efuse_strobe_auto_clear_en(bool enable, uint8_t strobe_auto_cnt_lmt)",1398
26498,"uint8_t whr_efuse_strobe_auto_clear_en(bool enable, uint8_t strobe_auto_cnt_lmt)",1410
26499,* Copyright (2018) Intel Corporation,13
26500,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26501,"static uint8_t wait_for_reg_val(uint32_t addr, uint32_t value, uint32_t bitmask, uint8_t wait_long)",200
26502,static uint8_t whr_hrc_is_bypass_ssm_mode(void),241
26503,static uint8_t whr_hrc_is_bypass_ssm_mode(void),251
26504,hrc_recovery_state_t whr_get_recovery_state(void),263
26505,void whr_set_hrc_recovery_mode(void),268
26506,void whr_set_hrc_recovery_mode(void),278
26507,void whr_set_hrc_recovery_mode(void),284
26508,uint8_t whr_get_hrc_recovery_mode(void),294
26509,void whr_hrc_set_pld_clrpcs(void),300
26510,void whr_hrc_set_pld_clrpcs(void),310
26511,"void whr_hrc_lane_reset_staggering(uint32_t lane_mask, uint32_t write_mode)",319
26512,"void whr_hrc_lane_reset_staggering(uint32_t lane_mask, uint32_t write_mode)",329
26513,"uint8_t whr_hrc_is_ipX_rst(hrc_byp_reset_ipX_t ipX, hrc_byp_reset_ipX_type_t type)",359
26514,"uint8_t whr_hrc_is_ipX_rst(hrc_byp_reset_ipX_t ipX, hrc_byp_reset_ipX_type_t type)",369
26515,void whr_hrc_exit_rst_state(hrc_byp_reset_state_t target_state),413
26516,uint8_t whr_hrc_exit_rst_state(hrc_byp_reset_state_t target_state),423
26517,uint8_t whr_hrc_core_reset_handling(),592
26518,void whr_hrc_enter_rst_state(hrc_byp_reset_state_t target_state),794
26519,uint8_t whr_hrc_enter_rst_state(hrc_byp_reset_state_t target_state),804
26520,void whr_hrc_change_rst_state(hrc_byp_reset_state_t target_state),883
26521,uint8_t whr_hrc_change_rst_state(hrc_byp_reset_state_t target_state),893
26522,void whr_hrc_bypass_is_super_reset(void),917
26523,"uint8_t whr_hrc_bypass_is_super_reset(uint32_t hrc_byp_stat_reg0, uint32_t hrc_rst_ctrl)",927
26524,void whr_hrc_bypass_is_full_reset(void),959
26525,"uint8_t whr_hrc_bypass_is_full_reset(uint32_t hrc_byp_stat_reg0, uint32_t hrc_rst_ctrl)",969
26526,void whr_hrc_bypass_is_partial_reset(void),1011
26527,"uint8_t whr_hrc_bypass_is_partial_reset(uint32_t hrc_byp_stat_reg0, uint32_t hrc_rst_ctrl)",1021
26528,void whr_hrc_bypass_is_core_reset(void),1063
26529,"uint8_t whr_hrc_bypass_is_core_reset(uint32_t hrc_byp_stat_reg0, uint32_t hrc_rst_ctrl)",1073
26530,void whr_hrc_get_state(void),1104
26531,hrc_byp_reset_state_t whr_hrc_get_state(void),1114
26532,void whr_hrc_isr_handler(),1144
26533,void whr_hrc_bypass_intr_handler(),1152
26534,uint8_t whr_hrc_ssm_bypass_mode_init(void),1171
26535,uint8_t whr_hrc_ssm_bypass_mode_init(void),1183
26536,uint8_t whr_hrc_ssm_bypass_mode_uninit(void),1312
26537,uint8_t whr_hrc_ssm_bypass_mode_uninit(void),1324
26538,void whr_hrc_bypass_process_quantum(void),1339
26539,void whr_hrc_bypass_process_quantum(void),1349
26540,static void whr_hrc_recovery_sequence(void),1375
26541,static void whr_hrc_recovery_sequence(void),1385
26542,void whr_hrc_start_recovery_sequence(void),1475
26543,void whr_hrc_start_recovery_sequence(void),1485
26544,void whr_hrc_recovery_quantum(void),1491
26545,void whr_hrc_recovery_quantum(void),1501
26546,void whr_hrc_recovery_mode_check(void),1543
26547,void whr_hrc_recovery_mode_sequence_check(void),1553
26548,* Copyright (2018) Intel Corporation,13
26549,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26550,static uint32_t phy_get_quad_enabled_1hot();   // returns list of enabled phy quads,86
26551,static void phy_set_sram_bypass(bool use_fw);  // non-zero if fw to overwrite,87
26552,static void phy_set_sram_access_disable();     // Disable access to PHYTOP SRAM,88
26553,static void phy_set_sram_load_done(bool done); // used to set the sram load done signal,89
26554,static uint32_t phy_get_quad_enabled_1hot(),94
26555,"void phy_override(uint32_t quad, uint32_t addr, uint32_t mask, bool stat)",135
26556,static void phy_set_sram_bypass(bool use_fw),153
26557,static void phy_set_sram_access_disable(),173
26558,static void phy_set_sram_load_done(bool done),185
26559,"static void phy_write_sram_chunk(uint32_t sram_offset_16bit, uint32_t size_16bit, const uint16_t *data)",197
26560,void phy_fw_update_available(bool isavail),214
26561,void phy_fw_process_quantum(cnt_fw_mode_t fw_mode),223
26562,void phy_fw_set_user_avmm(void),259
26563,void phy_fw_set_cfg_avmm(void),271
26564,void upi_rx_adaptation_quantum(cnt_fw_mode_t fw_mode),284
26565,*        Copyright (c) 2015 Altera Corporation,12
26566,STATIC uint8_t set_pvt_pio(uint32_t pvt_cfg_bitmask),75
26567,uint8_t whr_pvt_init(void),213
26568,uint8_t whr_pvt_init(void),224
26569,uint8_t whr_pvt_deinit(),260
26570,uint8_t whr_pvt_deinit(),271
26571,"uint8_t whr_pvt_enable(bool enable,  bool wait_for_data_valid)",293
26572,"uint8_t whr_pvt_enable(bool enable, bool wait_for_data_valid)",305
26573,uint8_t whr_pvt_select_mode(PVT_State_t pvt_state),328
26574,uint8_t whr_pvt_select_mode(PVT_State_t pvt_state),344
26575,"uint8_t whr_pvt_read_value(uint16_t *raw_value, int32_t *converted_value)",393
26576,"uint8_t whr_pvt_read_value(uint16_t *raw_value, int32_t *conv_value)",407
26577,int32_t conv_code_to_celsius(int32_t raw_value),465
26578,int32_t conv_code_to_celsius(int32_t raw_value),475
26579,int32_t conv_code_to_volt(int32_t raw_value),495
26580,int32_t conv_code_to_volt(int32_t raw_value),505
26581,uint16_t conv_celsius_to_code(int32_t temp_celsius),520
26582,uint16_t conv_celsius_to_code(int32_t temp_celsius),530
26583,"uint8_t whr_pvt_set_aib_mode(Temp_Sensor_t temp_sensor, uint32_t update_interval_ms)",537
26584,"uint8_t whr_pvt_set_aib_mode(PVT_State_t temp_sensor, uint32_t update_interval_ms)",550
26585,"uint8_t whr_pvt_set_trim_values(uint8_t trim_gain, uint8_t trim_offset)",578
26586,"uint8_t whr_pvt_set_trim_values(uint8_t trim_gain, uint8_t trim_offset)",590
26587,uint8_t whr_pvt_enable_alarm(int32_t trigger_value),609
26588,uint8_t whr_pvt_enable_alarm(int32_t trigger_value),620
26589,uint8_t whr_pvt_check_alarm(),645
26590,uint8_t whr_pvt_check_alarm(),656
26591,uint8_t whr_pvt_change_trig_value(int32_t trigger_value),676
26592,uint8_t whr_pvt_change_trig_value(int32_t trigger_value),687
26593,uint8_t whr_pvt_disable_alarm(),710
26594,uint8_t whr_pvt_disable_alarm(),720
26595,uint8_t whr_pvt_set_precision(whr_precision_t pvt_precision),733
26596,uint8_t whr_pvt_set_precision(whr_precision_t pvt_precision),743
26597,void whr_pvt_process_quantum(),756
26598,void whr_pvt_process_quantum(),767
26599,void whr_pvt_read_sensor_once(),873
26600,"uint8_t whr_pvt_read_sensor_once(PVT_State_t temp_sensor, uint16_t *raw_value, int32_t *conv_value)",887
26601,void whr_pvt_process_quantum(),920
26602,uint8_t whr_pvt_update_sensor_cal(uint32_t cal_value),931
26603,* Copyright (2018) Intel Corporation,3
26604,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",6
26605,"static uint8_t set_ssm_out_pio(write_mode_t write_mode, uint32_t bits, cnt_fw_mode_t fw_mode) {",50
26606,void enter_user_mode(){,67
26607,void exit_user_mode(){,93
26608,void release_reset_hip(){,102
26609,void assert_reset_hip(){,144
26610,void release_avmm_reset() {,153
26611,void assert_avmm_reset() {,166
26612,* Copyright (2018) Intel Corporation,13
26613,"* source code (""Material"") are owned by Intel Corporation or its suppliers or",16
26614,"uint8_t whr_usr_mailbox_recvmsg(uint8_t channel, uint32_t *msg)",59
26615,"uint8_t whr_usr_mailbox_recvmsg(uint8_t channel, uint32_t *msg)",72
26616,"uint8_t whr_usr_mailbox_sndmsg(uint8_t channel, uint32_t msg)",108
26617,"uint8_t whr_usr_mailbox_sndmsg(uint8_t channel, uint32_t msg)",120
26618,void whr_usr_mailbox_process_quantum(),151
26619,void whr_usr_mailbox_process_quantum(),166
26620,"* Copyright (c) 2004-2016 Altera Corporation, San Jose, California, USA. *",2
26621,unsigned int DV_REG_READ(unsigned int addr),15
26622,"void DV_REG_WRITE(unsigned int addr, unsigned int data)",21
26623,void dv_tasks(void),33
26624,"void fw_mrs_overwrite(const int tb_mrs_3_2_1_0, const int tb_mrs_7_6_5_4, const int tb_mrs_11_10_9_8, const int tb_mrs_15_14_13_12)",44
26625,void fw_AW_WR_CAL_ALGO_overwrite(const int tb_AW_WR_CAL_ALGO){,104
26626,void fw_DW_WR_CAL_ALGO_overwrite(const int tb_DW_WR_CAL_ALGO){,111
26627,void fw_DW_RD_CAL_ALGO_overwrite(const int tb_DW_RD_CAL_ALGO){,118
26628,void restore_tb_mrs_via_IEEE1500(),126
26629,void fw_dvsim_init(),150
26630,void fw_lane_repair(),175
26631,void fw_lane_repair_step1(),183
26632,void fw_lane_repair_step2(),189
26633,void fw_iopll_calibration(),195
26634,void fw_iopll_calibration_500MHZ(),202
26635,void fw_memory_training_aword_wr(),208
26636,void fw_memory_training_aword_wr_2_ch(),234
26637,void fw_memory_training_aword_wr_all_ch(),261
26638,void fw_memory_training_aword_wr_with_dword_noise(),288
26639,"void fw_memory_training_dword_wr(const int tb_aword_left_dll, const int tb_aword_right_dll, const int tb_aword_mid_dll)",315
26640,"void fw_memory_training_dword_wr_2_ch(const int tb_aword_left_dll, const int tb_aword_right_dll, const int tb_aword_mid_dll)",359
26641,"void fw_memory_training_dword_wr_all_ch(const int tb_aword_left_dll, const int tb_aword_right_dll, const int tb_aword_mid_dll)",409
26642,void fw_memory_training_dword_rd(),479
26643,void fw_memory_training_dword_rd_2_ch(),547
26644,void fw_memory_training_dword_rd_all_ch(),625
26645,void fw_memory_training(),693
26646,void fw_skip_cal_flow(),743
26647,"void fw_param_overwrite(const char* tb_param, const int tb_value, const int tb_value2)",764
26648,void TestcalSetAwordDwordLfsrNonToggleRich(void) {,816
26649,"void fw_set_open_short_value(IN UINT32 offset, IN UINT32 value)",825
26650,UINT32 Display_TestCalWdr_chA_aword(void) ,832
26651,UINT64 Display_TestCalWdr_dword_10(IN UINT32 channel),838
26652,UINT64 Display_TestCalWdr_dword_32(IN UINT32 channel),849
26653,"UINT32 Display_TestCalWdr_aword(IN UINT32 channel, IN UINT32 dword_lane)",858
26654,void fw_memory_training_dword_wr_mbist_enter_mode(),864
26655,void fw_memory_training_dword_wr_mbist_exit_mode(),941
26656,void fw_memory_training_dword_wr_mbist_enter_parallel_all_ch(),961
26657,void fw_memory_training_dword_wr_mbist_exit_mode_all_ch(),1032
26658,"void fw_memory_training_dword_wr_lfsr_sticky_compare(const int left_code, const int right_code)",1053
26659,"void fw_memory_training_aword_wr_lfsr_sticky_compare(const int left_code, const int right_code)",1183
26660,"void fw_test_calcode_aword_wr_all_ch(const int left_code, const int right_code)",1274
26661,"void fw_test_calcode_dword_wr_all_ch(const int left_code, const int right_code)",1333
26662,"void fw_test_calcode_dword_rd(const int left_code, const int right_code)",1474
26663,"void fw_test_calcode_dword_rd_all_ch(const int left_code, const int right_code)",1625
26664,"void fw_test_calcode_aword_wr_2_ch(const int left_code, const int right_code)",1714
26665,"void fw_test_calcode_dword_wr_2_ch(const int tb_aword_left_dll, const int tb_aword_right_dll, const int tb_aword_mid_dll)",1758
26666,"void fw_test_calcode_dword_rd_2_ch(const int left_code, const int right_code)",1876
26667,void fw_test_calcode_lane_repair(),1971
26668,void fw_memory_training_dword_wr_lane_repair_mbist_enter_mode(),1984
26669,void fw_memory_training_dword_wr_lane_repair_mbist_enter_parallel_all_ch(),2076
26670,void fw_memory_training_dword_wr_mbist_exit_mode_full_train(),2178
26671,void fw_memory_training_dword_wr_mbist_exit_mode_all_ch_full_train(),2253
26672,void alt_irq_init ( const void* base ),82
26673,void alt_sys_init( void ),93
26674,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26675,"* copy of this software and associated documentation files (the ""Software""),  *",9
26676,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
26677,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
26678,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
26679,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
26680,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
26681,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
26682,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
26683,int alt_avalon_dma_space (alt_dma_txchan dma),355
26684,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
26685,static void alt_avalon_dma_irq (void* context),446
26686,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
26687,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
26688,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26689,"* copy of this software and associated documentation files (the ""Software""),  *",9
26690,static void alt_avalon_timer_sc_irq (void* base),54
26691,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
26692,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
26693,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26694,"* copy of this software and associated documentation files (the ""Software""),  *",9
26695,int alt_timestamp_start(void),64
26696,alt_timestamp_type alt_timestamp(void),100
26697,alt_u32 alt_timestamp_freq(void),138
26698,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26699,"* copy of this software and associated documentation files (the ""Software""),  *",9
26700,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26701,"* copy of this software and associated documentation files (the ""Software""),  *",9
26702,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
26703,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
26704,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
26705,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26706,"* copy of this software and associated documentation files (the ""Software""),  *",9
26707,void alt_vic_irq_init (alt_vic_dev* pdev),45
26708,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26709,"* copy of this software and associated documentation files (the ""Software""),  *",9
26710,"int alt_ic_isr_register(alt_u32 ic_id,",59
26711,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26712,"* copy of this software and associated documentation files (the ""Software""),  *",9
26713,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
26714,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26715,"* copy of this software and associated documentation files (the ""Software""),  *",9
26716,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
26717,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
26718,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
26719,void altera_nios2_gen2_irq_init(void) ,34
26720,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26721,"* copy of this software and associated documentation files (the ""Software""),  *",9
26722,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
26723,unsigned int alt_busy_sleep (unsigned int us),52
26724,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
26725,"* copy of this software and associated documentation files (the ""Software""),  *",9
26726,"void alt_dcache_flush (void* start, alt_u32 len)",46
26727,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
26728,"* copy of this software and associated documentation files (the ""Software""),  *",9
26729,void alt_dcache_flush_all (void),41
26730,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
26731,"* copy of this software and associated documentation files (the ""Software""),  *",9
26732,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
26733,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26734,"* copy of this software and associated documentation files (the ""Software""),  *",9
26735,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
26736,ALT_SEM(alt_fd_list_lock),109
26737,int alt_dev_reg (alt_dev* dev),151
26738,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26739,"* copy of this software and associated documentation files (the ""Software""),  *",9
26740,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
26741,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26742,"* copy of this software and associated documentation files (the ""Software""),  *",9
26743,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
26744,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26745,"* copy of this software and associated documentation files (the ""Software""),  *",9
26746,alt_dma_txchan alt_dma_txchan_open (const char* name),51
26747,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26748,"* copy of this software and associated documentation files (the ""Software""),  *",9
26749,void _do_ctors(void),58
26750,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26751,"* copy of this software and associated documentation files (the ""Software""),  *",9
26752,void _do_dtors(void),58
26753,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
26754,"* copy of this software and associated documentation files (the ""Software""),  *",9
26755,alt_ecc_fatal_exception_register(alt_u32 handler),66
26756,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26757,"* copy of this software and associated documentation files (the ""Software""),  *",9
26758,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26759,"* copy of this software and associated documentation files (the ""Software""),  *",9
26760,void __env_lock ( struct _reent *_r ),43
26761,void __env_unlock ( struct _reent *_r ),51
26762,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26763,"* copy of this software and associated documentation files (the ""Software""),  *",9
26764,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26765,"* copy of this software and associated documentation files (the ""Software""),  *",9
26766,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
26767,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26768,"* copy of this software and associated documentation files (the ""Software""),  *",9
26769,void ALT_EXIT (int exit_code),52
26770,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26771,"* copy of this software and associated documentation files (the ""Software""),  *",9
26772,"int ALT_FCNTL (int file, int cmd, ...)",66
26773,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26774,"* copy of this software and associated documentation files (the ""Software""),  *",9
26775,int alt_fd_lock (alt_fd* fd),54
26776,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26777,"* copy of this software and associated documentation files (the ""Software""),  *",9
26778,int alt_fd_unlock (alt_fd* fd),52
26779,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26780,"* copy of this software and associated documentation files (the ""Software""),  *",9
26781,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
26782,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26783,"* copy of this software and associated documentation files (the ""Software""),  *",9
26784,alt_dev* alt_find_file (const char* name),54
26785,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26786,"* copy of this software and associated documentation files (the ""Software""),  *",9
26787,alt_flash_fd* alt_flash_open_dev(const char* name),49
26788,void alt_flash_close_dev(alt_flash_fd* fd),61
26789,int alt_flash_device_register( alt_flash_fd* fd),70
26790,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26791,"* copy of this software and associated documentation files (the ""Software""),  *",9
26792,int ALT_FORK (void),45
26793,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26794,"* copy of this software and associated documentation files (the ""Software""),  *",9
26795,int alt_fs_reg (alt_dev* dev),57
26796,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26797,"* copy of this software and associated documentation files (the ""Software""),  *",9
26798,alt_getchar(void),51
26799,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26800,"* copy of this software and associated documentation files (the ""Software""),  *",9
26801,int ALT_GETPID (void),43
26802,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26803,"* copy of this software and associated documentation files (the ""Software""),  *",9
26804,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
26805,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
26806,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26807,"* copy of this software and associated documentation files (the ""Software""),  *",9
26808,int alt_get_fd (alt_dev* dev),54
26809,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
26810,"* copy of this software and associated documentation files (the ""Software""),  *",9
26811,/* The compiler inserts calls to mcount() at the start of,48
26812,static __inline__ void * mcount_allocate(unsigned int size),133
26813,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
26814,static int nios2_pcsample_init(void),218
26815,static alt_u32 nios2_pcsample(void* context),250
26816,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26817,"* copy of this software and associated documentation files (the ""Software""),  *",9
26818,"void alt_icache_flush (void* start, alt_u32 len)",42
26819,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26820,"* copy of this software and associated documentation files (the ""Software""),  *",9
26821,void alt_icache_flush_all (void),41
26822,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26823,"* copy of this software and associated documentation files (the ""Software""),  *",9
26824,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
26825,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
26826,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
26827,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
26828,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
26829,"* copy of this software and associated documentation files (the ""Software""),  *",9
26830,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
26831,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
26832,"* copy of this software and associated documentation files (the ""Software""),  *",9
26833,alt_exception_result (*alt_instruction_exception_handler),49
26834,int alt_instruction_exception_entry (alt_u32 exception_pc),53
26835,alt_instruction_exception_entry (alt_u32 exception_pc),68
26836,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
26837,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
26838,"* copy of this software and associated documentation files (the ""Software""),  *",9
26839,void alt_instruction_exception_register (,73
26840,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
26841,"* copy of this software and associated documentation files (the ""Software""),  *",9
26842,"int ALT_IOCTL (int file, int req, void* arg)",68
26843,"int ALT_IOCTL (int file, int req, void* arg)",106
26844,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26845,"* copy of this software and associated documentation files (the ""Software""),  *",9
26846,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
26847,"void alt_io_redirect(const char* stdout_dev, ",85
26848,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
26849,"* copy of this software and associated documentation files (the ""Software""),  *",9
26850,void alt_irq_handler (void),80
26851,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
26852,"* copy of this software and associated documentation files (the ""Software""),  *",9
26853,"int alt_irq_register (alt_u32 id, ",75
26854,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26855,"* copy of this software and associated documentation files (the ""Software""),  *",9
26856,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26857,"* copy of this software and associated documentation files (the ""Software""),  *",9
26858,"int ALT_KILL (int pid, int sig)",49
26859,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26860,"* copy of this software and associated documentation files (the ""Software""),  *",9
26861,"int ALT_LINK ( char *existing, char *new)",45
26862,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
26863,"* copy of this software and associated documentation files (the ""Software""),  *",9
26864,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
26865,void alt_load (void),67
26866,"void alt_log_txchar(int c,char *base)",95
26867,"void alt_log_repchar(char c,int r,int base)",106
26868,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
26869,"int alt_log_printf_proc(const char *fmt, ... )",344
26870,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
26871,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
26872,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
26873,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
26874,"void alt_log_write(const void *ptr, size_t len)",440
26875,void alt_log_system_clock(),474
26876,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
26877,"* copy of this software and associated documentation files (the ""Software""),  *",9
26878,void alt_main (void),82
26879,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26880,"* copy of this software and associated documentation files (the ""Software""),  *",9
26881,void __malloc_lock ( struct _reent *_r ),42
26882,void __malloc_unlock ( struct _reent *_r ),50
26883,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26884,"* copy of this software and associated documentation files (the ""Software""),  *",9
26885,"alt_printf(const char* fmt, ... )",51
26886,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26887,"* copy of this software and associated documentation files (the ""Software""),  *",9
26888,alt_putchar(int c),50
26889,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26890,"* copy of this software and associated documentation files (the ""Software""),  *",9
26891,alt_putcharbuf(int c),58
26892,alt_putbufflush(),73
26893,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
26894,"* copy of this software and associated documentation files (the ""Software""),  *",9
26895,alt_putstr(const char* str),52
26896,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26897,"* copy of this software and associated documentation files (the ""Software""),  *",9
26898,void alt_release_fd (int fd),44
26899,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
26900,"* copy of this software and associated documentation files (the ""Software""),  *",9
26901,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
26902,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
26903,"* copy of this software and associated documentation files (the ""Software""),  *",9
26904,"alt_remap_uncached(void* ptr, alt_u32 len)",49
26905,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26906,"* copy of this software and associated documentation files (the ""Software""),  *",9
26907,caddr_t ALT_SBRK (int incr),68
26908,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26909,"* copy of this software and associated documentation files (the ""Software""),  *",9
26910,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
26911,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26912,"* copy of this software and associated documentation files (the ""Software""),  *",9
26913,void alt_alarm_stop (alt_alarm* alarm),66
26914,void alt_tick (void),87
26915,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26916,"* copy of this software and associated documentation files (the ""Software""),  *",9
26917,clock_t ALT_TIMES (struct tms *buf),51
26918,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
26919,"* copy of this software and associated documentation files (the ""Software""),  *",9
26920,alt_uncached_free(volatile void* ptr),40
26921,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
26922,"* copy of this software and associated documentation files (the ""Software""),  *",9
26923,alt_uncached_malloc(size_t size),42
26924,int ALT_USLEEP (useconds_t us),46
26925,unsigned int ALT_USLEEP (unsigned int us),48
26926,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26927,"* copy of this software and associated documentation files (the ""Software""),  *",9
26928,int ALT_WAIT (int *status),44
26929,void alt_irq_init ( const void* base ),82
26930,void alt_sys_init( void ),93
26931,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26932,"* copy of this software and associated documentation files (the ""Software""),  *",9
26933,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
26934,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
26935,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
26936,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
26937,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
26938,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
26939,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
26940,int alt_avalon_dma_space (alt_dma_txchan dma),355
26941,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
26942,static void alt_avalon_dma_irq (void* context),446
26943,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
26944,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
26945,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26946,"* copy of this software and associated documentation files (the ""Software""),  *",9
26947,static void alt_avalon_timer_sc_irq (void* base),54
26948,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
26949,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
26950,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26951,"* copy of this software and associated documentation files (the ""Software""),  *",9
26952,int alt_timestamp_start(void),64
26953,alt_timestamp_type alt_timestamp(void),100
26954,alt_u32 alt_timestamp_freq(void),138
26955,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
26956,"* copy of this software and associated documentation files (the ""Software""),  *",9
26957,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26958,"* copy of this software and associated documentation files (the ""Software""),  *",9
26959,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
26960,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
26961,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
26962,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26963,"* copy of this software and associated documentation files (the ""Software""),  *",9
26964,void alt_vic_irq_init (alt_vic_dev* pdev),45
26965,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26966,"* copy of this software and associated documentation files (the ""Software""),  *",9
26967,"int alt_ic_isr_register(alt_u32 ic_id,",59
26968,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26969,"* copy of this software and associated documentation files (the ""Software""),  *",9
26970,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
26971,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
26972,"* copy of this software and associated documentation files (the ""Software""),  *",9
26973,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
26974,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
26975,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
26976,void altera_nios2_gen2_irq_init(void) ,34
26977,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
26978,"* copy of this software and associated documentation files (the ""Software""),  *",9
26979,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
26980,unsigned int alt_busy_sleep (unsigned int us),52
26981,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
26982,"* copy of this software and associated documentation files (the ""Software""),  *",9
26983,"void alt_dcache_flush (void* start, alt_u32 len)",46
26984,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
26985,"* copy of this software and associated documentation files (the ""Software""),  *",9
26986,void alt_dcache_flush_all (void),41
26987,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
26988,"* copy of this software and associated documentation files (the ""Software""),  *",9
26989,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
26990,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26991,"* copy of this software and associated documentation files (the ""Software""),  *",9
26992,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
26993,ALT_SEM(alt_fd_list_lock),109
26994,int alt_dev_reg (alt_dev* dev),151
26995,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26996,"* copy of this software and associated documentation files (the ""Software""),  *",9
26997,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
26998,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
26999,"* copy of this software and associated documentation files (the ""Software""),  *",9
27000,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
27001,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27002,"* copy of this software and associated documentation files (the ""Software""),  *",9
27003,alt_dma_txchan alt_dma_txchan_open (const char* name),51
27004,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27005,"* copy of this software and associated documentation files (the ""Software""),  *",9
27006,void _do_ctors(void),58
27007,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27008,"* copy of this software and associated documentation files (the ""Software""),  *",9
27009,void _do_dtors(void),58
27010,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
27011,"* copy of this software and associated documentation files (the ""Software""),  *",9
27012,alt_ecc_fatal_exception_register(alt_u32 handler),66
27013,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27014,"* copy of this software and associated documentation files (the ""Software""),  *",9
27015,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27016,"* copy of this software and associated documentation files (the ""Software""),  *",9
27017,void __env_lock ( struct _reent *_r ),43
27018,void __env_unlock ( struct _reent *_r ),51
27019,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27020,"* copy of this software and associated documentation files (the ""Software""),  *",9
27021,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27022,"* copy of this software and associated documentation files (the ""Software""),  *",9
27023,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
27024,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27025,"* copy of this software and associated documentation files (the ""Software""),  *",9
27026,void ALT_EXIT (int exit_code),52
27027,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27028,"* copy of this software and associated documentation files (the ""Software""),  *",9
27029,"int ALT_FCNTL (int file, int cmd, ...)",66
27030,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27031,"* copy of this software and associated documentation files (the ""Software""),  *",9
27032,int alt_fd_lock (alt_fd* fd),54
27033,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27034,"* copy of this software and associated documentation files (the ""Software""),  *",9
27035,int alt_fd_unlock (alt_fd* fd),52
27036,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27037,"* copy of this software and associated documentation files (the ""Software""),  *",9
27038,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
27039,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27040,"* copy of this software and associated documentation files (the ""Software""),  *",9
27041,alt_dev* alt_find_file (const char* name),54
27042,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27043,"* copy of this software and associated documentation files (the ""Software""),  *",9
27044,alt_flash_fd* alt_flash_open_dev(const char* name),49
27045,void alt_flash_close_dev(alt_flash_fd* fd),61
27046,int alt_flash_device_register( alt_flash_fd* fd),70
27047,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27048,"* copy of this software and associated documentation files (the ""Software""),  *",9
27049,int ALT_FORK (void),45
27050,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27051,"* copy of this software and associated documentation files (the ""Software""),  *",9
27052,int alt_fs_reg (alt_dev* dev),57
27053,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27054,"* copy of this software and associated documentation files (the ""Software""),  *",9
27055,alt_getchar(void),51
27056,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27057,"* copy of this software and associated documentation files (the ""Software""),  *",9
27058,int ALT_GETPID (void),43
27059,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
27060,"* copy of this software and associated documentation files (the ""Software""),  *",9
27061,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
27062,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
27063,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27064,"* copy of this software and associated documentation files (the ""Software""),  *",9
27065,int alt_get_fd (alt_dev* dev),54
27066,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
27067,"* copy of this software and associated documentation files (the ""Software""),  *",9
27068,/* The compiler inserts calls to mcount() at the start of,48
27069,static __inline__ void * mcount_allocate(unsigned int size),133
27070,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
27071,static int nios2_pcsample_init(void),218
27072,static alt_u32 nios2_pcsample(void* context),250
27073,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27074,"* copy of this software and associated documentation files (the ""Software""),  *",9
27075,"void alt_icache_flush (void* start, alt_u32 len)",42
27076,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27077,"* copy of this software and associated documentation files (the ""Software""),  *",9
27078,void alt_icache_flush_all (void),41
27079,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
27080,"* copy of this software and associated documentation files (the ""Software""),  *",9
27081,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
27082,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
27083,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
27084,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
27085,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
27086,"* copy of this software and associated documentation files (the ""Software""),  *",9
27087,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
27088,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
27089,"* copy of this software and associated documentation files (the ""Software""),  *",9
27090,alt_exception_result (*alt_instruction_exception_handler),49
27091,int alt_instruction_exception_entry (alt_u32 exception_pc),53
27092,alt_instruction_exception_entry (alt_u32 exception_pc),68
27093,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
27094,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
27095,"* copy of this software and associated documentation files (the ""Software""),  *",9
27096,void alt_instruction_exception_register (,73
27097,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
27098,"* copy of this software and associated documentation files (the ""Software""),  *",9
27099,"int ALT_IOCTL (int file, int req, void* arg)",68
27100,"int ALT_IOCTL (int file, int req, void* arg)",106
27101,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27102,"* copy of this software and associated documentation files (the ""Software""),  *",9
27103,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
27104,"void alt_io_redirect(const char* stdout_dev, ",85
27105,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
27106,"* copy of this software and associated documentation files (the ""Software""),  *",9
27107,void alt_irq_handler (void),80
27108,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
27109,"* copy of this software and associated documentation files (the ""Software""),  *",9
27110,"int alt_irq_register (alt_u32 id, ",75
27111,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27112,"* copy of this software and associated documentation files (the ""Software""),  *",9
27113,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27114,"* copy of this software and associated documentation files (the ""Software""),  *",9
27115,"int ALT_KILL (int pid, int sig)",49
27116,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27117,"* copy of this software and associated documentation files (the ""Software""),  *",9
27118,"int ALT_LINK ( char *existing, char *new)",45
27119,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
27120,"* copy of this software and associated documentation files (the ""Software""),  *",9
27121,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
27122,void alt_load (void),67
27123,"void alt_log_txchar(int c,char *base)",95
27124,"void alt_log_repchar(char c,int r,int base)",106
27125,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
27126,"int alt_log_printf_proc(const char *fmt, ... )",344
27127,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
27128,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
27129,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
27130,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
27131,"void alt_log_write(const void *ptr, size_t len)",440
27132,void alt_log_system_clock(),474
27133,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
27134,"* copy of this software and associated documentation files (the ""Software""),  *",9
27135,void alt_main (void),82
27136,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27137,"* copy of this software and associated documentation files (the ""Software""),  *",9
27138,void __malloc_lock ( struct _reent *_r ),42
27139,void __malloc_unlock ( struct _reent *_r ),50
27140,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27141,"* copy of this software and associated documentation files (the ""Software""),  *",9
27142,"alt_printf(const char* fmt, ... )",51
27143,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27144,"* copy of this software and associated documentation files (the ""Software""),  *",9
27145,alt_putchar(int c),50
27146,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27147,"* copy of this software and associated documentation files (the ""Software""),  *",9
27148,alt_putcharbuf(int c),58
27149,alt_putbufflush(),73
27150,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27151,"* copy of this software and associated documentation files (the ""Software""),  *",9
27152,alt_putstr(const char* str),52
27153,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27154,"* copy of this software and associated documentation files (the ""Software""),  *",9
27155,void alt_release_fd (int fd),44
27156,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
27157,"* copy of this software and associated documentation files (the ""Software""),  *",9
27158,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
27159,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
27160,"* copy of this software and associated documentation files (the ""Software""),  *",9
27161,"alt_remap_uncached(void* ptr, alt_u32 len)",49
27162,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27163,"* copy of this software and associated documentation files (the ""Software""),  *",9
27164,caddr_t ALT_SBRK (int incr),68
27165,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
27166,"* copy of this software and associated documentation files (the ""Software""),  *",9
27167,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
27168,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
27169,"* copy of this software and associated documentation files (the ""Software""),  *",9
27170,void alt_alarm_stop (alt_alarm* alarm),66
27171,void alt_tick (void),87
27172,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27173,"* copy of this software and associated documentation files (the ""Software""),  *",9
27174,clock_t ALT_TIMES (struct tms *buf),51
27175,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
27176,"* copy of this software and associated documentation files (the ""Software""),  *",9
27177,alt_uncached_free(volatile void* ptr),40
27178,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
27179,"* copy of this software and associated documentation files (the ""Software""),  *",9
27180,alt_uncached_malloc(size_t size),42
27181,int ALT_USLEEP (useconds_t us),46
27182,unsigned int ALT_USLEEP (unsigned int us),48
27183,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27184,"* copy of this software and associated documentation files (the ""Software""),  *",9
27185,int ALT_WAIT (int *status),44
27186,UibssmCalTimerSnapshot(,31
27187,"volatile CalDfdLogMainRamType CalDfdLogMainRam; // todo fix a location, and/or reduce overall DFD size to fit into user ram only (guarantees fixed location)",50
27188,HbmDwordReadPatternOperation(,68
27189,HbmChannelDwordReadTraining(,76
27190,/*called after DEBUGCODE(0x7000) RxVref*/,298
27191,RxFindEdge(,301
27192,RxCalcMidpointAndDccOffset(,900
27193,RxDllSetDelay(,1013
27194,RxDccSetOffset(,1149
27195,ReadLatencyOptimization(,1261
27196,/** Setup for AWORD and DWORD to perform DWORD Read operation by sending Read commands (from the AWORD),1456
27197,UibCalDwordReadTrainingInit(,1464
27198,HbmSelfRefresh(,1526
27199,HbmDwordLoopback(,1662
27200,UibDwordSetMisrMaskMode(,1776
27201,UibDwordPollForStrmInboundInProg(,1843
27202,UB48ReadoutMisrData(,1898
27203,/*Called from DEBUGCODE(0x7004)*/,1930
27204,HbmDwordReadMisrOperation(,1933
27205,UibCalDwordReadSetupReadBuffers(,2072
27206,/*Called DEBUGCODE(0xD005);*/,2294
27207,UibCalDwordReadSetupAwordCommandsToRead(,2297
27208,UibCalDwordReadStrobeIndicatorSetup(,2422
27209,UibCalDwordReceiveFifoSetup(,2497
27210,UibCalDwordReceiveFifoDisable(,2613
27211,HbmChannelIdToNumber(,2707
27212,HbmChannelSetDwordStreaming(,2741
27213,HbmChannelSetDwordBufferModes(,2802
27214,RxDllFastLoadPulse(,2845
27215,RxDllEnableDisableDelay(,2924
27216,UibssmPostCalibrationTasks(,2978
27217,UibssmCalAlgorithmSelection(,3078
27218,UibssmHbmUpdateState(,3132
27219,UibssmDummyCalbusRead(,3157
27220,/** HbmDwordReadPatternOperation (Derived from HbmDwordReadMisrOperation),3177
27221,HbmDwordReadPatternOperation(,3188
27222,HbmRowCommand(,3411
27223,/*extra: could add a cke mode 0/1 then this function can be used to clean up the 8x commands being sent during loopback mode (for both write and read)*/,3517
27224,HbmColCommand(,3533
27225,HbmDwordSetDataFast(,3615
27226,HbmDwordSetWlStrmctlFast(,3734
27227,HbmDwordSetWdqsValue(,3812
27228,HbmDwordReadPatternBasedSetup(,3916
27229,HbmPrechargeAllThenRefresh(,4183
27230,UB48RxDllSetDelay(,4211
27231,UB48RxDllFastLoadPulse(,4241
27232,UB48ReadBufferEnableDisable(,4274
27233,UibssmLoggingUpdateFunction(,4326
27234,UibssmLoggingReadFunction(,4375
27235,UibssmLoggingUpdateFunction(,4409
27236,UibssmLoggingReadFunction(,4465
27237,UB48MinDlyOffset(,44
27238,HbmChannelAwordMinDlyTdqssOptCheck(,87
27239,HbmChannelDwordMinDlyTdqssOptCheck(,302
27240,RxSetVrefCtrl(,42
27241,RxSetVrefDataDefaultRxVrefLoop(,95
27242,RxResetVrefDataBestWinResult(,127
27243,RxSetVrefDataEvenOddLeftRightEdgeUI(,158
27244,HbmChannelBestRxVrefMargin(,193
27245,RxVrefSettingList(,269
27246,RxVrefFindEdge(,327
27247,HbmChannelAwordTrainingSetDCC(,53
27248,HbmChannelDwordTrainingSetDCC(,115
27249,HbmChannelAwordSetAllChPsioPdioTxDcc(,179
27250,HbmChannelDwordSetAllChPsioPdioTxDcc(,214
27251,HbmChannelAwordTrainingWithDCC( /*HbmChannelAwordWriteTraining*/,258
27252,HbmChannelDwordTrainingWithDCC( /*HbmChannelDwordWriteTraining*/,485
27253,HbmChannelAwordBestTxDccMargin(,743
27254,HbmChannelDwordBestTxDccMargin(,783
27255,GetHbmTimingParams(,445
27256,SetupUibTimingParams(,492
27257,HbmChannelAwordTrainingSetBypassAndPoly(,625
27258,HbmChannelAwordTrainingEnd(,720
27259,HbmChannelAwordTrainingISetStatLfsr(,755
27260,HbmChannelAwordTrainingInit(,809
27261,HbmChannelSetOe(,946
27262,HbmChannelSetIe(,1114
27263,HbmChannelSetStrmTimer(,1318
27264,HbmChannelDwordWriteTrainingInitAword(,1422
27265,HbmChannelDwordTrainingSetBypassAndPoly(,1603
27266,HbmChannelDwordTrainingISetStatLfsr(,1696
27267,HbmChannelDwordTrainingInit(,1780
27268,HbmChannelAwordTrainingSetSeed(,1901
27269,HbmChannelAwordTrainingSettings(,1982
27270,HbmChannelDwordTrainingSetSeed(,2119
27271,HbmChannelDwordTrainingSetWl(,2211
27272,HbmChannelDwordTrainingSettings(,2291
27273,HbmChannelAwordDwordSetStatBufSel(,2417
27274,HbmChannelAwordStreamBufferDone(,2471
27275,HbmChannelAwordTrainingGetMisrSig(,2523
27276,HbmChannelDwordTrainingGetMisrSig(,2655
27277,HbmChannelGetChNumbers(,2753
27278,HbmChannelGetChId(,2787
27279,HbmChannelIsOdd(,2820
27280,HbmChannelAwordTrainingSetDllDly(,2872
27281,HbmChannelDwordSetDeadbandSelect(,3123
27282,HbmChannelDwordTrainingSetDllDlyPerDword(,3212
27283,HbmChannelDwordTrainingSetDllDly(,3455
27284,HbmChannelAwordCreateCommand(,3519
27285,UibssmCalcCommandParityBit(,3731
27286,HbmChannelAwordSetCmdMode(,3769
27287,HbmChannelAwordMisrConfigSet(,3868
27288,HbmChannelAwordPrepIdleCommandStatBuf(,3943
27289,HbmChannelAwordPrepCommand(,4029
27290,UB48SetStrmCtl(,4105
27291,HbmGetExpectedMisrSignature(,4132
27292,HbmChannelAwordWriteTraining(,4194
27293,HbmChannelAwordDwordTdqssOptCheck(,5005
27294,HbmChannelCalculateNextDllCodeIfNotOk(,5087
27295,HbmChannelCalculateNextDllCodeIfOk(,5143
27296,HbmChannelDwordWriteTraining(,5201
27297,HbmChannelTraining(,6126
27298,HbmChannelMinDly(,6362
27299,UibssmMrsWithDelaySyncSelect(,6443
27300,HbmDwordCalSetSpecificMRS(,6534
27301,HbmChannelTrainingMasterDllSet(,6629
27302,HbmChannelTrainingMasterDllsOperation(,6682
27303,UibssmMasterDllsGetWaitTime(),6733
27304,UibssmMasterDllsPeriodicEnableDisable(,6821
27305,UibCheckAwordStrmBufferDone(,6879
27306,HbmRefreshCommand(,6956
27307,HbmChannelIeee1500UpdateMrs(,7068
27308,UibssmToggleRichLfsrRfSwapSet(,7147
27309,HbmChannelAwordFillNop(,7172
27310,HbmChannelAutoDccSetAll(,7230
27311,UB48CreateDataStrm(,7276
27312,UB48SetOe(,7333
27313,UB48SetIe(,7402
27314,UB48ReadStrobeIndicatorSetup(,7489
27315,UB48SetBufferModes(,7539
27316,UB48ReceiveFifoSetup(,7582
27317,UB48ReceiveFifoDisable(,7643
27318,UB48RxDllEnableDisableDelay(,7689
27319,UB48StreamBufferDone(,7722
27320,UB48PopulateDataStrm(,7752
27321,UB48PopulateRdbufSettings(,7853
27322,UB48TxDllCheckDllLock(,7919
27323,UB48TxDllGenFastLoadPulse(,8026
27324,UB48TxDllGenSafeLoadPulse(,8090
27325,UB48TxDllAutoDccEnableDisable(,8153
27326,UB48TxDllSetDelayValue(,8189
27327,UB48TxDllEnableDisable(,8221
27328,UB48TxDllSetDelay(,8265
27329,UB48PopulateStatData(,8410
27330,UB48ReadoutReadBuffer(,8445
27331,UibHbmLanesRepairUb48Analyze(,59
27332,DwordBytesLaneCalculate(,256
27333,UibHbmLanesRepairUb48BeadbusSetOeIe(,533
27334,UibHbmLanesRepairUb48BeadbusSetOe(,563
27335,UibHbmLanesRepairUb48BeadbusClrOeIe(,593
27336,UibHbmLanesRepairUb48BeadbusRtrOeIe(,625
27337,UibHbmLanesRepairUb48BeadbusPsioCalOeIe(,665
27338,UibHbmLanesRepairUb48BeadbusPdioCalOeIe(,731
27339,UibHbmLanesRepairUb48Beadbus(,794
27340,UibHbmLanesRepairIrrMmrUpdate(,1139
27341,UibHbmChannelLaneRepair(,1405
27342,UibssmCalibrateIopll(,36
27343,UibssmAdapterIopllReadField(,134
27344,UibssmAdapterIopllWriteField(,196
27345,UibMidstackIeee1500BUF_CHECK(,48
27346,UibMidstackSet1500ClockDivider(,90
27347,UibMidstackIeee1500_wrclk(,128
27348,UibMidstackIeee1500_run_wrclk(,163
27349,UibMidstackHbm_rst_n(,218
27350,UibMidstackIeee1500_wrst_n(,258
27351,UibMidstackIeee1500Update_wir(,301
27352,UibMidstackIeee1500Update_wdr(,402
27353,UibMidstackIeee1500Capture_wdr(,518
27354,UibMidstackCheckNotByp(),757
27355,UibMidstackIeee1500BUF_CHECK(,781
27356,UibCreateTmrsData(,69
27357,"/** Wraps UibCreateTmrsData(), Update_wdr(), run_wrclk for 200 clock cycles. */",157
27358,UibSendTmrsData(,160
27359,UibssmTmrsGenRdCtrlRev3_Sequences(,188
27360,UibssmTmrsGenRdCtrlRev3(,352
27361,UibssmTmrsGenSeqFwRev3(,413
27362,BOOLEAN UibssmBscFlopInit(),42
27363,VOID UibssmRcompOverrideFlowC(),45
27364,UibssmRcompParamGetThresHold(UINT32 param),65
27365,UibssmRcompParamGetOffset(UINT32 param),77
27366,UibssmRcompParamNoScalingThreshold(UINT32 param),89
27367,INT32 UibssmRcompGetVariableScalingOffset(,111
27368,UibssmRcompClampValues(,153
27369,UibssmRcompCalculateOverrideValue(,189
27370,BOOLEAN UibssmRcompOverrideEnabled(,214
27371,UibssmMaskOffUfiClockDcm(,149
27372,UibssmRestoreUfiClockDcm(,177
27373,BOOLEAN UibssmBscFlopInit(),33
27374,VOID UibssmRcompOverrideFlowC(),39
27375,UibssmRcompCalculateOverrideValue(,74
27376,BOOLEAN UibssmRcompOverrideEnabled(,146
27377,UibssmCnocRxClearInterrupts(),58
27378,UibssmCnocRxIsr(,88
27379,UibssmStateMachine(,461
27380,UibssmCnocRxInit(),904
27381,"volatile ieee_lane_repair_wdr_t   TestCalWdr[TOTAL_CHANNEL]                       __attribute__ ( ( section( "".testcal_data3"" ) ) ) = {",33
27382,"volatile UINT32                   TgulvBinningFinalResult                         __attribute__ ( ( section( "".testcal_data6"" ) ) ) = 0; /* 1 word to indicate overall pass/fail result of the TGULV results of the requested batch of UB48s. */",62
27383,SetOpenshortValue(,108
27384,MappingTestValue(,129
27385,LaneRepairDetect(,495
27386,AwordLaneRepairDetect(,593
27387,DwordLaneRepairDetect(,702
27388,LaneRepairTestCal(,850
27389,HbmChannelTrainingGetLfsrSig(,1013
27390,HbmAwordDwordCheckRepairable(,1133
27391,UibssmTestCalMemoryInterfaceTraining(,1273
27392,UibssmTestCalPassingWindowCheck(,1513
27393,UibssmTestCalConnectivityTest(,1573
27394,UibssmTestCalHbmMbistSupportMode(,1616
27395,UibssmTestCalTgulvBinningLoopbackSetup(,1744
27396,UibssmTestCalTgulvBinningLoopbackCleanup(,2096
27397,UibssmTestcalTgulvBinningLaunchData(,2140
27398,UibssmTestCalTgulvBinningLoopbackRun(,2270
27399,UibssmTestCalTgulvBinningCheckResults(,2805
27400,UibssmTestCalTgulvBinningWrapper(,3037
27401,UibssmTestCalcodeEntry(,3256
27402,UibssmTestCalParametersAdjustment(,3501
27403,process_uib_dfx_function(),61
27404,process_cjtag_command(,94
27405,clear_cjtag_command_and_databit(),880
27406,uib_cnoc_return(,908
27407,"process_uib_tgulv_rcomp_test(UINT32 *cjtag_data, volatile UINT32 *Status)",957
27408,UibssmRcompCalibrationTestStart(UibssmRcompTestType* RcompTestData),1086
27409,IocsrBridgeBusesInit(),37
27410,IocsrBridgeWrite(,98
27411,IocsrBridgeUnload(,194
27412,VerifyIocsrPacketData(,264
27413,VerifyClockDivisionRatio(,305
27414,PhyBeadbusReg(,335
27415,Ub48BeadbusReg(,373
27416,HbmcRedundancyReg(,412
27417,BeadbusClear(,457
27418,BeadbusUpdate(,479
27419,BeadbusInit(,499
27420,BeadbusShift(,517
27421,BeadbusSample(,534
27422,RedundancyReset(,550
27423,RedundancyEnableShift(,568
27424,RedundancyDisableShift(,586
27425,RedundancyEnableIsolation(,604
27426,BeadbusValueReversion(,625
27427,RedundancyScanValueReversion(,649
27428,CalculateBeadBusBitWordLocation(,676
27429,UpdateBitsAtWordLocation(,709
27430,UibssmCalibrationBusSessionStart(,105
27431,UibssmCalibrationBusAccess(,147
27432,UibssmCalibrationBusSessionEnd(,320
27433,UibMsSyncPulseSteer(,349
27434,UibCalibrationBusGenerateSync(,390
27435,UibssmEnableCalClk(,453
27436,UibMemPart1Init(,52
27437,UibMemPart2Training(,106
27438,UibMemInitAndTraining(,334
27439,UibMemInitAndTrainingDefaultSettings(,364
27440,UibssmLaneRepairAndFullIoBringupDefaultSettings(,441
27441,UibssmLaneRepairAndFullIoBringupRestoreOeIeSettings(,462
27442,UibssmLaneRepairAndFullIoBringupRestoreSettings(,488
27443,UibssmMasterDllsInit(,508
27444,UibMemInitAndTrainingAwordDefaultSettings(,531
27445,UibMemInitAndTrainingAword(,585
27446,UibMemInitAndTrainingAwordRestoreSettings(,624
27447,UibMemInitAndTrainingDwordWriteDefaultSettings(,644
27448,UibMemInitAndTrainingDwordWrite(,700
27449,UibMemInitAndTrainingDwordWriteRestoreSettings(,741
27450,UibMemInitAndTrainingDwordReadDefaultSettings(,761
27451,UibMemInitAndTrainingDwordRead(,835
27452,UibMemInitAndTrainingDwordReadRestoreSettings(,876
27453,UibMemInitAndTrainingMrsRestore(,898
27454,UibssmTinit1_2(,921
27455,UibssmTinit3(),1115
27456,UibssmIeee1500InitMidstackWrclk(),1150
27457,UibssmTinit5(,1184
27458,VOID UibssmChecker(UINT32 CheckerId),40
27459,UibssmCnocRxClearInterrupts(),47
27460,UINT32 UibssmCnocRxSanitizeStatusMask(UINT32 input_mask),71
27461,BOOLEAN UibssmIsValidTemperature(INT32 temperature),86
27462,VOID UibssmCnocRxAreg1Handler(,107
27463,UibssmCnocRxIsr(,390
27464,UibssmCnocRxInit(),603
27465,UibssmCnocTxInit(),40
27466,UibssmCnocTxBusy(,58
27467,UibssmCnocTxSendPacket(,88
27468,UpdateHbmcRedundancyData(,38
27469,UibssmHbmcIntRegister(,742
27470,SbOwnSet( SbOwnSetType Action),790
27471,InitializeHbmcMmrData(),834
27472,UngateCatTrip(),922
27473,DynamicUpdateHbmcMmrData(),945
27474,HbmcProgramCalLat(,1015
27475,HbmcHandOverTask(),1232
27476,HbmcUpdateParityMode(),1419
27477,HbmcDeHandOverTask(),1522
27478,BackupCalLatHbmcMmr(),1635
27479,HbmCattripISR(),1690
27480,HbmcInterruptHandler(),1766
27481,HbmOnlyResetISR(),1891
27482,DynamicMajorModeTask(),1971
27483,STATIC UINT32 ThermalThrottlingThresholdTemperature(),2210
27484,TemperatureMonitoringTask(BOOLEAN reset),2232
27485,ThermalThrottlingTask(),2331
27486,TemperatureMonitoringAndThermalThrottlingTask(),2401
27487,SelectTemperatureSource(,2539
27488,GetDeviceID(),2578
27489,GetDieType(),2616
27490,HbmOnlyReset(),2646
27491,HbmOnlyResetNoCalibration(),2702
27492,UibssmPostHandoverTask(),2856
27493,/* UINT32 SwapNibbles(UINT32 x),28
27494,BitsReversal(,45
27495,ArrBitsGet(,78
27496,ArrBitsSet(,98
27497,ArrBitsFlexGet(,141
27498,"UibssmGlobalStructType g_uibssm __attribute__((section("".g_uibssm_region""))) = {",31
27499,UibssmInit(),108
27500,UibIopllCpaDprioOperationPoll(,34
27501,"/*  UIBSSM_API_DEBUG_PRINT(""   Debug info: UibIopllCpaDprioOperation ...\n""); */",43
27502,UibssmPllManagerPollBusy(,146
27503,UibIopllCpaIocsr(,189
27504,UibIopllCalibrationSuccess(,227
27505,UibssmPllManagerDprioClkEnable(,261
27506,UibssmResetStatusCheck(),87
27507,UibssmSoftStrapCheck(),146
27508,UibssmUibInterfaceRelease(),163
27509,UibssmUibNFRZDRVAssertion(),188
27510,UibssmProgrammingBeadBus(,221
27511,UibssmProgrammingBeadBusForPllmgrPhyUfi(),304
27512,UibssmAuxUibBringup(),338
27513,UibssmUibPLLBringup(),392
27514,UibssmUibIoBringup(),491
27515,UibssmHbmcRedundancyRepair(),518
27516,UibssmLaneRepairAndFullIoBringup(),636
27517,UibssmLaneRepairAndFullIoBringupTestCal(),798
27518,UibssmDataSetup(),912
27519,UibssmConfigCalibrationBusBringup(),972
27520,UibssmConfigAuxBringup(),1043
27521,UibssmClearWarmResetStatusRecovery(),1068
27522,UibssmResetAndFreeze(),1095
27523,UibssmWarmReset(),1208
27524,UibssmRcompCalibrationStart(),62
27525,UibssmRcompCalibrationOverrideCheck(,152
27526,UibssmReadRcompCalibratedCodeWord(,188
27527,UibssmRcompCalibratedCodeWordOverrideStep1(,223
27528,UibssmRcompCalibratedCodeWordOverrideStep2(,259
27529,UibssmEnableDisableLocalRcomp(,301
27530,UibssmLocalRcompSetLCC(,343
27531,UibssmLocalRcompCalibratedCodeWordOverrideStep1(,392
27532,UibssmLocalRcompCalibratedCodeWordOverrideStep2(,437
27533,UibssmLocalRcompCalibrationStart(),498
27534,SettingAllCkeOe_Zero(,33
27535,SettingTargetedCkeOe_One(,93
27536,ProcessCfgPsioGroup(,126
27537,ProcessCfgPdioGroup(,177
27538,UibssmSettingCkeOe(),228
27539,init_timer(,47
27540,is_timer_timeout(),99
27541,restart_timer(),122
27542,init_timer_ticks(,140
27543,get_timer_snapshot_ticks(,170
27544,"VOID UibssmTrace(UINT32 key, UINT32 line)",78
27545,"VOID UibssmWarningTrace(UINT32 key, UINT32 line)",91
27546,UibssmTracePrint(),110
27547,reverse(,46
27548,/* Implementation of itoa() */,60
27549,itoa(,62
27550,construct_printf_buf(,114
27551,/*    semi_host_puts( print_buffer ); */,120
27552,semi_host_printf(,207
27553,/*  semi_host_puts( print_buffer ); */,268
27554,"int main(int alt_argc, char **alt_argv, char** alt_envp)",53
27555,UibssmStateMachine(,46
27556,UibssmUserParamInit(),62
27557,UibssmParameterTableSanityCheck(,93
27558,UibParamGet(,171
27559,"* Copyright (c) 2004-2016 Altera Corporation, San Jose, California, USA. *",2
27560,unsigned int DV_REG_READ(unsigned int addr),15
27561,"void DV_REG_WRITE(unsigned int addr, unsigned int data)",21
27562,"* Copyright (c) 2004-2016 Altera Corporation, San Jose, California, USA. *",2
27563,void dv_tasks(void),13
27564,"void fw_mrs_overwrite(const int tb_mrs_3_2_1_0, const int tb_mrs_7_6_5_4, const int tb_mrs_11_10_9_8, const int tb_mrs_15_14_13_12)",24
27565,void fw_AW_WR_CAL_ALGO_overwrite(const int tb_AW_WR_CAL_ALGO){,76
27566,void fw_DW_WR_CAL_ALGO_overwrite(const int tb_DW_WR_CAL_ALGO){,81
27567,void fw_DW_RD_CAL_ALGO_overwrite(const int tb_DW_RD_CAL_ALGO){,86
27568,void restore_tb_mrs_via_IEEE1500(),92
27569,void fw_flipped_settings(),119
27570,void fw_lane_repair(),126
27571,void fw_lane_repair_step1(),135
27572,void fw_lane_repair_step2(),141
27573,void fw_iopll_calibration(),148
27574,void fw_iopll_calibration_500MHZ(),156
27575,void fw_memory_training_aword_wr(),162
27576,void fw_memory_training_aword_wr_2_ch(),185
27577,void fw_memory_training_aword_wr_all_ch(),209
27578,void fw_memory_training_aword_wr_with_dword_noise(),234
27579,"void fw_memory_training_dword_wr(const int tb_aword_left_dll, const int tb_aword_right_dll, const int tb_aword_mid_dll)",257
27580,"void fw_memory_training_dword_wr_2_ch(const int tb_aword_left_dll, const int tb_aword_right_dll, const int tb_aword_mid_dll)",299
27581,"void fw_memory_training_dword_wr_all_ch(const int tb_aword_left_dll, const int tb_aword_right_dll, const int tb_aword_mid_dll)",346
27582,void fw_memory_training_dword_rd(),416
27583,void fw_memory_training_dword_rd_2_ch(),484
27584,void fw_memory_training_dword_rd_all_ch(),560
27585,void fw_memory_training(),628
27586,void fw_skip_cal_flow(),677
27587,"void fw_param_overwrite(const char* tb_param, const int tb_value, const int tb_value2)",697
27588,"void fw_set_open_short_value(IN UINT32 offset, IN UINT32 value)",867
27589,"SetOpenshortValue(offset, value); ",871
27590,UINT32 Display_TestCalWdr_chA_aword(void) ,875
27591,UINT64 Display_TestCalWdr_dword_10(IN UINT32 channel),881
27592,UINT64 TestCalWdr_dword_1_0 = ( (TestCalWdr[channel].dword0_byte_1_0) | (TestCalWdr[channel].dword0_byte_3_2 << 8) | ,884
27593,UINT64 Display_TestCalWdr_dword_32(IN UINT32 channel),894
27594,UINT64 TestCalWdr_dword_3_2 = ( (TestCalWdr[channel].dword2_byte_1_0)  | (TestCalWdr[channel].dword2_byte_3_2 << 8) | ,896
27595,"UINT32 Display_TestCalWdr_aword(IN UINT32 channel, IN UINT32 dword_lane)",905
27596,{return (TestCalWdr[channel].aword_ca_ra);},906
27597,void fw_memory_training_dword_wr_mbist_enter_mode(),910
27598,void fw_memory_training_dword_wr_mbist_exit_mode(),999
27599,void fw_memory_training_dword_wr_mbist_enter_parallel_all_ch(),1022
27600,void fw_memory_training_dword_wr_mbist_exit_mode_all_ch(),1100
27601,"void fw_memory_training_dword_wr_lfsr_sticky_compare(const int left_code, const int right_code)",1125
27602,"void fw_memory_training_aword_wr_lfsr_sticky_compare(const int left_code, const int right_code)",1270
27603,"void fw_test_calcode_aword_wr_all_ch(const int left_code, const int right_code)",1370
27604,ptset_HBM_CAL_CHANNELS(test_ch_all); /*set for all CH*/,1392
27605,"void fw_test_calcode_dword_wr_all_ch(const int left_code, const int right_code)",1438
27606,"void fw_test_calcode_dword_rd(const int left_code, const int right_code)",1601
27607,"void fw_test_calcode_dword_rd_all_ch(const int left_code, const int right_code)",1767
27608,"void fw_test_calcode_aword_wr_2_ch(const int left_code, const int right_code)",1865
27609,"void fw_test_calcode_dword_wr_2_ch(const int tb_aword_left_dll, const int tb_aword_right_dll, const int tb_aword_mid_dll)",1911
27610,"void fw_test_calcode_dword_rd_2_ch(const int left_code, const int right_code)",2037
27611,ptset_DW_RD_CAL_ALGO( ( pt_DW_RD_CAL_ALGO | BIT21 ) ); /*Set bit[21] indicating to 1:LFSR_TOGGLE_RICH_ENABLED*/,2053
27612,void fw_test_calcode_lane_repair(),2133
27613,void fw_memory_training_dword_wr_lane_repair_mbist_enter_mode(),2149
27614,"SetOpenshortValue(0x0, 0x2); ",2162
27615,void fw_memory_training_dword_wr_lane_repair_mbist_enter_parallel_all_ch(),2251
27616,"SetOpenshortValue(0x00, 0x2); ",2268
27617,"SetOpenshortValue(0x01, 0x20000); ",2269
27618,"SetOpenshortValue(0x0d, 0x20000); ",2270
27619,"SetOpenshortValue(0x0f, 0x2); ",2271
27620,"SetOpenshortValue(0x1b, 0x2); ",2272
27621,"SetOpenshortValue(0x1c, 0x20000); ",2273
27622,"SetOpenshortValue(0x28, 0x20000); ",2274
27623,"SetOpenshortValue(0x2a, 0x2); ",2275
27624,void fw_memory_training_dword_wr_mbist_exit_mode_full_train(),2363
27625,void fw_memory_training_dword_wr_mbist_exit_mode_all_ch_full_train(),2438
27626,UibssmCalTimerSnapshot(,42
27627,UibssmLaneRepairAndFullIoBringup() ,339
27628,UibssmLaneRepairAndFullIoBringupAsic(,361
27629,UibssmDisableBitsAndFullIoBringupAsic(,507
27630,UibssmDisableChannelsAndFullIoBringupAsic(),634
27631,UibssmMemoryInitializationAndTrainingWithSkipCalAsic(),757
27632,UibssmAsicCalcodeEntry (,795
27633,AsicChannelEnableC2FIntf (,1023
27634,AsicChannelWindowCheck (,1060
27635,UibssmSendsDummyPatterns(,1174
27636,HbmioProgramDwordRegister(,1366
27637,HbmioProgramAwordRegister(,1425
27638,HbmioResetSeq(,1461
27639,AsicChannelUibTxInit(,2031
27640,AsicChannelLynxTXInit(),2189
27641,AsicChannelTXStreamBufferSending(,2235
27642,AsicChannelTxPollDccLocked (,2282
27643,AsicChannelTxDllLoad(,2327
27644,AsicChannelSetDefaultTxDll(,2532
27645,AsicChannelResetLynxRdPtr (),2553
27646,AsicChannelTXTraining(,2574
27647,AsicChannelUibPartitionLFSR(,3043
27648,AsicChannelGetBrokenPinsUsingLFSR(,3229
27649,AsicChannelUibRxInit(,3299
27650,AsicChannelRXReadBufferReceiving(,3500
27651,AsicChannelRxDllLoad(,3545
27652,AsicChannelSetDefaultRxDll(,3646
27653,AsicChannelRxFindDllCode(,3665
27654,AsicChannelRXTraining(,4156
27655,HbmChannelGetChNumbers(,4389
27656,HbmChannelGetChId(,4419
27657,UibssmDummyCalbusRead(,4453
27658,HbmChannelTrainingMasterDllSet(,4490
27659,HbmChannelTrainingMasterDllsStaggeringEnable(),4576
27660,UibssmMasterDllsInit(,4634
27661,UibssmMasterDllsGetWaitTime(),4655
27662,UibssmMasterDllsPeriodicEnableDisable(,4754
27663,UibMyWdrPrint() ,4860
27664,UibTestCalWdrPrint() ,4877
27665,UiblfsrStickyPrint() ,4894
27666,UibDllSweepPrint (,4911
27667,UibDllSweepClear (,4937
27668,UibDllSweepUpdate (,4951
27669,GetFirstSetLSBPos (,4974
27670,AsicChannelCountSetBits(,4992
27671,AsicChannelSetStatBuf(,5026
27672,AsicChannelSetStatBufSel(,5071
27673,AsicChannelSetRxStrmBufSel(,5117
27674,AsicChannelSetUb48MisrLfsrCtl(,5172
27675,AsicChannelSetMisrLfsrCtl(,5287
27676,AsicChannelSendReceivePattern(,5327
27677,AsicChannelTrainingEnd(,5361
27678,UB48ReceiveFifoReset(,5398
27679,UB48CreateDataStrm(,5433
27680,UB48SetOe(,5491
27681,UB48SetIe(,5574
27682,UB48ReadStrobeIndicatorSetup(,5668
27683,UB48SetBufferModes(,5721
27684,UB48ReceiveFifoSetup(,5764
27685,UB48ReceiveFifoDisable(,5825
27686,UB48RxDllEnableDisableDelay(,5875
27687,UB48StreamBufferDone(,5909
27688,UB48PopulateDataStrm(,5945
27689,UB48PopulateRdbufSettings(,6049
27690,UB48TxDllCheckDllLock(,6121
27691,UB48TxDllGenFastLoadPulse(,6183
27692,UB48TxDllGenSafeLoadPulse(,6234
27693,UB48TxDllAutoDccEnableDisable(,6303
27694,UB48TxDllSetDelayValue(,6343
27695,UB48TxDllEnableDisable(,6381
27696,UB48TxDllSetDelay(,6431
27697,UB48PopulateStatData(,6587
27698,UB48ReadoutReadBuffer(,6621
27699,UB48RxDllSetDelay(,6668
27700,UB48RxDllFastLoadPulse(,6696
27701,UB48ReadBufferEnableDisable(,6727
27702,UibBrokenLaneInfoInit() ,90
27703,UibBrokenLaneInfoPrint() ,111
27704,UibLanesRepairReverse (,130
27705,UibLanesRepairFindBitPosition(,150
27706,UibReverseWdrEncoding (,170
27707,UibGetUibWdrFromHbmioFuse( ,198
27708,UibTranslateWdrToBrokenLaneInfo (,274
27709,UibLanesRepairRemapAsicPinInfo(,323
27710,UibUpdateLeastFailLaneInfo (,356
27711,UibUpdatelfsrSticky (,384
27712,UibUpdateMyWdr(,413
27713,UibUpdateTestCalWdr(,457
27714,HbmioLaneRepair (,503
27715,UibLanesRepairAnalyzeLaneInfo (,553
27716,UibAsicLanesRepairUb48Analyze(,608
27717,UibAsicLanesRepairUb48BeadbusSetIe(,792
27718,UibAsicLanesRepairUb48BeadbusSetOe(,815
27719,UibAsicLanesRepairUb48BeadbusSetOeIe(,840
27720,UibAsicLanesRepairUb48BeadbusClrOeIe(,871
27721,UibAsicLanesRepairUb48BeadbusPsioCalOeIe(,910
27722,UibAsicLanesRepairUb48BeadbusPdioCalOeIe(,977
27723,UibHbmLanesRepairUb48BeadbusRtrOeIe(,1037
27724,UibAsicLanesRepairUb48Beadbus(,1074
27725,UibAsicLanesRepairIrrMmrUpdate(,1243
27726,UibAsicChannelDisablePin (,1297
27727,UibAsicChannelDisableChannels (,1400
27728,UibAsicChannelLaneRepair(,1526
27729,UibssmCalibrateIopll(,47
27730,"/*READ_FLD(UINT32 base_addr, UINT32 reg, UINT32 fld) */",138
27731,UibssmAdapterIopllReadField(,141
27732,UibssmAdapterIopllWriteField(,201
27733,UibMidstackSet1500ClockDivider(,96
27734,UibMidstackIeee1500_wrclk(,144
27735,UibMidstackIeee1500_run_wrclk(,185
27736,UibMidstackHbm_rst_n(,246
27737,UibMidstackIeee1500_wrst_n(,295
27738,UibMidstackIeee1500Update_wir(,347
27739,UibMidstackIeee1500Update_wdr(,463
27740,UibMidstackIeee1500Capture_wdr(,603
27741,"/*INT32 ieee1500_update_wdr (wir wir_cmd, INT32[] data, INT32 channel)",731
27742,UibMidstackCheckNotByp(),750
27743,UibMidstackIeee1500BUF_CHECK(),774
27744,UibCreateTmrsData(,845
27745,"/** Wraps UibCreateTmrsData(), Update_wdr(), run_wrclk for 200 clock cycles. */",933
27746,UibSendTmrsData(,936
27747,UibssmTmrsGenRdCtrlRev3_Sequences(,963
27748,UibssmTmrsGenRdCtrlRev3(,1127
27749,UibssmTmrsGenSeqFwRev3(,1188
27750,void alt_irq_init ( const void* base ),82
27751,void alt_sys_init( void ),93
27752,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
27753,"* copy of this software and associated documentation files (the ""Software""),  *",9
27754,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
27755,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
27756,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
27757,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
27758,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
27759,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
27760,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
27761,int alt_avalon_dma_space (alt_dma_txchan dma),355
27762,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
27763,static void alt_avalon_dma_irq (void* context),446
27764,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
27765,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
27766,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27767,"* copy of this software and associated documentation files (the ""Software""),  *",9
27768,static void alt_avalon_timer_sc_irq (void* base),54
27769,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
27770,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
27771,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27772,"* copy of this software and associated documentation files (the ""Software""),  *",9
27773,int alt_timestamp_start(void),64
27774,alt_timestamp_type alt_timestamp(void),100
27775,alt_u32 alt_timestamp_freq(void),138
27776,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27777,"* copy of this software and associated documentation files (the ""Software""),  *",9
27778,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
27779,"* copy of this software and associated documentation files (the ""Software""),  *",9
27780,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
27781,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
27782,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
27783,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
27784,"* copy of this software and associated documentation files (the ""Software""),  *",9
27785,void alt_vic_irq_init (alt_vic_dev* pdev),45
27786,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
27787,"* copy of this software and associated documentation files (the ""Software""),  *",9
27788,"int alt_ic_isr_register(alt_u32 ic_id,",59
27789,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
27790,"* copy of this software and associated documentation files (the ""Software""),  *",9
27791,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
27792,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
27793,"* copy of this software and associated documentation files (the ""Software""),  *",9
27794,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
27795,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
27796,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
27797,void altera_nios2_gen2_irq_init(void) ,34
27798,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
27799,"* copy of this software and associated documentation files (the ""Software""),  *",9
27800,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
27801,unsigned int alt_busy_sleep (unsigned int us),52
27802,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
27803,"* copy of this software and associated documentation files (the ""Software""),  *",9
27804,"void alt_dcache_flush (void* start, alt_u32 len)",46
27805,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
27806,"* copy of this software and associated documentation files (the ""Software""),  *",9
27807,void alt_dcache_flush_all (void),41
27808,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
27809,"* copy of this software and associated documentation files (the ""Software""),  *",9
27810,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
27811,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27812,"* copy of this software and associated documentation files (the ""Software""),  *",9
27813,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
27814,ALT_SEM(alt_fd_list_lock),109
27815,int alt_dev_reg (alt_dev* dev),151
27816,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27817,"* copy of this software and associated documentation files (the ""Software""),  *",9
27818,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
27819,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27820,"* copy of this software and associated documentation files (the ""Software""),  *",9
27821,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
27822,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27823,"* copy of this software and associated documentation files (the ""Software""),  *",9
27824,alt_dma_txchan alt_dma_txchan_open (const char* name),51
27825,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27826,"* copy of this software and associated documentation files (the ""Software""),  *",9
27827,void _do_ctors(void),58
27828,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27829,"* copy of this software and associated documentation files (the ""Software""),  *",9
27830,void _do_dtors(void),58
27831,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
27832,"* copy of this software and associated documentation files (the ""Software""),  *",9
27833,alt_ecc_fatal_exception_register(alt_u32 handler),66
27834,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27835,"* copy of this software and associated documentation files (the ""Software""),  *",9
27836,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27837,"* copy of this software and associated documentation files (the ""Software""),  *",9
27838,void __env_lock ( struct _reent *_r ),43
27839,void __env_unlock ( struct _reent *_r ),51
27840,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27841,"* copy of this software and associated documentation files (the ""Software""),  *",9
27842,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27843,"* copy of this software and associated documentation files (the ""Software""),  *",9
27844,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
27845,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27846,"* copy of this software and associated documentation files (the ""Software""),  *",9
27847,void ALT_EXIT (int exit_code),52
27848,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27849,"* copy of this software and associated documentation files (the ""Software""),  *",9
27850,"int ALT_FCNTL (int file, int cmd, ...)",66
27851,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27852,"* copy of this software and associated documentation files (the ""Software""),  *",9
27853,int alt_fd_lock (alt_fd* fd),54
27854,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27855,"* copy of this software and associated documentation files (the ""Software""),  *",9
27856,int alt_fd_unlock (alt_fd* fd),52
27857,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27858,"* copy of this software and associated documentation files (the ""Software""),  *",9
27859,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
27860,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27861,"* copy of this software and associated documentation files (the ""Software""),  *",9
27862,alt_dev* alt_find_file (const char* name),54
27863,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27864,"* copy of this software and associated documentation files (the ""Software""),  *",9
27865,alt_flash_fd* alt_flash_open_dev(const char* name),49
27866,void alt_flash_close_dev(alt_flash_fd* fd),61
27867,int alt_flash_device_register( alt_flash_fd* fd),70
27868,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27869,"* copy of this software and associated documentation files (the ""Software""),  *",9
27870,int ALT_FORK (void),45
27871,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27872,"* copy of this software and associated documentation files (the ""Software""),  *",9
27873,int alt_fs_reg (alt_dev* dev),57
27874,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27875,"* copy of this software and associated documentation files (the ""Software""),  *",9
27876,alt_getchar(void),51
27877,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27878,"* copy of this software and associated documentation files (the ""Software""),  *",9
27879,int ALT_GETPID (void),43
27880,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
27881,"* copy of this software and associated documentation files (the ""Software""),  *",9
27882,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
27883,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
27884,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27885,"* copy of this software and associated documentation files (the ""Software""),  *",9
27886,int alt_get_fd (alt_dev* dev),54
27887,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
27888,"* copy of this software and associated documentation files (the ""Software""),  *",9
27889,/* The compiler inserts calls to mcount() at the start of,48
27890,static __inline__ void * mcount_allocate(unsigned int size),133
27891,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
27892,static int nios2_pcsample_init(void),218
27893,static alt_u32 nios2_pcsample(void* context),250
27894,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27895,"* copy of this software and associated documentation files (the ""Software""),  *",9
27896,"void alt_icache_flush (void* start, alt_u32 len)",42
27897,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27898,"* copy of this software and associated documentation files (the ""Software""),  *",9
27899,void alt_icache_flush_all (void),41
27900,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
27901,"* copy of this software and associated documentation files (the ""Software""),  *",9
27902,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
27903,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
27904,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
27905,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
27906,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
27907,"* copy of this software and associated documentation files (the ""Software""),  *",9
27908,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
27909,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
27910,"* copy of this software and associated documentation files (the ""Software""),  *",9
27911,alt_exception_result (*alt_instruction_exception_handler),49
27912,int alt_instruction_exception_entry (alt_u32 exception_pc),53
27913,alt_instruction_exception_entry (alt_u32 exception_pc),68
27914,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
27915,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
27916,"* copy of this software and associated documentation files (the ""Software""),  *",9
27917,void alt_instruction_exception_register (,73
27918,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
27919,"* copy of this software and associated documentation files (the ""Software""),  *",9
27920,"int ALT_IOCTL (int file, int req, void* arg)",68
27921,"int ALT_IOCTL (int file, int req, void* arg)",106
27922,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27923,"* copy of this software and associated documentation files (the ""Software""),  *",9
27924,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
27925,"void alt_io_redirect(const char* stdout_dev, ",85
27926,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
27927,"* copy of this software and associated documentation files (the ""Software""),  *",9
27928,void alt_irq_handler (void),80
27929,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
27930,"* copy of this software and associated documentation files (the ""Software""),  *",9
27931,"int alt_irq_register (alt_u32 id, ",75
27932,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
27933,"* copy of this software and associated documentation files (the ""Software""),  *",9
27934,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27935,"* copy of this software and associated documentation files (the ""Software""),  *",9
27936,"int ALT_KILL (int pid, int sig)",49
27937,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27938,"* copy of this software and associated documentation files (the ""Software""),  *",9
27939,"int ALT_LINK ( char *existing, char *new)",45
27940,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
27941,"* copy of this software and associated documentation files (the ""Software""),  *",9
27942,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
27943,void alt_load (void),67
27944,"void alt_log_txchar(int c,char *base)",95
27945,"void alt_log_repchar(char c,int r,int base)",106
27946,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
27947,"int alt_log_printf_proc(const char *fmt, ... )",344
27948,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
27949,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
27950,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
27951,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
27952,"void alt_log_write(const void *ptr, size_t len)",440
27953,void alt_log_system_clock(),474
27954,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
27955,"* copy of this software and associated documentation files (the ""Software""),  *",9
27956,void alt_main (void),82
27957,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27958,"* copy of this software and associated documentation files (the ""Software""),  *",9
27959,void __malloc_lock ( struct _reent *_r ),42
27960,void __malloc_unlock ( struct _reent *_r ),50
27961,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27962,"* copy of this software and associated documentation files (the ""Software""),  *",9
27963,"alt_printf(const char* fmt, ... )",51
27964,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27965,"* copy of this software and associated documentation files (the ""Software""),  *",9
27966,alt_putchar(int c),50
27967,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27968,"* copy of this software and associated documentation files (the ""Software""),  *",9
27969,alt_putcharbuf(int c),58
27970,alt_putbufflush(),73
27971,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
27972,"* copy of this software and associated documentation files (the ""Software""),  *",9
27973,alt_putstr(const char* str),52
27974,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27975,"* copy of this software and associated documentation files (the ""Software""),  *",9
27976,void alt_release_fd (int fd),44
27977,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
27978,"* copy of this software and associated documentation files (the ""Software""),  *",9
27979,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
27980,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
27981,"* copy of this software and associated documentation files (the ""Software""),  *",9
27982,"alt_remap_uncached(void* ptr, alt_u32 len)",49
27983,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27984,"* copy of this software and associated documentation files (the ""Software""),  *",9
27985,caddr_t ALT_SBRK (int incr),68
27986,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
27987,"* copy of this software and associated documentation files (the ""Software""),  *",9
27988,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
27989,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
27990,"* copy of this software and associated documentation files (the ""Software""),  *",9
27991,void alt_alarm_stop (alt_alarm* alarm),66
27992,void alt_tick (void),87
27993,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
27994,"* copy of this software and associated documentation files (the ""Software""),  *",9
27995,clock_t ALT_TIMES (struct tms *buf),51
27996,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
27997,"* copy of this software and associated documentation files (the ""Software""),  *",9
27998,alt_uncached_free(volatile void* ptr),40
27999,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28000,"* copy of this software and associated documentation files (the ""Software""),  *",9
28001,alt_uncached_malloc(size_t size),42
28002,int ALT_USLEEP (useconds_t us),46
28003,unsigned int ALT_USLEEP (unsigned int us),48
28004,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28005,"* copy of this software and associated documentation files (the ""Software""),  *",9
28006,int ALT_WAIT (int *status),44
28007,int close (int fd),31
28008,void __attribute__ ((noreturn)) semihost_exit (int code),24
28009,void __attribute__ ((noreturn)) _exit (int code),35
28010,"int fstat (int fd, struct stat *buf)",34
28011,__hosted_to_gdb_mode_t (mode_t m),23
28012,__hosted_to_gdb_open_flags (int f),52
28013,__hosted_to_gdb_lseek_flags (int f),73
28014,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
28015,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
28016,__hosted_from_gdb_errno (int32_t err),111
28017,"int gettimeofday (struct timeval *tv, void *tzvp)",31
28018,void semihost_init_sim (),24
28019,int isatty (int fd),31
28020,"off_t lseek (int fd, off_t offset, int whence)",36
28021,"int open (const char *fname, int flags, ...)",38
28022,"ssize_t read (int fd, void *buf, size_t count)",33
28023,"int _rename (const char *oldpath, const char *newpath)",35
28024,"int stat (const char *filename, struct stat *buf)",37
28025,int _system (const char *command),34
28026,time_t time (time_t *t),31
28027,int unlink (const char *path),33
28028,"ssize_t write (int fd, const void *buf, size_t count)",33
28029,void alt_irq_init ( const void* base ),82
28030,void alt_sys_init( void ),93
28031,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28032,"* copy of this software and associated documentation files (the ""Software""),  *",9
28033,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
28034,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
28035,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
28036,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
28037,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
28038,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
28039,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
28040,int alt_avalon_dma_space (alt_dma_txchan dma),355
28041,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
28042,static void alt_avalon_dma_irq (void* context),446
28043,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
28044,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
28045,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28046,"* copy of this software and associated documentation files (the ""Software""),  *",9
28047,static void alt_avalon_timer_sc_irq (void* base),54
28048,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
28049,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
28050,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28051,"* copy of this software and associated documentation files (the ""Software""),  *",9
28052,int alt_timestamp_start(void),64
28053,alt_timestamp_type alt_timestamp(void),100
28054,alt_u32 alt_timestamp_freq(void),138
28055,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28056,"* copy of this software and associated documentation files (the ""Software""),  *",9
28057,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28058,"* copy of this software and associated documentation files (the ""Software""),  *",9
28059,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
28060,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
28061,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
28062,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28063,"* copy of this software and associated documentation files (the ""Software""),  *",9
28064,void alt_vic_irq_init (alt_vic_dev* pdev),45
28065,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28066,"* copy of this software and associated documentation files (the ""Software""),  *",9
28067,"int alt_ic_isr_register(alt_u32 ic_id,",59
28068,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28069,"* copy of this software and associated documentation files (the ""Software""),  *",9
28070,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
28071,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28072,"* copy of this software and associated documentation files (the ""Software""),  *",9
28073,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
28074,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
28075,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
28076,void altera_nios2_gen2_irq_init(void) ,34
28077,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28078,"* copy of this software and associated documentation files (the ""Software""),  *",9
28079,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
28080,unsigned int alt_busy_sleep (unsigned int us),52
28081,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28082,"* copy of this software and associated documentation files (the ""Software""),  *",9
28083,"void alt_dcache_flush (void* start, alt_u32 len)",46
28084,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28085,"* copy of this software and associated documentation files (the ""Software""),  *",9
28086,void alt_dcache_flush_all (void),41
28087,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
28088,"* copy of this software and associated documentation files (the ""Software""),  *",9
28089,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
28090,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28091,"* copy of this software and associated documentation files (the ""Software""),  *",9
28092,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
28093,ALT_SEM(alt_fd_list_lock),109
28094,int alt_dev_reg (alt_dev* dev),151
28095,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28096,"* copy of this software and associated documentation files (the ""Software""),  *",9
28097,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
28098,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28099,"* copy of this software and associated documentation files (the ""Software""),  *",9
28100,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
28101,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28102,"* copy of this software and associated documentation files (the ""Software""),  *",9
28103,alt_dma_txchan alt_dma_txchan_open (const char* name),51
28104,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28105,"* copy of this software and associated documentation files (the ""Software""),  *",9
28106,void _do_ctors(void),58
28107,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28108,"* copy of this software and associated documentation files (the ""Software""),  *",9
28109,void _do_dtors(void),58
28110,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
28111,"* copy of this software and associated documentation files (the ""Software""),  *",9
28112,alt_ecc_fatal_exception_register(alt_u32 handler),66
28113,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28114,"* copy of this software and associated documentation files (the ""Software""),  *",9
28115,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28116,"* copy of this software and associated documentation files (the ""Software""),  *",9
28117,void __env_lock ( struct _reent *_r ),43
28118,void __env_unlock ( struct _reent *_r ),51
28119,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28120,"* copy of this software and associated documentation files (the ""Software""),  *",9
28121,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28122,"* copy of this software and associated documentation files (the ""Software""),  *",9
28123,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
28124,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28125,"* copy of this software and associated documentation files (the ""Software""),  *",9
28126,void ALT_EXIT (int exit_code),52
28127,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28128,"* copy of this software and associated documentation files (the ""Software""),  *",9
28129,"int ALT_FCNTL (int file, int cmd, ...)",66
28130,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28131,"* copy of this software and associated documentation files (the ""Software""),  *",9
28132,int alt_fd_lock (alt_fd* fd),54
28133,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28134,"* copy of this software and associated documentation files (the ""Software""),  *",9
28135,int alt_fd_unlock (alt_fd* fd),52
28136,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28137,"* copy of this software and associated documentation files (the ""Software""),  *",9
28138,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
28139,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28140,"* copy of this software and associated documentation files (the ""Software""),  *",9
28141,alt_dev* alt_find_file (const char* name),54
28142,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28143,"* copy of this software and associated documentation files (the ""Software""),  *",9
28144,alt_flash_fd* alt_flash_open_dev(const char* name),49
28145,void alt_flash_close_dev(alt_flash_fd* fd),61
28146,int alt_flash_device_register( alt_flash_fd* fd),70
28147,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28148,"* copy of this software and associated documentation files (the ""Software""),  *",9
28149,int ALT_FORK (void),45
28150,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28151,"* copy of this software and associated documentation files (the ""Software""),  *",9
28152,int alt_fs_reg (alt_dev* dev),57
28153,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28154,"* copy of this software and associated documentation files (the ""Software""),  *",9
28155,alt_getchar(void),51
28156,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28157,"* copy of this software and associated documentation files (the ""Software""),  *",9
28158,int ALT_GETPID (void),43
28159,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28160,"* copy of this software and associated documentation files (the ""Software""),  *",9
28161,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
28162,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
28163,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28164,"* copy of this software and associated documentation files (the ""Software""),  *",9
28165,int alt_get_fd (alt_dev* dev),54
28166,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28167,"* copy of this software and associated documentation files (the ""Software""),  *",9
28168,/* The compiler inserts calls to mcount() at the start of,48
28169,static __inline__ void * mcount_allocate(unsigned int size),133
28170,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
28171,static int nios2_pcsample_init(void),218
28172,static alt_u32 nios2_pcsample(void* context),250
28173,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28174,"* copy of this software and associated documentation files (the ""Software""),  *",9
28175,"void alt_icache_flush (void* start, alt_u32 len)",42
28176,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28177,"* copy of this software and associated documentation files (the ""Software""),  *",9
28178,void alt_icache_flush_all (void),41
28179,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28180,"* copy of this software and associated documentation files (the ""Software""),  *",9
28181,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
28182,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
28183,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
28184,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
28185,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28186,"* copy of this software and associated documentation files (the ""Software""),  *",9
28187,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
28188,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
28189,"* copy of this software and associated documentation files (the ""Software""),  *",9
28190,alt_exception_result (*alt_instruction_exception_handler),49
28191,int alt_instruction_exception_entry (alt_u32 exception_pc),53
28192,alt_instruction_exception_entry (alt_u32 exception_pc),68
28193,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
28194,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
28195,"* copy of this software and associated documentation files (the ""Software""),  *",9
28196,void alt_instruction_exception_register (,73
28197,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
28198,"* copy of this software and associated documentation files (the ""Software""),  *",9
28199,"int ALT_IOCTL (int file, int req, void* arg)",68
28200,"int ALT_IOCTL (int file, int req, void* arg)",106
28201,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28202,"* copy of this software and associated documentation files (the ""Software""),  *",9
28203,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
28204,"void alt_io_redirect(const char* stdout_dev, ",85
28205,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28206,"* copy of this software and associated documentation files (the ""Software""),  *",9
28207,void alt_irq_handler (void),80
28208,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28209,"* copy of this software and associated documentation files (the ""Software""),  *",9
28210,"int alt_irq_register (alt_u32 id, ",75
28211,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28212,"* copy of this software and associated documentation files (the ""Software""),  *",9
28213,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28214,"* copy of this software and associated documentation files (the ""Software""),  *",9
28215,"int ALT_KILL (int pid, int sig)",49
28216,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28217,"* copy of this software and associated documentation files (the ""Software""),  *",9
28218,"int ALT_LINK ( char *existing, char *new)",45
28219,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
28220,"* copy of this software and associated documentation files (the ""Software""),  *",9
28221,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
28222,void alt_load (void),67
28223,"void alt_log_txchar(int c,char *base)",95
28224,"void alt_log_repchar(char c,int r,int base)",106
28225,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
28226,"int alt_log_printf_proc(const char *fmt, ... )",344
28227,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
28228,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
28229,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
28230,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
28231,"void alt_log_write(const void *ptr, size_t len)",440
28232,void alt_log_system_clock(),474
28233,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
28234,"* copy of this software and associated documentation files (the ""Software""),  *",9
28235,void alt_main (void),82
28236,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28237,"* copy of this software and associated documentation files (the ""Software""),  *",9
28238,void __malloc_lock ( struct _reent *_r ),42
28239,void __malloc_unlock ( struct _reent *_r ),50
28240,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28241,"* copy of this software and associated documentation files (the ""Software""),  *",9
28242,"alt_printf(const char* fmt, ... )",51
28243,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28244,"* copy of this software and associated documentation files (the ""Software""),  *",9
28245,alt_putchar(int c),50
28246,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28247,"* copy of this software and associated documentation files (the ""Software""),  *",9
28248,alt_putcharbuf(int c),58
28249,alt_putbufflush(),73
28250,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28251,"* copy of this software and associated documentation files (the ""Software""),  *",9
28252,alt_putstr(const char* str),52
28253,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28254,"* copy of this software and associated documentation files (the ""Software""),  *",9
28255,void alt_release_fd (int fd),44
28256,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28257,"* copy of this software and associated documentation files (the ""Software""),  *",9
28258,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
28259,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28260,"* copy of this software and associated documentation files (the ""Software""),  *",9
28261,"alt_remap_uncached(void* ptr, alt_u32 len)",49
28262,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28263,"* copy of this software and associated documentation files (the ""Software""),  *",9
28264,caddr_t ALT_SBRK (int incr),68
28265,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28266,"* copy of this software and associated documentation files (the ""Software""),  *",9
28267,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
28268,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28269,"* copy of this software and associated documentation files (the ""Software""),  *",9
28270,void alt_alarm_stop (alt_alarm* alarm),66
28271,void alt_tick (void),87
28272,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28273,"* copy of this software and associated documentation files (the ""Software""),  *",9
28274,clock_t ALT_TIMES (struct tms *buf),51
28275,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28276,"* copy of this software and associated documentation files (the ""Software""),  *",9
28277,alt_uncached_free(volatile void* ptr),40
28278,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28279,"* copy of this software and associated documentation files (the ""Software""),  *",9
28280,alt_uncached_malloc(size_t size),42
28281,int ALT_USLEEP (useconds_t us),46
28282,unsigned int ALT_USLEEP (unsigned int us),48
28283,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28284,"* copy of this software and associated documentation files (the ""Software""),  *",9
28285,int ALT_WAIT (int *status),44
28286,int close (int fd),31
28287,void __attribute__ ((noreturn)) semihost_exit (int code),24
28288,void __attribute__ ((noreturn)) _exit (int code),35
28289,"int fstat (int fd, struct stat *buf)",34
28290,__hosted_to_gdb_mode_t (mode_t m),23
28291,__hosted_to_gdb_open_flags (int f),52
28292,__hosted_to_gdb_lseek_flags (int f),73
28293,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
28294,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
28295,__hosted_from_gdb_errno (int32_t err),111
28296,"int gettimeofday (struct timeval *tv, void *tzvp)",31
28297,void semihost_init_sim (),24
28298,int isatty (int fd),31
28299,"off_t lseek (int fd, off_t offset, int whence)",36
28300,"int open (const char *fname, int flags, ...)",38
28301,"ssize_t read (int fd, void *buf, size_t count)",33
28302,"int _rename (const char *oldpath, const char *newpath)",35
28303,"int stat (const char *filename, struct stat *buf)",37
28304,int _system (const char *command),34
28305,time_t time (time_t *t),31
28306,int unlink (const char *path),33
28307,"ssize_t write (int fd, const void *buf, size_t count)",33
28308,void alt_irq_init ( const void* base ),82
28309,void alt_sys_init( void ),93
28310,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28311,"* copy of this software and associated documentation files (the ""Software""),  *",9
28312,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
28313,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
28314,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
28315,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
28316,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
28317,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
28318,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
28319,int alt_avalon_dma_space (alt_dma_txchan dma),355
28320,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
28321,static void alt_avalon_dma_irq (void* context),446
28322,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
28323,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
28324,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28325,"* copy of this software and associated documentation files (the ""Software""),  *",9
28326,static void alt_avalon_timer_sc_irq (void* base),54
28327,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
28328,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
28329,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28330,"* copy of this software and associated documentation files (the ""Software""),  *",9
28331,int alt_timestamp_start(void),64
28332,alt_timestamp_type alt_timestamp(void),100
28333,alt_u32 alt_timestamp_freq(void),138
28334,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28335,"* copy of this software and associated documentation files (the ""Software""),  *",9
28336,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28337,"* copy of this software and associated documentation files (the ""Software""),  *",9
28338,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
28339,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
28340,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
28341,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28342,"* copy of this software and associated documentation files (the ""Software""),  *",9
28343,void alt_vic_irq_init (alt_vic_dev* pdev),45
28344,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28345,"* copy of this software and associated documentation files (the ""Software""),  *",9
28346,"int alt_ic_isr_register(alt_u32 ic_id,",59
28347,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28348,"* copy of this software and associated documentation files (the ""Software""),  *",9
28349,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
28350,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28351,"* copy of this software and associated documentation files (the ""Software""),  *",9
28352,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
28353,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
28354,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
28355,void altera_nios2_gen2_irq_init(void) ,34
28356,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28357,"* copy of this software and associated documentation files (the ""Software""),  *",9
28358,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
28359,unsigned int alt_busy_sleep (unsigned int us),52
28360,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28361,"* copy of this software and associated documentation files (the ""Software""),  *",9
28362,"void alt_dcache_flush (void* start, alt_u32 len)",46
28363,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28364,"* copy of this software and associated documentation files (the ""Software""),  *",9
28365,void alt_dcache_flush_all (void),41
28366,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
28367,"* copy of this software and associated documentation files (the ""Software""),  *",9
28368,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
28369,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28370,"* copy of this software and associated documentation files (the ""Software""),  *",9
28371,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
28372,ALT_SEM(alt_fd_list_lock),109
28373,int alt_dev_reg (alt_dev* dev),151
28374,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28375,"* copy of this software and associated documentation files (the ""Software""),  *",9
28376,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
28377,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28378,"* copy of this software and associated documentation files (the ""Software""),  *",9
28379,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
28380,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28381,"* copy of this software and associated documentation files (the ""Software""),  *",9
28382,alt_dma_txchan alt_dma_txchan_open (const char* name),51
28383,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28384,"* copy of this software and associated documentation files (the ""Software""),  *",9
28385,void _do_ctors(void),58
28386,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28387,"* copy of this software and associated documentation files (the ""Software""),  *",9
28388,void _do_dtors(void),58
28389,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
28390,"* copy of this software and associated documentation files (the ""Software""),  *",9
28391,alt_ecc_fatal_exception_register(alt_u32 handler),66
28392,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28393,"* copy of this software and associated documentation files (the ""Software""),  *",9
28394,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28395,"* copy of this software and associated documentation files (the ""Software""),  *",9
28396,void __env_lock ( struct _reent *_r ),43
28397,void __env_unlock ( struct _reent *_r ),51
28398,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28399,"* copy of this software and associated documentation files (the ""Software""),  *",9
28400,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28401,"* copy of this software and associated documentation files (the ""Software""),  *",9
28402,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
28403,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28404,"* copy of this software and associated documentation files (the ""Software""),  *",9
28405,void ALT_EXIT (int exit_code),52
28406,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28407,"* copy of this software and associated documentation files (the ""Software""),  *",9
28408,"int ALT_FCNTL (int file, int cmd, ...)",66
28409,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28410,"* copy of this software and associated documentation files (the ""Software""),  *",9
28411,int alt_fd_lock (alt_fd* fd),54
28412,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28413,"* copy of this software and associated documentation files (the ""Software""),  *",9
28414,int alt_fd_unlock (alt_fd* fd),52
28415,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28416,"* copy of this software and associated documentation files (the ""Software""),  *",9
28417,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
28418,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28419,"* copy of this software and associated documentation files (the ""Software""),  *",9
28420,alt_dev* alt_find_file (const char* name),54
28421,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28422,"* copy of this software and associated documentation files (the ""Software""),  *",9
28423,alt_flash_fd* alt_flash_open_dev(const char* name),49
28424,void alt_flash_close_dev(alt_flash_fd* fd),61
28425,int alt_flash_device_register( alt_flash_fd* fd),70
28426,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28427,"* copy of this software and associated documentation files (the ""Software""),  *",9
28428,int ALT_FORK (void),45
28429,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28430,"* copy of this software and associated documentation files (the ""Software""),  *",9
28431,int alt_fs_reg (alt_dev* dev),57
28432,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28433,"* copy of this software and associated documentation files (the ""Software""),  *",9
28434,alt_getchar(void),51
28435,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28436,"* copy of this software and associated documentation files (the ""Software""),  *",9
28437,int ALT_GETPID (void),43
28438,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28439,"* copy of this software and associated documentation files (the ""Software""),  *",9
28440,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
28441,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
28442,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28443,"* copy of this software and associated documentation files (the ""Software""),  *",9
28444,int alt_get_fd (alt_dev* dev),54
28445,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28446,"* copy of this software and associated documentation files (the ""Software""),  *",9
28447,/* The compiler inserts calls to mcount() at the start of,48
28448,static __inline__ void * mcount_allocate(unsigned int size),133
28449,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
28450,static int nios2_pcsample_init(void),218
28451,static alt_u32 nios2_pcsample(void* context),250
28452,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28453,"* copy of this software and associated documentation files (the ""Software""),  *",9
28454,"void alt_icache_flush (void* start, alt_u32 len)",42
28455,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28456,"* copy of this software and associated documentation files (the ""Software""),  *",9
28457,void alt_icache_flush_all (void),41
28458,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28459,"* copy of this software and associated documentation files (the ""Software""),  *",9
28460,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
28461,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
28462,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
28463,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
28464,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28465,"* copy of this software and associated documentation files (the ""Software""),  *",9
28466,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
28467,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
28468,"* copy of this software and associated documentation files (the ""Software""),  *",9
28469,alt_exception_result (*alt_instruction_exception_handler),49
28470,int alt_instruction_exception_entry (alt_u32 exception_pc),53
28471,alt_instruction_exception_entry (alt_u32 exception_pc),68
28472,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
28473,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
28474,"* copy of this software and associated documentation files (the ""Software""),  *",9
28475,void alt_instruction_exception_register (,73
28476,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
28477,"* copy of this software and associated documentation files (the ""Software""),  *",9
28478,"int ALT_IOCTL (int file, int req, void* arg)",68
28479,"int ALT_IOCTL (int file, int req, void* arg)",106
28480,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28481,"* copy of this software and associated documentation files (the ""Software""),  *",9
28482,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
28483,"void alt_io_redirect(const char* stdout_dev, ",85
28484,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28485,"* copy of this software and associated documentation files (the ""Software""),  *",9
28486,void alt_irq_handler (void),80
28487,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28488,"* copy of this software and associated documentation files (the ""Software""),  *",9
28489,"int alt_irq_register (alt_u32 id, ",75
28490,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28491,"* copy of this software and associated documentation files (the ""Software""),  *",9
28492,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28493,"* copy of this software and associated documentation files (the ""Software""),  *",9
28494,"int ALT_KILL (int pid, int sig)",49
28495,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28496,"* copy of this software and associated documentation files (the ""Software""),  *",9
28497,"int ALT_LINK ( char *existing, char *new)",45
28498,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
28499,"* copy of this software and associated documentation files (the ""Software""),  *",9
28500,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
28501,void alt_load (void),67
28502,"void alt_log_txchar(int c,char *base)",95
28503,"void alt_log_repchar(char c,int r,int base)",106
28504,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
28505,"int alt_log_printf_proc(const char *fmt, ... )",344
28506,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
28507,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
28508,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
28509,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
28510,"void alt_log_write(const void *ptr, size_t len)",440
28511,void alt_log_system_clock(),474
28512,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
28513,"* copy of this software and associated documentation files (the ""Software""),  *",9
28514,void alt_main (void),82
28515,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28516,"* copy of this software and associated documentation files (the ""Software""),  *",9
28517,void __malloc_lock ( struct _reent *_r ),42
28518,void __malloc_unlock ( struct _reent *_r ),50
28519,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28520,"* copy of this software and associated documentation files (the ""Software""),  *",9
28521,"alt_printf(const char* fmt, ... )",51
28522,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28523,"* copy of this software and associated documentation files (the ""Software""),  *",9
28524,alt_putchar(int c),50
28525,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28526,"* copy of this software and associated documentation files (the ""Software""),  *",9
28527,alt_putcharbuf(int c),58
28528,alt_putbufflush(),73
28529,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28530,"* copy of this software and associated documentation files (the ""Software""),  *",9
28531,alt_putstr(const char* str),52
28532,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28533,"* copy of this software and associated documentation files (the ""Software""),  *",9
28534,void alt_release_fd (int fd),44
28535,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28536,"* copy of this software and associated documentation files (the ""Software""),  *",9
28537,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
28538,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28539,"* copy of this software and associated documentation files (the ""Software""),  *",9
28540,"alt_remap_uncached(void* ptr, alt_u32 len)",49
28541,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28542,"* copy of this software and associated documentation files (the ""Software""),  *",9
28543,caddr_t ALT_SBRK (int incr),68
28544,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28545,"* copy of this software and associated documentation files (the ""Software""),  *",9
28546,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
28547,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28548,"* copy of this software and associated documentation files (the ""Software""),  *",9
28549,void alt_alarm_stop (alt_alarm* alarm),66
28550,void alt_tick (void),87
28551,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28552,"* copy of this software and associated documentation files (the ""Software""),  *",9
28553,clock_t ALT_TIMES (struct tms *buf),51
28554,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28555,"* copy of this software and associated documentation files (the ""Software""),  *",9
28556,alt_uncached_free(volatile void* ptr),40
28557,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28558,"* copy of this software and associated documentation files (the ""Software""),  *",9
28559,alt_uncached_malloc(size_t size),42
28560,int ALT_USLEEP (useconds_t us),46
28561,unsigned int ALT_USLEEP (unsigned int us),48
28562,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28563,"* copy of this software and associated documentation files (the ""Software""),  *",9
28564,int ALT_WAIT (int *status),44
28565,int close (int fd),31
28566,void __attribute__ ((noreturn)) semihost_exit (int code),24
28567,void __attribute__ ((noreturn)) _exit (int code),35
28568,"int fstat (int fd, struct stat *buf)",34
28569,__hosted_to_gdb_mode_t (mode_t m),23
28570,__hosted_to_gdb_open_flags (int f),52
28571,__hosted_to_gdb_lseek_flags (int f),73
28572,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
28573,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
28574,__hosted_from_gdb_errno (int32_t err),111
28575,"int gettimeofday (struct timeval *tv, void *tzvp)",31
28576,void semihost_init_sim (),24
28577,int isatty (int fd),31
28578,"off_t lseek (int fd, off_t offset, int whence)",36
28579,"int open (const char *fname, int flags, ...)",38
28580,"ssize_t read (int fd, void *buf, size_t count)",33
28581,"int _rename (const char *oldpath, const char *newpath)",35
28582,"int stat (const char *filename, struct stat *buf)",37
28583,int _system (const char *command),34
28584,time_t time (time_t *t),31
28585,int unlink (const char *path),33
28586,"ssize_t write (int fd, const void *buf, size_t count)",33
28587,void alt_irq_init ( const void* base ),82
28588,void alt_sys_init( void ),93
28589,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28590,"* copy of this software and associated documentation files (the ""Software""),  *",9
28591,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
28592,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
28593,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
28594,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
28595,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
28596,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
28597,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
28598,int alt_avalon_dma_space (alt_dma_txchan dma),355
28599,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
28600,static void alt_avalon_dma_irq (void* context),446
28601,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
28602,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
28603,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28604,"* copy of this software and associated documentation files (the ""Software""),  *",9
28605,static void alt_avalon_timer_sc_irq (void* base),54
28606,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
28607,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
28608,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28609,"* copy of this software and associated documentation files (the ""Software""),  *",9
28610,int alt_timestamp_start(void),64
28611,alt_timestamp_type alt_timestamp(void),100
28612,alt_u32 alt_timestamp_freq(void),138
28613,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28614,"* copy of this software and associated documentation files (the ""Software""),  *",9
28615,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28616,"* copy of this software and associated documentation files (the ""Software""),  *",9
28617,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
28618,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
28619,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
28620,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28621,"* copy of this software and associated documentation files (the ""Software""),  *",9
28622,void alt_vic_irq_init (alt_vic_dev* pdev),45
28623,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28624,"* copy of this software and associated documentation files (the ""Software""),  *",9
28625,"int alt_ic_isr_register(alt_u32 ic_id,",59
28626,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28627,"* copy of this software and associated documentation files (the ""Software""),  *",9
28628,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
28629,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28630,"* copy of this software and associated documentation files (the ""Software""),  *",9
28631,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
28632,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
28633,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
28634,void altera_nios2_gen2_irq_init(void) ,34
28635,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28636,"* copy of this software and associated documentation files (the ""Software""),  *",9
28637,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
28638,unsigned int alt_busy_sleep (unsigned int us),52
28639,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28640,"* copy of this software and associated documentation files (the ""Software""),  *",9
28641,int ALT_CLOSE (int fildes),42
28642,int ALT_CLOSE (int fildes),64
28643,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28644,"* copy of this software and associated documentation files (the ""Software""),  *",9
28645,"void alt_dcache_flush (void* start, alt_u32 len)",46
28646,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28647,"* copy of this software and associated documentation files (the ""Software""),  *",9
28648,void alt_dcache_flush_all (void),41
28649,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
28650,"* copy of this software and associated documentation files (the ""Software""),  *",9
28651,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
28652,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28653,"* copy of this software and associated documentation files (the ""Software""),  *",9
28654,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
28655,ALT_SEM(alt_fd_list_lock),109
28656,int alt_dev_reg (alt_dev* dev),151
28657,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28658,"* copy of this software and associated documentation files (the ""Software""),  *",9
28659,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
28660,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28661,"* copy of this software and associated documentation files (the ""Software""),  *",9
28662,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
28663,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28664,"* copy of this software and associated documentation files (the ""Software""),  *",9
28665,alt_dma_txchan alt_dma_txchan_open (const char* name),51
28666,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28667,"* copy of this software and associated documentation files (the ""Software""),  *",9
28668,void _do_ctors(void),58
28669,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28670,"* copy of this software and associated documentation files (the ""Software""),  *",9
28671,void _do_dtors(void),58
28672,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
28673,"* copy of this software and associated documentation files (the ""Software""),  *",9
28674,alt_ecc_fatal_exception_register(alt_u32 handler),66
28675,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28676,"* copy of this software and associated documentation files (the ""Software""),  *",9
28677,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28678,"* copy of this software and associated documentation files (the ""Software""),  *",9
28679,void __env_lock ( struct _reent *_r ),43
28680,void __env_unlock ( struct _reent *_r ),51
28681,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28682,"* copy of this software and associated documentation files (the ""Software""),  *",9
28683,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28684,"* copy of this software and associated documentation files (the ""Software""),  *",9
28685,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
28686,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28687,"* copy of this software and associated documentation files (the ""Software""),  *",9
28688,void ALT_EXIT (int exit_code),52
28689,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28690,"* copy of this software and associated documentation files (the ""Software""),  *",9
28691,"int ALT_FCNTL (int file, int cmd, ...)",66
28692,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28693,"* copy of this software and associated documentation files (the ""Software""),  *",9
28694,int alt_fd_lock (alt_fd* fd),54
28695,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28696,"* copy of this software and associated documentation files (the ""Software""),  *",9
28697,int alt_fd_unlock (alt_fd* fd),52
28698,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28699,"* copy of this software and associated documentation files (the ""Software""),  *",9
28700,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
28701,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28702,"* copy of this software and associated documentation files (the ""Software""),  *",9
28703,alt_dev* alt_find_file (const char* name),54
28704,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28705,"* copy of this software and associated documentation files (the ""Software""),  *",9
28706,alt_flash_fd* alt_flash_open_dev(const char* name),49
28707,void alt_flash_close_dev(alt_flash_fd* fd),61
28708,int alt_flash_device_register( alt_flash_fd* fd),70
28709,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28710,"* copy of this software and associated documentation files (the ""Software""),  *",9
28711,int ALT_FORK (void),45
28712,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
28713,"* copy of this software and associated documentation files (the ""Software""),  *",9
28714,"int ALT_FSTAT (int file, struct stat *st)",63
28715,"int ALT_FSTAT (int file, struct stat *st)",93
28716,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28717,"* copy of this software and associated documentation files (the ""Software""),  *",9
28718,int alt_fs_reg (alt_dev* dev),57
28719,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28720,"* copy of this software and associated documentation files (the ""Software""),  *",9
28721,alt_getchar(void),51
28722,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28723,"* copy of this software and associated documentation files (the ""Software""),  *",9
28724,int ALT_GETPID (void),43
28725,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28726,"* copy of this software and associated documentation files (the ""Software""),  *",9
28727,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
28728,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
28729,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28730,"* copy of this software and associated documentation files (the ""Software""),  *",9
28731,int alt_get_fd (alt_dev* dev),54
28732,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28733,"* copy of this software and associated documentation files (the ""Software""),  *",9
28734,/* The compiler inserts calls to mcount() at the start of,48
28735,static __inline__ void * mcount_allocate(unsigned int size),133
28736,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
28737,static int nios2_pcsample_init(void),218
28738,static alt_u32 nios2_pcsample(void* context),250
28739,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28740,"* copy of this software and associated documentation files (the ""Software""),  *",9
28741,"void alt_icache_flush (void* start, alt_u32 len)",42
28742,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28743,"* copy of this software and associated documentation files (the ""Software""),  *",9
28744,void alt_icache_flush_all (void),41
28745,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28746,"* copy of this software and associated documentation files (the ""Software""),  *",9
28747,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
28748,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
28749,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
28750,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
28751,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28752,"* copy of this software and associated documentation files (the ""Software""),  *",9
28753,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
28754,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
28755,"* copy of this software and associated documentation files (the ""Software""),  *",9
28756,alt_exception_result (*alt_instruction_exception_handler),49
28757,int alt_instruction_exception_entry (alt_u32 exception_pc),53
28758,alt_instruction_exception_entry (alt_u32 exception_pc),68
28759,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
28760,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
28761,"* copy of this software and associated documentation files (the ""Software""),  *",9
28762,void alt_instruction_exception_register (,73
28763,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
28764,"* copy of this software and associated documentation files (the ""Software""),  *",9
28765,"int ALT_IOCTL (int file, int req, void* arg)",68
28766,"int ALT_IOCTL (int file, int req, void* arg)",106
28767,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28768,"* copy of this software and associated documentation files (the ""Software""),  *",9
28769,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
28770,"void alt_io_redirect(const char* stdout_dev, ",85
28771,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28772,"* copy of this software and associated documentation files (the ""Software""),  *",9
28773,void alt_irq_handler (void),80
28774,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
28775,"* copy of this software and associated documentation files (the ""Software""),  *",9
28776,"int alt_irq_register (alt_u32 id, ",75
28777,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28778,"* copy of this software and associated documentation files (the ""Software""),  *",9
28779,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
28780,"* copy of this software and associated documentation files (the ""Software""),  *",9
28781,int ALT_ISATTY (int file),50
28782,int ALT_ISATTY (int file),84
28783,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28784,"* copy of this software and associated documentation files (the ""Software""),  *",9
28785,"int ALT_KILL (int pid, int sig)",49
28786,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28787,"* copy of this software and associated documentation files (the ""Software""),  *",9
28788,"int ALT_LINK ( char *existing, char *new)",45
28789,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
28790,"* copy of this software and associated documentation files (the ""Software""),  *",9
28791,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
28792,void alt_load (void),67
28793,"void alt_log_txchar(int c,char *base)",95
28794,"void alt_log_repchar(char c,int r,int base)",106
28795,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
28796,"int alt_log_printf_proc(const char *fmt, ... )",344
28797,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
28798,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
28799,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
28800,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
28801,"void alt_log_write(const void *ptr, size_t len)",440
28802,void alt_log_system_clock(),474
28803,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
28804,"* copy of this software and associated documentation files (the ""Software""),  *",9
28805,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",42
28806,"off_t ALT_LSEEK (int file, off_t ptr, int dir)",70
28807,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
28808,"* copy of this software and associated documentation files (the ""Software""),  *",9
28809,void alt_main (void),82
28810,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28811,"* copy of this software and associated documentation files (the ""Software""),  *",9
28812,void __malloc_lock ( struct _reent *_r ),42
28813,void __malloc_unlock ( struct _reent *_r ),50
28814,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28815,"* copy of this software and associated documentation files (the ""Software""),  *",9
28816,"int ALT_OPEN (const char* file, int flags, int mode)",41
28817,static int alt_file_locked (alt_fd* fd),64
28818,"int ALT_OPEN (const char* file, int flags, int mode)",105
28819,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28820,"* copy of this software and associated documentation files (the ""Software""),  *",9
28821,"alt_printf(const char* fmt, ... )",51
28822,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28823,"* copy of this software and associated documentation files (the ""Software""),  *",9
28824,alt_putchar(int c),50
28825,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28826,"* copy of this software and associated documentation files (the ""Software""),  *",9
28827,alt_putcharbuf(int c),58
28828,alt_putbufflush(),73
28829,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
28830,"* copy of this software and associated documentation files (the ""Software""),  *",9
28831,alt_putstr(const char* str),52
28832,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
28833,"* copy of this software and associated documentation files (the ""Software""),  *",9
28834,"int ALT_READ (int file, void *ptr, size_t len)",58
28835,"int ALT_READ (int file, void *ptr, size_t len)",82
28836,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28837,"* copy of this software and associated documentation files (the ""Software""),  *",9
28838,void alt_release_fd (int fd),44
28839,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28840,"* copy of this software and associated documentation files (the ""Software""),  *",9
28841,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
28842,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28843,"* copy of this software and associated documentation files (the ""Software""),  *",9
28844,"alt_remap_uncached(void* ptr, alt_u32 len)",49
28845,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28846,"* copy of this software and associated documentation files (the ""Software""),  *",9
28847,"int ALT_RENAME (char *existing, char *new)",45
28848,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28849,"* copy of this software and associated documentation files (the ""Software""),  *",9
28850,caddr_t ALT_SBRK (int incr),68
28851,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28852,"* copy of this software and associated documentation files (the ""Software""),  *",9
28853,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
28854,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28855,"* copy of this software and associated documentation files (the ""Software""),  *",9
28856,"int ALT_STAT (const char *file, struct stat *st)",49
28857,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28858,"* copy of this software and associated documentation files (the ""Software""),  *",9
28859,void alt_alarm_stop (alt_alarm* alarm),66
28860,void alt_tick (void),87
28861,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28862,"* copy of this software and associated documentation files (the ""Software""),  *",9
28863,clock_t ALT_TIMES (struct tms *buf),51
28864,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28865,"* copy of this software and associated documentation files (the ""Software""),  *",9
28866,alt_uncached_free(volatile void* ptr),40
28867,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
28868,"* copy of this software and associated documentation files (the ""Software""),  *",9
28869,alt_uncached_malloc(size_t size),42
28870,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28871,"* copy of this software and associated documentation files (the ""Software""),  *",9
28872,int ALT_UNLINK (char *name),45
28873,int ALT_USLEEP (useconds_t us),46
28874,unsigned int ALT_USLEEP (unsigned int us),48
28875,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28876,"* copy of this software and associated documentation files (the ""Software""),  *",9
28877,int ALT_WAIT (int *status),44
28878,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
28879,"* copy of this software and associated documentation files (the ""Software""),  *",9
28880,"int ALT_WRITE (int file, const void *ptr, size_t len)",61
28881,"int ALT_WRITE (int file, const void *ptr, size_t len)",92
28882,int close (int fd),31
28883,void __attribute__ ((noreturn)) semihost_exit (int code),24
28884,void __attribute__ ((noreturn)) _exit (int code),35
28885,"int fstat (int fd, struct stat *buf)",34
28886,__hosted_to_gdb_mode_t (mode_t m),23
28887,__hosted_to_gdb_open_flags (int f),52
28888,__hosted_to_gdb_lseek_flags (int f),73
28889,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
28890,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
28891,__hosted_from_gdb_errno (int32_t err),111
28892,"int gettimeofday (struct timeval *tv, void *tzvp)",31
28893,void semihost_init_sim (),24
28894,int isatty (int fd),31
28895,"off_t lseek (int fd, off_t offset, int whence)",36
28896,"int open (const char *fname, int flags, ...)",38
28897,"ssize_t read (int fd, void *buf, size_t count)",33
28898,"int _rename (const char *oldpath, const char *newpath)",35
28899,"int stat (const char *filename, struct stat *buf)",37
28900,int _system (const char *command),34
28901,time_t time (time_t *t),31
28902,int unlink (const char *path),33
28903,"ssize_t write (int fd, const void *buf, size_t count)",33
28904,void alt_irq_init ( const void* base ),82
28905,void alt_sys_init( void ),93
28906,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28907,"* copy of this software and associated documentation files (the ""Software""),  *",9
28908,void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv),44
28909,static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv),75
28910,static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv),100
28911,"static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)",124
28912,"int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,",268
28913,"int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,",281
28914,"int alt_avalon_dma_prepare (alt_dma_rxchan   dma,",294
28915,int alt_avalon_dma_space (alt_dma_txchan dma),355
28916,"int alt_avalon_dma_send (alt_dma_txchan   dma,",385
28917,static void alt_avalon_dma_irq (void* context),446
28918,"static void alt_avalon_dma_irq (void* context, alt_u32 id)",448
28919,"void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,",520
28920,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28921,"* copy of this software and associated documentation files (the ""Software""),  *",9
28922,static void alt_avalon_timer_sc_irq (void* base),54
28923,"static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)",56
28924,"void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, ",89
28925,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28926,"* copy of this software and associated documentation files (the ""Software""),  *",9
28927,int alt_timestamp_start(void),64
28928,alt_timestamp_type alt_timestamp(void),100
28929,alt_u32 alt_timestamp_freq(void),138
28930,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
28931,"* copy of this software and associated documentation files (the ""Software""),  *",9
28932,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28933,"* copy of this software and associated documentation files (the ""Software""),  *",9
28934,"int alt_ic_irq_enable(alt_u32 ic_id, alt_u32 irq)",39
28935,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",71
28936,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",105
28937,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28938,"* copy of this software and associated documentation files (the ""Software""),  *",9
28939,void alt_vic_irq_init (alt_vic_dev* pdev),45
28940,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28941,"* copy of this software and associated documentation files (the ""Software""),  *",9
28942,"int alt_ic_isr_register(alt_u32 ic_id,",59
28943,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28944,"* copy of this software and associated documentation files (the ""Software""),  *",9
28945,"int alt_vic_irq_set_level(alt_u32 ic_id, ",42
28946,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
28947,"* copy of this software and associated documentation files (the ""Software""),  *",9
28948,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",41
28949,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",67
28950,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",94
28951,void altera_nios2_gen2_irq_init(void) ,34
28952,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
28953,"* copy of this software and associated documentation files (the ""Software""),  *",9
28954,"int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,",64
28955,unsigned int alt_busy_sleep (unsigned int us),52
28956,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28957,"* copy of this software and associated documentation files (the ""Software""),  *",9
28958,"void alt_dcache_flush (void* start, alt_u32 len)",46
28959,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
28960,"* copy of this software and associated documentation files (the ""Software""),  *",9
28961,void alt_dcache_flush_all (void),41
28962,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
28963,"* copy of this software and associated documentation files (the ""Software""),  *",9
28964,"void alt_dcache_flush_no_writeback (void* start, alt_u32 len)",49
28965,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28966,"* copy of this software and associated documentation files (the ""Software""),  *",9
28967,"static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)",76
28968,ALT_SEM(alt_fd_list_lock),109
28969,int alt_dev_reg (alt_dev* dev),151
28970,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28971,"* copy of this software and associated documentation files (the ""Software""),  *",9
28972,"int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)",40
28973,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28974,"* copy of this software and associated documentation files (the ""Software""),  *",9
28975,alt_dma_rxchan alt_dma_rxchan_open (const char* name),51
28976,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28977,"* copy of this software and associated documentation files (the ""Software""),  *",9
28978,alt_dma_txchan alt_dma_txchan_open (const char* name),51
28979,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28980,"* copy of this software and associated documentation files (the ""Software""),  *",9
28981,void _do_ctors(void),58
28982,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28983,"* copy of this software and associated documentation files (the ""Software""),  *",9
28984,void _do_dtors(void),58
28985,"* Copyright (c) 2013 Altera Corporation, San Jose, California, USA.           *",5
28986,"* copy of this software and associated documentation files (the ""Software""),  *",9
28987,alt_ecc_fatal_exception_register(alt_u32 handler),66
28988,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28989,"* copy of this software and associated documentation files (the ""Software""),  *",9
28990,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28991,"* copy of this software and associated documentation files (the ""Software""),  *",9
28992,void __env_lock ( struct _reent *_r ),43
28993,void __env_unlock ( struct _reent *_r ),51
28994,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28995,"* copy of this software and associated documentation files (the ""Software""),  *",9
28996,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
28997,"* copy of this software and associated documentation files (the ""Software""),  *",9
28998,"int ALT_EXECVE (char *name, char ** argv, char** env)",45
28999,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29000,"* copy of this software and associated documentation files (the ""Software""),  *",9
29001,void ALT_EXIT (int exit_code),52
29002,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29003,"* copy of this software and associated documentation files (the ""Software""),  *",9
29004,"int ALT_FCNTL (int file, int cmd, ...)",66
29005,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29006,"* copy of this software and associated documentation files (the ""Software""),  *",9
29007,int alt_fd_lock (alt_fd* fd),54
29008,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29009,"* copy of this software and associated documentation files (the ""Software""),  *",9
29010,int alt_fd_unlock (alt_fd* fd),52
29011,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29012,"* copy of this software and associated documentation files (the ""Software""),  *",9
29013,"alt_dev* alt_find_dev(const char* name, alt_llist* llist)",54
29014,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29015,"* copy of this software and associated documentation files (the ""Software""),  *",9
29016,alt_dev* alt_find_file (const char* name),54
29017,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29018,"* copy of this software and associated documentation files (the ""Software""),  *",9
29019,alt_flash_fd* alt_flash_open_dev(const char* name),49
29020,void alt_flash_close_dev(alt_flash_fd* fd),61
29021,int alt_flash_device_register( alt_flash_fd* fd),70
29022,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29023,"* copy of this software and associated documentation files (the ""Software""),  *",9
29024,int ALT_FORK (void),45
29025,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29026,"* copy of this software and associated documentation files (the ""Software""),  *",9
29027,int alt_fs_reg (alt_dev* dev),57
29028,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
29029,"* copy of this software and associated documentation files (the ""Software""),  *",9
29030,alt_getchar(void),51
29031,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29032,"* copy of this software and associated documentation files (the ""Software""),  *",9
29033,int ALT_GETPID (void),43
29034,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
29035,"* copy of this software and associated documentation files (the ""Software""),  *",9
29036,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)",71
29037,"int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)",75
29038,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29039,"* copy of this software and associated documentation files (the ""Software""),  *",9
29040,int alt_get_fd (alt_dev* dev),54
29041,"* Copyright (c) 2003-2005 Altera Corporation, San Jose, California, USA.      *",5
29042,"* copy of this software and associated documentation files (the ""Software""),  *",9
29043,/* The compiler inserts calls to mcount() at the start of,48
29044,static __inline__ void * mcount_allocate(unsigned int size),133
29045,"void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)",159
29046,static int nios2_pcsample_init(void),218
29047,static alt_u32 nios2_pcsample(void* context),250
29048,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
29049,"* copy of this software and associated documentation files (the ""Software""),  *",9
29050,"void alt_icache_flush (void* start, alt_u32 len)",42
29051,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
29052,"* copy of this software and associated documentation files (the ""Software""),  *",9
29053,void alt_icache_flush_all (void),41
29054,"* Copyright (c) 2009 Altera Corporation, San Jose, California, USA.           *",5
29055,"* copy of this software and associated documentation files (the ""Software""),  *",9
29056,"int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",60
29057,"int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)",72
29058,"int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)",83
29059,"alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)",96
29060,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
29061,"* copy of this software and associated documentation files (the ""Software""),  *",9
29062,"int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, ",75
29063,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
29064,"* copy of this software and associated documentation files (the ""Software""),  *",9
29065,alt_exception_result (*alt_instruction_exception_handler),49
29066,int alt_instruction_exception_entry (alt_u32 exception_pc),53
29067,alt_instruction_exception_entry (alt_u32 exception_pc),68
29068,alt_exception_cause_generated_bad_addr(alt_exception_cause cause),187
29069,"* Copyright (c) 2008 Altera Corporation, San Jose, California, USA.           *",5
29070,"* copy of this software and associated documentation files (the ""Software""),  *",9
29071,void alt_instruction_exception_register (,73
29072,"* Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *",5
29073,"* copy of this software and associated documentation files (the ""Software""),  *",9
29074,"int ALT_IOCTL (int file, int req, void* arg)",68
29075,"int ALT_IOCTL (int file, int req, void* arg)",106
29076,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29077,"* copy of this software and associated documentation files (the ""Software""),  *",9
29078,"static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)",58
29079,"void alt_io_redirect(const char* stdout_dev, ",85
29080,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
29081,"* copy of this software and associated documentation files (the ""Software""),  *",9
29082,void alt_irq_handler (void),80
29083,"* Copyright (c) 2009      Altera Corporation, San Jose, California, USA.      *",5
29084,"* copy of this software and associated documentation files (the ""Software""),  *",9
29085,"int alt_irq_register (alt_u32 id, ",75
29086,"* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *",5
29087,"* copy of this software and associated documentation files (the ""Software""),  *",9
29088,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29089,"* copy of this software and associated documentation files (the ""Software""),  *",9
29090,"int ALT_KILL (int pid, int sig)",49
29091,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29092,"* copy of this software and associated documentation files (the ""Software""),  *",9
29093,"int ALT_LINK ( char *existing, char *new)",45
29094,"* Copyright (c) 2004-2005 Altera Corporation, San Jose, California, USA.      *",5
29095,"* copy of this software and associated documentation files (the ""Software""),  *",9
29096,"extern alt_u32 __flash_exceptions_start __attribute__((section("".data"")));  ",57
29097,void alt_load (void),67
29098,"void alt_log_txchar(int c,char *base)",95
29099,"void alt_log_repchar(char c,int r,int base)",106
29100,"void alt_log_private_printf(const char *fmt,int base,va_list args)",114
29101,"int alt_log_printf_proc(const char *fmt, ... )",344
29102,alt_u32 altera_avalon_jtag_uart_report_log(void * context),363
29103,"void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)",379
29104,"void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)",414
29105,"void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) ",424
29106,"void alt_log_write(const void *ptr, size_t len)",440
29107,void alt_log_system_clock(),474
29108,"* Copyright (c) 2007 Altera Corporation, San Jose, California, USA.           *",5
29109,"* copy of this software and associated documentation files (the ""Software""),  *",9
29110,void alt_main (void),82
29111,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29112,"* copy of this software and associated documentation files (the ""Software""),  *",9
29113,void __malloc_lock ( struct _reent *_r ),42
29114,void __malloc_unlock ( struct _reent *_r ),50
29115,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
29116,"* copy of this software and associated documentation files (the ""Software""),  *",9
29117,"alt_printf(const char* fmt, ... )",51
29118,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
29119,"* copy of this software and associated documentation files (the ""Software""),  *",9
29120,alt_putchar(int c),50
29121,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
29122,"* copy of this software and associated documentation files (the ""Software""),  *",9
29123,alt_putcharbuf(int c),58
29124,alt_putbufflush(),73
29125,"* Copyright (c) 2015 Altera Corporation, San Jose, California, USA.           *",5
29126,"* copy of this software and associated documentation files (the ""Software""),  *",9
29127,alt_putstr(const char* str),52
29128,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29129,"* copy of this software and associated documentation files (the ""Software""),  *",9
29130,void alt_release_fd (int fd),44
29131,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
29132,"* copy of this software and associated documentation files (the ""Software""),  *",9
29133,"alt_remap_cached(volatile void* ptr, alt_u32 len)",41
29134,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
29135,"* copy of this software and associated documentation files (the ""Software""),  *",9
29136,"alt_remap_uncached(void* ptr, alt_u32 len)",49
29137,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29138,"* copy of this software and associated documentation files (the ""Software""),  *",9
29139,caddr_t ALT_SBRK (int incr),68
29140,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
29141,"* copy of this software and associated documentation files (the ""Software""),  *",9
29142,"int ALT_SETTIMEOFDAY (const struct timeval  *t,",72
29143,"* Copyright (c) 2017,2004 Altera Corporation, San Jose, California, USA.      *",5
29144,"* copy of this software and associated documentation files (the ""Software""),  *",9
29145,void alt_alarm_stop (alt_alarm* alarm),66
29146,void alt_tick (void),87
29147,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29148,"* copy of this software and associated documentation files (the ""Software""),  *",9
29149,clock_t ALT_TIMES (struct tms *buf),51
29150,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
29151,"* copy of this software and associated documentation files (the ""Software""),  *",9
29152,alt_uncached_free(volatile void* ptr),40
29153,"* Copyright (c) 2003,2007 Altera Corporation, San Jose, California, USA.      *",5
29154,"* copy of this software and associated documentation files (the ""Software""),  *",9
29155,alt_uncached_malloc(size_t size),42
29156,int ALT_USLEEP (useconds_t us),46
29157,unsigned int ALT_USLEEP (unsigned int us),48
29158,"* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *",5
29159,"* copy of this software and associated documentation files (the ""Software""),  *",9
29160,int ALT_WAIT (int *status),44
29161,int close (int fd),31
29162,void __attribute__ ((noreturn)) semihost_exit (int code),24
29163,void __attribute__ ((noreturn)) _exit (int code),35
29164,"int fstat (int fd, struct stat *buf)",34
29165,__hosted_to_gdb_mode_t (mode_t m),23
29166,__hosted_to_gdb_open_flags (int f),52
29167,__hosted_to_gdb_lseek_flags (int f),73
29168,"__hosted_from_gdb_stat (const struct gdb_stat *gs,",84
29169,"__hosted_from_gdb_timeval (const struct gdb_timeval *gt,",103
29170,__hosted_from_gdb_errno (int32_t err),111
29171,"int gettimeofday (struct timeval *tv, void *tzvp)",31
29172,void semihost_init_sim (),24
29173,int isatty (int fd),31
29174,"off_t lseek (int fd, off_t offset, int whence)",36
29175,"int open (const char *fname, int flags, ...)",38
29176,"ssize_t read (int fd, void *buf, size_t count)",33
29177,"int _rename (const char *oldpath, const char *newpath)",35
29178,"int stat (const char *filename, struct stat *buf)",37
29179,int _system (const char *command),34
29180,time_t time (time_t *t),31
29181,int unlink (const char *path),33
29182,"ssize_t write (int fd, const void *buf, size_t count)",33
29183,UibssmCalTimerSnapshot(,41
29184,HbmDwordReadPatternOperation(,57
29185,RxMargining(,64
29186,/*called after DEBUGCODE(0x7000)*/,357
29187,RxFindEdge(,360
29188,RxCalcMidpointAndDccOffset(,966
29189,RxDllSetDelay(,1076
29190,RxDccSetOffset(,1218
29191,ReadLatencyOptimization(,1325
29192,/** Setup for AWORD and DWORD to perform DWORD Read operation by sending Read commands (from the AWORD),1550
29193,UibCalDwordReadTrainingInit(,1558
29194,HbmSelfRefresh(,1622
29195,HbmDwordLoopback(,1771
29196,UibDwordSetMisrMaskMode(,1904
29197,UibDwordPollForStrmInboundInProg(,1970
29198,UB48ReadoutMisrData(,2025
29199,/*Called from DEBUGCODE(0x7004)*/,2057
29200,HbmDwordReadMisrOperation(,2060
29201,UibCalDwordReadSetupReadBuffers(,2201
29202,/*Called DEBUGCODE(0xD005);*/,2425
29203,UibCalDwordReadSetupAwordCommandsToRead(,2428
29204,UibCalDwordReadStrobeIndicatorSetup(,2602
29205,UibCalDwordReceiveFifoSetup(,2681
29206,UibCalDwordReceiveFifoDisable(,2799
29207,HbmChannelIdToNumber(,2895
29208,HbmChannelSetDwordStreaming(,2929
29209,HbmChannelSetDwordBufferModes(,3006
29210,RxDllFastLoadPulse(,3067
29211,RxDllEnableDisableDelay(,3148
29212,UibssmPostCalibrationTasks(,3202
29213,UibssmCalAlgorithmSelection(,3309
29214,UibssmHbmUpdateState(,3365
29215,UibssmDummyCalbusRead(,3390
29216,/** HbmDwordReadPatternOperation (Derived from HbmDwordReadMisrOperation),3410
29217,HbmDwordReadPatternOperation(,3421
29218,HbmRowCommand(,3658
29219,/*extra: could add a cke mode 0/1 then this function can be used to clean up the 8x commands being sent during loopback mode (for both write and read)*/,3824
29220,HbmColCommand(,3840
29221,HbmDwordSetDataFast(,3962
29222,HbmDwordSetWlStrmctlFast(,4084
29223,HbmDwordSetWdqsValue(,4173
29224,HbmDwordReadPatternBasedSetup(,4280
29225,HbmPrechargeAllThenRefresh(,4547
29226,UB48RxDllSetDelay(,4575
29227,UB48RxDllFastLoadPulse(,4605
29228,UB48ReadBufferEnableDisable(,4638
29229,UibssmLoggingUpdateFunction(,4694
29230,UibssmLoggingReadFunction(,4750
29231,HbmChannelAwordTrainingSetBypassAndPoly(,438
29232,HbmChannelAwordTrainingEnd(,537
29233,HbmChannelAwordTrainingISetStatLfsr(,574
29234,HbmChannelAwordTrainingInit(,631
29235,HbmChannelSetOe(,875
29236,HbmChannelSetIe(,1054
29237,HbmChannelSetStrmTimer(,1275
29238,HbmChannelDwordWriteTrainingInitAword(,1385
29239,HbmChannelDwordTrainingSetBypassAndPoly(,1574
29240,HbmChannelDwordTrainingISetStatLfsr(,1676
29241,HbmChannelDwordTrainingInit(,1763
29242,HbmChannelAwordTrainingSetSeed(,1971
29243,HbmChannelAwordTrainingSettings(,2056
29244,HbmChannelAwordTrainingSetStatBufSel(,2172
29245,HbmChannelDwordTrainingSetSeed(,2232
29246,HbmChannelDwordTrainingSetWl(,2358
29247,HbmChannelDwordTrainingSettings(,2480
29248,HbmChannelDwordTrainingSetStatBufSel(,2617
29249,HbmChannelAwordStreamBufferDone(,2667
29250,HbmChannelAwordTrainingGetMisrSig(,2726
29251,HbmChannelDwordTrainingGetMisrSig(,2798
29252,HbmChannelGetChNumbers(,2890
29253,HbmChannelGetChId(,2922
29254,HbmChannelIsOdd(,2955
29255,HbmChannelAwordSetDeadbandSelect(,2991
29256,HbmChannelAwordTrainingSetDllDly(,3088
29257,HbmChannelDwordSetDeadbandSelect(,3375
29258,HbmChannelDwordTrainingSetDllDlyPerDword(,3469
29259,HbmChannelDwordTrainingSetDllDly(,3725
29260,HbmChannelAwordCreateCommand(,3784
29261,UibssmCalcCommandParityBit(,4009
29262,HbmChannelAwordSetCmdMode(,4051
29263,HbmChannelAwordMisrConfigSet(,4226
29264,HbmChannelAwordPrepIdleCommand(,4301
29265,HbmChannelAwordPrepCommand(,4412
29266,HbmChannelAwordPrepCommandFast(,4528
29267,HbmChannelTrainingMid(,4701
29268,HbmChannelAwordWriteTraining(,4852
29269,HbmChannelAwordDwordTdqssOptCheck(,5573
29270,HbmChannelCalculateNextDllCodeIfNotOk(,5652
29271,HbmChannelCalculateNextDllCodeIfOk(,5708
29272,HbmChannelDwordWriteTraining(,5763
29273,HbmChannelDwordReadTraining(,6705
29274,HbmChannelTraining(,6783
29275,UibssmMrsWithDelaySyncSelect(,6890
29276,HbmChannelTrainingEnd(,7041
29277,HbmDwordCalSetSpecificMRS(,7128
29278,HbmChannelTrainingMasterDllSet(,7242
29279,HbmChannelTrainingMasterDllsStaggeringEnable(),7299
29280,UibssmMasterDllsGetWaitTime(),7352
29281,UibssmMasterDllsPeriodicEnableDisable(,7452
29282,HbmRefreshCommand(,7552
29283,HbmChannelIeee1500UpdateMrs(,7737
29284,UibssmToggleRichLfsrRfSwapSet(,7808
29285,/** Broadcast version. To meet tRAS(max) timing in Dword Read that uses functional mode during interface training.,7831
29286,HbmRefreshCommandFast(,7839
29287,HbmChannelAwordFillNop(,8017
29288,HbmChannelAutoDccSetAll(,8133
29289,UB48CreateDataStrm(,8171
29290,UB48SetOe(,8229
29291,UB48SetIe(,8312
29292,UB48ReadStrobeIndicatorSetup(,8406
29293,UB48SetBufferModes(,8459
29294,UB48ReceiveFifoSetup(,8503
29295,UB48ReceiveFifoDisable(,8565
29296,UB48RxDllEnableDisableDelay(,8611
29297,UB48StreamBufferDone(,8645
29298,UB48PopulateDataStrm(,8681
29299,UB48PopulateRdbufSettings(,8787
29300,UB48TxDllCheckDllLock(,8859
29301,UB48TxDllGenFastLoadPulse(,8921
29302,UB48TxDllGenSafeLoadPulse(,8972
29303,UB48TxDllAutoDccEnableDisable(,9041
29304,UB48TxDllSetDelayValue(,9081
29305,UB48TxDllEnableDisable(,9119
29306,UB48TxDllSetDelay(,9169
29307,UB48PopulateStatData(,9325
29308,UB48ReadoutReadBuffer(,9360
29309,UibHbmLanesRepairUb48Analyze(,68
29310,DwordBytesLaneCalculate(,259
29311,UibHbmLanesRepairUb48BeadbusSetOeIe(,536
29312,UibHbmLanesRepairUb48BeadbusSetOe(,566
29313,UibHbmLanesRepairUb48BeadbusClrOeIe(,596
29314,UibHbmLanesRepairUb48BeadbusRtrOeIe(,628
29315,UibHbmLanesRepairUb48BeadbusPsioCalOeIe(,668
29316,UibHbmLanesRepairUb48BeadbusPdioCalOeIe(,734
29317,UibHbmLanesRepairUb48Beadbus(,797
29318,UibHbmLanesRepairIrrMmrUpdate(,1136
29319,UibHbmChannelLaneRepair(,1400
29320,UibssmCalibrateIopll(,47
29321,"/*READ_FLD(UINT32 base_addr, UINT32 reg, UINT32 fld) */",138
29322,UibssmAdapterIopllReadField(,141
29323,UibssmAdapterIopllWriteField(,201
29324,UibMidstackSet1500ClockDivider(,96
29325,UibMidstackIeee1500_wrclk(,144
29326,UibMidstackIeee1500_run_wrclk(,185
29327,UibMidstackHbm_rst_n(,246
29328,UibMidstackIeee1500_wrst_n(,295
29329,UibMidstackIeee1500Update_wir(,347
29330,UibMidstackIeee1500Update_wdr(,463
29331,UibMidstackIeee1500Capture_wdr(,603
29332,"/*INT32 ieee1500_update_wdr (wir wir_cmd, INT32[] data, INT32 channel)",731
29333,UibMidstackCheckNotByp(),750
29334,UibMidstackIeee1500BUF_CHECK(),774
29335,UibCreateTmrsData(,845
29336,"/** Wraps UibCreateTmrsData(), Update_wdr(), run_wrclk for 200 clock cycles. */",933
29337,UibSendTmrsData(,936
29338,UibssmTmrsGenRdCtrlRev3_Sequences(,963
29339,UibssmTmrsGenRdCtrlRev3(,1127
29340,UibssmTmrsGenSeqFwRev3(,1188
29341,UibssmCnocRxClearInterrupts(),64
29342,UibssmCnocRxIsr(,94
29343,UibssmStateMachine(,444
29344,UibssmCnocRxInit(),970
29345,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",26
29346,"volatile ieee_lane_repair_wdr_t   TestCalWdr[TOTAL_CHANNEL]                       __attribute__ ( ( section( "".testcal_data3"" ) ) ) = {",47
29347,"volatile UINT32                   TgulvBinningFinalResult                         __attribute__ ( ( section( "".testcal_data6"" ) ) ) = 0; /* 1 word to indicate overall pass/fail result of the TGULV results of the requested batch of UB48s. */",76
29348,SetOpenshortValue(,121
29349,MappingTestValue(,142
29350,LaneRepairDetect(,503
29351,AwordLaneRepairDetect(,601
29352,DwordLaneRepairDetect(,710
29353,LaneRepairTestCal(,858
29354,HbmChannelTrainingGetLfsrSig(,1021
29355,HbmAwordDwordCheckRepairable(,1144
29356,UibssmTestCalMemoryInterfaceTraining(,1278
29357,UibssmTestCalPassingWindowCheck(,1542
29358,UibssmTestCalConnectivityTest(,1602
29359,UibssmTestCalHbmMbistSupportMode(,1645
29360,UibssmTestCalTgulvBinningLoopbackSetup(,1780
29361,UibssmTestCalTgulvBinningLoopbackCleanup(,2132
29362,UibssmTestcalTgulvBinningLaunchData(,2176
29363,UibssmTestCalTgulvBinningLoopbackRun(,2297
29364,UibssmTestCalTgulvBinningCheckResults(,2833
29365,UibssmTestCalTgulvBinningWrapper(,3048
29366,UibssmTestCalcodeEntry(,3267
29367,UibssmTestCalParametersAdjustment(,3502
29368,"volatile ieee_lane_repair_wdr_t   TestCalWdr[TOTAL_CHANNEL]                       __attribute__ ( ( section( "".testcal_data3"" ) ) ) = {",44
29369,"volatile UINT32                   TgulvBinningFinalResult                         __attribute__ ( ( section( "".testcal_data6"" ) ) ) = 0; /* 1 word to indicate overall pass/fail result of the TGULV results of the requested batch of UB48s. */",59
29370,SetOpenshortValue(,94
29371,MappingTestValue(,115
29372,LaneRepairDetect(,261
29373,UibssmTestCalConnectivityTest(,354
29374,UibssmTestCalTgulvBinningLoopbackSetup(,391
29375,UibssmTestCalTgulvBinningLoopbackCleanup(,743
29376,UibssmTestcalTgulvBinningLaunchData(,787
29377,UibssmTestCalTgulvBinningLoopbackRun(,908
29378,UibssmTestCalTgulvBinningCheckResults(,1444
29379,UibssmTestCalTgulvBinningWrapper(,1659
29380,UibssmTestCalcodeEntry(,1878
29381,UibssmTestCalParametersAdjustment(,2112
29382,"* Copyright (c) 2004-2015 Altera Corporation, San Jose, California, USA. *",26
29383,process_uib_dfx_function(),67
29384,process_cjtag_command(,101
29385,clear_cjtag_command_and_databit(),1029
29386,uib_cnoc_return(,1057
29387,"process_uib_tgulv_rcomp_test(UINT32 *cjtag_data, volatile UINT32 *Status)",1107
29388,UibssmRcompCalibrationTestStart(UibssmRcompTestType* RcompTestData),1236
29389,IocsrBridgeBusesInit(),43
29390,IocsrBridgeWrite(,121
29391,IocsrBridgeUnload(,217
29392,VerifyIocsrPacketData(,287
29393,VerifyClockDivisionRatio(,328
29394,PhyBeadbusReg(,358
29395,Ub48BeadbusReg(,396
29396,EsramBeadbusReg(,434
29397,EsramRedundancyReg(,471
29398,HbmcRedundancyReg(,506
29399,BeadbusClear(,557
29400,BeadbusUpdate(,579
29401,BeadbusInit(,599
29402,BeadbusShift(,617
29403,BeadbusSample(,634
29404,RedundancyReset(,650
29405,RedundancyEnableShift(,668
29406,RedundancyDisableShift(,686
29407,RedundancyEnableIsolation(,704
29408,BeadbusValueReversion(,725
29409,RedundancyScanValueReversion(,749
29410,CalculateBeadBusBitWordLocation(,776
29411,UpdateBitsAtWordLocation(,809
29412,PollHbmCfgRegister(,39
29413,RMWHbmCfgRegister(,96
29414,WriteHbmCfgRegister(,130
29415,ReadHbmCfgRegister(,192
29416,WriteHbmCfgMemory(,258
29417,RMWHbmCfgMemory(,298
29418,ReadHbmCfgMemory(,332
29419,UibssmCalibrationBusSessionStart(,198
29420,UibssmCalibrationBusAccess(,240
29421,UibssmCalibrationBusSessionEnd(,441
29422,UibMsSyncPulseSteer(,470
29423,UibCalibrationBusGenerateSync(,503
29424,UibssmEnableCalClk(,583
29425,UibssmMemoryInitializationWithSkipCal(,59
29426,UibssmMemoryTrainingWithSkipCal(,113
29427,UibssmMemoryInitializationAndTrainingWithSkipCal(,350
29428,UibssmMemoryInitializationAndTrainingDefaultSettings(,631
29429,UibssmLaneRepairAndFullIoBringupDefaultSettings(,702
29430,UibssmLaneRepairAndFullIoBringupRestoreOeIeSettings(,723
29431,UibssmLaneRepairAndFullIoBringupRestoreSettings(,749
29432,UibssmMasterDllsInit(,769
29433,UibssmMemoryInitializationAndTrainingAwordDefaultSettings(,792
29434,UibssmMemoryInitializationAndTrainingAword(,845
29435,UibssmMemoryInitializationAndTrainingAwordRestoreSettings(,890
29436,UibssmMemoryInitializationAndTrainingDwordWriteDefaultSettings(,910
29437,UibssmMemoryInitializationAndTrainingDwordWrite(,970
29438,UibssmMemoryInitializationAndTrainingDwordWriteRestoreSettings(,1017
29439,UibssmMemoryInitializationAndTrainingDwordReadDefaultSettings(,1037
29440,UibssmMemoryInitializationAndTrainingDwordRead(,1113
29441,UibssmMemoryInitializationAndTrainingDwordReadRestoreSettings(,1160
29442,UibssmMemoryInitializationAndTrainingMrsRestore(,1182
29443,UibssmTinit1_2(,1206
29444,UibssmTinit3(),1443
29445,UibssmIeee1500(),1481
29446,UibssmTinit5(,1515
29447,VOID UibssmChecker(UINT32 CheckerId),40
29448,UibssmCnocRxClearInterrupts(),51
29449,UINT32 UibssmCnocRxSanitizeStatusMask(UINT32 input_mask),75
29450,BOOLEAN UibssmIsValidTemperature(INT32 temperature),90
29451,VOID UibssmCnocRxAreg1Handler(,111
29452,UibssmCnocRxIsr(,404
29453,UibssmCnocRxInit(),582
29454,UibssmCnocTxInit(),42
29455,UibssmCnocTxBusy(,60
29456,UibssmCnocTxSendPacket(,90
29457,DetermineBeadDataLogicalLocation(,52
29458,UpdateBeadData(,80
29459,UibssmUpdateEsramRedundancyData(,156
29460,UibssmFusingEsramMem(),33
29461,UpdateHbmcRedundancyData(,38
29462,UibssmHbmcIntRegister(,809
29463,SbOwnSet( SbOwnSetType Action),846
29464,InitializeHbmcMmrData(),888
29465,DynamicUpdateHbmcMmrData(),941
29466,HbmcBypassCattrip(,1058
29467,HbmcProgramCalLat(,1107
29468,HbmcHandOverTask(),1323
29469,HbmcUpdateParityMode(),1715
29470,HbmcDeHandOverTask(),1807
29471,BackupCalLatHbmcMmr(),1943
29472,HbmCattripISR(),1998
29473,HbmcInterruptHandler(),2022
29474,HbmOnlyResetISR(),2140
29475,DynamicMajorModeTask(),2226
29476,STATIC UINT32 ThermalThrottlingThresholdTemperature(),2462
29477,TemperatureMonitoringTask(BOOLEAN reset),2483
29478,ThermalThrottlingTask(),2582
29479,TemperatureMonitoringAndThermalThrottlingTask(),2656
29480,SelectTemperatureSource(,2797
29481,GetDeviceID(),2836
29482,GetDieType(),2874
29483,HbmOnlyReset(),2908
29484,HbmOnlyResetNoCalibration(),2968
29485,UibssmPostHandoverTask(),3164
29486,/* UINT32 SwapNibbles(UINT32 x),28
29487,BitsReversal(,45
29488,ArrBitsGet(,78
29489,ArrBitsSet(,98
29490,ArrBitsFlexGet(,141
29491,"UibssmGlobalStructType g_uibssm __attribute__((section("".g_uibssm_region""))) = {",31
29492,UibssmInit(),117
29493,UibIopllCpaDprioOperation(,60
29494,"/*  UIBSSM_API_DEBUG_PRINT(""   Debug info: UibIopllCpaDprioOperation ...\n""); */",69
29495,UibIopllCpaDprioOperationPoll(,166
29496,"/*  UIBSSM_API_DEBUG_PRINT(""   Debug info: UibIopllCpaDprioOperation ...\n""); */",175
29497,UibssmPllManagerPollBusy(,297
29498,UibIopllCpaIocsr(,344
29499,UibCpaSettings(,386
29500,UibIopllSettings(,425
29501,UibIopllCalibrationSuccess(,444
29502,UibssmPllManagerDprioClkEnable(,485
29503,UibssmResetStatusCheck(),110
29504,UibssmUibEsramCheck(),142
29505,UibssmConfigUB48FlippedMode(),281
29506,UibssmUibInterfaceRelease(),309
29507,UibssmEsramInterfaceRelease(),331
29508,UibssmUibNFRZDRVAssertion(),350
29509,UibssmEsramNFRZDRVAssertion(),375
29510,UibssmCpaEnable(,399
29511,UibssmCpaDisable(,481
29512,UibssmProgrammingBeadBus(,515
29513,UibssmProgrammingBeadBusForPllmgrPhyUfi(),598
29514,UibssmProgrammingBeadBusForEsramPllmgrUfi(),741
29515,UibssmProgrammingBeadBusForPllmgrSIPAux(),826
29516,UibssmAuxUibBringup(),857
29517,UibssmAuxEsramBringup(),931
29518,UibssmSIPAuxBringup(),981
29519,UibssmUibPLLBringup(),995
29520,UibssmEsramPLLBringup(),1068
29521,UibssmUibIoBringup(),1111
29522,UibssmEsramIoBringup(),1140
29523,UibssmHbmcRedundancyRepair(),1186
29524,UibssmLaneRepairAndFullIoBringup(),1306
29525,UibssmLaneRepairAndFullIoBringupWrap(),1469
29526,UibssmLaneRepairAndFullIoBringupTestCal(),1490
29527,UibssmConfigCalibrationBusBringup(),1602
29528,UibssmConfigAuxBringup(),1682
29529,UibssmUibClockDcmProgramming(),1723
29530,UibssmEsramClockDcmProgramming(),1752
29531,UibssmUibDisableClockNetworkDCM(),1779
29532,UibssmEsramDisableClockNetworkDCM(),1830
29533,UibssmClearWarmResetStatusRecovery(),1877
29534,UibssmResetAndFreeze(),1904
29535,UibssmWarmReset(),2144
29536,UibssmRcompCalibrationStart(),39
29537,UibssmRcompCalibrationOverrideCheck(,153
29538,UibssmReadRcompCalibratedCodeWord(,248
29539,UibssmRcompCalibratedCodeWordOverrideStep1(,283
29540,UibssmRcompCalibratedCodeWordOverrideStep2(,321
29541,UibResetWarm(,56
29542,UibResetSimulate(,273
29543,UibDetectHardwarewStraps(),507
29544,SettingAllCkeOe_Zero(,34
29545,SettingTargetedCkeOe_One(,89
29546,ProcessCfgPsioGroup(,143
29547,ProcessCfgPdioGroup(,190
29548,UibssmSettingCkeOe(),239
29549,init_timer(,47
29550,is_timer_timeout(),99
29551,restart_timer(),122
29552,init_timer_ticks(,140
29553,get_timer_snapshot_ticks(,170
29554,"VOID UibssmTrace(uib_trace_key_t key, UINT32 line)",77
29555,"VOID UibssmWarningTrace(uib_trace_key_t key, UINT32 line)",89
29556,UibssmTracePrint(),107
29557,TopFuseDecode(,53
29558,BottomFuseDecode(,104
29559,UfiRedundancyBeadDataUpdate(,149
29560,UibUfiRelease(,52
29561,UibUfiDeRelease(,186
29562,UibHbmHandover(,264
29563,reverse(,46
29564,/* Implementation of itoa() */,60
29565,itoa(,62
29566,construct_printf_buf(,114
29567,/*    semi_host_puts( print_buffer ); */,120
29568,semi_host_printf(,207
29569,/*  semi_host_puts( print_buffer ); */,268
29570,UibssmHbmcIntRegister(,801
29571,SbOwnRequest(),835
29572,InitializeHbmcMmrData(),876
29573,DynamicUpdateHbmcMmrData(),929
29574,HbmcProgramCalLat(,1061
29575,HbmcHandOverTask(),1276
29576,HbmcDeHandOverTask(),1594
29577,BackupCalLatHbmcMmr(),1747
29578,HbmCattripISR(),1802
29579,HbmcInterruptHandler(),1816
29580,HbmOnlyResetISR(),1914
29581,"UIBSSM_API_DEBUG_PRINT( ""(7f-ii) Disable Clock Gating and channel disable for ALL channels\n"" );   ",2086
29582,DynamicMajorModeTask(),2161
29583,"int main(int alt_argc, char **alt_argv, char** alt_envp)",45
29584,UibssmStateMachine(,44
29585,UibssmUibHbmFlowTest(),61
29586,UibssmUserParamInit(),61
29587,UibssmParameterTableSanityCheck(,242
29588,uint32_t aes_key_data[SDM_256b_WORD_SIZE] __attribute__ ((aligned(4))) = {,46
29589,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",59
29590,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",65
29591,in_buf_handle_t comp_config_inbuf_handle_get(comp_config_handle_t handle),72
29592,out_buf_handle_t comp_config_outbuf_handle_get(comp_config_handle_t handle),77
29593,sha_handle_t comp_config_sha_handle_get(comp_config_handle_t handle),82
29594,dma_handle_t comp_config_dma_handle_get(comp_config_handle_t handle),87
29595,pkc_handle_t comp_config_pkc_handle_get(comp_config_handle_t handle),92
29596,static uint32_t debug_aes_wrapping_key_data[SDM_256b_WORD_SIZE] __attribute__ ((aligned(4))) = {,100
29597,STATIC sdm_return_t derive_bbram_wrapping_key (,111
29598,uint32_t aes_root_key_data_1[SDM_256b_WORD_SIZE]__attribute__ ((aligned(4))) =,144
29599,uint32_t aes_plaintext[SDM_256b_WORD_SIZE] __attribute__ ((aligned(4)))  = {,156
29600,uint32_t aes_cipher_data_2[SDM_256b_WORD_SIZE] __attribute__ ((aligned(4))) = ,171
29601,sdm_return_t test_reset_peripherals(),207
29602,void keyzerorization_test_hw_init(crypto_context_t* crypto_ctx),251
29603,sdm_return_t test_bbram_wrapping_key_external(crypto_context_t* crypto_ctx),326
29604,sdm_return_t test_bbram_wrapping_key_internal(crypto_context_t* crypto_ctx),388
29605,int main(),447
29606,static void enable_bbram(void),566
29607,void sdm_startup(void),574
29608,Copyright (2020) Intel Corporation,3
29609,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29610,"sdm_return_t hmac_kdf(const cmf_hmac_type_t      hmac_type,",48
29611,void sdm_early_init(void){;},81
29612,"sdm_return_t cmf_swizzle_data_block(const uint32_t *const p_source,",87
29613,void sdm_block_free(void *p_free),119
29614,bool sdm_block_ptr_is_valid(const void *ptr_to_chk),160
29615,void sdm_block_alloc_init(void),174
29616,void *sdm_block_alloc_entry(uint32_t index),184
29617,void * sdm_block_alloc(void),196
29618,sdm_return_t sdm_block_ref_add(void *p_src),217
29619,int32_t sdm_block_ref_count(void *p_data_in),255
29620,static sdm_return_t comp_config_handle_valid(comp_config_handle_t handle),288
29621,sha_handle_t comp_config_sha_handle_get(comp_config_handle_t handle),299
29622,in_buf_handle_t comp_config_inbuf_handle_get(comp_config_handle_t handle),310
29623,dma_handle_t comp_config_dma_handle_get(comp_config_handle_t handle),321
29624,pkc_handle_t comp_config_pkc_handle_get(comp_config_handle_t handle),332
29625,comp_config_handle_t comp_config_open(bool do_cnoc_reset),343
29626,sdm_return_t bitstream_mod_prevention_test(),386
29627,int main(),447
29628,void sdm_startup(void),463
29629,pmf_state_t get_pmf_state(void),40
29630,pmf_status_t pmf_state_update(pmf_state_event_t event),45
29631,static sdm_return_t run_test_intosc(void) ,51
29632,static sdm_return_t run_test_pll_cnoc_half_speed(void) ,190
29633,static sdm_return_t run_test_pll_cnoc_full_speed(void) ,364
29634,static sdm_return_t run_test_pll_exact_user_clk_enable(void) ,537
29635,static sdm_return_t run_test_pll_exact_user_clk_disable(void) ,710
29636,int main(void),883
29637,sdm_return_t verify_registers(clkmgr_regs_t* clkmgr_registers),927
29638,void sdm_startup(void),1030
29639,pmf_status_t pmf_state_update(pmf_state_event_t event),19
29640,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",25
29641,atpr_freq_t anti_tamper_get_frequency_range(void),29
29642,atpr_enable_t anti_tamper_get_freq_det_enable(void),34
29643,void anti_tamper_enable_status_set(uint32_t mask),39
29644,void anti_tamper_init_status_set(uint32_t mask),43
29645,void anti_tamper_freq_det_handler(),51
29646,"sdm_return_t get_freq_det_cfg(freq_det_cfg_t& freq_det_cfg, uint32_t ext_refclk_mhz, uint32_t tolerance)",57
29647,sdm_return_t wait_for_freq_det_interrupt(void),119
29648,sdm_return_t run_freq_det_init_test(void),144
29649,int main(void),218
29650,void sdm_dead_loop(uint32_t error_code),238
29651,void sdm_startup(void),244
29652,Copyright (2018) Intel Corporation,3
29653,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29654,void dump_read_dma_registers(),27
29655,void dump_write_dma_registers(),92
29656,void dump_input_buffer_registers(),158
29657,Copyright (2018) Intel Corporation,3
29658,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29659,"void memory_dump_32bits_aligned (uint32_t StartAddress, uint32_t Data32Size)",29
29660,"void partial_memory_dump (uint32_t StartAddress, uint32_t BytesOfData)",94
29661,Copyright (2018) Intel Corporation,3
29662,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29663,"void zero_buffer(uint32_t start_address, uint32_t data_size)",28
29664,"void fill_buffer(uint32_t start_address, uint32_t data_pattern_seed, uint32_t data_size)",39
29665,"int verify_buffer(uint32_t start_address, uint32_t dst_addr, uint32_t data_size)",53
29666,Copyright (2018) Intel Corporation,3
29667,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29668,void alt_sdm_outbuf_enable(void),66
29669,void alt_sdm_outbuf_disable(void),90
29670,void disable_sha(void),98
29671,void sdm_crypto_reset(void),107
29672,"static uint32_t aes_gen_key_operation(cmf_aes_resource_t cmf_aes_resource, cmf_key_t *p_key, uint32_t aes_mode, uint32_t test_buffer_size)",126
29673,"static uint32_t aes_operation(cmf_aes_resource_t cmf_aes_resource,cmf_key_t *p_key, uint32_t op_mode, uint32_t aes_mode, uint32_t key_mode, uint32_t aes_dest, uint32_t * data, uint32_t *out_data,",198
29674,int main(),432
29675,void sdm_startup(void),507
29676,Copyright (2018) Intel Corporation,3
29677,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29678,void alt_sdm_outbuf_enable(void),50
29679,"uint32_t aes_gen_ecb_key(cmf_aes_resource_t cmf_aes_resource, ",58
29680,void alt_sdm_outbuf_disable(void),76
29681,void disable_sha(void),84
29682,"void int_test_dump_hex(const void * address, uint32_t size, uint8_t printed)",111
29683,"void test_dump_hex(const void * address, uint32_t size)",136
29684,"static uint32_t aes_operation(cmf_aes_resource_t cmf_aes_resource, cmf_key_t *p_key, uint32_t op_mode, uint32_t aes_mode, uint32_t key_mode, uint32_t *data, uint32_t *out_data,",144
29685,int main(),363
29686,"uint32_t aes_gen_ecb_key(cmf_aes_resource_t cmf_aes_resource, ",429
29687,const uint32_t TRNG_SHORT_DELAY = 0x01;               //[19:16]  2 cycles  (short_delay-1),435
29688,const uint32_t TRNG_LONG_DELAY =  0x03;               //[13:08]  4 cycles (long_delay-1),436
29689,void sdm_startup(void),502
29690,Copyright (2018) Intel Corporation,3
29691,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29692,void dump_read_dma_registers(),27
29693,void dump_write_dma_registers(),92
29694,void dump_input_buffer_registers(),158
29695,Copyright (2018) Intel Corporation,3
29696,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29697,"void memory_dump_32bits_aligned (uint32_t StartAddress, uint32_t Data32Size)",29
29698,"void partial_memory_dump (uint32_t StartAddress, uint32_t BytesOfData)",94
29699,Copyright (2018) Intel Corporation,3
29700,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29701,"void zero_buffer(uint32_t start_address, uint32_t data_size)",28
29702,"void fill_buffer(uint32_t start_address, uint32_t data_pattern_seed, uint32_t data_size)",39
29703,"int verify_buffer(uint32_t start_address, uint32_t dst_addr, uint32_t data_size)",53
29704,uint32_t aes_root_key_data[CMF_CRYPTO_256b_WORD_SIZE]__attribute__ ((aligned(4))) =,67
29705,uint32_t aes_user_root_key[CMF_CRYPTO_256b_WORD_SIZE] __attribute__ ((aligned(8))) = {,78
29706,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",90
29707,"void populate_response_buf(uint32_t *buffer, ALT_SDM_MBOX_RESP_CODE code, uint32_t len)",97
29708,void sdm_dead_loop(uint32_t error_code),104
29709,void cmf_provision_sm_post(cmf_provision_sm_event_t event),108
29710,void set_cmd_buffer(bbram_wrapping_key_t bbram_key_type),112
29711,void print_g_command_buffer(),159
29712,bool check_bbram_gp_read(bbram_wrapping_key_t bbram_key_type),169
29713,int main(),180
29714,void sdm_startup(void),279
29715,"void populate_response_buf(uint32_t *buffer, ALT_SDM_MBOX_RESP_CODE code, uint32_t len)",114
29716,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",125
29717,that cmf_dead_loop() has.,135
29718,void sdm_dead_loop(uint32_t error_code),137
29719,void cmf_provision_sm_post(cmf_provision_sm_event_t event),143
29720,int sysinit_main(void),151
29721,void set_cmd_buffer(),156
29722,int main(),195
29723,void sdm_startup(void),254
29724,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",55
29725,void test_reset_peripherals(void),64
29726,void sdm_dead_loop(uint32_t error_code),108
29727,void set_cmd_buffer(bool is_virtual_mode),114
29728,int main(),148
29729,void sdm_startup(void),217
29730,void sdm_early_init(void){;},9
29731,static sdm_return_t run_test(void),12
29732,int main(void),18
29733,void sdm_startup(void),29
29734,void sdm_early_init(void){;},37
29735,bool hal_has_hps(void),40
29736,"void blt_cnoc_scramble_enable(cnoc_scramble_ratio_t ratio, bool crc_en)",46
29737,bool cnoc_scramble_is_enabled(cnoc_handle_t handle),65
29738,void blt_cnoc_return_select_crypto( ),70
29739,int32_t blt_cnoc_cpu_msg_ready(void),78
29740,void blt_cnoc_scramble_disable(),88
29741,static void print_inbuf_regs(in_buf_handle_t in_buf_handler),102
29742,static sdm_return_t blt_config_cnoc_scramble_loopback(crypto_context_t *p_blt_cnoc_scr_ctx ),114
29743,static sdm_return_t run_test(void),191
29744,int main(void),236
29745,void sdm_startup(void),253
29746,void blt_start(void){,31
29747,void blt_latch_timer_start(){,38
29748,void blt_latch_timer_end(){,47
29749,uint32_t blt_get_timer_delta_lo(){,56
29750,uint32_t blt_get_timer_delta_hi(){,65
29751,"void blt_printf(const char * format, ... )",69
29752,"int printf ( const char * format, ... )",85
29753,int puts ( const char * str ){,100
29754,"void blt_dump_memory_words(const uint32_t * const data, const uint32_t nwords)",104
29755,void blt_done(uint32_t result),117
29756,uint32_t g_encrypted_section_key[CMF_CRYPTO_256b_WORD_SIZE] __attribute__ ((aligned(8))) = {,52
29757,void sdm_crypto_reset(void),91
29758,"void swizzle_data(uint32_t * source_data, uint32_t * dest_data, uint32_t size_in_words)",116
29759,static void cmf_config_aes_test_hw_init(),139
29760,"static void aes_section_key_test_configure_main_desc(uint8_t number_intrmd_keys,",178
29761,"static sdm_return_t store_data_to_inbuf(uint32_t *p_data, uint32_t size_bytes, uint32_t fifo)",277
29762,"sdm_return_t comp_config_get_keys_and_challenge_block(comp_config_handle_t handle, uint32_t *key_ram_buffer, ",285
29763,uint32_t cmf_config_aes_configure_root_key(uint32_t * p_root_key),362
29764,"sdm_return_t cmf_config_aes_verify_key(uint32_t * data_buffer, uint32_t size_in_bytes, cmf_aes_data_source_t fifo,",414
29765,uint32_t cmf_config_aes_section_key_test__zero_intermed_keys(void),484
29766,uint32_t cmf_config_aes_section_key_test__one_intermed_keys(void),582
29767,uint32_t cmf_config_aes_section_key_test__three_intermed_keys(void),716
29768,uint32_t cmf_config_aes_section_key_test__bitsream_content(void),850
29769,uint32_t cmf_config_aes_section_key_test__swizzled_keys(void),1149
29770,int main(),1374
29771,void sdm_startup(void),1418
29772,comp_config_handle_t comp_config_open(bool do_cnoc_reset),1423
29773,"sdm_return_t comp_config_get_skip_block(comp_config_handle_t handle, uint32_t *p_data, uint32_t size_in_bytes, in_buf_select_t fifo)",1428
29774,sdm_return_t comp_config_close(comp_config_handle_t handle),1433
29775,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",28
29776,"/*void print_inbuf_content(uint32_t size_in_words, in_buf_select_t fifo)",51
29777,void sdm_crypto_reset(void),88
29778,/*sdm_return_t altera_sdm_read_aes_fuses(const uint32_t favor),106
29779,void cmf_keys_fifo_get_key_test_hw_init(),111
29780,"sdm_return_t store_data_to_inbuf(uint32_t *p_data, uint32_t size_bytes, uint32_t fifo)",139
29781,"sdm_return_t comp_config_get_keys_and_challenge_block(comp_config_handle_t handle, uint32_t *key_ram_buffer, ",238
29782,/*if(packet_keys_get_mode_decrypt == false),252
29783,sdm_return_t cmf_keys_fifo_get_key_test__init_test(void),372
29784,sdm_return_t cmf_keys_fifo_get_key_test__get_key(void),405
29785,int main(void),761
29786,void sdm_startup(void),802
29787,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",28
29788,sdm_return_t altera_sdm_read_aes_fuses(const uint32_t favor),54
29789,void sdm_crypto_reset(void),60
29790,void init_hw(void),78
29791,"sdm_return_t store_data_to_inbuf(uint32_t *p_data, uint32_t size_bytes, uint32_t fifo)",112
29792,"sdm_return_t comp_config_get_keys_and_challenge_block(comp_config_handle_t handle, uint32_t *key_ram_buffer, ",206
29793,"/*sdm_return_t comp_config_get_skip_block_and_hash_discard(comp_config_handle_t handle, uint32_t *key_ram_buffer, uint32_t size, in_buf_select_t fifo)",326
29794,sdm_return_t config_keys_block_in_keys_fifo(uint32_t num_keys_in_block),346
29795,sdm_return_t config_padding_in_keys_fifo(uint32_t num_padding_keys_in_block),392
29796,sdm_return_t config_encrypted_data_in_cpu_fifo(uint32_t num_data_blocks_in_fifo),423
29797,sdm_return_t cmf_keys_fifo_get_key_test__process_keys_block(void),454
29798,int main(void),706
29799,void sdm_startup(void),724
29800,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",30
29801,sdm_return_t altera_sdm_read_aes_fuses(const uint32_t favor),98
29802,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",104
29803,/*uint32_t cmf_efuse_get_key_disable_value(cmf_efuse_aes_root_key_disable_slct_t key),112
29804,bool cmf_persistent_get_efuse_write_disabled(void),117
29805,bool is_user_root_pubkey_blown(void),124
29806,"/*sdm_return_t comp_config_get_skip_block_and_hash_discard(comp_config_handle_t handle, uint32_t *key_ram_buffer, uint32_t size, in_buf_select_t fifo)",131
29807,"void swizzle_data(uint32_t * source_data, uint32_t * dest_data, uint32_t size_in_words)",137
29808,"void swizzle_key_cipher(const uint32_t *const p_source,",158
29809,void sdm_crypto_reset(void),189
29810,static void cmf_config_aes_test_hw_init(),208
29811,"static sdm_return_t store_data_to_inbuf(uint32_t *p_data, uint32_t size_bytes, uint32_t fifo)",242
29812,"static sdm_return_t aes_operation(uint32_t *key_ram_buffer, uint32_t input_size)",335
29813,"sdm_return_t comp_config_get_keys_and_challenge_block(comp_config_handle_t handle, uint32_t *key_ram_buffer, ",446
29814,"static sdm_return_t aes_decrypt_operation(uint32_t *key_ram_buffer, uint32_t input_size)",474
29815,sdm_return_t cmf_config_aes_configure_root_key(uint32_t * p_root_key),498
29816,sdm_return_t keys_fifo_key_update_for_keys_block_test(),569
29817,"uint32_t cmf_config_aes_verify_key(uint32_t * data_buffer,",846
29818,uint32_t biyun_test(),924
29819,int main(void),1009
29820,void sdm_startup(void),1030
29821,Copyright (2017) Intel Corporation,3
29822,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29823,void alt_sdm_inbuf_memmode_enable(void),45
29824,void alt_sdm_inbuf_memmode_disable(void),58
29825,static void dma_wr_id_update(),70
29826,void alt_sdm_sha_disable(void),79
29827,"void alt_sdm_sha_read(uint32_t *hash, uint32_t size)",84
29828,void alt_sdm_sha_last(void),115
29829,void alt_sdm_inbuf_sha_enable(bool enable),120
29830,sdm_return_t alt_sdm_dma_wr_stop(void),153
29831,void alt_sdm_sha_init(void),185
29832,static bool sdm_dma_ptr_valid(void * ptr),209
29833,void alt_sdm_dma_rd_resume(void),235
29834,bool alt_sdm_dma_rd_desc_full(void),240
29835,bool alt_sdm_dma_rd_active(void),249
29836,int32_t p(void),263
29837,"int32_t alt_sdm_dma_rd_nsp_ram(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt)",297
29838,static void dma_rd_id_update(),350
29839,"uint32_t alt_sdm_dma_rd_send_desc(uint32_t *p_src, uint32_t size,",383
29840,uint32_t  alt_sdm_inbuf_is_busy(void),475
29841,void alt_sdm_sha_enable(uint32_t mode),481
29842,void alt_sdm_sha_int_clear(uint32_t mask),493
29843,uint32_t alt_sdm_dma_rd_status(void),498
29844,uint32_t alt_sdm_sha_int_status_unmasked(void),503
29845,void alt_sdm_sha_int_disable(uint32_t mask),509
29846,void alt_sdm_dma_rd_init(sdm_dma_bus_t bus),514
29847,void alt_sdm_inbuf_src_dma(void),537
29848,void alt_sdm_inbuf_pb_go_set(void),544
29849,void alt_sdm_inbuf_pb_get_data(uint32_t in_count),550
29850,void alt_sdm_inbuf_go_set(void),557
29851,void alt_sdm_inbuf_get_data(uint32_t in_count),562
29852,void cmf_dma_init(void),576
29853,void cmf_dma_wr_done_set(bool val),582
29854,bool cmf_dma_wr_done_status(void),587
29855,void cmf_dma_rd_done_set(bool val),604
29856,"void alt_sdm_inbuf_mode(uint32_t input, uint32_t fifo_in, uint32_t fifo_out)",609
29857,void alt_sdm_inbuf_sink_enable(void),623
29858,void alt_sdm_inbuf_init(void),628
29859,"void cmf_timeout_init(uint32_t timeout_value, cmf_timeout_t *timeout)",723
29860,bool cmf_timeout(const cmf_timeout_t *timeout),758
29861,void cmf_delay(uint32_t timeout_value),797
29862,void alt_sdm_dma_wr_int_clear(void),813
29863,void alt_sdm_dma_wr_int_disable(void),829
29864,void alt_sdm_dma_wr_int_enable(void),846
29865,uint32_t alt_sdm_dma_wr_status(void),863
29866,sdm_dma_bus_t alt_sdm_dma_wr_bus_get(void),873
29867,void alt_sdm_dma_wr_init(sdm_dma_bus_t bus),887
29868,bool alt_sdm_dma_wr_active(void),907
29869,"int32_t alt_sdm_dma_wr_nsp_ram(uint32_t *pDest, uint32_t size, uint32_t enable_interrupt)",921
29870,void alt_sdm_dma_wr_resume(void),986
29871,bool alt_sdm_dma_wr_desc_full(void),996
29872,@note The \e size value must be an integer multiple of the (burst size * 8).,1018
29873,"uint32_t alt_sdm_dma_wr_send_desc(uint32_t *p_dest, uint32_t size, uint32_t flags, uint32_t burst)",1027
29874,uint32_t alt_sdm_dma_wr_get_desc_remain(void),1114
29875,uint32_t alt_sdm_dma_rd_get_desc_remain(void),1124
29876,void alt_sdm_dma_rd_int_disable(void),1129
29877,void alt_sdm_dma_rd_int_clear(void),1137
29878,void alt_sdm_dma_rd_int_enable(void),1145
29879,int32_t alt_sdm_dma_rd_stop(void),1153
29880,void alt_sdm_inbuf_src_set(uint32_t inbuf_src),1187
29881,static void __inline alt_sdm_inbuf_sink_disable(void),1198
29882,void alt_sdm_sha_int_enable(uint32_t mask),1203
29883,sdm_dma_bus_t alt_sdm_dma_rd_bus_get(void),1208
29884,uint32_t alt_sdm_inbuf_src_get(void),1222
29885,uint32_t switch_word_endianess(const uint32_t num),1231
29886,"sdm_return_t alt_sdm_sha_sw_finalized(uint32_t * const msg,",1248
29887,"sdm_return_t alt_sdm_sha_ram_region(uint32_t *p_data, uint32_t size_bytes, uint32_t sha_type)",1613
29888,static sdm_return_t aes_test_bypass_mode(),41
29889,int main(),157
29890,void sdm_startup(void),181
29891,static sdm_return_t aes_cbc_test(),28
29892,int main(),146
29893,void sdm_startup(void),164
29894,static sdm_return_t aes_ctr_test(),28
29895,int main(),146
29896,void sdm_startup(void),164
29897,static sdm_return_t aes_ecb_test(),28
29898,int main(),146
29899,void sdm_startup(void),164
29900,static sdm_return_t aes_enc_dec_test(),44
29901,int main(),189
29902,void sdm_startup(void),214
29903,static sdm_return_t aes_enc_dec_test(),44
29904,int main(),182
29905,void sdm_startup(void),207
29906,Copyright (2018) Intel Corporation,3
29907,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29908,static sdm_return_t aes_key_as_data_test(),51
29909,int main(),282
29910,void sdm_startup(void),307
29911,Copyright (2021) Intel Corporation,3
29912,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29913,static sdm_return_t aes_key_wrap_test(),60
29914,int main(),247
29915,void sdm_startup(void),272
29916,Copyright (2018) Intel Corporation,3
29917,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29918,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t line)",42
29919,"void sdm_trace_dont_call(sdm_trace_key_t key, const void *ptr)",46
29920,sdm_return_t altera_sdm_read_aes_fuses(const uint32_t favor),55
29921,"static sdm_return_t aes_operation(cmf_aes_resource_t cmf_aes_resource, cmf_key_t *p_key, cmf_aes_opmode_t op_mode, cmf_aes_cipher_t aes_mode, uint32_t key_mode, uint32_t * data, uint32_t *out_data,",60
29922,"sdm_return_t init_and_alloc_slot(cmf_key_t* p_key, cmf_mpi_t* p_mpi, cmf_key_id_t key_id, uint32_t * p_data)",194
29923,int main(),215
29924,void sdm_startup(void),314
29925,Copyright (2018) Intel Corporation,3
29926,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29927,"void zero_buffer(uint32_t start_address, uint32_t data_size)",29
29928,"void fill_buffer(uint32_t start_address, uint32_t data_pattern_seed, uint32_t data_size)",40
29929,"int verify_buffer(uint32_t start_address, uint32_t dst_addr, uint32_t data_size)",54
29930,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",50
29931,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",56
29932,sdm_return_t test_reset_peripherals(),88
29933,void keyzerorization_test_hw_init(crypto_context_t* crypto_ctx),132
29934,static sdm_return_t cmf_aes_ecb_decrypt_test(const crypto_context_t * const crypto_ctx),204
29935,static sdm_return_t cmf_aes_ecb_encrypt_test(const crypto_context_t * const crypto_ctx),454
29936,int main(),687
29937,void sdm_startup(void),724
29938,Copyright (2018) Intel Corporation,3
29939,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29940,uint32_t aes_user_root_key[SDM_256b_WORD_SIZE] __attribute__ ((aligned(8))) = {,52
29941,uint32_t efuse_wrapping_key[8] __attribute__ ((aligned(8))) = {,63
29942,uint32_t wrapped_key_all_1_output[8] __attribute__ ((aligned(8))) = {,74
29943,uint32_t unwrapped_key_all_1_output[8] __attribute__ ((aligned(8))) = {,85
29944,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t line)",96
29945,"void sdm_trace_dont_call(sdm_trace_key_t key, const void *ptr)",100
29946,bool persistent_get_efuse_write_disabled(void),109
29947,sdm_return_t persistent_set_security_version(uint32_t security_version),114
29948,uint32_t persistent_get_security_version(void),121
29949,void persistent_set_aes_root_key_virtual_mode(void),126
29950,bool persistent_get_aes_root_key_virtual_mode(void),131
29951,static sdm_return_t dma_to_nsp_ram(uint32_t * p_data),138
29952,"sdm_return_t cmf_hmac_kdf(const cmf_hmac_type_t      hmac_type,",215
29953,void test_env_init(),230
29954,void set_cmd_buffer(uint32_t is_virtual),258
29955,"sdm_return_t cmf_dimk_derive_intel_aes_wrapping_key(uint32_t dimk_id, cmf_key_id_t slot)",294
29956,"sdm_return_t cmf_dimk_derive_user_aes_wrapping_key(uint32_t dimk_id, cmf_key_t * ouput_key,     const char * label,",299
29957,void clear_buffers(void),317
29958,sdm_return_t aes_efuse_root_mbox_physical_efuse_test(),326
29959,sdm_return_t aes_efuse_root_mbox_test(),355
29960,void print_key(uint32_t * key),562
29961,"sdm_return_t compare_output_to_expected(uint32_t * key_output, uint32_t * key_expected)",570
29962,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",586
29963,int main(),596
29964,void sdm_startup(void),620
29965,"const uint8_t  metal_equiv_key[32] __attribute__ ((aligned(8))) = {0xcb, 0xad, 0x89, 0x83, 0x04, 0x0a, 0x7b, 0x30,",10
29966,"uint8_t root_key_hash[48] __attribute__ ((aligned(8))) = {  0x5c, 0x54, 0xb9, 0xa1, 0x2d, 0x15, 0xc4, 0xca,",15
29967,"uint8_t context_data[24] __attribute__ ((aligned(8))) = { 0x88, 0x88, 0x88, 0x88,",22
29968,uint32_t get_len(const char * text),29
29969,"void reverse_word_array(uint32_t * arr, int len)",42
29970,void override_hmac_parameters(const dimk_check_data_t * const entry),62
29971,Copyright (2019) Intel Corporation,3
29972,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29973,"static sdm_return_t test_sha(crypto_context_t *const ctx, sha_csr_size_t sha_type,",47
29974,static sdm_return_t test_sha_256_long_misaligned(crypto_context_t *const ctx),112
29975,static sdm_return_t test_sha_256_long(crypto_context_t *const ctx),135
29976,static sdm_return_t test_sha_256_tiny(crypto_context_t *const ctx),158
29977,static sdm_return_t test_sha_256_short(crypto_context_t *const ctx),182
29978,static sdm_return_t test_sha_384_long_misaligned(crypto_context_t *const ctx),205
29979,static sdm_return_t test_sha_384_long(crypto_context_t *const ctx),232
29980,static sdm_return_t test_sha_384_short(crypto_context_t *const ctx),261
29981,static sdm_return_t test_sha_512_tiny(crypto_context_t *const ctx),290
29982,static sdm_return_t test_sha_512_long(crypto_context_t *const ctx),323
29983,static sdm_return_t test_sha_512_short(crypto_context_t *const ctx),356
29984,int main(void),396
29985,void sdm_startup(void),521
29986,const uint8_t  boot_dimk[32] __attribute__ ((aligned(8))) = {,12
29987,const uint8_t  metal_equiv_key[32] __attribute__ ((aligned(8))) = {,19
29988,const uint8_t root_key_hash[48] __attribute__ ((aligned(8))) = {,26
29989,const uint8_t context_data[24] __attribute__ ((aligned(8))) = {,35
29990,uint32_t get_len(const char * text),44
29991,"void reverse_word_array(uint32_t * arr, int len)",57
29992,void override_hmac_parameters(const dimk_check_data_t * const entry),77
29993,"sdm_return_t send_key_to_ram(crypto_context_t* const ctx, uint32_t *p_data)",106
29994,Copyright (2019) Intel Corporation,3
29995,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
29996,void sdm_early_init(void){;},44
29997,sdm_return_t persistent_set_security_version(uint32_t security_version),49
29998,uint32_t persistent_get_security_version(void),56
29999,uint32_t cmf_dimk_test_boot_dimk(const dimk_check_data_t * const entry),61
30000,int main(),193
30001,void sdm_startup(void),214
30002,Copyright (2019) Intel Corporation,3
30003,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30004,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t line)",49
30005,"void sdm_trace_dont_call(sdm_trace_key_t key, const void *ptr)",53
30006,void sdm_early_init(void){;},59
30007,sdm_return_t persistent_set_security_version(uint32_t security_version),61
30008,uint32_t persistent_get_security_version(void),68
30009,static uint32_t cmf_dimk_efuse_wrap_key_test(const dimk_check_data_t * const entry),73
30010,int main(),215
30011,void sdm_startup(void),255
30012,Copyright (2019) Intel Corporation,3
30013,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30014,void sdm_early_init(void){;},41
30015,sdm_return_t persistent_set_security_version(uint32_t security_version),45
30016,uint32_t persistent_get_security_version(void),52
30017,"static uint32_t run_test(const crypto_context_t * const ctx, uint32_t sec_version, uint32_t * exp_key_check, uint32_t error_code)",58
30018,static uint32_t cmf_dimk_get_metal_check_test(uint32_t error_code),99
30019,int main(),188
30020,void sdm_startup(void),203
30021,Copyright (2019) Intel Corporation,3
30022,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30023,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t line)",40
30024,"void sdm_trace_dont_call(sdm_trace_key_t key, const void *ptr)",44
30025,sdm_return_t cmf_dimk_generate_dimk(,51
30026,void sdm_early_init(void){;},57
30027,static uint32_t cmf_dimk_hmac_validate_mek(void),63
30028,int main(),165
30029,void sdm_startup(void),182
30030,Copyright (2019) Intel Corporation,3
30031,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30032,"void sdm_trace_dont_call(sdm_trace_key_t key, const void *ptr)",44
30033,void sdm_early_init(void){;},68
30034,"sdm_return_t cmf_swizzle_data_block(const uint32_t *const p_source,",74
30035,"void multiword_copy(uint32_t* dest, const uint32_t* const src, uint32_t count_words)",106
30036,"bool sdm_ram_ptr_valid(const void * const ptr, const uint32_t size)",111
30037,"sdm_return_t sdm_memset(void *const p_dest,",135
30038,"sdm_return_t sdm_memcpy(void *const p_dest,",150
30039,void sdm_block_free(void *p_free),178
30040,sdm_return_t altera_sdm_read_aes_fuses(const uint32_t favor),220
30041,bool sdm_block_ptr_is_valid(const void *ptr_to_chk),225
30042,void sdm_block_alloc_init(void),239
30043,void *sdm_block_alloc_entry(uint32_t index),249
30044,void * sdm_block_alloc(void),261
30045,sdm_return_t sdm_block_ref_add(void *p_src),282
30046,int32_t sdm_block_ref_count(void *p_data_in),320
30047,static sdm_return_t test_hmac_256_phased(crypto_context_t * const ctx),350
30048,static sdm_return_t test_hmac_256_basic(crypto_context_t * const ctx),423
30049,static sdm_return_t test_hmac_384_basic(crypto_context_t * const ctx),538
30050,static sdm_return_t test_hmac_512_basic(crypto_context_t *const ctx),665
30051,static sdm_return_t test_hmac_256_ukv_basic(crypto_context_t * const ctx),803
30052,static sdm_return_t test_hmac_384_ukv_basic(crypto_context_t * const ctx),903
30053,static sdm_return_t test_hmac_512_ukv_basic(crypto_context_t * const ctx),1009
30054,static sdm_return_t test_hmac_384_to_256_ukv(crypto_context_t * const ctx),1122
30055,int main(void),1226
30056,void sdm_startup(void),1425
30057,Copyright (2019) Intel Corporation,3
30058,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30059,void sdm_early_init(void){;},50
30060,"sdm_return_t cmf_swizzle_data_block(const uint32_t *const p_source,",56
30061,static sdm_return_t test_hmac_kdf_256(crypto_context_t * const ctx),88
30062,static sdm_return_t test_hmac_kdf_384(crypto_context_t * const ctx),161
30063,int main(void),240
30064,void sdm_startup(void),314
30065,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",41
30066,"uint32_t hal_multiword_compare_asm(uint32_t* a, uint32_t* b, uint32_t zero_4_one_8)",50
30067,void crypto_key_test_init(void),56
30068,sdm_return_t crypto_session_open(uint32_t *session_id),63
30069,sdm_return_t crypto_session_close(uint32_t session_id),90
30070,"sdm_return_t crypto_key_import_plaintext_aes_128_test(uint32_t session_id, uint32_t key_id)",105
30071,"sdm_return_t crypto_key_import_plaintext_aes_256_test(uint32_t session_id, uint32_t key_id)",153
30072,"sdm_return_t crypto_key_import_plaintext_hmac_256_test(uint32_t session_id, uint32_t key_id)",201
30073,"sdm_return_t crypto_key_import_plaintext_hmac_384_test(uint32_t session_id, uint32_t key_id)",249
30074,"sdm_return_t crypto_key_import_plaintext_hmac_512_test(uint32_t session_id, uint32_t key_id)",305
30075,"sdm_return_t crypto_key_import_plaintext_ecc_256_test(uint32_t session_id, uint32_t key_id)",361
30076,"sdm_return_t crypto_key_import_plaintext_ecc_384_test(uint32_t session_id, uint32_t key_id, uint32_t key_type, uint32_t key_usage)",409
30077,"sdm_return_t crypto_key_import_dimk_aes_256_test(uint32_t session_id, uint32_t key_id)",465
30078,"sdm_return_t crypto_key_remove_test(uint32_t session_id, uint32_t key_id)",534
30079,int crypto_key_test_import_plaintext(void),552
30080,int crypto_key_test_import_wrapped(void),656
30081,int crypto_key_test_remove(void),690
30082,int main(void),740
30083,void sdm_startup(void),781
30084,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",40
30085,sdm_return_t sdos_crypto_setup(,49
30086,void sdos_crypto_teardown(,76
30087,sdm_return_t sdos_decryption_validate(,83
30088,sdm_return_t sdos_encryption_validate(,115
30089,sdm_return_t sdos_encryption_test_32(void),147
30090,sdm_return_t sdos_encryption_test_4k(void),260
30091,sdm_return_t sdos_encryption_test_6k(void),373
30092,sdm_return_t sdos_encryption_test_8k(void),486
30093,sdm_return_t sdos_encryption_test_invalid_header(void),599
30094,int main(void),708
30095,void sdm_startup(void),756
30096,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",33
30097,void crypto_session_test_init(void),42
30098,sdm_return_t crypto_session_open_test(uint32_t session_id),49
30099,sdm_return_t crypto_session_close_test(uint32_t session_id),63
30100,int main(void),78
30101,void sdm_startup(void),160
30102,Copyright (2017) Intel Corporation,3
30103,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30104,void alt_sdm_inbuf_memmode_enable(void),45
30105,void alt_sdm_inbuf_memmode_disable(void),58
30106,static void dma_wr_id_update(),70
30107,void alt_sdm_sha_disable(void),79
30108,"void alt_sdm_sha_read(uint32_t *hash, uint32_t size)",84
30109,void alt_sdm_sha_last(void),115
30110,void alt_sdm_inbuf_sha_enable(bool enable),120
30111,sdm_return_t alt_sdm_dma_wr_stop(void),153
30112,void alt_sdm_sha_init(void),185
30113,static bool sdm_dma_ptr_valid(void * ptr),209
30114,void alt_sdm_dma_rd_resume(void),235
30115,bool alt_sdm_dma_rd_desc_full(void),240
30116,bool alt_sdm_dma_rd_active(void),249
30117,int32_t p(void),263
30118,"int32_t alt_sdm_dma_rd_nsp_ram(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt)",297
30119,static void dma_rd_id_update(),350
30120,"uint32_t alt_sdm_dma_rd_send_desc(uint32_t *p_src, uint32_t size,",383
30121,uint32_t  alt_sdm_inbuf_is_busy(void),475
30122,void alt_sdm_sha_enable(uint32_t mode),481
30123,void alt_sdm_sha_int_clear(uint32_t mask),493
30124,uint32_t alt_sdm_dma_rd_status(void),498
30125,uint32_t alt_sdm_sha_int_status_unmasked(void),503
30126,void alt_sdm_sha_int_disable(uint32_t mask),509
30127,void alt_sdm_dma_rd_init(sdm_dma_bus_t bus),514
30128,void alt_sdm_inbuf_src_dma(void),537
30129,void alt_sdm_inbuf_pb_go_set(void),544
30130,void alt_sdm_inbuf_pb_get_data(uint32_t in_count),550
30131,void alt_sdm_inbuf_go_set(void),557
30132,void alt_sdm_inbuf_get_data(uint32_t in_count),562
30133,void cmf_dma_init(void),576
30134,void cmf_dma_wr_done_set(bool val),582
30135,bool cmf_dma_wr_done_status(void),587
30136,void cmf_dma_rd_done_set(bool val),604
30137,"void alt_sdm_inbuf_mode(uint32_t input, uint32_t fifo_in, uint32_t fifo_out)",609
30138,void alt_sdm_inbuf_sink_enable(void),623
30139,void alt_sdm_inbuf_init(void),628
30140,"void cmf_timeout_init(uint32_t timeout_value, cmf_timeout_t *timeout)",723
30141,bool cmf_timeout(const cmf_timeout_t *timeout),758
30142,void cmf_delay(uint32_t timeout_value),797
30143,void alt_sdm_dma_wr_int_clear(void),813
30144,void alt_sdm_dma_wr_int_disable(void),829
30145,void alt_sdm_dma_wr_int_enable(void),846
30146,uint32_t alt_sdm_dma_wr_status(void),863
30147,sdm_dma_bus_t alt_sdm_dma_wr_bus_get(void),873
30148,void alt_sdm_dma_wr_init(sdm_dma_bus_t bus),887
30149,bool alt_sdm_dma_wr_active(void),907
30150,"int32_t alt_sdm_dma_wr_nsp_ram(uint32_t *pDest, uint32_t size, uint32_t enable_interrupt)",921
30151,void alt_sdm_dma_wr_resume(void),986
30152,bool alt_sdm_dma_wr_desc_full(void),996
30153,@note The \e size value must be an integer multiple of the (burst size * 8).,1018
30154,"uint32_t alt_sdm_dma_wr_send_desc(uint32_t *p_dest, uint32_t size, uint32_t flags, uint32_t burst)",1027
30155,uint32_t alt_sdm_dma_wr_get_desc_remain(void),1114
30156,uint32_t alt_sdm_dma_rd_get_desc_remain(void),1124
30157,void alt_sdm_dma_rd_int_disable(void),1129
30158,void alt_sdm_dma_rd_int_clear(void),1137
30159,void alt_sdm_dma_rd_int_enable(void),1145
30160,int32_t alt_sdm_dma_rd_stop(void),1153
30161,void alt_sdm_inbuf_src_set(uint32_t inbuf_src),1187
30162,static void __inline alt_sdm_inbuf_sink_disable(void),1198
30163,void alt_sdm_sha_int_enable(uint32_t mask),1203
30164,sdm_dma_bus_t alt_sdm_dma_rd_bus_get(void),1208
30165,uint32_t alt_sdm_inbuf_src_get(void),1222
30166,uint32_t switch_word_endianess(const uint32_t num),1231
30167,"sdm_return_t alt_sdm_sha_sw_finalized(uint32_t * const msg,",1248
30168,"sdm_return_t alt_sdm_sha_ram_region(uint32_t *p_data, uint32_t size_bytes, uint32_t sha_type)",1613
30169,void sdm_early_init(void){;},9
30170,static sdm_return_t run_test(void),12
30171,int main(void),26
30172,void sdm_startup(void),39
30173,void sdm_early_init(void){;},16
30174,int main(void),28
30175,"static sdm_return_t setup_input_buffer(in_buf_handle_t in_buf_handle, uint32_t size_in_words)",144
30176,"static sdm_return_t setup_read_dma(dma_handle_t handle, uint32_t *data, uint32_t size_in_words)",183
30177,static void print_inbuf_regs(in_buf_handle_t in_buf_handle),205
30178,void sdm_startup(void),218
30179,void sdm_early_init(void){;},16
30180,int main(void),30
30181,"static sdm_return_t setup_input_buffer(in_buf_handle_t in_buf_handle, uint32_t size_in_words)",160
30182,"static sdm_return_t setup_read_dma(dma_handle_t handle, uint32_t *data, uint32_t size_in_words)",199
30183,static void print_inbuf_regs(in_buf_handle_t in_buf_handle),221
30184,void sdm_startup(void),234
30185,void sdm_early_init(void){;},17
30186,int main(void),22
30187,"static sdm_return_t setup_input_buffer(in_buf_handle_t in_buf_handle, uint32_t size_in_words)",187
30188,void sdm_startup(void),227
30189,void sdm_early_init(void){;},17
30190,int main(void),32
30191,"static sdm_return_t setup_input_buffer(in_buf_handle_t in_buf_handle, uint32_t size_in_words)",198
30192,static void print_inbuf_regs(in_buf_handle_t in_buf_handle),236
30193,void sdm_startup(void),249
30194,void sdm_early_init(void){;},17
30195,int main(void),32
30196,"static sdm_return_t setup_input_buffer(in_buf_handle_t in_buf_handle, uint32_t size_in_words)",209
30197,static void print_inbuf_regs(in_buf_handle_t in_buf_handle),247
30198,void sdm_startup(void),260
30199,Copyright (2020) Intel Corporation,4
30200,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
30201,sdm_return_t get_driver_handles(crypto_context_t *crypto_context),36
30202,sdm_return_t free_driver_handles(crypto_context_t *crypto_context),83
30203,Copyright (2018) Intel Corporation,3
30204,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30205,void init_test_env(),30
30206,void stop_test_return(uint32_t return_test_error_level_code),38
30207,void testenv_putc(char c),67
30208,void testenv_putc(char c),74
30209,void testenv_puts(char *s),83
30210,void testenv_puth(unsigned n),91
30211,"void testenv_printf(char *format, ...)",97
30212,"void memory_dump_32bits_aligned (uint32_t StartAddress, uint32_t Data32Size)",169
30213,"void partial_memory_dump (uint32_t StartAddress, uint32_t BytesOfData)",233
30214,Copyright (2020) Intel Corporation,3
30215,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30216,sdm_return_t hal_efuse_read_aes_fuses(const uint32_t favor),43
30217,Private-Key: (384 bit),61
30218,const uint8_t private_secp384[SDM_384b_BYTE_SIZE] __attribute__ ((aligned(4))) = {,98
30219,const uint8_t pubkey_x_secp384[SDM_384b_BYTE_SIZE] __attribute__ ((aligned(4))) = {,105
30220,const uint8_t pubkey_y_secp384[SDM_384b_BYTE_SIZE] __attribute__ ((aligned(4))) = {,112
30221,sdm_return_t get_driver_handles(crypto_context_t *crypto_context),145
30222,sdm_return_t free_driver_handles(crypto_context_t *crypto_context),192
30223,"void test_dump(const uint32_t* buffer, uint32_t n)",221
30224,"static void test_bigendian_half(uint8_t* buffer, uint32_t n)",232
30225,"static void test_bigendian_double(uint8_t* buffer, uint32_t n)",244
30226,"static test_ecp_chain_ret_t test_cmf_ecp_chain(const crypto_context_t  *const p_crypto_context,",250
30227,int main(),359
30228,void sdm_startup(void),538
30229,Copyright (2020) Intel Corporation,3
30230,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30231,"sdm_return_t test_gen_keypair(const crypto_context_t  *const p_crypto_context,",173
30232,int main(),332
30233,void sdm_startup(void),385
30234,Copyright (2020) Intel Corporation,3
30235,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30236,"void ecdsasign_test_print_data(uint32_t word_length, uint32_t *p_data)",111
30237,"sdm_return_t ecdsasign_data_compare(uint32_t length, uint32_t *expected_addr, uint32_t *actual_addr)",121
30238,"sdm_return_t ecdsa_sign_operation(crypto_context_t *p_crypto_context,",147
30239,sdm_return_t ecdsa_sign_deterministic_test(crypto_context_t  *p_crypto_context),275
30240,sdm_return_t ecdsa_sign_non_deterministic_test(crypto_context_t  *p_crypto_context),349
30241,sdm_return_t ecdsasign_test(void),425
30242,int main(void),517
30243,void sdm_startup(void),532
30244,Copyright (2019) Intel Corporation,3
30245,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30246,"static test_ecp_multiply_ret_t test_cmf_ecp_multiply(const crypto_context_t  *const p_crypto_context,",214
30247,int main(),330
30248,void sdm_startup(void),386
30249,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",31
30250,sdm_return_t pmf_state_update(pmf_state_event_t event),36
30251,bool gpio_is_pin_deasserted(uint32_t pin) ,43
30252,sdm_return_t gpio_pin_clr(uint32_t val),46
30253,sdm_return_t init_peripherals(),51
30254,static bool is_reason_tamper_freq(),94
30255,sdm_return_t wait_for_freq_det_interrupt(void),101
30256,void cleanup(),147
30257,sdm_return_t setup_test_environment(),167
30258,int main(),202
30259,void sdm_dead_loop(uint32_t error_code),282
30260,void sdm_startup(void),287
30261,void sdm_early_init(void){;},11
30262,void gpio_monitor_isr(void *context),15
30263,static sdm_return_t run_test(void),22
30264,int main(void),40
30265,void sdm_startup(void),53
30266,int main(void),44
30267,void sdm_startup(void),220
30268,int main(void),45
30269,void sdm_startup(void),205
30270,int main(void),45
30271,void sdm_startup(void),204
30272,int main(void),45
30273,void sdm_startup(void),137
30274,"static sdm_return_t cmf_iid_puf_wrap_assemble_wrap_data(const crypto_context_t* const ctx, cmf_iid_puf_wrapped_aes_key_data_t *const wrapped_aes_key_data)",22
30275,"sdm_return_t cmf_prov_cert_cmd_wrap_aes_key(const crypto_context_t* const ctx, cmf_iid_puf_user_aes_root_key_cert_t *aes_root_cert, ",53
30276,"void cmf_prov_cert_cmd_hdlr(const crypto_context_t* const ctx, ALT_SDM_MBOX_SOURCE_t source, uint32_t *cmd_buf, uint32_t *resp_buf, uint32_t *big_buf)",80
30277,void set_cmd_buffer(),47
30278,int main(void),164
30279,void sdm_startup(void),338
30280,void set_cmd_buffer(),46
30281,uint32_t aes_user_root_key[CMF_CRYPTO_256b_WORD_SIZE] __attribute__ ((aligned(8))) = {,187
30282,uint32_t iv[4] __attribute__ ((aligned(8))) = {,198
30283,int main(void),255
30284,void sdm_startup(void),413
30285,int main(void),45
30286,void sdm_startup(void),164
30287,"sdm_return_t hmac_kdf_read(crypto_context_t *ctx, cmf_key_t *keyslot, uint32_t *output_data)",28
30288,int main(void),60
30289,void sdm_startup(void),134
30290,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id, bool* p_enabled)",73
30291,that cmf_dead_loop() has.,82
30292,void sdm_dead_loop(uint32_t error_code),84
30293,void cmf_provision_sm_post(cmf_provision_sm_event_t event),90
30294,int sysinit_main(void),98
30295,int main(),103
30296,void sdm_startup(void),204
30297,Copyright (2018) Intel Corporation,3
30298,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30299,void dump_read_dma_registers(),27
30300,void dump_write_dma_registers(),92
30301,void dump_input_buffer_registers(),158
30302,void dump_aes_registers(),255
30303,void dump_sha_registers(),319
30304,Copyright (2018) Intel Corporation,3
30305,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30306,void init_test_env(),36
30307,void stop_test_return(uint32_t return_test_error_level_code),44
30308,void testenv_putc(char c),63
30309,void testenv_puts(char *s),75
30310,void testenv_puth(unsigned n),83
30311,"void testenv_printf(char *format, ...)",89
30312,"void memory_dump_32bits_aligned (uint32_t StartAddress, uint32_t Data32Size)",159
30313,"void partial_memory_dump (uint32_t StartAddress, uint32_t BytesOfData)",224
30314,Copyright (2018) Intel Corporation,3
30315,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30316,"void zero_buffer(uint32_t start_address, uint32_t data_size)",28
30317,"void fill_buffer(uint32_t start_address, uint32_t data_pattern_seed, uint32_t data_size)",39
30318,"int verify_buffer(uint32_t start_address, uint32_t dst_addr, uint32_t data_size)",53
30319,uint32_t aes_user_root_key[CMF_CRYPTO_256b_WORD_SIZE] __attribute__ ((aligned(8))) = {,110
30320,uint32_t iv[4] __attribute__ ((aligned(8))) = {,121
30321,"void populate_response_buf(uint32_t *buffer, ALT_SDM_MBOX_RESP_CODE code, uint32_t len)",137
30322,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",148
30323,that cmf_dead_loop() has.,158
30324,void sdm_dead_loop(uint32_t error_code),160
30325,void cmf_provision_sm_post(cmf_provision_sm_event_t event),166
30326,int sysinit_main(void),174
30327,void set_cmd_buffer(),187
30328,int main(),240
30329,void sdm_startup(void),300
30330,Copyright (2018) Intel Corporation,3
30331,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30332,void dump_read_dma_registers(),27
30333,void dump_write_dma_registers(),92
30334,void dump_input_buffer_registers(),158
30335,void dump_aes_registers(),255
30336,void dump_sha_registers(),319
30337,Copyright (2018) Intel Corporation,3
30338,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30339,void init_test_env(),36
30340,void stop_test_return(uint32_t return_test_error_level_code),44
30341,void testenv_putc(char c),63
30342,void testenv_puts(char *s),75
30343,void testenv_puth(unsigned n),83
30344,"void testenv_printf(char *format, ...)",89
30345,"void memory_dump_32bits_aligned (uint32_t StartAddress, uint32_t Data32Size)",159
30346,"void partial_memory_dump (uint32_t StartAddress, uint32_t BytesOfData)",224
30347,Copyright (2018) Intel Corporation,3
30348,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30349,"void zero_buffer(uint32_t start_address, uint32_t data_size)",28
30350,"void fill_buffer(uint32_t start_address, uint32_t data_pattern_seed, uint32_t data_size)",39
30351,"int verify_buffer(uint32_t start_address, uint32_t dst_addr, uint32_t data_size)",53
30352,void sdm_early_init(void){;},13
30353,"bool sdm_ram_ptr_valid(const void * const ptr, const uint32_t size)",15
30354,"static sdm_return_t setup_input_buffer(in_buf_handle_t in_buf_handler, uint32_t size_in_words)",20
30355,"static sdm_return_t setup_read_dma(dma_handle_t handler, uint32_t *data, uint32_t size_in_words)",57
30356,"static sdm_return_t setup_write_dma(dma_handle_t handler, uint32_t *expected_data, uint32_t size_in_words)",75
30357,static sdm_return_t setup_aes(uint32_t size_in_words),93
30358,static sdm_return_t enable_aes(in_buf_handle_t handler),111
30359,static void print_inbuf_regs(in_buf_handle_t in_buf_handler),122
30360,static sdm_return_t run_test(void),134
30361,int main(void),239
30362,void sdm_startup(void),255
30363,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",30
30364,sdm_return_t test_reset_peripherals(),57
30365,void keyzerorization_test_hw_init(crypto_context_t* crypto_ctx),101
30366,int main(),164
30367,static void enable_bbram(void),257
30368,void sdm_startup(void),265
30369,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",30
30370,sdm_return_t test_reset_peripherals(),55
30371,void keyzerorization_test_hw_init(crypto_context_t* crypto_ctx),99
30372,int main(),173
30373,void sdm_startup(void),246
30374,Copyright (2019) Intel Corporation,3
30375,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30376,sdm_return_t cmf_set_default_security_protection(bool unconditional_lock),45
30377,void sdm_early_init(void),57
30378,void sdm_perf_log(uint32_t value),65
30379,void cmf_dead_loop(uint32_t error_code),70
30380,void sdm_cfg_status_init(void),75
30381,void alt_sdm_mbox_hps_count_dec(void),80
30382,"void alt_sdm_mbox_hps_send_resp(uint32_t *resp, uint32_t *big_buf)",85
30383,void alt_sdm_mbox_hps_clear(void),90
30384,bool is_jtag_disable_fuse_blown(void),94
30385,"sdm_return_t cmf_sec_options_get_option_status(cmf_security_option_id_t option_id,",102
30386,"static void populate_cmd_buf(uint32_t *cmd_buf_base_addr, uint32_t cmd_buf_size, uint32_t cmd_buf_start_idx,",144
30387,"static bool compare_resp_buf(uint32_t *resp_buf_base_addr, uint32_t resp_buf_size, uint32_t resp_buf_start_idx,",146
30388,"static void populate_cmd_buf(uint32_t *cmd_buf_base_addr, uint32_t cmd_buf_size, uint32_t cmd_buf_start_idx,",162
30389,"static bool compare_resp_buf(uint32_t *resp_buf_base_addr, uint32_t resp_buf_size, uint32_t resp_buf_start_idx,",186
30390,"bool mbox_blt_qspi_write_data_matches_exp(const uint32_t *exp_cmd_buf, uint32_t exp_cmd_buf_size,",229
30391,"sdm_return_t mbox_blt_qspi_read_init(const uint32_t *resp_buf, uint32_t resp_buf_num_words,",260
30392,"void mbox_hw_mgr_dummy_skip_resp_cmd(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf,",277
30393,"void mbox_blt_qspi_write_fake(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf,",294
30394,"void mbox_blt_qspi_read_fake(ALT_SDM_MBOX_SOURCE_t client, uint32_t *cmd_buf, uint32_t *resp_buf,",328
30395,void dump_fpga_bufs(void),362
30396,void dump_hps_bufs(void),390
30397,"void populate_hps_cmd_buf(uint32_t cmd_buf_start_idx, const uint32_t *cmds, uint32_t num_words)",424
30398,"void populate_hps_resp_buf(uint32_t cmd_buf_start_idx, const uint32_t *cmds, uint32_t num_words)",441
30399,"bool populate_hps_cmd_buf_and_wait_for_cout(uint32_t cmd_buf_start_idx, const uint32_t *cmds, uint32_t num_words)",458
30400,"void populate_fpga_cmd_buf(uint32_t cmd_buf_start_idx, const uint32_t *cmds, uint32_t num_words)",518
30401,"bool compare_hps_resp_buf(uint32_t resp_buf_start_idx, const uint32_t *exp, uint32_t num_words)",535
30402,"bool compare_fpga_resp_buf(uint32_t resp_buf_start_idx, const uint32_t *exp, uint32_t num_words)",553
30403,"sdm_return_t hps_resp_buf_get_words(uint32_t *sw_buf, uint32_t sw_buf_size_words, uint32_t start_rout,",572
30404,bool hps_wait_for_resp(uint32_t exp_rin),606
30405,"bool hps_update_cin_and_wait_for_resp(uint32_t new_cin, uint32_t exp_rin)",644
30406,bool fpga_wait_for_resp(uint32_t exp_rin),663
30407,int32_t config_state_update_async(config_event_t event),696
30408,"bool fpga_update_cin_and_wait_for_resp(uint32_t new_cin, uint32_t exp_rin)",709
30409,sdm_return_t block_level_test_task_create(OS_TASK_PTR block_level_test_entry),729
30410,void timer_isr(void* isr_context),759
30411,sdm_return_t timer_tick_init(void),776
30412,sdm_return_t run_os(OS_TASK_PTR block_level_test_entry),800
30413,sdm_return_t init_mbox_deps(void),847
30414,@brief print error messages before calling blt_done(),858
30415,void mbox_blt_done(uint32_t result),860
30416,bool clkmgr_switch_sdm_sdata_crypto_clk(bool enable),875
30417,Copyright (2019) Intel Corporation,3
30418,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30419,void sdm_fpga_gpo_write_mbox_mmio(uint32_t value),107
30420,void mbox_blt_sdm_fpga_gpio_fake_print_state(void),162
30421,uint32_t mbox_blt_sdm_fpga_gpio_fake_get_rin(void),168
30422,static void block_level_test_entry(void *unused),41
30423,int main(),92
30424,static void block_level_test_entry(void *unused),74
30425,int main(),142
30426,static void block_level_test_entry(void *unused),69
30427,int main(),137
30428,static void block_level_test_entry(void *unused),67
30429,int main(),135
30430,static void block_level_test_entry(void *unused),90
30431,int main(),166
30432,static void block_level_test_entry(void *unused),28
30433,int main(),129
30434,static void block_level_test_entry(void *unused),45
30435,int main(),92
30436,static void block_level_test_entry(void *unused),69
30437,int main(),149
30438,static void block_level_test_entry(void *unused),50
30439,int main(),119
30440,static void block_level_test_entry(void *unused),66
30441,int main(),135
30442,static void block_level_test_entry(void *unused),76
30443,int main(),158
30444,static void block_level_test_entry(void *unused),56
30445,int main(),208
30446,static void block_level_test_entry(void *unused),52
30447,int main(),147
30448,static void block_level_test_entry(void *unused),66
30449,@param init_status is the initial value of the status register (restart should toggle the ua bit),99
30450,"@return true if test passed. False if not, but may also call mbox_blt_done() if a failure occurs.",100
30451,static bool test_restart(uint32_t init_ua),102
30452,int main(),224
30453,int main(void),14
30454,void sdm_startup(void),164
30455,"int test_copy(uint32_t* src, uint32_t* dest, uint32_t size_words){",12
30456,int main(void),20
30457,void sdm_startup(void),55
30458,uint8_t sign_256_test(){,17
30459,uint8_t sign_384_test(){,69
30460,uint8_t verify_256_test(){,121
30461,uint8_t verify_384_test(){,215
30462,uint8_t ptmult_256_test(){,318
30463,uint8_t ptmult_384_test(){,378
30464,int main(void),440
30465,void sdm_startup(void),464
30466,Copyright (2020) Intel Corporation,3
30467,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30468,"sdm_return_t pkc_ecdsasign_data_compare(uint32_t length, uint32_t *expected_addr, uint32_t *actual_addr)",37
30469,"sdm_return_t pkc_ecdsasign_operation(uint32_t length,",71
30470,sdm_return_t pkc_ecdsasign_test(void),198
30471,int main(void),247
30472,void sdm_startup(void),262
30473,Copyright (2020) Intel Corporation,3
30474,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30475,"sdm_return_t pkc_ecptmult_data_compare(uint32_t length, uint32_t *expected_addr, uint32_t *actual_addr)",37
30476,"sdm_return_t pkc_ecptmult_operation(uint32_t length,",71
30477,sdm_return_t pkc_ecptmult_test(void),197
30478,int main(void),241
30479,void sdm_startup(void),256
30480,uint8_t sign_256_test(){,17
30481,uint8_t sign_384_test(){,69
30482,uint8_t verify_256_test(){,121
30483,uint8_t verify_384_test(){,185
30484,uint8_t ptmult_256_test(){,249
30485,uint8_t ptmult_384_test(){,310
30486,int main(void),372
30487,void sdm_startup(void),395
30488,static sdm_return_t run_test(void) ,11
30489,int main(void),52
30490,void sdm_startup(void),67
30491,static sdm_return_t run_test(void) ,11
30492,int main(void),58
30493,void sdm_startup(void),73
30494,sdm_return_t cmf_set_default_security_protection(bool unconditional_lock),34
30495,"OS_FLAGS OSFlagPost (OS_FLAG_GRP*, OS_FLAGS, OS_OPT, OS_ERR*)",39
30496,void print_registers(void);    ,46
30497,int main(void),58
30498,bool check_status_reg(void),456
30499,void clear_status_reg(void),476
30500,void print_registers(void),491
30501,void sdm_startup(void),567
30502,void sdm_bootrom_main_section_add_get( void ){;},32
30503,sdm_return_t main_test(void),39
30504,void sdm_startup(void),126
30505,int main(void),15
30506,void sdm_startup(void),65
30507,void sdm_bootrom_main_section_add_get( void ){;},32
30508,sdm_return_t main_test(void),53
30509,void sdm_startup(void),282
30510,Copyright (2020) Intel Corporation,3
30511,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30512,void qspi_pin_init_fm(),33
30513,void qspi_pin_init(),93
30514,void reg_dump_pin_mux(),153
30515,void qspi_sfdp_dump_data(),208
30516,sdm_return_t set_qspi_to_int_osc(qspi_handle_t qspi_hdl),252
30517,"sdm_return_t qspi_erase_verify(qspi_handle_t qspi_hdl, uint32_t add, uint32_t add_off, uint32_t size_w, uint32_t* buff_ptr, uint32_t buff_sz)",294
30518,sdm_return_t qpsi_we(qspi_handle_t qspi_hdl),337
30519,"sdm_return_t qspi_write_counting_pattern(qspi_handle_t qspi_hdl, uint32_t add, uint32_t add_off, uint32_t size_w, uint32_t* buff_ptr, uint32_t buff_sz)",347
30520,"sdm_return_t qspi_pattern_verify(qspi_handle_t qspi_hdl, uint32_t add, uint32_t add_off, uint32_t size_w, uint32_t* buff_ptr, uint32_t buff_sz)",368
30521,int main(void),14
30522,void sdm_startup(void),67
30523,"int test_copy(void* dest, uint32_t destsz, void* src, uint32_t size_bytes){",12
30524,int main(void),20
30525,void sdm_startup(void),45
30526,sdm_return_t init_peripherals(),37
30527,int read_thermal(),80
30528,sdm_return_t voltage_sensor_read(),123
30529,int main(),198
30530,void sdm_startup(void),238
30531,sdm_return_t init_peripherals(),39
30532,int thermal_sensor_read(),82
30533,sdm_return_t voltage_sensor_read(),108
30534,int main(),183
30535,void sdm_startup(void),223
30536,Copyright (2019) Intel Corporation,3
30537,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30538,sdm_return_t system_reset_big_hammer(void),38
30539,STATIC bool alt_sdm_mbox_msg_ptr_is_valid(const mbox_msg_t * const ptr_to_chk),43
30540,that cmf_dead_loop() has.,74
30541,void sdm_dead_loop(uint32_t error_code),76
30542,void put_jtag_cfg_sts_message_in_queue(),81
30543,int main(void),156
30544,void sdm_startup(),208
30545,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",22
30546,"sdm_return_t setup_input_buffer(in_buf_handle_t in_buf_handler, uint32_t size_in_words)",25
30547,"static sdm_return_t setup_read_dma(dma_handle_t handler, uint32_t *data, uint32_t size_in_words)",61
30548,"static sdm_return_t decomp0_read_ram(uint32_t size_in_words, uint32_t *ecc_readback)",79
30549,"static sdm_return_t decomp1_read_ram(uint32_t size_in_words, uint32_t *ecc_readback)",101
30550,"static sdm_return_t decomp_check(uint32_t size_in_words, uint32_t *expected_result)",124
30551,static void modify_ecc_cleanup_table(),147
30552,int main(),166
30553,void sdm_dead_loop(uint32_t error_code),295
30554,void sdm_startup(void),299
30555,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",37
30556,sdm_return_t gpio_pin_clr(uint32_t pin),42
30557,bool gpio_is_pin_deasserted(uint32_t pin),46
30558,sdm_return_t thermal_sensor_read(),49
30559,sdm_return_t init_peripherals(),63
30560,static bool is_reason_tamper_temp(),106
30561,sdm_return_t wait_for_temp_tamper_interrupt(uint32_t timeout_in_ticks),113
30562,int main(),138
30563,void sdm_dead_loop(uint32_t error_code),260
30564,void sdm_startup(void),265
30565,int main(void),8
30566,void sdm_startup(void),42
30567,uint32_t *data_pointer = (uint32_t *) 0x13F000; // peristent_ram_origin =    0x13f000,27
30568,"sdm_return_t cmf_mpi_init(cmf_mpi_t *p_mpi, const uint32_t n, uint32_t *p_data)",29
30569,sdm_return_t cmf_mpi_validate(const cmf_mpi_t *const p_mpi),46
30570,sdm_return_t cmf_mpi_zeroize(cmf_mpi_t* p_mpi),51
30571,"uint32_t inbuf_fifo_read(uint32_t fifo, uint32_t *pDest, uint32_t size, in_buf_handle_t in_buf_handler)",56
30572,static sdm_return_t run_test(void) ,79
30573,int main(void),128
30574,void sdm_startup(void),148
30575,uint32_t *data_pointer = (uint32_t *) 0x13F000; // peristent_ram_origin =    0x13f000,27
30576,"sdm_return_t cmf_mpi_init(cmf_mpi_t *p_mpi, const uint32_t n, uint32_t *p_data)",29
30577,sdm_return_t cmf_mpi_validate(const cmf_mpi_t *const p_mpi),46
30578,sdm_return_t cmf_mpi_zeroize(cmf_mpi_t* p_mpi),51
30579,"uint32_t inbuf_fifo_read(uint32_t fifo, uint32_t *pDest, uint32_t size, in_buf_handle_t in_buf_handler)",56
30580,static sdm_return_t run_test(void) ,79
30581,int main(void),130
30582,void sdm_startup(void),150
30583,uint32_t *data_pointer = (uint32_t *) 0x13F000; // peristent_ram_origin =    0x13f000,27
30584,"sdm_return_t cmf_mpi_init(cmf_mpi_t *p_mpi, const uint32_t n, uint32_t *p_data)",29
30585,sdm_return_t cmf_mpi_validate(const cmf_mpi_t *const p_mpi),46
30586,sdm_return_t cmf_mpi_zeroize(cmf_mpi_t* p_mpi),51
30587,"uint32_t inbuf_fifo_read(uint32_t fifo, uint32_t *pDest, uint32_t size, in_buf_handle_t in_buf_handler)",56
30588,static sdm_return_t run_test(void) ,79
30589,int main(void),128
30590,void sdm_startup(void),148
30591,"void sdm_trace_dont_call(sdm_trace_key_t key, uint32_t value)",46
30592,bool gpio_is_pin_deasserted(uint32_t pin),51
30593,sdm_return_t gpio_pin_clr(uint32_t pin),58
30594,sdm_return_t system_control_deassert_env_mon_reset(),78
30595,sdm_return_t init_peripherals(),89
30596,sdm_return_t voltage_sensor_read(),144
30597,float get_actual_voltage(uint32_t v_ch),221
30598,void check_voltage_monitor(uint32_t channel),229
30599,static bool is_reason_tamper_vadc(),282
30600,sdm_return_t wait_for_vadc_tamper_interrupt(void),289
30601,sdm_return_t vccl_tamper_test(void),314
30602,sdm_return_t vccl_sdm_tamper_test(void),439
30603,int main(),554
30604,void sdm_dead_loop(uint32_t error_code),614
30605,void sdm_startup(void),619
30606,void sdm_early_init(void){;},9
30607,int main(void),11
30608,void sdm_startup(void),43
30609,void sdm_early_init(void){;},9
30610,int main(void),11
30611,void sdm_startup(void),43
30612,Copyright (2019) Intel Corporation,3
30613,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30614,static sdm_return_t get_driver_handles(crypto_context_t *crypto_context),42
30615,int main(),89
30616,void sdm_startup(void),228
30617,void sdm_early_init(void){;},9
30618,int main(void),11
30619,void sdm_startup(void),43
30620,int main(void),17
30621,static void ccr(),66
30622,static void gac(),80
30623,static void gae(),140
30624,static void ex(),154
30625,static void ccr_helper(ccr_test_case_t* ccr_test_case),176
30626,static void gac_helper(gac_test_case_t* gac_test_case),201
30627,static void gac_special_helper(gac_test_case_t* gac_test_case),256
30628,static void gae_helper(gae_test_case_t* gae_test_case),300
30629,static void ex_helper(ex_test_case_t* ex_test_case),333
30630,static void ex4_helper(),397
30631,static void clear_buffers(),416
30632,static void print_resp_buf(),424
30633,static void print_big_buf(),434
30634,static void print_cmd_buf(),444
30635,void sdm_early_init(void){;},455
30636,void sdm_startup(void),458
30637,void sdm_early_init(void) { ; },9
30638,void romext_unexpected_reset_handler(void) { ; },10
30639,int main(void) {,30
30640,void sdm_startup(void) {,74
30641,void watchdog_enable(void),11
30642,void watchdog_kick(void),15
30643,void watchdog_restore(void),19
30644,"void romext_setup_hrb_regs(uint32_t a, uint32_t b, uint32_t c, uint32_t d ) { }",23
30645,"void cmf_romext_memset(void *const p_dest,",25
30646,"void cmf_romext_memcpy(void *const p_dest,",36
30647,void ecc_init(void),47
30648,void romext_remove_br_cmf_handlers(void),51
30649,void romext_int_disable(void),55
30650,uint32_t get_key_vault_slots_used(void),59
30651,void trigger_tamper_reset(void),64
30652,char *re_getbuf(){return NULL;},29
30653,"void disable_aliasl1_set( br_efuse_t* efuse, bool set ) {",267
30654,void set_romext_inputs(const re_test_case_t *test) {,275
30655,bool dummy_hash_is_expected(bool print_registers),466
30656,uint32_t tlv_type_to_cert_type( re_tlv_tag tlv_type ),501
30657,"uint32_t check_romext_outputs(const re_test_case_t *test, uint32_t re_exit) {",519
30658,uint32_t run_re_test( re_test_case_t *test ),754
30659,int main( void ),822
30660,const uint32_t aes_key_384[SDM_384b_WORD_SIZE] __attribute__ ((aligned(4))) = {,38
30661,const uint32_t aes_input_text[SDM_256b_WORD_SIZE] __attribute__ ((aligned(8)))  = {,54
30662,const uint32_t aes_cipher_data_zero[SDM_256b_WORD_SIZE] __attribute__ ((aligned(4))) = {,66
30663,void insert_key_to_kv( const re_test_case_t* test ),81
30664,uint32_t construct_ukv_map( void ),122
30665,static sdm_return_t check_for_key( cmf_key_t *p_key ),148
30666,static void crypto_init( void ),247
30667,"static void set_efuse_pubkey(br_efuse_t* efuse, uint8_t val)",10
30668,"static void set_efuse_pki_slct(br_efuse_t* efuse, uint8_t val)",19
30669,static void set_efuse_owned(br_efuse_t* efuse),25
30670,static void clear_efuse_owned(br_efuse_t* efuse),31
30671,"static void set_device_owned(persistent_data_t* persist, relib_ownership_t ownership)",37
30672,"void setup_ownership(persistent_data_t* persist, re_test_fuse_t ownership)",51
30673,static void re_putc( char c ),13
30674,static void re_puts(const char *s),19
30675,static void re_puth(unsigned n),27
30676,static void re_print_uint32(uint32_t data),40
30677,"void re_printf(const char *format, ...)",62
30678,void re_clrbuf( void ),156
30679,char *re_getbuf( void ),162
30680,void blt_watchdog_enable(void),19
30681,void blt_watchdog_disable(void),37
30682,void generate_reset_handler_hash(void),42
30683,void sdm_early_init(void){;},6
30684,void sdm_startup(void),8
30685,Copyright (2019) Intel Corporation,3
30686,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30687,static sdm_return_t get_driver_handles(crypto_context_t *crypto_context),42
30688,int main(),89
30689,void sdm_startup(void),228
30690,void sdm_early_init(void){;},9
30691,int main(void),11
30692,void sdm_startup(void),51
30693,void sdm_early_init(void){;},16
30694,void timer_monitor_isr(void *isr_context),20
30695,int main(void),29
30696,void sdm_startup(void),94
30697,void write_handoff_address(uint32_t val),13
30698,void write_ukv(uint32_t val),18
30699,void write_handoff_flags(uint32_t val),23
30700,uint32_t read_ukv(),28
30701,void setup_clock_manager(),33
30702,int main(void),40
30703,void sdm_early_init(void){;},46
30704,void sdm_startup(void),49
30705,uint32_t bitstream_num_sections_get(),11
30706,void print_test_case(test_case_t* test_case),301
30707,bool is_cdi1_in_keyvault(),318
30708,void clear_ukv(),323
30709,void set_cdi1(),328
30710,void clear_handoff_flags(),333
30711,void clear_handoff_address(),338
30712,void clear_everything(),343
30713,"void create_certificates_on_reload(pa_certificate_request_t request,",351
30714,"void request_if_bre_certificate(pa_certificate_request_t request,",364
30715,void setup_design_hash(),398
30716,"void get_attestation_certificate(pa_certificate_request_t request,",411
30717,"void get_attestation_evidence(ALT_SDM_MBOX_RESP_CODE expected_mbox_response,",460
30718,uint32_t run_test_case(test_case_t* test_case),486
30719,uint32_t run_test(),545
30720,Copyright (2020) Intel Corporation,4
30721,"source code (""Material"") are owned by Intel Corporation or its suppliers or",7
30722,sdm_return_t get_driver_handles(crypto_context_t *crypto_context),36
30723,sdm_return_t free_driver_handles(crypto_context_t *crypto_context),83
30724,Copyright (2019) Intel Corporation,3
30725,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30726,"static test_ecp_multiply_ret_t test_cmf_ecp_multiply(const crypto_context_t  *const p_crypto_context,",208
30727,int main(),324
30728,void sdm_startup(void),374
30729,Copyright (2020) Intel Corporation,3
30730,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30731,"sdm_return_t test_gen_keypair(const crypto_context_t  *const p_crypto_context,",170
30732,int main(),328
30733,void sdm_startup(void),377
30734,Copyright (2020) Intel Corporation,3
30735,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30736,"void ecdsasign_test_print_data(uint32_t word_length, uint32_t *p_data)",109
30737,"sdm_return_t ecdsasign_data_compare(uint32_t length, uint32_t *expected_addr, uint32_t *actual_addr)",114
30738,"sdm_return_t ecdsa_sign_operation(crypto_context_t *p_crypto_context,",140
30739,sdm_return_t ecdsa_sign_deterministic_test(crypto_context_t  *p_crypto_context),268
30740,sdm_return_t ecdsa_sign_non_deterministic_test(crypto_context_t  *p_crypto_context),342
30741,sdm_return_t ecdsasign_test(void),418
30742,int main(void),509
30743,void sdm_startup(void),518
30744,void sdm_early_init(void){;},26
30745,void funcA(const char * caller),28
30746,void DYNAMIC_LIBRARY_DRV0_FUNC driverA(const char * caller) ,33
30747,void DYNAMIC_LIBRARY_DRV0_FUNC driverB(const char * caller) ,39
30748,void DYNAMIC_LIBRARY_DRV1_FUNC driverC(const char * caller) ,46
30749,void DYNAMIC_LIBRARY_DRV1_FUNC driverD(const char * caller) ,52
30750,"void DYNAMIC_LIBRARY_DRV1_FUNC driverE(const char * caller, char * ptr) ",59
30751,"uint32_t DYNAMIC_LIBRARY_APP0_FUNC app0(const char * caller, uint32_t mul) ",72
30752,"void DYNAMIC_LIBRARY_APP1_FUNC app1(const char * caller, uint32_t num) ",82
30753,void DYNAMIC_LIBRARY_APP2_FUNC app2_func(const char * caller) ,105
30754,void DYNAMIC_LIBRARY_APP2_FUNC app2(const char * caller) ,112
30755,void DYNAMIC_LIBRARY_APP3_FUNC app3_func(const char * caller) ,120
30756,void DYNAMIC_LIBRARY_APP3_FUNC app3(const char * caller) ,126
30757,void DYNAMIC_LIBRARY_APP4_FUNC app4_func(const char * caller) ,133
30758,void DYNAMIC_LIBRARY_APP4_FUNC app4(const char * caller) ,139
30759,"static sdm_return_t setup_input_buffer(in_buf_handle_t in_buf_handler, uint32_t size_in_bytes)",145
30760,"static sdm_return_t setup_read_dma(dma_handle_t handler, const char * data, uint32_t size_in_bytes)",179
30761,static sdm_return_t enable_aes(in_buf_handle_t handler),192
30762,static sdm_return_t setup_aes(uint32_t size_in_bytes),201
30763,"static sdm_return_t setup_write_dma(dma_handle_t handler, const char * expected_data, uint32_t size_in_bytes)",208
30764,void read_inbuf_in_memmode(in_buf_handle_t in_buf_handler),221
30765,"void write_to_inbuf(const char * data, const char * readback_data, uint32_t size_in_bytes)",236
30766,typedef struct __attribute__ ((__packed__)) app_entry_t {,308
30767,typedef struct __attribute__ ((__packed__)) app_table_t {,320
30768,"uint32_t get_execution_addr(const app_table * table, const char * library, const char * func)",324
30769,int main(void),381
30770,void sdm_startup(void),456
30771,void sdm_early_init(void){;},16
30772,int main(void),18
30773,void sdm_startup(void),64
30774,void sdm_early_init(void){;},14
30775,"uint32_t read_word(uint8_t * OPCODES, uint32_t OPCODE_SIZE, uint32_t * index)",20
30776,"uint32_t get_jump_address(uint8_t * OPCODES, uint32_t OPCODE_SIZE, uint32_t * index)",43
30777,int main(void),73
30778,void sdm_startup(void),426
30779,const uint32_t aes_key_384[SDM_384b_WORD_SIZE] __attribute__ ((aligned(4))) = {,10
30780,"sdm_return_t create_uds_efuse_attestation_root_key(afrl_keypair_t* keypair,",32
30781,Test Init (MSEL: 0xE),95
30782,int main(void),138
30783,void sdm_startup(void),196
30784,"/* The following macros are defined as address (uint32_t*),",9
30785,void aibssm_unittest_init(void),25
30786,"void BitBuf_init(BitBuf_t* b, uint32_t* data, uint32_t len)",32
30787,"uint32_t BitBuf_get(BitBuf_t *b, uint32_t num_bits)",44
30788,"void _enqueue_command(cnoc_rx_dev_t* cnoc_rx_dev, const uint32_t *cmd_packet, const uint32_t payload_words)",80
30789,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",13
30790,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",20
30791,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",27
30792,"static void clone_cnoc_tx_params(const cnoc_tx_params_t* src, cnoc_tx_params_t* dst)",12
30793,cnoc_tx_result_t cnoc_tx_init(const cnoc_tx_dev_t *tx_dev),22
30794,"cnoc_tx_result_t cnoc_tx_transmit(const cnoc_tx_dev_t *tx_dev, const cnoc_tx_params_t *tx_params)",43
30795,cnoc_tx_result_t cnoc_tx_irq_assert(const cnoc_tx_dev_t *tx_dev) {,57
30796,cnoc_tx_result_t cnoc_tx_irq_deassert(const cnoc_tx_dev_t *tx_dev) {,62
30797,uint8_t cnoc_tx_irq_status(const cnoc_tx_dev_t *tx_dev) {,67
30798,void dma_init(void),13
30799,"void dma_transfer(const void *src_buffer, const void *dst_buffer, uint32_t tx_length_words, uint32_t control_word)",19
30800,void dma_register_isr_callback_function (dma_cb_func_type dma_cb_func),31
30801,void dma_unregister_isr_callback_function(),37
30802,"int alt_ic_isr_register(alt_u32 ic_id,",28
30803,alt_irq_context alt_irq_disable_all (void),52
30804,void alt_irq_enable_all (alt_irq_context context),75
30805,void alt_irq_cpu_enable_interrupts (void),82
30806,"isr_entry_t* find_isr_entry(uint32_t ic_id, uint32_t irq)",87
30807,void flush_register(),19
30808,"RegContainerStructType* prepare_register(uintptr_t reg_addr,int logging)",26
30809,"void set_register_write_propagation(uintptr_t reg_addr, uintptr_t propagate_addr)",41
30810,RegContainerStructType* find_reg_entry(uintptr_t reg_addr),49
30811,MemoryBackedRegion* find_mem_entry(uintptr_t reg_addr),62
30812,"void register_memory_backed_region(uintptr_t reg_addr, void* mem_addr, uint32_t size)",77
30813,This function replaces the normal alt_write_word() macro that would have done,99
30814,"void __alt_write_word(volatile uintptr_t dest, uint32_t src)",102
30815,"static void __alt_write_word_internal(uintptr_t dest, uint32_t src)",109
30816,This function replaces the normal alt_read_word() macro that would have done,153
30817,uint32_t __alt_read_word(volatile uintptr_t addr),156
30818,This function replaces the normal alt_write_word() macro that would have done,6
30819,"void alt_write_word(volatile uint32_t *dest, uint32_t src)",9
30820,"void alt_write_byte(volatile uint8_t *dest, uint8_t value)",15
30821,This function replaces the normal alt_read_word() macro that would have done,21
30822,uint32_t alt_read_word(volatile uint32_t *dest),24
30823,void aib_ut_timer_event_init(),15
30824,"void aib_ut_set_timer_expired(uint8_t id,uint8_t expired)",22
30825,static timer_evt_t* __get_new_timer_event(),28
30826,"static int __register_timer_event(uint8_t id, uint8_t blocking, uint8_t started, timer_mode_t mode, uint32_t timeout)",42
30827,"timer_evt_t* find_timer_event(uint32_t id, uint32_t blocking)",60
30828,void timer1_start_nb(uint32_t nanoseconds),73
30829,void timer1_start(uint32_t nanoseconds),77
30830,uint8_t timer1_is_expired(void),82
30831,void timer1_configure(uint32_t nanoseconds),86
30832,uint32_t timer1_counter_read(void){ return 0; },92
30833,void timer1_start_nb_raw(uint32_t counter),93
30834,void timer1_start_raw(uint32_t counter),97
30835,void timer0_start_nb(uint32_t nanoseconds),103
30836,void timer0_start(uint32_t nanoseconds),107
30837,uint8_t timer0_is_expired(void),112
30838,void timer0_configure(uint32_t nanoseconds),116
30839,uint32_t    timer0_counter_read(){ return 0; },122
30840,void timer0_start_nb_raw(uint32_t counter),123
30841,void timer0_start_raw(uint32_t counter),127
30842,void reset_vic_logger(vic_logger_t* logger),5
30843,"vic_event_t* get_vic_event(vic_logger_t* logger, uint32_t ic_id, uint32_t irq)",10
30844,"void add_vic_event(vic_logger_t* logger, uint32_t ic_id, uint32_t irq, uint32_t toggled)",25
30845,void flush_register(),20
30846,This function replaces the normal alt_write_word() macro that would have done,32
30847,"void __alt_write_word(volatile uint32_t *dest, uint32_t src)",35
30848,This function replaces the normal alt_read_word() macro that would have done,67
30849,uint32_t __alt_read_word(volatile uint32_t *addr),70
30850,This function replaces the normal alt_write_word() macro that would have done,7
30851,"void alt_write_word(volatile uint32_t *dest, uint32_t src)",10
30852,"void alt_write_byte(volatile uint8_t *dest, uint8_t value)",18
30853,This function replaces the normal alt_read_word() macro that would have done,24
30854,uint32_t alt_read_word(volatile uint32_t *dest),27
30855,Copyright (2019) Intel Corporation,3
30856,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30857,"/*bool sdm_ram_ptr_valid(const void * const ptr, const uint32_t size)",27
30858,void sdm_delay(uint32_t timeout),32
30859,uint64_t sdm_timeout_init(uint32_t timeout),39
30860,bool sdm_timeout(const uint64_t timeout),44
30861,void alt_sdm_aes_init(void){ },10
30862,void alt_sdm_aes_start(void){ },11
30863,uint32_t alt_sdm_aes_int_status(void){ return g_aes_int_status; },12
30864,"void alt_sdm_aes_get_data(uint8_t fifo, uint32_t aes_mode, uint32_t size, uint32_t outcount){ }",13
30865,void alt_sdm_aes_int_clear(uint32_t mask){ },14
30866,void alt_sdm_aes_int_enable(uint32_t mask){ },15
30867,void alt_sdm_aes_int_disable(uint32_t mask){ },16
30868,uint32_t alt_sdm_aes_enable(uint32_t size){ return 0; },17
30869,uint32_t alt_sdm_aes_ready(void){ return 1; },18
30870,void alt_sdm_aes_dest_set(uint32_t dest){ },19
30871,void alt_sdm_aes_clear_keys(void){ },20
30872,"void alt_sdm_aes_key_load(uint32_t key_dest, uint32_t key_size, uint32_t key_mode){ }",21
30873,"void alt_sdm_aes_setup_bypass(alt_sdm_aes_cib_rd_fifo_t input_fifo, uint32_t xfer_length_words_64bits, alt_sdm_aes_data_dest_t output_destination){ }",22
30874,bool alt_sdm_aes_is_busy(void){ return g_aes_is_busy; },23
30875,"sdm_return_t alt_sdm_aes_get_update_interval(uint32_t interval_length,",24
30876,"void alt_sdm_aes_setup_data_xfer(alt_sdm_aes_key_ctx_sel_t aes_key_ctx_sel,",26
30877,sdm_return_t alt_sdm_aes_key_swap_mode_set(alt_sdm_aes_key_swap_mode_config_t* aes_key_swap){ return SDM_SUCCESS; },30
30878,"sdm_return_t alt_sdm_aes_iv_set(alt_sdm_aes_iv_dest_sel_t aes_iv_dest, alt_sdm_aes_iv_data_t*  iv_data){ return SDM_SUCCESS; }",31
30879,sdm_return_t alt_sdm_aes_key_info_set(alt_sdm_aes_key_info_t* aes_key_info){ return SDM_SUCCESS; },32
30880,void alt_sdm_aes_key_as_data_last_operation_set(void){ },33
30881,void alt_sdm_aes_key_context_select_clear_to_zero(void){ },34
30882,"void alt_sdm_aes_key_load (alt_sdm_aes_key_dest_sel_t key_dest, alt_sdm_aes_key_size_t key_size, alt_sdm_aes_key_swap_mode_t key_mode)",36
30883,bbram_handle_t bbram_open(void){ return (bbram_handle_t)HAL_KEY_VAULT_BBRAM_BASE; },6
30884,sdm_return_t bbram_close(const bbram_handle_t handle){ return SDM_SUCCESS; },8
30885,"sdm_return_t bbram_write_aes_gp_regs(const bbram_handle_t handle,",10
30886,sdm_return_t bbram_read_gp_register(,14
30887,sdm_return_t bbram_key_clean(const bbram_handle_t handle){ return SDM_SUCCESS; },17
30888,sdm_return_t bbram_read_testpor_reg(,19
30889,"sdm_return_t bbram_write_testpor_reg(const bbram_handle_t handle,",22
30890,"sdm_return_t bbram_read_key(const bbram_handle_t handle,",25
30891,"sdm_return_t cmf_mpi_init(cmf_mpi_t         *p_mpi,",6
30892,sdm_return_t cmf_mpi_validate(const cmf_mpi_t *const p_mpi),13
30893,sdm_return_t cmf_mpi_uninit(cmf_mpi_t* p_mpi),18
30894,sdm_return_t cmf_mpi_zeroize(cmf_mpi_t* p_mpi),23
30895,bool cmf_mpi_is_zero(cmf_mpi_t* p_mpi),28
30896,"bool    cmf_mpi_equal(const cmf_mpi_t       *const p_mpi_1,",33
30897,"sdm_return_t cmf_mpi_compare(const cmf_mpi_t        *const p_mpi_1,",39
30898,"sdm_return_t cmf_mpi_fill(cmf_mpi_t       *const p_mpi,",47
30899,"sdm_return_t cmf_mpi_copy(cmf_mpi_t        *const p_mpi_1,",55
30900,sdm_return_t cmf_attest_init(void),5
30901,"sdm_return_t cmf_attest_sha(const uint32_t *pdata, uint32_t byte_len, const sha_csr_size_t sha_type, uint32_t *phash, uint32_t word_len)",10
30902,"sdm_return_t cmf_attest_derive(const cmf_key_id_t key_id, const void * const label, const uint32_t label_length,",15
30903,"sdm_return_t cmf_attest_keypair(uint32_t *rng_buffer, const ecp_group_id_t group_id, ",23
30904,"sdm_return_t cmf_attest_sign(uint32_t* secret_key_data, const ecp_group_id_t group_id, const cmf_key_size_t key_size, ",29
30905,"sdm_return_t cmf_attest_clear_key_in_keyvault(cmf_key_id_t slot, cmf_key_size_t size)",35
30906,void cmf_attest_cleanup(void),40
30907,"sdm_return_t cmf_hmac_drbg_init( const crypto_context_t * const ctx,",9
30908,"sdm_return_t cmf_hmac_drbg_generate(const crypto_context_t * const ctx,",21
30909,"sdm_return_t cmf_hmac_drbg_reseed(  crypto_context_t * const ctx,",30
30910,sdm_return_t cmf_hmac_drbg_set_reseed_interval(const uint32_t reseed_interval),41
30911,sdm_return_t cmf_hmac_drbg_finish(void),47
30912,bool cmf_hmac_drbg_initialized(void),52
30913,"sdm_return_t    cmf_hmac_kdf(   const crypto_context_t * const ctx,",3
30914,sdm_return_t cmf_hmac_init(const crypto_context_t * const ctx),17
30915,sdm_return_t cmf_hmac_start(,22
30916,sdm_return_t cmf_hmac_update(,33
30917,sdm_return_t cmf_hmac_finish(,42
30918,sdm_return_t cmf_hmac(,55
30919,"sdm_return_t cmf_key_construct(cmf_key_t  *p_key,",5
30920,"sdm_return_t cmf_key_init(cmf_key_t  *p_key,",16
30921,sdm_return_t cmf_key_validate(const cmf_key_t *const p_key),27
30922,"sdm_return_t cmf_key_free(cmf_key_t *p_key,",32
30923,"sdm_return_t cmf_km_save_key(cmf_km_src_t  key_src,",10
30924,"sdm_return_t cmf_km_load_key(cmf_km_dest_t key_dest, cmf_key_t  *p_key, bool clear_key, uint32_t top_half)",22
30925,"uint32_t ukv_put_key(uint32_t key_src, uint32_t key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits)",9
30926,"uint32_t ukv_get_key(uint32_t key_dest, uint32_t key_slot, uint32_t key_size_bits, uint32_t top_half)",13
30927,uint32_t ukv_clear_key(uint32_t key_slot),17
30928,"uint32_t ukv_put_key_xor(uint32_t key_src, uint32_t key_slot,uint32_t xor_input_key_slot, uint32_t * sw_key_data, uint32_t sw_key_size_bits)",21
30929,uint32_t ukv_clear_all_keys(void),25
30930,sdm_return_t ukv_clean_key_reg(void),29
30931,"uint32_t ukv_clear_all_keys_except_key_slots(uint32_t * const key_slots, const uint32_t * const excepted_slots, uint32_t excepted_slots_len)",34
30932,"sdm_return_t crypto_context_create(crypto_context_t * const ctx,",4
30933,void crypto_context_release(crypto_context_t * const ctx),11
30934,Copyright (2019) Intel Corporation,3
30935,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
30936,"dma_handle_t dma_open(dma_source_t source, dma_dest_t dest)",31
30937,"sdm_return_t dma_read_change_source(dma_handle_t handle, dma_source_t src)",36
30938,sdm_return_t dma_close(dma_handle_t handle),41
30939,"bool dma_check_descriptor_busy(dma_handle_t handle, dma_mode_t mode)",46
30940,"bool dma_check_descriptor_stop(dma_handle_t handle, dma_mode_t mode)",51
30941,"sdm_return_t dma_read_resume_transfer(dma_handle_t handle, uint32_t config)",56
30942,"sdm_return_t dma_descriptor_enqueue(dma_handle_t handle, dma_mode_t mode, uint8_t id, uint32_t address, uint32_t length, ",61
30943,"sdm_return_t cmf_ecdh_compute_shared( const crypto_context_t  *const p_crypto_context,",4
30944,"sdm_return_t cmf_ecdh_compute_shared_key( const crypto_context_t  *const p_crypto_context,",13
30945,"sdm_return_t ecdsa_keypair_init(ecp_keypair_t           *p_keypair,",25
30946,sdm_return_t ecdsa_keypair_validate(const ecp_keypair_t *const p_keypair),35
30947,"sdm_return_t ecdsa_check_public_key(const ecp_group_id_t     group_id, ",40
30948,"sdm_return_t ecdsa_key_generation_init(const crypto_context_t  *const p_crypto_context,",46
30949,"sdm_return_t ecdsa_key_generation_init_ex(const crypto_context_t  *const p_crypto_context,",52
30950,"sdm_return_t ecdsa_gen_keypair(const crypto_context_t  *const p_crypto_context,",60
30951,"sdm_return_t ecdsa_gen_private_key(const crypto_context_t  *const p_crypto_context,",67
30952,"sdm_return_t ecdsa_get_public_key(const crypto_context_t  *const p_crypto_context,",74
30953,sdm_return_t ecdsa_key_generation_uninit(void),82
30954,"sdm_return_t ecdsa_sign(const crypto_context_t  *const p_crypto_context,",87
30955,"sdm_return_t ecdsa_verify_check_result(pkc_handle_t pkc,",99
30956,"sdm_return_t ecdsa_verify(  const crypto_context_t  *const p_crypto_context,",106
30957,"sdm_return_t ecdsa_group_id_params_get(const ecp_group_id_t group_id,",117
30958,"sdm_return_t ecdsa_sha(const crypto_context_t* const ctx, const sha_csr_size_t sha_type,",124
30959,void cmf_efuse_get_chipid(uint32_t *p_data),7
30960,void cmf_efuse_get_ult(uint32_t *p_data),13
30961,sdm_return_t cmf_efuse_compare_ulthash(const uint32_t *p_data),18
30962,"sdm_return_t cmf_efuse_get_public_key(uint32_t *p_data, cmf_efuse_pubkey_slct_t pubkey_slct, uint32_t msw_only)",23
30963,"sdm_return_t cmf_efuse_get_silicon_unique_data_hash(const crypto_context_t * const ctx,",28
30964,sdm_return_t cmf_efuse_set_sigma_public_values(const uint32_t* const p_data),40
30965,sdm_return_t cmf_efuse_get_sigma_public_values(uint32_t* p_data),45
30966,void alt_sdm_inbuf_memmode_enable(void),28
30967,void alt_sdm_inbuf_memmode_disable(void),41
30968,bool alt_sdm_dma_wr_active(void),53
30969,void cmf_dma_wr_done_set(bool val),58
30970,bool cmf_dma_wr_done_status(void),63
30971,"sdm_return_t alt_sdm_sha_sw_finalized(uint32_t * const msg,",68
30972,void alt_sdm_sha_disable(void),77
30973,"void alt_sdm_sha_read(uint32_t *hash, uint32_t size)",82
30974,void alt_sdm_sha_last(void),87
30975,void alt_sdm_inbuf_sha_enable(bool enable),92
30976,void alt_sdm_sha_init(void),109
30977,void alt_sdm_dma_rd_resume(void),114
30978,bool alt_sdm_dma_rd_desc_full(void),119
30979,bool alt_sdm_dma_rd_active(void),124
30980,int32_t alt_sdm_dma_rd_stop(void),129
30981,"int32_t alt_sdm_dma_rd_nsp_ram(uint32_t *p_src, uint32_t size, uint32_t enable_interrupt)",134
30982,"uint32_t alt_sdm_dma_rd_send_desc(uint32_t *p_src, uint32_t size,",139
30983,void alt_sdm_sha_enable(uint32_t mode),145
30984,void alt_sdm_sha_int_clear(uint32_t mask),150
30985,uint32_t alt_sdm_dma_rd_status(void),155
30986,uint32_t alt_sdm_sha_int_status_unmasked(void),160
30987,void alt_sdm_sha_int_disable(uint32_t mask),166
30988,void alt_sdm_dma_rd_init(sdm_dma_bus_t bus),171
30989,void alt_sdm_inbuf_pb_go_set(void),176
30990,void alt_sdm_inbuf_go_set(void),182
30991,"void alt_sdm_inbuf_mode(uint32_t input, uint32_t fifo_in, uint32_t fifo_out)",187
30992,"void cmf_timeout_init(uint32_t timeout_value, cmf_timeout_t *timeout)",192
30993,bool cmf_timeout(const cmf_timeout_t *timeout),197
30994,void alt_sdm_dma_wr_int_clear(void),203
30995,void alt_sdm_dma_wr_int_disable(void),208
30996,void alt_sdm_dma_wr_int_enable(void),213
30997,uint32_t alt_sdm_dma_wr_status(void),218
30998,sdm_dma_bus_t alt_sdm_dma_wr_bus_get(void),223
30999,void alt_sdm_dma_wr_init(sdm_dma_bus_t bus),228
31000,"int32_t alt_sdm_dma_wr_nsp_ram(uint32_t *pDest, uint32_t size, uint32_t enable_interrupt)",233
31001,sdm_return_t alt_sdm_dma_wr_stop(void),238
31002,void alt_sdm_dma_wr_resume(void),243
31003,bool alt_sdm_dma_wr_desc_full(void),248
31004,"uint32_t alt_sdm_dma_wr_send_desc(uint32_t *p_dest, uint32_t size, uint32_t flags, uint32_t burst)",253
31005,uint32_t alt_sdm_dma_wr_get_desc_remain(void),258
31006,uint32_t alt_sdm_dma_rd_get_desc_remain(void),263
31007,Copyright (2019) Intel Corporation,3
31008,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
31009,static bool in_buf_handle_valid(in_buf_handle_t handle),46
31010,sdm_return_t in_buf_reset(in_buf_handle_t handle),51
31011,in_buf_handle_t in_buf_open(void),56
31012,sdm_return_t in_buf_close(in_buf_handle_t handle),61
31013,"sdm_return_t in_buf_fifo_cfg(in_buf_handle_t handle, fifo_cfg_t const * const cfg, uint32_t num_of_fifo_entries)",66
31014,"sdm_return_t in_buf_start(in_buf_handle_t handle, in_buf_select_t fifo, uint32_t size, in_buf_src_sel_t data_source)",71
31015,"sdm_return_t in_buf_pb_start(in_buf_handle_t handle, uint32_t size)",76
31016,"sdm_return_t in_buf_fifo_wrsel(in_buf_handle_t handle, in_buf_select_t fifo)",81
31017,"sdm_return_t in_buf_fifo_rdsel(in_buf_handle_t handle, in_buf_select_t fifo)",86
31018,"sdm_return_t in_buf_sink_set(in_buf_handle_t handle, bool enable)",91
31019,uint32_t in_buf_interrupt_status_get(in_buf_handle_t handle),96
31020,"sdm_return_t in_buf_interrupt_mask_set(in_buf_handle_t handle, uint32_t mask)",101
31021,"sdm_return_t in_buf_interrupt_mask_clear(in_buf_handle_t handle, uint32_t mask)",106
31022,"sdm_return_t in_buf_interrupt_enable(in_buf_handle_t handle, bool enable)",111
31023,"sdm_return_t in_buf_interrupt_clear(in_buf_handle_t handle, uint32_t mask)",116
31024,"sdm_return_t in_buf_crypto_enable_set(in_buf_handle_t handle, uint32_t enables)",121
31025,"sdm_return_t in_buf_crypto_enable_clr(in_buf_handle_t handle, uint32_t enables)",126
31026,"uint32_t in_buf_fifo_data_level(in_buf_handle_t handle, in_buf_select_t fifo)",131
31027,uint32_t in_buf_fifo_pb_data_level(in_buf_handle_t handle),136
31028,sdm_return_t in_buf_memmode_enable(in_buf_handle_t handle),141
31029,sdm_return_t in_buf_memmode_disable(in_buf_handle_t handle),146
31030,uint32_t in_buf_memmode_read(in_buf_handle_t handle),151
31031,bool in_buf_busy(in_buf_handle_t handle),156
31032,bool in_buf_pb_busy(in_buf_handle_t handle),161
31033,bool in_buf_is_busy(in_buf_handle_t handle),166
31034,"sdm_return_t in_buf_set_status_overload(in_buf_handle_t handle, uint32_t fifo_idx, uint32_t value)",171
31035,"sdm_return_t in_buf_set_readptr_overload(in_buf_handle_t handle, uint32_t fifo_idx, uint32_t value)",176
31036,"sdm_return_t in_buf_state_save_restore(const in_buf_handle_t handle, ",181
31037,Copyright (2018) Intel Corporation,3
31038,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
31039,void UT_persistent_setup(void),74
31040,void persistent_rsu_handoff_clear(void),106
31041,persistent_result_t persistent_init(void),122
31042,"persistent_result_t persistent_params_set(const cmf_br_header_t * p_cmf_br_header,",138
31043,void persistent_update_g_persistent_msel(uint32_t mselval),158
31044,void persistent_rsu_log_update(void),169
31045,"void persistent_rsu_error_log_update_dcmf(uint32_t dcmf_error_state, uint32_t err_addr_high, uint32_t err_addr_low)",180
31046,void persistent_rsu_log_clear(void),200
31047,void cmf_handoff_rsu_err_cmf_update(void),215
31048,void persistent_rsu_flags_update(rsu_flags_t  new_flags),229
31049,"void persistent_rsu_cmf_addr_update(uint32_t cmf_addr_high, uint32_t cmf_addr_low)",243
31050,"void persistent_rsu_clocks_update(uint32_t int_osc_en, uint32_t osc_clk_freq, uint32_t as_clk)",259
31051,uint32_t persistent_get_osc_clk_flag(void),284
31052,uint32_t persistent_get_osc_clk_freq(void),294
31053,uint32_t persistent_get_as_clk(void),304
31054,"void persistent_rsu_pin_update(uint32_t new_pin_idx, uint8_t new_pin_role)",318
31055,uint32_t persistent_get_rsu_pin_idx(void),329
31056,This function returns the load factory pin role (pin_function),335
31057,uint8_t persistent_get_rsu_pin_role(void),339
31058,void update_g_persistent_msel_hardware(uint32_t mselval),352
31059,@fn     persistent_get_pubkey_id(),360
31060,uint32_t persistent_get_pubkey_id(uint32_t root_key),367
31061,@fn     persistent_set_pubkey_id(),381
31062,"void persistent_set_pubkey_id(uint32_t root_key, uint32_t key_id)",388
31063,@fn     persistent_get_msel_hardware(),406
31064,uint32_t persistent_get_msel_hardware(void),410
31065,void persistent_set_rom_version(uint32_t val),416
31066,uint32_t persistent_get_rom_version(void),421
31067,bool persistent_get_efuse_cache_modified(void),426
31068,void persistent_set_efuse_cache_modified(bool new_val),431
31069,bool persistent_get_efuse_write_disabled(void),436
31070,void persistent_disable_efuse_writes(void),441
31071,void persistent_clear_efuse_write_disabled(void),446
31072,sdm_return_t persistent_set_security_version(uint32_t value),455
31073,uint32_t persistent_get_security_version(void),466
31074,void persistent_set_aes_root_key_virtual_mode(),474
31075,bool persistent_get_aes_root_key_virtual_mode(void),483
31076,void persistent_clear_aes_root_key_virtual_mode(),491
31077,uint8_t persistent_get_efuse_physical_fuse_burned(void),501
31078,void persistent_set_efuse_physical_fuse_burned(void),511
31079,uint8_t persistent_get_efuse_physical_pubkey_burned(void),520
31080,void persistent_set_efuse_physical_pubkey_burned(void),530
31081,pkc_handle_t pkc_open(),4
31082,sdm_return_t pkc_close(pkc_handle_t pkc),9
31083,void pkc_reset(),14
31084,"sdm_return_t pkc_verify_start(pkc_handle_t pkc, uint32_t* Qx, uint32_t* Qy, uint32_t* hash, uint32_t* R, uint32_t* S, pkc_curve_t curve)",18
31085,"sdm_return_t pkc_sign_start(pkc_handle_t pkc, uint32_t* hash, uint32_t* key, uint32_t* random_number, pkc_curve_t curve)",23
31086,"sdm_return_t pkc_point_multiply_start(pkc_handle_t pkc, uint32_t* Qx, uint32_t* Qy, uint32_t* multiply_by, pkc_curve_t curve)",28
31087,sdm_return_t pkc_is_busy(pkc_handle_t pkc),33
31088,sdm_return_t wait_for_pkc_ready(pkc_handle_t pkc),38
31089,"sdm_return_t pkc_get_result(pkc_handle_t pkc, uint32_t* point_x_or_R, uint32_t* point_y_or_S_or_verify)",43
31090,"uint32_t cmf_authenticate_data( const void     *const p_data,",3
31091,"uint32_t cmf_verify_signature( const void     *const p_data,",13
31092,Copyright (2019) Intel Corporation,3
31093,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
31094,sha_handle_t sha_open(void),34
31095,sdm_return_t sha_stop(sha_handle_t handle),39
31096,sdm_return_t sha_close(const sha_handle_t handle),44
31097,"sdm_return_t sha_state_save_restore(const sha_handle_t handle,",49
31098,sdm_return_t sha_reset(const sha_handle_t handle),55
31099,"sdm_return_t sha_configure(const sha_handle_t handle, sha_csr_size_t sha_size,",60
31100,void sha_interrupt_clear_disable(const sha_handle_t handle),66
31101,"sdm_return_t sha_start(const sha_handle_t handle, bool final)",71
31102,sdm_return_t sha_finalize(const sha_handle_t handle),76
31103,"sdm_return_t sha_read_hash(const sha_handle_t handle, uint32_t *hash, uint32_t size)",81
31104,"sdm_return_t sha_irq_handler(sha_handle_t handle, uint32_t *hash, uint32_t size)",86
31105,void sha_interrupt_clr(const sha_handle_t handle),91
31106,uint32_t sha_interrupt_status_unmasked(sha_handle_t handle),96
31107,This function replaces the normal alt_write_word() macro that would have done,11
31108,"void alt_write_word(volatile void *dest, uint32_t src)",14
31109,"void alt_write_byte(volatile void *dest, uint8_t value)",22
31110,This function replaces the normal alt_read_word() macro that would have done,28
31111,uint32_t alt_read_word(volatile void *dest),31
31112,"void alt_clrbits_word(volatile void *dest, uint32_t mask)",41
31113,"void alt_replbits_word(volatile void *dest, uint32_t mask, uint32_t data)",46
31114,"void alt_setbits_word(volatile void *dest, uint32_t mask)",51
31115,void system_control_stickybit_set(uint32_t bit),4
31116,uint32_t system_control_stickybit_get_word(uint32_t word),8
31117,bool system_control_stickybit_get(uint32_t bit),13
31118,"sdm_return_t trng_enable(uint32_t longdelay, uint32_t sampledelay, uint32_t shortdelay,trng_dest_sel_t dest)",4
31119,"sdm_return_t generate_random_number(const crypto_context_t * const ctx, uint32_t *truncated_key, uint32_t truncated_key_size_w)",9
31120,void save_critical_registers(sr_struct_t *sr_struct_ptr),14
31121,void restore_critical_registers(sr_struct_t *sr_struct_ptr),18
31122,bool is_trng_enabled_for_aes(),22
31123,bool trng_random_number_gen_is_valid(),27
31124,void trng_disable(),32
31125,cmf_trng_status_t trng_status_get(void),36
31126,"sdm_return_t trng_enable_private(uint32_t longdelay, uint32_t sampledelay, uint32_t shortdelay, trng_dest_sel_t dest)",41
31127,"sdm_return_t generate_random_number_using_drbg( const crypto_context_t * const ctx, cmf_mpi_t *const final_random_num_hmac_generated,uint32_t requested_security_strength,bool re_initialize)",46
31128,void alt_cnoc_tmr_set_inc(uint32_t value),134
31129,void alt_cnoc_tmr_set(uint32_t value),147
31130,value passed in by the alt_cnoc_tmr_set_inc() function or by a random amount,157
31131,void alt_cnoc_tmr_inc(void),160
31132,void send_timing_sync(){,178
31133,This function replaces the normal alt_write_word() macro that would have done,7
31134,"void alt_write_word(volatile uint32_t *dest, uint32_t src)",10
31135,"void alt_write_byte(volatile uint8_t *dest, uint8_t value)",77
31136,This function replaces the normal alt_read_word() macro that would have done,83
31137,uint32_t alt_read_word(volatile uint32_t *dest),86
31138,Copyright (2018) Intel Corporation,3
31139,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
31140,uint32_t sdm_get_fw_security_version(),60
31141,sdm_return_t hal_efuse_aes_reg_clean(),67
31142,uint32_t cmf_efuse_get_oldest_working_psg_key_id(),72
31143,void cmf_efuse_set_oldest_working_psg_key_id(uint32_t efuse_key_id),77
31144,"cmf_key_id_t cmf_km_alloc_key_slot(cmf_key_size_t key_size, cmf_km_dest_t key_dest)",85
31145,void cmf_km_alloc_key_slot_set(cmf_key_id_t key_slot),89
31146,uint32_t efuse_wrapping_key_get(),94
31147,"sdm_return_t cmf_dimk_derive_efuse_wrapping_key(uint32_t dest_key_slot, efuse_wrapping_key_type_t efuse_wrap_type, bool virtual_mode)",99
31148,bool sdm_stickybit_get(uint32_t bit),107
31149,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault_and_ram(const crypto_context_t * const crypto_ctx, const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",111
31150,bool is_key_prog_start_fuse_blown(void),117
31151,bool is_key_prog_end_fuse_blown(void),122
31152,void set_key_prog_start_fuse_blown(bool fuse_blown),127
31153,void set_key_prog_end_fuse_blown(bool fuse_blown),132
31154,uint32_t get_security_version(void),137
31155,"sdm_return_t cmf_aes_encrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_encrypt, cmf_key_t* key_dest,",141
31156,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_encrypt, cmf_key_t* key_dest,",147
31157,sdm_return_t cmf_aes_resource_subscribe(cmf_aes_resource_t* cmf_aes_resource),153
31158,sdm_return_t cmf_aes_resource_unsubscribe(cmf_aes_resource_t* cmf_aes_resource),162
31159,"sdm_return_t  cmf_aes_set_iv(cmf_aes_resource_t cmf_aes_resource,  cmf_aes_iv_data_t* iv)",167
31160,"sdm_return_t cmf_aes_set_key(const cmf_aes_resource_t cmf_aes_resource, cmf_key_t* key)",172
31161,"sdm_return_t cmf_aes_crypt(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_opmode_t op_mode, cmf_aes_cipher_t cipher,",177
31162,sdm_return_t cmf_km_free_key_slot(cmf_key_t *p_key),183
31163,uint32_t alt_sdm_inbuf_fifo3_datalvl_get(void),190
31164,"sdm_return_t packets_skip_get(uint32_t *p_data, uint32_t fifo, uint32_t size)",198
31165,"sdm_return_t packets_keys_get(uint32_t * ram_buffer, uint32_t count)",203
31166,"sdm_return_t cmf_config_aes_decrypt_key_from_ram_to_ukv(uint32_t *p_key,",209
31167,"sdm_return_t cmf_config_aes_configure_context(cmf_key_t *key,",217
31168,"uint32_t altera_sdm_efuse_read(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows)",227
31169,"sdm_return_t altera_sdm_efuse_write(uint32_t bank, uint32_t start_row, uint32_t *p_data, uint32_t num_rows, uint32_t is_virtual_write, uint32_t * p_error_info, uint32_t * p_error_info_length, bool row_repair_enable)",233
31170,sdm_return_t altera_sdm_efuse_zero(),243
31171,sdm_return_t altera_sdm_efuse_aes_key_prog_start_write(uint32_t is_virtual_write),255
31172,sdm_return_t altera_sdm_efuse_aes_key_prog_end_write(uint32_t is_virtual_write),263
31173,sdm_return_t cmf_dimk_derive_user_aes_wrapping_key(,272
31174,uint32_t get_key_roll_count(),304
31175,sdm_return_t cmf_dimk_derive_intel_aes_wrapping_key(,309
31176,sdm_return_t altera_sdm_efuse_aes_root_key_write(uint32_t *p_data),315
31177,uint32_t cmf_efuse_get_security_version(),320
31178,void cmf_efuse_set_security_version_fuse(uint32_t svn),325
31179,"sdm_return_t altera_sdm_efuse_aes_security_version_write(uint32_t security_version, uint32_t is_virtual_write)",330
31180,"sdm_return_t cmf_aes_encrypt_key_and_send_to_key_vault_and_ram(const crypto_context_t * const crypto_ctx, const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher, cmf_key_t*  key_to_encrypt, cmf_key_t* key_dest, alt_sdm_aes_endian_in_t endian_in, alt_sdm_aes_endian_out_t endian_out)",335
31181,"sdm_return_t cmf_aes_wait_for_aes_to_dma_xfer_cmplt(const crypto_context_t * const crypto_ctx, uint32_t * const dma_buf, uint32_t dma_buf_words_sz, uint32_t timeoutClockTicks)",341
31182,"sdm_return_t altera_sdm_efuse_security_version_write(uint32_t security_version, uint32_t is_virtual_write)",346
31183,uint32_t altera_sdm_efuse_aes_security_version_get(),360
31184,"bool sdm_ram_ptr_valid(const void * const ptr, const uint32_t size)",44
31185,"sdm_return_t sdm_memset(void *const p_dest,",54
31186,"sdm_return_t sdm_memcmp(const uint32_t * const ptr1, uint32_t size_1,",69
31187,"sdm_return_t sdm_swizzle_data_block(const uint32_t *const p_source,",96
31188,in_buf_handle_t in_buf_open(void),128
31189,"sdm_return_t sdm_memcpy(void *const p_dest,",133
31190,"sdm_return_t crypto_context_create(crypto_context_t * const ctx,",145
31191,void crypto_context_release(crypto_context_t * const ctx),157
31192,"sdm_return_t in_buf_crypto_enable_set(in_buf_handle_t handle, uint32_t enables)",162
31193,"sdm_return_t cmf_mpi_init(cmf_mpi_t         *p_mpi,",172
31194,sdm_return_t cmf_mpi_zeroize(cmf_mpi_t* p_mpi),183
31195,"bool hps_sdram_ptr_valid(const void * const ptr, const uint32_t size)",188
31196,bool is_nl_part_fuse_blown(void),193
31197,bool is_hps_disable_fuse_blown(void),198
31198,bool is_user_root_pubkey_blown(void),203
31199,bool is_service_root_key_prog_start_fuse_blown(void),207
31200,bool is_service_root_key_prog_end_fuse_blown(void),211
31201,"sdm_return_t sdos::encrypt(crypto_context_t *const ctx,",217
31202,"sdm_return_t sdos::decrypt(crypto_context_t *const ctx, uint32_t* owner_info,",225
31203,"sdm_return_t in_buf_state_save_restore(const in_buf_handle_t handle, ",233
31204,"sdm_return_t in_buf_sink_set(in_buf_handle_t handle, bool enable)",239
31205,"sdm_return_t in_buf_fifo_cfg(in_buf_handle_t handle, fifo_cfg_t const * const cfg, uint32_t size)",244
31206,"sdm_return_t in_buf_fifo_rdsel(in_buf_handle_t handle, in_buf_select_t fifo)",249
31207,"sdm_return_t in_buf_fifo_wrsel(in_buf_handle_t handle, in_buf_select_t fifo)",254
31208,"sdm_return_t in_buf_start(in_buf_handle_t handle, in_buf_select_t fifo, uint32_t size, in_buf_src_sel_t data_source)",259
31209,"sdm_return_t in_buf_pb_start(in_buf_handle_t handle, uint32_t size)",264
31210,bool in_buf_busy(in_buf_handle_t handle),269
31211,sdm_return_t cmf_mpi_validate(const cmf_mpi_t *const p_mpi),274
31212,bool sha_busy(const sha_handle_t handle),283
31213,bool is_crypto_session_open(uint32_t session_id),288
31214,"bool is_session_context_valid(const crypto_svc_common_header_t* const common_header_p, uint32_t *resp_buf)",293
31215,void sdm_fpga_gpo_write_mbox_mmio(uint32_t val),298
31216,void test_hash_init(void),57
31217,void print_hash_manager(hash_mgr_handle_t handle),71
31218,bool is_test_fw(void),120
31219,uint64_t sdm_timeout_init(uint32_t timeout_value),42
31220,bool sdm_timeout(const uint64_t timeout),47
31221,static void cmf_keys_fifo_test_init(void),73
31222,static void cmf_keys_fifo_test_set_state(cmf_keys_fifo_state_t key_type),92
31223,static void cmf_keys_fifo_test_set_local_key_count(uint32_t count),97
31224,static uint32_t cmf_keys_fifo_test_get_local_key_count(void),102
31225,static void cmf_keys_fifo_test_set_key_block_iv(uint32_t value),107
31226,static bool cmf_keys_fifo_test_check_key_block_iv_zero(),117
31227,static void cmf_keys_fifo_test_set_all_aes_context(uint32_t value),132
31228,static bool cmf_keys_fifo_test_check_aes_contexts_invalid(),143
31229,"sdm_return_t comp_config_get_keys_block(comp_config_handle_t handle, uint32_t *p_data, ",163
31230,"sdm_return_t comp_config_get_key_challenge_block(comp_config_handle_t handle, uint32_t *p_data, ",169
31231,in_buf_handle_t comp_config_inbuf_handle_get(comp_config_handle_t handle),175
31232,"uint32_t in_buf_fifo_data_level(in_buf_handle_t handle, in_buf_select_t fifo)",180
31233,sdm_return_t cmf_aes_resource_subscribe(cmf_aes_resource_t* cmf_aes_resource),185
31234,"sdm_return_t cmf_aes_resource_subscribe_ex(cmf_aes_resource_t* cmf_aes_resource, uint32_t key_update_mode, uint32_t key_update_intvl)",190
31235,sdm_return_t cmf_aes_resource_unsubscribe(cmf_aes_resource_t* cmf_aes_resource),201
31236,"sdm_return_t  cmf_aes_set_iv(cmf_aes_resource_t cmf_aes_resource,  cmf_aes_iv_data_t* iv)",206
31237,"sdm_return_t cmf_aes_set_key(const cmf_aes_resource_t cmf_aes_resource,",211
31238,"sdm_return_t cmf_aes_crypt(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_opmode_t op_mode, cmf_aes_cipher_t cipher, size_t xfer_length_in_bytes, cmf_aes_data_source_t source, cmf_aes_data_sink_t sink, bool blockingMode)",217
31239,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher,  cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",222
31240,sdm_return_t cmf_km_free_key_slot(cmf_key_t  *p_key),231
31241,uint32_t ukv_clear_key(uint32_t key_slot),236
31242,"sdm_return_t cmf_km_save_key(cmf_km_src_t  key_src, cmf_km_dest_t key_dest, cmf_key_t *p_output_key, cmf_mpi_t *key_data, bool alloc_key_slot, bool clear_key)",241
31243,"cmf_key_id_t cmf_km_alloc_key_slot(cmf_key_size_t key_size, cmf_km_dest_t key_dest)",246
31244,uint32_t alt_sdm_inbuf_fifo3_datalvl_get(void),254
31245,"sdm_return_t cmf_key_init(cmf_key_t *p_key, cmf_mpi_t *key_data, cmf_key_size_t key_size, cmf_key_id_t key_id, uint32_t *p_data)",259
31246,"bool cmf_ram_range_valid(const void *const ptr, const uint32_t size)",267
31247,"sdm_return_t cmf_config_aes_decrypt_key_from_ram_to_ukv(uint32_t *p_key,",274
31248,"TEST(keys_fifo, keys_fifo_internal_test_positive_cases_get_key)",286
31249,"TEST(keys_fifo, keys_fifo_internal_test_negative_cases_get_key)",401
31250,"TEST(keys_fifo, keys_fifo_internal_test_process_next_block_key)",546
31251,"TEST(keys_fifo, keys_fifo_internal_test_configure_context)",601
31252,"TEST(keys_fifo, keys_fifo_internal_test_free_aes_context)",686
31253,"TEST(keys_fifo, keys_fifo_internal_test_goto_error)",776
31254,"TEST(keys_fifo, keys_fifo_internal_test_invalidate_all_aes_contexts)",815
31255,"TEST(keys_fifo, keys_fifo_internal_test_clear_keys_block_iv)",831
31256,"TEST(keys_fifo, keys_fifo_internal_test_flush_fifo)",847
31257,"TEST(keys_fifo, keys_fifo_internal_test_load_update_key_to_aes_context)",893
31258,"TEST(keys_fifo, keys_fifo_internal_test_check_keys_block_key_update)",913
31259,sdm_return_t cmf_km_free_key_slot(cmf_key_t * p_key),57
31260,"cmf_key_id_t cmf_km_alloc_key_slot(cmf_key_size_t key_size, cmf_km_dest_t key_dest)",62
31261,"sdm_return_t cmf_aes_decrypt_key_and_send_to_key_vault(const cmf_aes_resource_t cmf_aes_resource, cmf_aes_cipher_t cipher,  cmf_key_t*  key_to_decrypt, cmf_key_t* key_dest,",67
31262,"sdm_return_t comp_config_get_keys_block(comp_config_handle_t handle, uint32_t *p_data, ",73
31263,"sdm_return_t comp_config_get_key_challenge_block(comp_config_handle_t handle, uint32_t *p_data, ",79
31264,in_buf_handle_t comp_config_inbuf_handle_get(comp_config_handle_t handle),85
31265,"uint32_t in_buf_fifo_data_level(in_buf_handle_t handle, in_buf_select_t fifo)",90
31266,sdm_return_t cmf_aes_resource_subscribe(cmf_aes_resource_t* cmf_aes_resource),95
31267,"sdm_return_t cmf_aes_resource_subscribe_ex(cmf_aes_resource_t* cmf_aes_resource, uint32_t key_update_mode, uint32_t key_update_intvl)",100
31268,sdm_return_t cmf_aes_resource_unsubscribe(cmf_aes_resource_t* cmf_aes_resource),105
31269,"sdm_return_t cmf_aes_set_key(const cmf_aes_resource_t cmf_aes_resource, cmf_key_t* key)",110
31270,"sdm_return_t cmf_aes_set_iv(cmf_aes_resource_t cmf_aes_resource,  cmf_aes_iv_data_t* iv)",115
31271,"sdm_return_t cmf_config_aes_decrypt_key_from_ram_to_ukv(uint32_t *p_key,",120
31272,uint64_t sdm_timeout_init(uint32_t timeout_value),127
31273,bool sdm_timeout(const uint64_t timeout),132
31274,void unit_test_init(void),137
31275,bool cmf_keys_fifo_test_check_key_block_iv_zero(void),159
31276,bool cmf_keys_fifo_test_check_key_block_iv(uint32_t value),172
31277,"TEST(keys_fifo, test_keys_fifo_init)",190
31278,"TEST(keys_fifo, test_keys_fifo_reset)",243
31279,"TEST(keys_fifo, test_keys_fifo_section_key_valid)",308
31280,"TEST(keys_fifo, test_keys_fifo_process_keys_block_positive)",341
31281,"TEST(keys_fifo, test_keys_fifo_process_keys_block_negative)",424
31282,"TEST(keys_fifo, test_keys_fifo_get_key_challenge_key)",542
31283,"TEST(keys_fifo, test_keys_fifo_key_challenge_pass)",614
31284,"TEST(keys_fifo, test_keys_fifo_get_action_key)",647
31285,"TEST(keys_fifo, test_keys_fifo_key_done)",750
31286,"TEST(keys_fifo, test_keys_fifo_get_key_count)",851
31287,"TEST(keys_fifo, test_keys_fifo_get_aes_context_id)",893
31288,"TEST(keys_fifo, test_keys_fifo_set_key_update_mode_enabled)",950
31289,bool hal_sdm_ecc_enable() { return false; },7
31290,uint32_t __builtin_wrpie(uint32_t) { return 0; },8
31291,"void alt_write_word(void *addr, uint32_t src)",4
31292,int_status_t irq_disable_cpu(void),8
31293,void irq_restore_cpu(int_status_t status),13
31294,void alt_cnoc_tmr_set_inc(uint32_t value),137
31295,void alt_cnoc_tmr_set(uint32_t value),150
31296,value passed in by the alt_cnoc_tmr_set_inc() function or by a random amount,160
31297,void alt_cnoc_tmr_inc(void),163
31298,void send_timing_sync(){,181
31299,int_status_t irq_disable_cpu(void),8
31300,void irq_restore_cpu(int_status_t status),13
31301,void alt_cnoc_tmr_set_inc(uint32_t value),137
31302,void alt_cnoc_tmr_set(uint32_t value),150
31303,value passed in by the alt_cnoc_tmr_set_inc() function or by a random amount,160
31304,void alt_cnoc_tmr_inc(void),163
31305,void send_timing_sync(){,181
31306,Copyright (2019) Intel Corporation,3
31307,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
31308,pkc_handle_t pkc_open() { return (pkc_handle_t)1;  },33
31309,sdm_return_t pkc_close(pkc_handle_t pkc) { return SDM_SUCCESS; },34
31310,"uint32_t hal_system_control_get_debug(uintptr_t base, hal_system_control_debug_t offset)",36
31311,"void hal_system_control_set_debug(uintptr_t base, hal_system_control_debug_t offset, uint32_t value)",44
31312,"void multiword_copy(uint32_t* dest, const uint32_t* const src, uint32_t count_words)",52
31313,void irq_restore_cpu(int_status_t status),59
31314,int_status_t irq_disable_cpu(void),64
31315,"/*bool sdm_ram_ptr_valid(const void * const ptr, const uint32_t size)",71
31316,void sdm_delay(uint32_t timeout),76
31317,uint64_t sdm_timeout_init(uint32_t timeout),81
31318,bool sdm_timeout(const uint64_t timeout),86
31319,/* Bank 0 ( Bits to be blown at CLASS/CFUSE),1
31320,/* Bank 2 ( actual Bits Blown) */,139
31321,/* Bank 3 (actual Bits Blown) */,207
31322,qspi_reset_acc_t qspi_ctrlr_reset_get( void ),16
31323,sdm_return_t qspi_ctrlr_reset( qspi_reset_acc_t reset_action ),21
31324,void qspi_ctrlr_enable( bool enable),27
31325,void qspi_stop_inprogress_ind_operation( void ),32
31326,sdm_return_t qspi_disable_interrupts(void),37
31327,sdm_return_t qspi_set_baud_divisor( qspi_baud_div baud),42
31328,"sdm_return_t qspi_cs_delay_set( uint32_t qspi_clk,  uint32_t as_clk )",47
31329,sdm_return_t qspi_ctrlr_cs_set( uint32_t cs),52
31330,void qspi_ctrlr_hps_access_set( bool enable),57
31331,"sdm_return_t qspi_stig_cmd_read( uint32_t opcode,",62
31332,int_status_t irq_disable_cpu(void),88
31333,void irq_restore_cpu(int_status_t status),93
31334,"sdm_return_t qspi_stig_cmd_write( uint32_t opcode,",98
31335,"sdm_return_t qspi_stig_simple_cmd(uint32_t opcode,",108
31336,sdm_return_t qspi_read_datacap_delay_set( uint32_t delay),114
31337,"sdm_return_t qspi_baud_rate( qspi_baud_div *baud_ptr ,",119
31338,sdm_return_t qspi_ctrlr_reset_seq_start( void ),128
31339,"sdm_return_t qspi_read_settings_set(  uint32_t rd_opcode,",133
31340,"sdm_return_t qspi_flash_size_set( qspi_pow2_sz_t bytes_per_subsector,",141
31341,"sdm_return_t qspi_ctrlr_read_width_set( qspi_width_t rd_inst_wd,",148
31342,"sdm_return_t qspi_indiac_read_polling( uint32_t words_2_read,",163
31343,void qspi_indac_read_tear_down( void ),171
31344,void qspi_indac_read_init( void ),176
31345,"sdm_return_t qspi_indac_read( uint32_t flash_addr,",181
31346,"sdm_return_t qspi_ind_access_enable( uint32_t sram_add,",187
31347,void qspi_clr_int_mask(  uint32_t cler_en_mask),193
31348,sdm_return_t qspi_disable_interrupt_mask( uint32_t irq_bitmask),198
31349,sdm_return_t qspi_enable_interrupt_mask( uint32_t irq_bitmask),203
31350,uint32_t fifo_read_level_get(void),208
31351,void qspi_ctrlr_stop_operations( void ),213
31352,void irq_disable(sdm_int_id_t irq_id),221
31353,"void irq_register(sdm_int_id_t irq_id, irq_function_t isr, void *isr_context)",226
31354,void irq_enable(sdm_int_id_t int_id),231
31355,void sdm_delay(uint32_t timeout_value),237
31356,"sdm_return_t clkmgr_qspi_clock_gate_control(clkmgr_handle_t handle, bool control)",242
31357,"sdm_return_t qspi_stig_cmd_address( uint32_t opcode,",247
31358,uint64_t sdm_timeout_init(uint32_t timeout_value),255
31359,bool sdm_timeout(const uint64_t timeout),260
31360,"sdm_return_t qspi_write_settings_set( uint32_t wr_opcode,",266
31361,"sdm_return_t qspi_ctrlr_write_width_set( qspi_width_t wr_addr_wd,",272
31362,sdm_return_t qspi_ind_indaddrtrig_update( uint32_t sram_add ),278
31363,void qspi_indac_write_init( void ),283
31364,"sdm_return_t qspi_indac_write( uint32_t flash_addr,",288
31365,uint32_t fifo_write_level_get( void ),294
31366,bool qspi_ctrlr_write_done( void ),299
31367,Copyright (2020) Intel Corporation,3
31368,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
31369,"void multiword_copy(uint32_t* dest, const uint32_t* const src, uint32_t word_length){",86
31370,Copyright (2020) Intel Corporation,3
31371,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
31372,"void multiword_copy(uint32_t* dest, const uint32_t* const src, uint32_t word_length){",82
31373,Copyright (2020) Intel Corporation,3
31374,"source code (""Material"") are owned by Intel Corporation or its suppliers or",6
31375,"void multiword_copy(uint32_t* dest, const uint32_t* const src, uint32_t word_length){",82
31376,"int alt_vic_sw_interrupt_set(alt_u32 ic_id, alt_u32 irq)",13
31377,"int alt_vic_sw_interrupt_clear(alt_u32 ic_id, alt_u32 irq)",20
31378,"alt_u32 alt_vic_sw_interrupt_status(alt_u32 ic_id, alt_u32 irq)",27
31379,"void send_msg_2_aib(uint32_t *cmd_packet, uint32_t payload_words)",13
31380,"static void clone_cnoc_tx_params(const cnoc_tx_params_t* src, cnoc_tx_params_t* dst)",17
31381,cnoc_tx_result_t cnoc_tx_init(const cnoc_tx_dev_t *tx_dev),27
31382,"cnoc_tx_result_t cnoc_tx_transmit(const cnoc_tx_dev_t *tx_dev, const cnoc_tx_params_t *tx_params)",48
31383,cnoc_tx_result_t cnoc_tx_irq_assert(const cnoc_tx_dev_t *tx_dev) {,62
31384,cnoc_tx_result_t cnoc_tx_irq_deassert(const cnoc_tx_dev_t *tx_dev) {,67
31385,uint8_t cnoc_tx_irq_status(const cnoc_tx_dev_t *tx_dev) {,72
31386,void dma_init(void),13
31387,"void dma_transfer(const void *src_buffer, const void *dst_buffer, uint32_t tx_length_words, uint32_t control_word)",19
31388,void dma_register_isr_callback_function (dma_cb_func_type dma_cb_func),31
31389,void dma_unregister_isr_callback_function(),37
31390,"int alt_ic_isr_register(alt_u32 ic_id,",28
31391,alt_irq_context alt_irq_disable_all (void),52
31392,void alt_irq_enable_all (alt_irq_context context),75
31393,void alt_irq_cpu_enable_interrupts (void),82
31394,"isr_entry_t* find_isr_entry(uint32_t ic_id, uint32_t irq)",87
31395,void flush_register(),17
31396,"RegContainerStructType* prepare_register(uint32_t reg_addr,int logging)",24
31397,RegContainerStructType* find_reg_entry(uint32_t reg_addr),38
31398,MemoryBackedRegion* find_mem_entry(uint32_t reg_addr),51
31399,"void register_memory_backed_region(uint32_t reg_addr, void* mem_addr, uint32_t size)",66
31400,This function replaces the normal alt_write_word() macro that would have done,88
31401,"void __alt_write_word(volatile uint32_t *dest, uint32_t src)",91
31402,This function replaces the normal alt_read_word() macro that would have done,129
31403,uint32_t __alt_read_word(volatile uint32_t *addr),132
31404,This function replaces the normal alt_write_word() macro that would have done,6
31405,"void alt_write_word(volatile uint32_t *dest, uint32_t src)",9
31406,"void alt_write_byte(volatile uint8_t *dest, uint8_t value)",15
31407,This function replaces the normal alt_read_word() macro that would have done,21
31408,uint32_t alt_read_word(volatile uint32_t *dest),24
31409,void whr_ut_timer_event_init(),13
31410,static timer_evt_t* __get_new_timer_event(),19
31411,"static int __register_timer_event(uint8_t id, uint8_t blocking, uint8_t started, timer_mode_t mode, uint32_t timeout)",33
31412,"timer_evt_t* find_timer_event(uint32_t id, uint32_t blocking)",51
31413,"void timer1_start_nb(uint32_t nanoseconds){ assert(__register_timer_event(1,0,1,TIMER_MODE_NS,nanoseconds) == 0); }",64
31414,"void timer1_start(uint32_t nanoseconds){ assert(__register_timer_event(1,1,1,TIMER_MODE_NS,nanoseconds) == 0); }",65
31415,uint8_t timer1_is_expired(){ return 1; },67
31416,"void timer1_configure(uint32_t nanoseconds){ assert(__register_timer_event(1,0,1,TIMER_MODE_NS,nanoseconds) == 0); }",68
31417,uint32_t    timer1_counter_read(){ return 0; },71
31418,"void timer1_start_nb_raw(uint32_t counter){ assert(__register_timer_event(1,0,1,TIMER_MODE_RAW,counter) == 0); }",72
31419,"void timer1_start_raw(uint32_t counter){ assert(__register_timer_event(1,1,1,TIMER_MODE_RAW,counter) == 0); }",73
31420,"void timer0_start_nb(uint32_t nanoseconds){ assert(__register_timer_event(0,0,1,TIMER_MODE_NS,nanoseconds) == 0); }",76
31421,"void timer0_start(uint32_t nanoseconds){ assert(__register_timer_event(0,1,1,TIMER_MODE_NS,nanoseconds) == 0); }",77
31422,uint8_t timer0_is_expired(){ return 1; },79
31423,"void timer0_configure(uint32_t nanoseconds){ assert(__register_timer_event(0,0,0,TIMER_MODE_NS,nanoseconds) == 0); }",80
31424,uint32_t    timer0_counter_read(){ return 0; },83
31425,"void timer0_start_nb_raw(uint32_t counter){ assert(__register_timer_event(0,0,1,TIMER_MODE_RAW,counter) == 0); }",84
31426,"void timer0_start_raw(uint32_t counter){assert(__register_timer_event(0,1,1,TIMER_MODE_RAW,counter) == 0); }",85
31427,void reset_vic_logger(vic_logger_t* logger),5
31428,"vic_event_t* get_vic_event(vic_logger_t* logger, uint32_t ic_id, uint32_t irq)",10
31429,"void add_vic_event(vic_logger_t* logger, uint32_t ic_id, uint32_t irq, uint32_t toggled)",25
31430,"/* The following macros are defined as address (uint32_t*),",9
31431,void whr_unittest_init(void),25
31432,"void BitBuf_init(BitBuf_t* b, uint32_t* data, uint32_t len)",32
31433,"uint32_t BitBuf_get(BitBuf_t *b, uint32_t num_bits)",44
31434,"void _enqueue_command(cnoc_rx_dev_t* cnoc_rx_dev, const uint32_t *cmd_packet, const uint32_t payload_words)",80
31435,void phy_fw_set_cfg_avmm(void),13
31436,void phy_fw_set_user_avmm(void),17
31437,"void phy_override(uint32_t quad, uint32_t addr, uint32_t mask, bool stat)",21
31438,"uint8_t whr_efuse_array_read(uint16_t efuse_row_addr, bool margin_mode, uint32_t *data)",25
31439,void pvt_pio_init(),52
31440,void pvt_pio_update(),60
31441,void phy_fw_set_cfg_avmm(void),3
31442,void phy_fw_set_user_avmm(void),7
31443,"void phy_override(uint32_t quad, uint32_t addr, uint32_t mask, bool stat)",11
31444,DynamicMajorModeTask(),38
31445,UibssmConfigCalibrationBusBringup(),44
31446,UibssmConfigAuxBringup(),53
31447,UibssmInterfaceRelease(),60
31448,UibssmUibInterfaceRelease(),67
31449,UibssmEsramInterfaceRelease(),75
31450,BackupCalLatHbmcMmr(),82
31451,InitializeHbmcMmrData(),91
31452,UibssmUibPLLBringup(),99
31453,UibssmRcompCalibrationStart(),107
31454,UibssmUibIoBringup(),115
31455,UibssmEsramPLLBringup(),123
31456,UibssmEsramIoBringup(),130
31457,UibssmHbmcRedundancyRepair(),138
31458,UibssmUibClockDcmProgramming(),145
31459,UibssmCpaEnable(,153
31460,UibssmEsramClockDcmProgramming(),166
31461,DynamicUpdateHbmcMmrData(),174
31462,HbmcBypassCattrip(,181
31463,UibUfiRelease(,190
31464,HbmcHandOverTask(),206
31465,HbmcDeHandOverTask(),216
31466,UibUfiDeRelease(,223
31467,UibssmCpaDisable(,232
31468,UibssmUibDisableClockNetworkDCM(),241
31469,UibssmEsramDisableClockNetworkDCM(),248
31470,UibssmUibNFRZDRVAssertion(),255
31471,UibssmEsramNFRZDRVAssertion(),262
31472,HbmOnlyReset(),269
31473,UibssmPostHandoverTask(),277
31474,UibssmResetAndFreeze(),284
31475,TemperatureMonitoringTask(BOOLEAN reset),291
31476,UINT32 UibCalLogBuffer [768]; /*3 kbytes for TXDLL/RXDLL profile logging or LFSR Sticky bits profile (Limited to 128 DLL phase units). */,324
31477,GetDeviceID(){,330
31478,UibssmLaneRepairAndFullIoBringup(){,338
31479,HbmChannelAutoDccSetAll(,346
31480,UibssmPostCalibrationTasks(,355
31481,UibssmCalibrationBusSessionStart(,365
31482,UibssmCalibrationBusSessionEnd(,374
31483,UibssmCalibrationBusAccess(,383
31484,UibCalibrationBusGenerateSync(,398
31485,HbmChannelTrainingMasterDllSet(,408
31486,UibssmMasterDllsGetWaitTime(){,421
31487,UibssmMasterDllsPeriodicEnableDisable(,429
31488,HbmChannelAwordSetDeadbandSelect(,441
31489,HbmChannelAwordTrainingSetDllDly(,454
31490,HbmChannelTraining( /*channel_training_test*/,474
31491,HbmChannelGetChNumbers(,506
31492,HbmChannelGetChId(,519
31493,HbmChannelSetOe(,532
31494,HbmChannelSetIe(,548
31495,HbmChannelTrainingMasterDllsStaggeringEnable(){,563
31496,Ub48BeadbusReg(,569
31497,UibssmProgrammingBeadBus(,581
31498,HbmChannelDwordSetDeadbandSelect(,596
31499,HbmChannelDwordTrainingSetDllDlyPerDword(,611
31500,HbmDwordSetWdqsValue(,629
31501,UibCalDwordReadStrobeIndicatorSetup(,642
31502,UibssmDummyCalbusRead(,651
31503,HbmChannelSetDwordBufferModes(,660
31504,UibCalDwordReceiveFifoSetup(,675
31505,RxDllEnableDisableDelay(,685
31506,RxDllSetDelay(,695
31507,HbmChannelSetStrmTimer(,750
31508,HbmChannelDwordTrainingSetDllDly(,765
31509,HbmSelfRefresh(,786
31510,UibMidstackHbm_rst_n(,797
31511,UibMidstackIeee1500_wrst_n(,806
31512,UibMidstackSet1500ClockDivider(,815
31513,UibMidstackIeee1500_wrclk(,824
31514,UibssmEnableCalClk(,833
31515,UibssmParameterTableSanityCheck(,844
31516,init_timer_ticks(,854
31517,UibssmCalTimerSnapshot(,862
31518,HbmOnlyResetNoCalibration(),872
31519,UibssmTmrsGenSeqFwRev3(,878
31520,UibssmWarmReset(),889
31521,DynamicMajorModeTask(),30
31522,UibssmConfigCalibrationBusBringup(),36
31523,UibssmConfigAuxBringup(),43
31524,UibssmInterfaceRelease(),50
31525,UibssmUibInterfaceRelease(),57
31526,UibssmEsramInterfaceRelease(),65
31527,BackupCalLatHbmcMmr(),72
31528,InitializeHbmcMmrData(),79
31529,UibssmUibPLLBringup(),87
31530,UibssmRcompCalibrationStart(),94
31531,UibssmUibIoBringup(),101
31532,UibssmEsramPLLBringup(),108
31533,UibssmEsramIoBringup(),115
31534,UibssmHbmcRedundancyRepair(),122
31535,UibssmUibClockDcmProgramming(),129
31536,UibssmCpaEnable(,136
31537,UibssmEsramClockDcmProgramming(),145
31538,DynamicUpdateHbmcMmrData(),152
31539,UibUfiRelease(,159
31540,UibssmIeee1500(),168
31541,UibssmTinit1_2(,175
31542,UibssmTinit3(),183
31543,UibssmLaneRepairAndFullIoBringupWrap(),190
31544,HbmChannelTrainingMasterDllsStaggeringEnable(),197
31545,UibssmMemoryInitializationAndTraining(),204
31546,HbmcHandOverTask(),211
31547,HbmcDeHandOverTask(),219
31548,UibUfiDeRelease(,226
31549,UibssmCpaDisable(,235
31550,UibssmUibDisableClockNetworkDCM(),244
31551,UibssmEsramDisableClockNetworkDCM(),251
31552,UibssmUibNFRZDRVAssertion(),258
31553,UibssmEsramNFRZDRVAssertion(),265
31554,HbmOnlyReset(),272
31555,UibssmPostHandoverTask(),280
31556,UibssmEnableCalClk(,287
31557,HbmOnlyResetNoCalibration(),296
31558,UibssmParameterTableSanityCheck(),303
31559,UibssmMemoryInitializationWithSkipCal(),310
31560,UibssmMemoryTrainingWithSkipCal(),317
31561,UibssmResetAndFreeze(),325
31562,UibssmWarmReset(),332
31563,TemperatureMonitoringTask(BOOLEAN reset),339
31564,UibMidstackIeee1500Update_wir(,17
31565,UibMidstackIeee1500_wrst_n(,28
31566,UibMidstackHbm_rst_n(,38
31567,UibssmMemoryInitializationAndTrainingWithSkipCal(,48
31568,UibMidstackIeee1500Capture_wdr(,57
31569,init_timer(,88
31570,is_timer_timeout(),97
31571,restart_timer(),104
31572,UibssmCnocRxInit(),15
31573,UibssmCnocTxInit(),23
31574,UibssmUibEsramCheck(),31
31575,HbmChannelGetChNumbers(,15
31576,"ENUM_PLL_CAL_ERROR_CODE calibrate_pll(ENUM_PLL_CAL_TILES cal_mode, alt_u32 tiles_used_by_emif, alt_u32 num_tiles){",29
31577,HbmChannelGetChNumbers(,15
31578,"ENUM_PLL_CAL_ERROR_CODE calibrate_pll(ENUM_PLL_CAL_TILES cal_mode, alt_u32 tiles_used_by_emif, alt_u32 num_tiles){",29
31579,void flush_register(),24
31580,This function replaces the normal alt_write_word() macro that would have done,37
31581,"void __alt_write_word(volatile uint32_t *dest, uint32_t src)",40
31582,This function replaces the normal alt_read_word() macro that would have done,78
31583,uint32_t __alt_read_word(volatile uint32_t *addr),81
31584,"const uint32_t* get_register_history(uint32_t *addr, uint32_t *history_size)",120
31585,This function replaces the normal alt_write_word() macro that would have done,7
31586,"void alt_write_word(volatile uint32_t *dest, uint32_t src)",10
31587,"void alt_write_byte(volatile uint8_t *dest, uint8_t value)",18
31588,This function replaces the normal alt_read_word() macro that would have done,24
31589,uint32_t alt_read_word(volatile uint32_t *dest),27
